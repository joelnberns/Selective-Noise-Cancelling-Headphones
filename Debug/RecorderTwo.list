
RecorderTwo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c514  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  0800c6a4  0800c6a4  0000d6a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cafc  0800cafc  0000e088  2**0
                  CONTENTS
  4 .ARM          00000008  0800cafc  0800cafc  0000dafc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cb04  0800cb04  0000e088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb04  0800cb04  0000db04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cb08  0800cb08  0000db08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  0800cb0c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e088  2**0
                  CONTENTS
 10 .bss          00000bf4  20000088  20000088  0000e088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000c7c  20000c7c  0000e088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e088  2**0
                  CONTENTS, READONLY
 13 .debug_info   000174b7  00000000  00000000  0000e0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004507  00000000  00000000  0002556f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001370  00000000  00000000  00029a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000eaf  00000000  00000000  0002ade8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026815  00000000  00000000  0002bc97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ba29  00000000  00000000  000524ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da81f  00000000  00000000  0006ded5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001486f4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000593c  00000000  00000000  00148738  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0014e074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c68c 	.word	0x0800c68c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800c68c 	.word	0x0800c68c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	@ 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2f>:
 800083c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000840:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000844:	bf24      	itt	cs
 8000846:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800084a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800084e:	d90d      	bls.n	800086c <__aeabi_d2f+0x30>
 8000850:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000854:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000858:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800085c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000860:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000864:	bf08      	it	eq
 8000866:	f020 0001 	biceq.w	r0, r0, #1
 800086a:	4770      	bx	lr
 800086c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000870:	d121      	bne.n	80008b6 <__aeabi_d2f+0x7a>
 8000872:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000876:	bfbc      	itt	lt
 8000878:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800087c:	4770      	bxlt	lr
 800087e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000882:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000886:	f1c2 0218 	rsb	r2, r2, #24
 800088a:	f1c2 0c20 	rsb	ip, r2, #32
 800088e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000892:	fa20 f002 	lsr.w	r0, r0, r2
 8000896:	bf18      	it	ne
 8000898:	f040 0001 	orrne.w	r0, r0, #1
 800089c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008a4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008a8:	ea40 000c 	orr.w	r0, r0, ip
 80008ac:	fa23 f302 	lsr.w	r3, r3, r2
 80008b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008b4:	e7cc      	b.n	8000850 <__aeabi_d2f+0x14>
 80008b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ba:	d107      	bne.n	80008cc <__aeabi_d2f+0x90>
 80008bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008c0:	bf1e      	ittt	ne
 80008c2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80008c6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80008ca:	4770      	bxne	lr
 80008cc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80008d0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80008d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop

080008dc <__aeabi_uldivmod>:
 80008dc:	b953      	cbnz	r3, 80008f4 <__aeabi_uldivmod+0x18>
 80008de:	b94a      	cbnz	r2, 80008f4 <__aeabi_uldivmod+0x18>
 80008e0:	2900      	cmp	r1, #0
 80008e2:	bf08      	it	eq
 80008e4:	2800      	cmpeq	r0, #0
 80008e6:	bf1c      	itt	ne
 80008e8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ec:	f04f 30ff 	movne.w	r0, #4294967295
 80008f0:	f000 b96a 	b.w	8000bc8 <__aeabi_idiv0>
 80008f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008fc:	f000 f806 	bl	800090c <__udivmoddi4>
 8000900:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000904:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000908:	b004      	add	sp, #16
 800090a:	4770      	bx	lr

0800090c <__udivmoddi4>:
 800090c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000910:	9d08      	ldr	r5, [sp, #32]
 8000912:	460c      	mov	r4, r1
 8000914:	2b00      	cmp	r3, #0
 8000916:	d14e      	bne.n	80009b6 <__udivmoddi4+0xaa>
 8000918:	4694      	mov	ip, r2
 800091a:	458c      	cmp	ip, r1
 800091c:	4686      	mov	lr, r0
 800091e:	fab2 f282 	clz	r2, r2
 8000922:	d962      	bls.n	80009ea <__udivmoddi4+0xde>
 8000924:	b14a      	cbz	r2, 800093a <__udivmoddi4+0x2e>
 8000926:	f1c2 0320 	rsb	r3, r2, #32
 800092a:	4091      	lsls	r1, r2
 800092c:	fa20 f303 	lsr.w	r3, r0, r3
 8000930:	fa0c fc02 	lsl.w	ip, ip, r2
 8000934:	4319      	orrs	r1, r3
 8000936:	fa00 fe02 	lsl.w	lr, r0, r2
 800093a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800093e:	fa1f f68c 	uxth.w	r6, ip
 8000942:	fbb1 f4f7 	udiv	r4, r1, r7
 8000946:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800094a:	fb07 1114 	mls	r1, r7, r4, r1
 800094e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000952:	fb04 f106 	mul.w	r1, r4, r6
 8000956:	4299      	cmp	r1, r3
 8000958:	d90a      	bls.n	8000970 <__udivmoddi4+0x64>
 800095a:	eb1c 0303 	adds.w	r3, ip, r3
 800095e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000962:	f080 8112 	bcs.w	8000b8a <__udivmoddi4+0x27e>
 8000966:	4299      	cmp	r1, r3
 8000968:	f240 810f 	bls.w	8000b8a <__udivmoddi4+0x27e>
 800096c:	3c02      	subs	r4, #2
 800096e:	4463      	add	r3, ip
 8000970:	1a59      	subs	r1, r3, r1
 8000972:	fa1f f38e 	uxth.w	r3, lr
 8000976:	fbb1 f0f7 	udiv	r0, r1, r7
 800097a:	fb07 1110 	mls	r1, r7, r0, r1
 800097e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000982:	fb00 f606 	mul.w	r6, r0, r6
 8000986:	429e      	cmp	r6, r3
 8000988:	d90a      	bls.n	80009a0 <__udivmoddi4+0x94>
 800098a:	eb1c 0303 	adds.w	r3, ip, r3
 800098e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000992:	f080 80fc 	bcs.w	8000b8e <__udivmoddi4+0x282>
 8000996:	429e      	cmp	r6, r3
 8000998:	f240 80f9 	bls.w	8000b8e <__udivmoddi4+0x282>
 800099c:	4463      	add	r3, ip
 800099e:	3802      	subs	r0, #2
 80009a0:	1b9b      	subs	r3, r3, r6
 80009a2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80009a6:	2100      	movs	r1, #0
 80009a8:	b11d      	cbz	r5, 80009b2 <__udivmoddi4+0xa6>
 80009aa:	40d3      	lsrs	r3, r2
 80009ac:	2200      	movs	r2, #0
 80009ae:	e9c5 3200 	strd	r3, r2, [r5]
 80009b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b6:	428b      	cmp	r3, r1
 80009b8:	d905      	bls.n	80009c6 <__udivmoddi4+0xba>
 80009ba:	b10d      	cbz	r5, 80009c0 <__udivmoddi4+0xb4>
 80009bc:	e9c5 0100 	strd	r0, r1, [r5]
 80009c0:	2100      	movs	r1, #0
 80009c2:	4608      	mov	r0, r1
 80009c4:	e7f5      	b.n	80009b2 <__udivmoddi4+0xa6>
 80009c6:	fab3 f183 	clz	r1, r3
 80009ca:	2900      	cmp	r1, #0
 80009cc:	d146      	bne.n	8000a5c <__udivmoddi4+0x150>
 80009ce:	42a3      	cmp	r3, r4
 80009d0:	d302      	bcc.n	80009d8 <__udivmoddi4+0xcc>
 80009d2:	4290      	cmp	r0, r2
 80009d4:	f0c0 80f0 	bcc.w	8000bb8 <__udivmoddi4+0x2ac>
 80009d8:	1a86      	subs	r6, r0, r2
 80009da:	eb64 0303 	sbc.w	r3, r4, r3
 80009de:	2001      	movs	r0, #1
 80009e0:	2d00      	cmp	r5, #0
 80009e2:	d0e6      	beq.n	80009b2 <__udivmoddi4+0xa6>
 80009e4:	e9c5 6300 	strd	r6, r3, [r5]
 80009e8:	e7e3      	b.n	80009b2 <__udivmoddi4+0xa6>
 80009ea:	2a00      	cmp	r2, #0
 80009ec:	f040 8090 	bne.w	8000b10 <__udivmoddi4+0x204>
 80009f0:	eba1 040c 	sub.w	r4, r1, ip
 80009f4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009f8:	fa1f f78c 	uxth.w	r7, ip
 80009fc:	2101      	movs	r1, #1
 80009fe:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a06:	fb08 4416 	mls	r4, r8, r6, r4
 8000a0a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a0e:	fb07 f006 	mul.w	r0, r7, r6
 8000a12:	4298      	cmp	r0, r3
 8000a14:	d908      	bls.n	8000a28 <__udivmoddi4+0x11c>
 8000a16:	eb1c 0303 	adds.w	r3, ip, r3
 8000a1a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a1e:	d202      	bcs.n	8000a26 <__udivmoddi4+0x11a>
 8000a20:	4298      	cmp	r0, r3
 8000a22:	f200 80cd 	bhi.w	8000bc0 <__udivmoddi4+0x2b4>
 8000a26:	4626      	mov	r6, r4
 8000a28:	1a1c      	subs	r4, r3, r0
 8000a2a:	fa1f f38e 	uxth.w	r3, lr
 8000a2e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a32:	fb08 4410 	mls	r4, r8, r0, r4
 8000a36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a3a:	fb00 f707 	mul.w	r7, r0, r7
 8000a3e:	429f      	cmp	r7, r3
 8000a40:	d908      	bls.n	8000a54 <__udivmoddi4+0x148>
 8000a42:	eb1c 0303 	adds.w	r3, ip, r3
 8000a46:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a4a:	d202      	bcs.n	8000a52 <__udivmoddi4+0x146>
 8000a4c:	429f      	cmp	r7, r3
 8000a4e:	f200 80b0 	bhi.w	8000bb2 <__udivmoddi4+0x2a6>
 8000a52:	4620      	mov	r0, r4
 8000a54:	1bdb      	subs	r3, r3, r7
 8000a56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a5a:	e7a5      	b.n	80009a8 <__udivmoddi4+0x9c>
 8000a5c:	f1c1 0620 	rsb	r6, r1, #32
 8000a60:	408b      	lsls	r3, r1
 8000a62:	fa22 f706 	lsr.w	r7, r2, r6
 8000a66:	431f      	orrs	r7, r3
 8000a68:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a6c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a70:	ea43 030c 	orr.w	r3, r3, ip
 8000a74:	40f4      	lsrs	r4, r6
 8000a76:	fa00 f801 	lsl.w	r8, r0, r1
 8000a7a:	0c38      	lsrs	r0, r7, #16
 8000a7c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a80:	fbb4 fef0 	udiv	lr, r4, r0
 8000a84:	fa1f fc87 	uxth.w	ip, r7
 8000a88:	fb00 441e 	mls	r4, r0, lr, r4
 8000a8c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a90:	fb0e f90c 	mul.w	r9, lr, ip
 8000a94:	45a1      	cmp	r9, r4
 8000a96:	fa02 f201 	lsl.w	r2, r2, r1
 8000a9a:	d90a      	bls.n	8000ab2 <__udivmoddi4+0x1a6>
 8000a9c:	193c      	adds	r4, r7, r4
 8000a9e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000aa2:	f080 8084 	bcs.w	8000bae <__udivmoddi4+0x2a2>
 8000aa6:	45a1      	cmp	r9, r4
 8000aa8:	f240 8081 	bls.w	8000bae <__udivmoddi4+0x2a2>
 8000aac:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ab0:	443c      	add	r4, r7
 8000ab2:	eba4 0409 	sub.w	r4, r4, r9
 8000ab6:	fa1f f983 	uxth.w	r9, r3
 8000aba:	fbb4 f3f0 	udiv	r3, r4, r0
 8000abe:	fb00 4413 	mls	r4, r0, r3, r4
 8000ac2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ac6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000aca:	45a4      	cmp	ip, r4
 8000acc:	d907      	bls.n	8000ade <__udivmoddi4+0x1d2>
 8000ace:	193c      	adds	r4, r7, r4
 8000ad0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ad4:	d267      	bcs.n	8000ba6 <__udivmoddi4+0x29a>
 8000ad6:	45a4      	cmp	ip, r4
 8000ad8:	d965      	bls.n	8000ba6 <__udivmoddi4+0x29a>
 8000ada:	3b02      	subs	r3, #2
 8000adc:	443c      	add	r4, r7
 8000ade:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ae2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ae6:	eba4 040c 	sub.w	r4, r4, ip
 8000aea:	429c      	cmp	r4, r3
 8000aec:	46ce      	mov	lr, r9
 8000aee:	469c      	mov	ip, r3
 8000af0:	d351      	bcc.n	8000b96 <__udivmoddi4+0x28a>
 8000af2:	d04e      	beq.n	8000b92 <__udivmoddi4+0x286>
 8000af4:	b155      	cbz	r5, 8000b0c <__udivmoddi4+0x200>
 8000af6:	ebb8 030e 	subs.w	r3, r8, lr
 8000afa:	eb64 040c 	sbc.w	r4, r4, ip
 8000afe:	fa04 f606 	lsl.w	r6, r4, r6
 8000b02:	40cb      	lsrs	r3, r1
 8000b04:	431e      	orrs	r6, r3
 8000b06:	40cc      	lsrs	r4, r1
 8000b08:	e9c5 6400 	strd	r6, r4, [r5]
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	e750      	b.n	80009b2 <__udivmoddi4+0xa6>
 8000b10:	f1c2 0320 	rsb	r3, r2, #32
 8000b14:	fa20 f103 	lsr.w	r1, r0, r3
 8000b18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b1c:	fa24 f303 	lsr.w	r3, r4, r3
 8000b20:	4094      	lsls	r4, r2
 8000b22:	430c      	orrs	r4, r1
 8000b24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b28:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b2c:	fa1f f78c 	uxth.w	r7, ip
 8000b30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b34:	fb08 3110 	mls	r1, r8, r0, r3
 8000b38:	0c23      	lsrs	r3, r4, #16
 8000b3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b3e:	fb00 f107 	mul.w	r1, r0, r7
 8000b42:	4299      	cmp	r1, r3
 8000b44:	d908      	bls.n	8000b58 <__udivmoddi4+0x24c>
 8000b46:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000b4e:	d22c      	bcs.n	8000baa <__udivmoddi4+0x29e>
 8000b50:	4299      	cmp	r1, r3
 8000b52:	d92a      	bls.n	8000baa <__udivmoddi4+0x29e>
 8000b54:	3802      	subs	r0, #2
 8000b56:	4463      	add	r3, ip
 8000b58:	1a5b      	subs	r3, r3, r1
 8000b5a:	b2a4      	uxth	r4, r4
 8000b5c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b60:	fb08 3311 	mls	r3, r8, r1, r3
 8000b64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b68:	fb01 f307 	mul.w	r3, r1, r7
 8000b6c:	42a3      	cmp	r3, r4
 8000b6e:	d908      	bls.n	8000b82 <__udivmoddi4+0x276>
 8000b70:	eb1c 0404 	adds.w	r4, ip, r4
 8000b74:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b78:	d213      	bcs.n	8000ba2 <__udivmoddi4+0x296>
 8000b7a:	42a3      	cmp	r3, r4
 8000b7c:	d911      	bls.n	8000ba2 <__udivmoddi4+0x296>
 8000b7e:	3902      	subs	r1, #2
 8000b80:	4464      	add	r4, ip
 8000b82:	1ae4      	subs	r4, r4, r3
 8000b84:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b88:	e739      	b.n	80009fe <__udivmoddi4+0xf2>
 8000b8a:	4604      	mov	r4, r0
 8000b8c:	e6f0      	b.n	8000970 <__udivmoddi4+0x64>
 8000b8e:	4608      	mov	r0, r1
 8000b90:	e706      	b.n	80009a0 <__udivmoddi4+0x94>
 8000b92:	45c8      	cmp	r8, r9
 8000b94:	d2ae      	bcs.n	8000af4 <__udivmoddi4+0x1e8>
 8000b96:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b9a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b9e:	3801      	subs	r0, #1
 8000ba0:	e7a8      	b.n	8000af4 <__udivmoddi4+0x1e8>
 8000ba2:	4631      	mov	r1, r6
 8000ba4:	e7ed      	b.n	8000b82 <__udivmoddi4+0x276>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	e799      	b.n	8000ade <__udivmoddi4+0x1d2>
 8000baa:	4630      	mov	r0, r6
 8000bac:	e7d4      	b.n	8000b58 <__udivmoddi4+0x24c>
 8000bae:	46d6      	mov	lr, sl
 8000bb0:	e77f      	b.n	8000ab2 <__udivmoddi4+0x1a6>
 8000bb2:	4463      	add	r3, ip
 8000bb4:	3802      	subs	r0, #2
 8000bb6:	e74d      	b.n	8000a54 <__udivmoddi4+0x148>
 8000bb8:	4606      	mov	r6, r0
 8000bba:	4623      	mov	r3, r4
 8000bbc:	4608      	mov	r0, r1
 8000bbe:	e70f      	b.n	80009e0 <__udivmoddi4+0xd4>
 8000bc0:	3e02      	subs	r6, #2
 8000bc2:	4463      	add	r3, ip
 8000bc4:	e730      	b.n	8000a28 <__udivmoddi4+0x11c>
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_idiv0>:
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <Delay_Init>:
#include "Delay.h"
#include <stdint.h>



void Delay_Init(Delay *dly, float delayTime_ms, float mix, float feedback, float sampleRate_Hz) {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b088      	sub	sp, #32
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6178      	str	r0, [r7, #20]
 8000bd4:	ed87 0a04 	vstr	s0, [r7, #16]
 8000bd8:	edc7 0a03 	vstr	s1, [r7, #12]
 8000bdc:	ed87 1a02 	vstr	s2, [r7, #8]
 8000be0:	edc7 1a01 	vstr	s3, [r7, #4]

	// set delay line length
	Delay_SetLength(dly, delayTime_ms, sampleRate_Hz);
 8000be4:	edd7 0a01 	vldr	s1, [r7, #4]
 8000be8:	ed97 0a04 	vldr	s0, [r7, #16]
 8000bec:	6978      	ldr	r0, [r7, #20]
 8000bee:	f000 f89d 	bl	8000d2c <Delay_SetLength>

	// store delay setting
	dly->mix = mix;
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	68fa      	ldr	r2, [r7, #12]
 8000bf6:	601a      	str	r2, [r3, #0]
	dly->feedback = feedback;
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	68ba      	ldr	r2, [r7, #8]
 8000bfc:	605a      	str	r2, [r3, #4]

	// clear delay line circular buffer, reset index
	dly->lineIndex = 0;
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000c04:	461a      	mov	r2, r3
 8000c06:	2300      	movs	r3, #0
 8000c08:	f8c2 3e28 	str.w	r3, [r2, #3624]	@ 0xe28

	for (uint32_t n = 0; n < DELAY_MAX_LINE_LENGTH; n++) {
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	61fb      	str	r3, [r7, #28]
 8000c10:	e00a      	b.n	8000c28 <Delay_Init+0x5c>
		dly->line[n] = 0.0f;
 8000c12:	697a      	ldr	r2, [r7, #20]
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	3302      	adds	r3, #2
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	4413      	add	r3, r2
 8000c1c:	f04f 0200 	mov.w	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
	for (uint32_t n = 0; n < DELAY_MAX_LINE_LENGTH; n++) {
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	3301      	adds	r3, #1
 8000c26:	61fb      	str	r3, [r7, #28]
 8000c28:	69fb      	ldr	r3, [r7, #28]
 8000c2a:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d9ef      	bls.n	8000c12 <Delay_Init+0x46>
	}

	// clear output
	dly->out = 0.0f;
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000c38:	f503 6363 	add.w	r3, r3, #3632	@ 0xe30
 8000c3c:	f04f 0200 	mov.w	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
}
 8000c42:	bf00      	nop
 8000c44:	3720      	adds	r7, #32
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <Delay_Update>:

float Delay_Update(Delay *dly, float inp){
 8000c4a:	b480      	push	{r7}
 8000c4c:	b085      	sub	sp, #20
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
 8000c52:	ed87 0a00 	vstr	s0, [r7]
	// get current delay line output
	float delayLineOutput = dly->line[dly->lineIndex];
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000c5c:	f8d3 3e28 	ldr.w	r3, [r3, #3624]	@ 0xe28
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	3302      	adds	r3, #2
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	4413      	add	r3, r2
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	60fb      	str	r3, [r7, #12]

	// compute current delay line input
	float delayLineInput = inp + dly->feedback*delayLineOutput;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	ed93 7a01 	vldr	s14, [r3, #4]
 8000c72:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c7a:	ed97 7a00 	vldr	s14, [r7]
 8000c7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c82:	edc7 7a02 	vstr	s15, [r7, #8]

	//store in delay line circular buffer
	dly->line[dly->lineIndex] = delayLineInput;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000c8c:	f8d3 3e28 	ldr.w	r3, [r3, #3624]	@ 0xe28
 8000c90:	687a      	ldr	r2, [r7, #4]
 8000c92:	3302      	adds	r3, #2
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	4413      	add	r3, r2
 8000c98:	68ba      	ldr	r2, [r7, #8]
 8000c9a:	601a      	str	r2, [r3, #0]

	// increment delay line index
	dly->lineIndex++;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000ca2:	f8d3 3e28 	ldr.w	r3, [r3, #3624]	@ 0xe28
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	687a      	ldr	r2, [r7, #4]
 8000caa:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 8000cae:	f8c2 3e28 	str.w	r3, [r2, #3624]	@ 0xe28
	if (dly->lineIndex >= dly->lineLength) {
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000cb8:	f8d3 2e28 	ldr.w	r2, [r3, #3624]	@ 0xe28
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000cc2:	f8d3 3e2c 	ldr.w	r3, [r3, #3628]	@ 0xe2c
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d306      	bcc.n	8000cd8 <Delay_Update+0x8e>
		dly->lineIndex = 0;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	f8c2 3e28 	str.w	r3, [r2, #3624]	@ 0xe28
	}

	dly->out = (1.0f - dly->mix) * inp + dly->mix * delayLineOutput;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	edd3 7a00 	vldr	s15, [r3]
 8000cde:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000ce2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ce6:	edd7 7a00 	vldr	s15, [r7]
 8000cea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	edd3 6a00 	vldr	s13, [r3]
 8000cf4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000cf8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000cfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000d06:	f503 6363 	add.w	r3, r3, #3632	@ 0xe30
 8000d0a:	edc3 7a00 	vstr	s15, [r3]
	else if (dly->out < -1.0) {
		dly->out = -1.0f;
	}
	*/

	return dly->out;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000d14:	f503 6363 	add.w	r3, r3, #3632	@ 0xe30
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	ee07 3a90 	vmov	s15, r3

}
 8000d1e:	eeb0 0a67 	vmov.f32	s0, s15
 8000d22:	3714      	adds	r7, #20
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <Delay_SetLength>:
void Delay_SetLength(Delay *dly, float delayTime_ms, float sampleRate_Hz) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	ed87 0a02 	vstr	s0, [r7, #8]
 8000d38:	edc7 0a01 	vstr	s1, [r7, #4]
	float testFloat = 0.001f * delayTime_ms * (float)(sampleRate_Hz);
 8000d3c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d40:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8000ddc <Delay_SetLength+0xb0>
 8000d44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d48:	ed97 7a01 	vldr	s14, [r7, #4]
 8000d4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d50:	edc7 7a05 	vstr	s15, [r7, #20]
	printf("delay time %d \n", (int32_t)(delayTime_ms));
 8000d54:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d5c:	ee17 1a90 	vmov	r1, s15
 8000d60:	481f      	ldr	r0, [pc, #124]	@ (8000de0 <Delay_SetLength+0xb4>)
 8000d62:	f00a f973 	bl	800b04c <iprintf>
	printf("freq %d \n", (int32_t)(sampleRate_Hz));
 8000d66:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d6e:	ee17 1a90 	vmov	r1, s15
 8000d72:	481c      	ldr	r0, [pc, #112]	@ (8000de4 <Delay_SetLength+0xb8>)
 8000d74:	f00a f96a 	bl	800b04c <iprintf>
	dly->lineLength = (uint32_t)(0.001f * delayTime_ms * (float)(sampleRate_Hz));
 8000d78:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d7c:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8000ddc <Delay_SetLength+0xb0>
 8000d80:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d84:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d90:	ee17 2a90 	vmov	r2, s15
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000d9a:	f8c3 2e2c 	str.w	r2, [r3, #3628]	@ 0xe2c
	printf("line length: %d \n", (int)(dly->lineLength));
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000da4:	f8d3 3e2c 	ldr.w	r3, [r3, #3628]	@ 0xe2c
 8000da8:	4619      	mov	r1, r3
 8000daa:	480f      	ldr	r0, [pc, #60]	@ (8000de8 <Delay_SetLength+0xbc>)
 8000dac:	f00a f94e 	bl	800b04c <iprintf>
	if (dly->lineLength > DELAY_MAX_LINE_LENGTH) {
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000db6:	f8d3 3e2c 	ldr.w	r3, [r3, #3628]	@ 0xe2c
 8000dba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d907      	bls.n	8000dd2 <Delay_SetLength+0xa6>
		dly->lineLength = DELAY_MAX_LINE_LENGTH;
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000dc8:	461a      	mov	r2, r3
 8000dca:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000dce:	f8c2 3e2c 	str.w	r3, [r2, #3628]	@ 0xe2c
	}
}
 8000dd2:	bf00      	nop
 8000dd4:	3718      	adds	r7, #24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	3a83126f 	.word	0x3a83126f
 8000de0:	0800c6a4 	.word	0x0800c6a4
 8000de4:	0800c6b4 	.word	0x0800c6b4
 8000de8:	0800c6c0 	.word	0x0800c6c0

08000dec <HighPass_FirstOrder_Init>:
 *      Author: joeln
 */

#include "HighPass_FirstOrder.h"

void HighPass_FirstOrder_Init(HighPass_FirstOrder *filt, float fc_Hz, float fs_Hz) {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	ed87 0a02 	vstr	s0, [r7, #8]
 8000df8:	edc7 0a01 	vstr	s1, [r7, #4]
	filt->fs_Hz = fs_Hz = fs_Hz;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	60da      	str	r2, [r3, #12]

	HighPass_FirstOrder_SetCutoff(filt, fc_Hz);
 8000e02:	ed97 0a02 	vldr	s0, [r7, #8]
 8000e06:	68f8      	ldr	r0, [r7, #12]
 8000e08:	f000 f80c 	bl	8000e24 <HighPass_FirstOrder_SetCutoff>

	filt->out = 0.0f;
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	f04f 0200 	mov.w	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
	filt->inp = 0.0f;
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	f04f 0200 	mov.w	r2, #0
 8000e1a:	605a      	str	r2, [r3, #4]
}
 8000e1c:	bf00      	nop
 8000e1e:	3710      	adds	r7, #16
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <HighPass_FirstOrder_SetCutoff>:

void HighPass_FirstOrder_SetCutoff(HighPass_FirstOrder *filt, float fc_Hz) {
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	ed87 0a00 	vstr	s0, [r7]
	if ( fc_Hz > (0.5f * filt->fs_Hz)) {
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	edd3 7a03 	vldr	s15, [r3, #12]
 8000e36:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000e3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e3e:	ed97 7a00 	vldr	s14, [r7]
 8000e42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e4a:	dd09      	ble.n	8000e60 <HighPass_FirstOrder_SetCutoff+0x3c>
		fc_Hz = 0.5f * filt->fs_Hz;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	edd3 7a03 	vldr	s15, [r3, #12]
 8000e52:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000e56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e5a:	edc7 7a00 	vstr	s15, [r7]
 8000e5e:	e009      	b.n	8000e74 <HighPass_FirstOrder_SetCutoff+0x50>
	}
	else if (fc_Hz < 0.0f) {
 8000e60:	edd7 7a00 	vldr	s15, [r7]
 8000e64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e6c:	d502      	bpl.n	8000e74 <HighPass_FirstOrder_SetCutoff+0x50>
		fc_Hz = 0.0f;
 8000e6e:	f04f 0300 	mov.w	r3, #0
 8000e72:	603b      	str	r3, [r7, #0]
	}

	// compute and store filter coefficient
	float alpha = 6.28318530718f * fc_Hz / filt->fs_Hz; // alpha = 2 * pi * fc / fs
 8000e74:	edd7 7a00 	vldr	s15, [r7]
 8000e78:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8000eb4 <HighPass_FirstOrder_SetCutoff+0x90>
 8000e7c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	ed93 7a03 	vldr	s14, [r3, #12]
 8000e86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e8a:	edc7 7a03 	vstr	s15, [r7, #12]

	filt->coeff = 1.0f / (1.0f + alpha);
 8000e8e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e92:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000e96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000e9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000e9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8000ea8:	bf00      	nop
 8000eaa:	3714      	adds	r7, #20
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	40c90fdb 	.word	0x40c90fdb

08000eb8 <HighPass_FirstOrder_Update>:

float HighPass_FirstOrder_Update(HighPass_FirstOrder *filt, float inp) {
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	ed87 0a00 	vstr	s0, [r7]
	filt->out = filt->coeff * (inp - filt->inp + filt->out);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	ed93 7a02 	vldr	s14, [r3, #8]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	edd3 7a01 	vldr	s15, [r3, #4]
 8000ed0:	edd7 6a00 	vldr	s13, [r7]
 8000ed4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	edd3 7a00 	vldr	s15, [r3]
 8000ede:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	edc3 7a00 	vstr	s15, [r3]

	if (filt->out > 1.0f) {
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	edd3 7a00 	vldr	s15, [r3]
 8000ef2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000ef6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000efe:	dd04      	ble.n	8000f0a <HighPass_FirstOrder_Update+0x52>
		filt->out = 1.0f;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	e00c      	b.n	8000f24 <HighPass_FirstOrder_Update+0x6c>
	}
	else if (filt->out < -1.0f) {
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	edd3 7a00 	vldr	s15, [r3]
 8000f10:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8000f14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f1c:	d502      	bpl.n	8000f24 <HighPass_FirstOrder_Update+0x6c>
		filt->out = -1.0f;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a06      	ldr	r2, [pc, #24]	@ (8000f3c <HighPass_FirstOrder_Update+0x84>)
 8000f22:	601a      	str	r2, [r3, #0]
	}

	return filt->out;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	ee07 3a90 	vmov	s15, r3
}
 8000f2c:	eeb0 0a67 	vmov.f32	s0, s15
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	bf800000 	.word	0xbf800000

08000f40 <LowPass_FirstOrder_Init>:
 *      Author: joeln
 */

#include "LowPass_FirstOrder.h"

void LowPass_FirstOrder_Init(LowPass_FirstOrder *filt, float fc_Hz, float fs_Hz) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f4c:	edc7 0a01 	vstr	s1, [r7, #4]
	filt->fs_Hz = fs_Hz = fs_Hz;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	60da      	str	r2, [r3, #12]

	LowPass_FirstOrder_SetCutoff(filt, fc_Hz);
 8000f56:	ed97 0a02 	vldr	s0, [r7, #8]
 8000f5a:	68f8      	ldr	r0, [r7, #12]
 8000f5c:	f000 f808 	bl	8000f70 <LowPass_FirstOrder_SetCutoff>

	filt->out = 0.0f;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	f04f 0200 	mov.w	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
}
 8000f68:	bf00      	nop
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <LowPass_FirstOrder_SetCutoff>:

void LowPass_FirstOrder_SetCutoff(LowPass_FirstOrder *filt, float fc_Hz) {
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	ed87 0a00 	vstr	s0, [r7]
	if ( fc_Hz > (0.5f * filt->fs_Hz)) {
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	edd3 7a03 	vldr	s15, [r3, #12]
 8000f82:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000f86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f8a:	ed97 7a00 	vldr	s14, [r7]
 8000f8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f96:	dd09      	ble.n	8000fac <LowPass_FirstOrder_SetCutoff+0x3c>
		fc_Hz = 0.5f * filt->fs_Hz;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	edd3 7a03 	vldr	s15, [r3, #12]
 8000f9e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000fa2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fa6:	edc7 7a00 	vstr	s15, [r7]
 8000faa:	e009      	b.n	8000fc0 <LowPass_FirstOrder_SetCutoff+0x50>
	}
	else if (fc_Hz < 0.0f) {
 8000fac:	edd7 7a00 	vldr	s15, [r7]
 8000fb0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fb8:	d502      	bpl.n	8000fc0 <LowPass_FirstOrder_SetCutoff+0x50>
		fc_Hz = 0.0f;
 8000fba:	f04f 0300 	mov.w	r3, #0
 8000fbe:	603b      	str	r3, [r7, #0]
	}

	// compute and store filter coefficient
	float alpha = 6.28318530718f * fc_Hz / filt->fs_Hz; // alpha = 2 * pi * fc / fs
 8000fc0:	edd7 7a00 	vldr	s15, [r7]
 8000fc4:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 800101c <LowPass_FirstOrder_SetCutoff+0xac>
 8000fc8:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	ed93 7a03 	vldr	s14, [r3, #12]
 8000fd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fd6:	edc7 7a03 	vstr	s15, [r7, #12]

	filt->coeff[0] = alpha / (1.0f + alpha);
 8000fda:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fde:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000fe2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000fe6:	edd7 6a03 	vldr	s13, [r7, #12]
 8000fea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	edc3 7a01 	vstr	s15, [r3, #4]
	filt->coeff[1] = 1.0f / (1.0f + alpha);
 8000ff4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ff8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000ffc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001000:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001004:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800100e:	bf00      	nop
 8001010:	3714      	adds	r7, #20
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	40c90fdb 	.word	0x40c90fdb

08001020 <LowPass_FirstOrder_Update>:

float LowPass_FirstOrder_Update(LowPass_FirstOrder *filt, float inp) {
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	ed87 0a00 	vstr	s0, [r7]
	filt->out = filt->coeff[0] * inp + filt->coeff[1] * filt->out;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001032:	edd7 7a00 	vldr	s15, [r7]
 8001036:	ee27 7a27 	vmul.f32	s14, s14, s15
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	edd3 7a00 	vldr	s15, [r3]
 8001046:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800104a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	edc3 7a00 	vstr	s15, [r3]

	if (filt->out > 1.0f) {
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	edd3 7a00 	vldr	s15, [r3]
 800105a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800105e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001066:	dd04      	ble.n	8001072 <LowPass_FirstOrder_Update+0x52>
		filt->out = 1.0f;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	e00c      	b.n	800108c <LowPass_FirstOrder_Update+0x6c>
	}
	else if (filt->out < -1.0f) {
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	edd3 7a00 	vldr	s15, [r3]
 8001078:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800107c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001084:	d502      	bpl.n	800108c <LowPass_FirstOrder_Update+0x6c>
		filt->out = -1.0f;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a06      	ldr	r2, [pc, #24]	@ (80010a4 <LowPass_FirstOrder_Update+0x84>)
 800108a:	601a      	str	r2, [r3, #0]
	}

	return filt->out;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	ee07 3a90 	vmov	s15, r3
}
 8001094:	eeb0 0a67 	vmov.f32	s0, s15
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	bf800000 	.word	0xbf800000

080010a8 <EQ_init>:
#include "PeakingFilter.h"


//Function for initalizing filter
void EQ_init(EQ *filt, float fs)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	ed87 0a00 	vstr	s0, [r7]
    filt->T = 1.0f/fs;
 80010b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80010b8:	ed97 7a00 	vldr	s14, [r7]
 80010bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	edc3 7a00 	vstr	s15, [r3]

    //clear input and output
    for(uint8_t n = 0; n<3; n++)
 80010c6:	2300      	movs	r3, #0
 80010c8:	73fb      	strb	r3, [r7, #15]
 80010ca:	e012      	b.n	80010f2 <EQ_init+0x4a>
    {
        filt->x[n] = 0.0f;
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	4413      	add	r3, r2
 80010d4:	3304      	adds	r3, #4
 80010d6:	f04f 0200 	mov.w	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
        filt->y[n] = 0.0f;
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	3304      	adds	r3, #4
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	4413      	add	r3, r2
 80010e6:	f04f 0200 	mov.w	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
    for(uint8_t n = 0; n<3; n++)
 80010ec:	7bfb      	ldrb	r3, [r7, #15]
 80010ee:	3301      	adds	r3, #1
 80010f0:	73fb      	strb	r3, [r7, #15]
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d9e9      	bls.n	80010cc <EQ_init+0x24>
    }

    //call function to set parameters
    EQ_setParam(filt, 1.0f, 1.0f, 0.0f);
 80010f8:	ed9f 1a06 	vldr	s2, [pc, #24]	@ 8001114 <EQ_init+0x6c>
 80010fc:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8001100:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f000 f807 	bl	8001118 <EQ_setParam>
}
 800110a:	bf00      	nop
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	00000000 	.word	0x00000000

08001118 <EQ_setParam>:
//T, center freq, gain, bandwidth
void EQ_setParam(EQ *filt, float fc, float g, float bw)
{
 8001118:	b5b0      	push	{r4, r5, r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	ed87 0a02 	vstr	s0, [r7, #8]
 8001124:	edc7 0a01 	vstr	s1, [r7, #4]
 8001128:	ed87 1a00 	vstr	s2, [r7]
    float wc = 2.0f*tanf(M_PI*fc*filt->T);
 800112c:	68b8      	ldr	r0, [r7, #8]
 800112e:	f7ff fb2d 	bl	800078c <__aeabi_f2d>
 8001132:	a35b      	add	r3, pc, #364	@ (adr r3, 80012a0 <EQ_setParam+0x188>)
 8001134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001138:	f7ff f89a 	bl	8000270 <__aeabi_dmul>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	4614      	mov	r4, r2
 8001142:	461d      	mov	r5, r3
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff fb1f 	bl	800078c <__aeabi_f2d>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	4620      	mov	r0, r4
 8001154:	4629      	mov	r1, r5
 8001156:	f7ff f88b 	bl	8000270 <__aeabi_dmul>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	4610      	mov	r0, r2
 8001160:	4619      	mov	r1, r3
 8001162:	f7ff fb6b 	bl	800083c <__aeabi_d2f>
 8001166:	4603      	mov	r3, r0
 8001168:	ee00 3a10 	vmov	s0, r3
 800116c:	f00a fd2e 	bl	800bbcc <tanf>
 8001170:	eef0 7a40 	vmov.f32	s15, s0
 8001174:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001178:	edc7 7a05 	vstr	s15, [r7, #20]
    float Q = fc/bw;
 800117c:	edd7 6a02 	vldr	s13, [r7, #8]
 8001180:	ed97 7a00 	vldr	s14, [r7]
 8001184:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001188:	edc7 7a04 	vstr	s15, [r7, #16]

    filt->a[0] = 4 + 2*(g/Q)*wc + (wc)*(wc);
 800118c:	edd7 6a01 	vldr	s13, [r7, #4]
 8001190:	ed97 7a04 	vldr	s14, [r7, #16]
 8001194:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001198:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800119c:	edd7 7a05 	vldr	s15, [r7, #20]
 80011a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011a4:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80011a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80011ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80011b0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80011b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	edc3 7a07 	vstr	s15, [r3, #28]
    filt->a[1] = 2*(wc)*(wc) - 8;
 80011be:	edd7 7a05 	vldr	s15, [r7, #20]
 80011c2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80011c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80011ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ce:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 80011d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	edc3 7a08 	vstr	s15, [r3, #32]
    filt->a[2] = 4 - 2*(g/Q)*wc + (wc)*(wc);
 80011dc:	edd7 6a01 	vldr	s13, [r7, #4]
 80011e0:	ed97 7a04 	vldr	s14, [r7, #16]
 80011e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011e8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80011ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80011f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011f4:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80011f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001200:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001204:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    filt->b[0] = 4 + 2*(1/Q)*wc + (wc)*(wc);
 800120e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001212:	ed97 7a04 	vldr	s14, [r7, #16]
 8001216:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800121a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800121e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001226:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800122a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800122e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001232:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001236:	ee77 7a27 	vadd.f32	s15, s14, s15
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    filt->b[1] = -(2*(wc)*(wc) - 8);
 8001240:	edd7 7a05 	vldr	s15, [r7, #20]
 8001244:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001248:	edd7 7a05 	vldr	s15, [r7, #20]
 800124c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001250:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8001254:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001258:	eef1 7a67 	vneg.f32	s15, s15
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    filt->b[2] = -(4 - 2*(1/Q)*wc + (wc)*(wc));
 8001262:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001266:	ed97 7a04 	vldr	s14, [r7, #16]
 800126a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800126e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001272:	edd7 7a05 	vldr	s15, [r7, #20]
 8001276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800127a:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800127e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001282:	edd7 7a05 	vldr	s15, [r7, #20]
 8001286:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800128a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800128e:	eef1 7a67 	vneg.f32	s15, s15
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
}
 8001298:	bf00      	nop
 800129a:	3718      	adds	r7, #24
 800129c:	46bd      	mov	sp, r7
 800129e:	bdb0      	pop	{r4, r5, r7, pc}
 80012a0:	54442d18 	.word	0x54442d18
 80012a4:	400921fb 	.word	0x400921fb

080012a8 <EQ_filter>:

float EQ_filter(EQ *filt, float in)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	ed87 0a00 	vstr	s0, [r7]
    //shift
    filt->x[2] = filt->x[1];
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689a      	ldr	r2, [r3, #8]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	60da      	str	r2, [r3, #12]
    filt->x[1] = filt->x[0];
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685a      	ldr	r2, [r3, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	609a      	str	r2, [r3, #8]
    filt->x[0] = in;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	683a      	ldr	r2, [r7, #0]
 80012c8:	605a      	str	r2, [r3, #4]

    filt->y[2] = filt->y[1];
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	695a      	ldr	r2, [r3, #20]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	619a      	str	r2, [r3, #24]
    filt->y[1] = filt->y[0];
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	691a      	ldr	r2, [r3, #16]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	615a      	str	r2, [r3, #20]

    filt->y[0] = (1/filt->b[0])*((filt->a[0]*filt->x[0] + filt->a[1]*filt->x[1] + filt->a[2]*filt->x[2]) + (filt->b[1]*filt->y[1] + filt->b[2]*filt->y[2]));
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80012e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80012e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	edd3 6a07 	vldr	s13, [r3, #28]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80012f4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	ed93 6a08 	vldr	s12, [r3, #32]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	edd3 7a02 	vldr	s15, [r3, #8]
 8001304:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001308:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	ed93 6a09 	vldr	s12, [r3, #36]	@ 0x24
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	edd3 7a03 	vldr	s15, [r3, #12]
 8001318:	ee66 7a27 	vmul.f32	s15, s12, s15
 800131c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	ed93 6a0b 	vldr	s12, [r3, #44]	@ 0x2c
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	edd3 7a05 	vldr	s15, [r3, #20]
 800132c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	edd3 5a0c 	vldr	s11, [r3, #48]	@ 0x30
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	edd3 7a06 	vldr	s15, [r3, #24]
 800133c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001340:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001344:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001348:	ee67 7a27 	vmul.f32	s15, s14, s15
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	edc3 7a04 	vstr	s15, [r3, #16]

    return (filt->y[0]);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	691b      	ldr	r3, [r3, #16]
 8001356:	ee07 3a90 	vmov	s15, r3
}
 800135a:	eeb0 0a67 	vmov.f32	s0, s15
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001370:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001374:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001378:	f003 0301 	and.w	r3, r3, #1
 800137c:	2b00      	cmp	r3, #0
 800137e:	d013      	beq.n	80013a8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001380:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001384:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001388:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800138c:	2b00      	cmp	r3, #0
 800138e:	d00b      	beq.n	80013a8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001390:	e000      	b.n	8001394 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001392:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001394:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d0f9      	beq.n	8001392 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800139e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	b2d2      	uxtb	r2, r2
 80013a6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80013a8:	687b      	ldr	r3, [r7, #4]
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
	...

080013b8 <HAL_I2S_RxHalfCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
	inBufPtr = &inData[0];
 80013c0:	4b05      	ldr	r3, [pc, #20]	@ (80013d8 <HAL_I2S_RxHalfCpltCallback+0x20>)
 80013c2:	4a06      	ldr	r2, [pc, #24]	@ (80013dc <HAL_I2S_RxHalfCpltCallback+0x24>)
 80013c4:	601a      	str	r2, [r3, #0]

	dataReadyFlag = 1;
 80013c6:	4b06      	ldr	r3, [pc, #24]	@ (80013e0 <HAL_I2S_RxHalfCpltCallback+0x28>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	801a      	strh	r2, [r3, #0]
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	200002fc 	.word	0x200002fc
 80013dc:	200001fc 	.word	0x200001fc
 80013e0:	20000306 	.word	0x20000306

080013e4 <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]

	inBufPtr = &inData[BUFFER_SIZE/2];
 80013ec:	4b05      	ldr	r3, [pc, #20]	@ (8001404 <HAL_I2S_RxCpltCallback+0x20>)
 80013ee:	4a06      	ldr	r2, [pc, #24]	@ (8001408 <HAL_I2S_RxCpltCallback+0x24>)
 80013f0:	601a      	str	r2, [r3, #0]

	dataReadyFlag = 1;
 80013f2:	4b06      	ldr	r3, [pc, #24]	@ (800140c <HAL_I2S_RxCpltCallback+0x28>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	801a      	strh	r2, [r3, #0]
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	200002fc 	.word	0x200002fc
 8001408:	2000027c 	.word	0x2000027c
 800140c:	20000306 	.word	0x20000306

08001410 <processData>:
	}

}


void processData(Delay *dly) {
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
	static float right;
	static float rightDelayed;
	static float out;

	//float out = Delay_Update(&dly, sample_i2s) * 5;
	for (uint8_t n = 0; n < (BUFFER_SIZE/2) - 1; n += 2) {
 8001418:	2300      	movs	r3, #0
 800141a:	73fb      	strb	r3, [r7, #15]
 800141c:	e0d9      	b.n	80015d2 <processData+0x1c2>

		left = (inBufPtr[n] * INT16_TO_FLOAT); // + 0.0537;
 800141e:	4b71      	ldr	r3, [pc, #452]	@ (80015e4 <processData+0x1d4>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	7bfb      	ldrb	r3, [r7, #15]
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	4413      	add	r3, r2
 8001428:	881b      	ldrh	r3, [r3, #0]
 800142a:	b21b      	sxth	r3, r3
 800142c:	ee07 3a90 	vmov	s15, r3
 8001430:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001434:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 80015e8 <processData+0x1d8>
 8001438:	ee67 7a87 	vmul.f32	s15, s15, s14
 800143c:	4b6b      	ldr	r3, [pc, #428]	@ (80015ec <processData+0x1dc>)
 800143e:	edc3 7a00 	vstr	s15, [r3]

		if (left > 1.0f) {
 8001442:	4b6a      	ldr	r3, [pc, #424]	@ (80015ec <processData+0x1dc>)
 8001444:	edd3 7a00 	vldr	s15, [r3]
 8001448:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800144c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001454:	dd09      	ble.n	800146a <processData+0x5a>
			left -= 2.0f;
 8001456:	4b65      	ldr	r3, [pc, #404]	@ (80015ec <processData+0x1dc>)
 8001458:	edd3 7a00 	vldr	s15, [r3]
 800145c:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001460:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001464:	4b61      	ldr	r3, [pc, #388]	@ (80015ec <processData+0x1dc>)
 8001466:	edc3 7a00 	vstr	s15, [r3]
		}

		left = LowPass_FirstOrder_Update(&lpFilt, left);
 800146a:	4b60      	ldr	r3, [pc, #384]	@ (80015ec <processData+0x1dc>)
 800146c:	edd3 7a00 	vldr	s15, [r3]
 8001470:	eeb0 0a67 	vmov.f32	s0, s15
 8001474:	485e      	ldr	r0, [pc, #376]	@ (80015f0 <processData+0x1e0>)
 8001476:	f7ff fdd3 	bl	8001020 <LowPass_FirstOrder_Update>
 800147a:	eef0 7a40 	vmov.f32	s15, s0
 800147e:	4b5b      	ldr	r3, [pc, #364]	@ (80015ec <processData+0x1dc>)
 8001480:	edc3 7a00 	vstr	s15, [r3]
		left = HighPass_FirstOrder_Update(&hpFilt, left);
 8001484:	4b59      	ldr	r3, [pc, #356]	@ (80015ec <processData+0x1dc>)
 8001486:	edd3 7a00 	vldr	s15, [r3]
 800148a:	eeb0 0a67 	vmov.f32	s0, s15
 800148e:	4859      	ldr	r0, [pc, #356]	@ (80015f4 <processData+0x1e4>)
 8001490:	f7ff fd12 	bl	8000eb8 <HighPass_FirstOrder_Update>
 8001494:	eef0 7a40 	vmov.f32	s15, s0
 8001498:	4b54      	ldr	r3, [pc, #336]	@ (80015ec <processData+0x1dc>)
 800149a:	edc3 7a00 	vstr	s15, [r3]

		right = (inBufPtr[n+1] * INT16_TO_FLOAT); // + 0.054565;
 800149e:	4b51      	ldr	r3, [pc, #324]	@ (80015e4 <processData+0x1d4>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
 80014a4:	3301      	adds	r3, #1
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	4413      	add	r3, r2
 80014aa:	881b      	ldrh	r3, [r3, #0]
 80014ac:	b21b      	sxth	r3, r3
 80014ae:	ee07 3a90 	vmov	s15, r3
 80014b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014b6:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 80015e8 <processData+0x1d8>
 80014ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014be:	4b4e      	ldr	r3, [pc, #312]	@ (80015f8 <processData+0x1e8>)
 80014c0:	edc3 7a00 	vstr	s15, [r3]

		if (right > 1.0f) {
 80014c4:	4b4c      	ldr	r3, [pc, #304]	@ (80015f8 <processData+0x1e8>)
 80014c6:	edd3 7a00 	vldr	s15, [r3]
 80014ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80014ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d6:	dd09      	ble.n	80014ec <processData+0xdc>
			right -= 2.0f;
 80014d8:	4b47      	ldr	r3, [pc, #284]	@ (80015f8 <processData+0x1e8>)
 80014da:	edd3 7a00 	vldr	s15, [r3]
 80014de:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80014e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014e6:	4b44      	ldr	r3, [pc, #272]	@ (80015f8 <processData+0x1e8>)
 80014e8:	edc3 7a00 	vstr	s15, [r3]
		}

		right = LowPass_FirstOrder_Update(&lpFilt, right);
 80014ec:	4b42      	ldr	r3, [pc, #264]	@ (80015f8 <processData+0x1e8>)
 80014ee:	edd3 7a00 	vldr	s15, [r3]
 80014f2:	eeb0 0a67 	vmov.f32	s0, s15
 80014f6:	483e      	ldr	r0, [pc, #248]	@ (80015f0 <processData+0x1e0>)
 80014f8:	f7ff fd92 	bl	8001020 <LowPass_FirstOrder_Update>
 80014fc:	eef0 7a40 	vmov.f32	s15, s0
 8001500:	4b3d      	ldr	r3, [pc, #244]	@ (80015f8 <processData+0x1e8>)
 8001502:	edc3 7a00 	vstr	s15, [r3]
		right = HighPass_FirstOrder_Update(&hpFilt, right);
 8001506:	4b3c      	ldr	r3, [pc, #240]	@ (80015f8 <processData+0x1e8>)
 8001508:	edd3 7a00 	vldr	s15, [r3]
 800150c:	eeb0 0a67 	vmov.f32	s0, s15
 8001510:	4838      	ldr	r0, [pc, #224]	@ (80015f4 <processData+0x1e4>)
 8001512:	f7ff fcd1 	bl	8000eb8 <HighPass_FirstOrder_Update>
 8001516:	eef0 7a40 	vmov.f32	s15, s0
 800151a:	4b37      	ldr	r3, [pc, #220]	@ (80015f8 <processData+0x1e8>)
 800151c:	edc3 7a00 	vstr	s15, [r3]
		rightDelayed = Delay_Update(dly, right);
 8001520:	4b35      	ldr	r3, [pc, #212]	@ (80015f8 <processData+0x1e8>)
 8001522:	edd3 7a00 	vldr	s15, [r3]
 8001526:	eeb0 0a67 	vmov.f32	s0, s15
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff fb8d 	bl	8000c4a <Delay_Update>
 8001530:	eef0 7a40 	vmov.f32	s15, s0
 8001534:	4b31      	ldr	r3, [pc, #196]	@ (80015fc <processData+0x1ec>)
 8001536:	edc3 7a00 	vstr	s15, [r3]
		out = left - rightDelayed;
 800153a:	4b2c      	ldr	r3, [pc, #176]	@ (80015ec <processData+0x1dc>)
 800153c:	ed93 7a00 	vldr	s14, [r3]
 8001540:	4b2e      	ldr	r3, [pc, #184]	@ (80015fc <processData+0x1ec>)
 8001542:	edd3 7a00 	vldr	s15, [r3]
 8001546:	ee77 7a67 	vsub.f32	s15, s14, s15
 800154a:	4b2d      	ldr	r3, [pc, #180]	@ (8001600 <processData+0x1f0>)
 800154c:	edc3 7a00 	vstr	s15, [r3]

		if (out > 1.0f) {
 8001550:	4b2b      	ldr	r3, [pc, #172]	@ (8001600 <processData+0x1f0>)
 8001552:	edd3 7a00 	vldr	s15, [r3]
 8001556:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800155a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800155e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001562:	dc08      	bgt.n	8001576 <processData+0x166>
			out == 1.0f;
		}
		else if (out < -1.0f) {
 8001564:	4b26      	ldr	r3, [pc, #152]	@ (8001600 <processData+0x1f0>)
 8001566:	edd3 7a00 	vldr	s15, [r3]
 800156a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800156e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			out == -1;
		}
		outTest = out;
 8001576:	4b22      	ldr	r3, [pc, #136]	@ (8001600 <processData+0x1f0>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a22      	ldr	r2, [pc, #136]	@ (8001604 <processData+0x1f4>)
 800157c:	6013      	str	r3, [r2, #0]
		//out = LowPass_FirstOrder_Update(&lpFilt, out);
		out = EQ_filter(&eq, out);
 800157e:	4b20      	ldr	r3, [pc, #128]	@ (8001600 <processData+0x1f0>)
 8001580:	edd3 7a00 	vldr	s15, [r3]
 8001584:	eeb0 0a67 	vmov.f32	s0, s15
 8001588:	481f      	ldr	r0, [pc, #124]	@ (8001608 <processData+0x1f8>)
 800158a:	f7ff fe8d 	bl	80012a8 <EQ_filter>
 800158e:	eef0 7a40 	vmov.f32	s15, s0
 8001592:	4b1b      	ldr	r3, [pc, #108]	@ (8001600 <processData+0x1f0>)
 8001594:	edc3 7a00 	vstr	s15, [r3]
		dac_value = (int16_t)(out*2048.0f*VOLUME);
 8001598:	4b19      	ldr	r3, [pc, #100]	@ (8001600 <processData+0x1f0>)
 800159a:	edd3 7a00 	vldr	s15, [r3]
 800159e:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800160c <processData+0x1fc>
 80015a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015a6:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80015aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015b2:	ee17 3a90 	vmov	r3, s15
 80015b6:	b21a      	sxth	r2, r3
 80015b8:	4b15      	ldr	r3, [pc, #84]	@ (8001610 <processData+0x200>)
 80015ba:	801a      	strh	r2, [r3, #0]
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, dac_value);
 80015bc:	4b14      	ldr	r3, [pc, #80]	@ (8001610 <processData+0x200>)
 80015be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015c2:	2200      	movs	r2, #0
 80015c4:	2110      	movs	r1, #16
 80015c6:	4813      	ldr	r0, [pc, #76]	@ (8001614 <processData+0x204>)
 80015c8:	f001 fb3e 	bl	8002c48 <HAL_DAC_SetValue>
	for (uint8_t n = 0; n < (BUFFER_SIZE/2) - 1; n += 2) {
 80015cc:	7bfb      	ldrb	r3, [r7, #15]
 80015ce:	3302      	adds	r3, #2
 80015d0:	73fb      	strb	r3, [r7, #15]
 80015d2:	7bfb      	ldrb	r3, [r7, #15]
 80015d4:	2b3e      	cmp	r3, #62	@ 0x3e
 80015d6:	f67f af22 	bls.w	800141e <processData+0xe>
		//printf("right: %d \n", (int16_t)(rightDelayed*32768.0f));


	}

}
 80015da:	bf00      	nop
 80015dc:	bf00      	nop
 80015de:	3710      	adds	r7, #16
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	200002fc 	.word	0x200002fc
 80015e8:	38000000 	.word	0x38000000
 80015ec:	2000035c 	.word	0x2000035c
 80015f0:	20000308 	.word	0x20000308
 80015f4:	20000318 	.word	0x20000318
 80015f8:	20000360 	.word	0x20000360
 80015fc:	20000364 	.word	0x20000364
 8001600:	20000368 	.word	0x20000368
 8001604:	20000300 	.word	0x20000300
 8001608:	20000328 	.word	0x20000328
 800160c:	45000000 	.word	0x45000000
 8001610:	20000304 	.word	0x20000304
 8001614:	200000ec 	.word	0x200000ec

08001618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800161e:	f000 fdbf 	bl	80021a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001622:	f000 f875 	bl	8001710 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001626:	f000 f9d5 	bl	80019d4 <MX_GPIO_Init>
  MX_DMA_Init();
 800162a:	f000 f9b3 	bl	8001994 <MX_DMA_Init>
  MX_I2C1_Init();
 800162e:	f000 f955 	bl	80018dc <MX_I2C1_Init>
  MX_I2S3_Init();
 8001632:	f000 f981 	bl	8001938 <MX_I2S3_Init>
  MX_USB_HOST_Init();
 8001636:	f009 f87f 	bl	800a738 <MX_USB_HOST_Init>
  MX_DAC_Init();
 800163a:	f000 f925 	bl	8001888 <MX_DAC_Init>
  MX_ADC1_Init();
 800163e:	f000 f8d1 	bl	80017e4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2S_Receive_DMA(&hi2s3, (uint16_t *)inData, BUFFER_SIZE);
 8001642:	2280      	movs	r2, #128	@ 0x80
 8001644:	4923      	ldr	r1, [pc, #140]	@ (80016d4 <main+0xbc>)
 8001646:	4824      	ldr	r0, [pc, #144]	@ (80016d8 <main+0xc0>)
 8001648:	f004 fc60 	bl	8005f0c <HAL_I2S_Receive_DMA>
  Delay *dly = malloc(sizeof(Delay));
 800164c:	f644 6034 	movw	r0, #20020	@ 0x4e34
 8001650:	f009 fb7c 	bl	800ad4c <malloc>
 8001654:	4603      	mov	r3, r0
 8001656:	607b      	str	r3, [r7, #4]
  // 500 hz: delay = 1 ms
  float delayTime = 0.4081632653;;
 8001658:	4b20      	ldr	r3, [pc, #128]	@ (80016dc <main+0xc4>)
 800165a:	603b      	str	r3, [r7, #0]
  Delay_Init(dly, delayTime, 1, 0, SAMPLING_RATE);
 800165c:	eddf 1a20 	vldr	s3, [pc, #128]	@ 80016e0 <main+0xc8>
 8001660:	ed9f 1a20 	vldr	s2, [pc, #128]	@ 80016e4 <main+0xcc>
 8001664:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8001668:	ed97 0a00 	vldr	s0, [r7]
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f7ff faad 	bl	8000bcc <Delay_Init>

  LowPass_FirstOrder_Init(&lpFilt, 3000.0f, SAMPLING_RATE);
 8001672:	eddf 0a1b 	vldr	s1, [pc, #108]	@ 80016e0 <main+0xc8>
 8001676:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 80016e8 <main+0xd0>
 800167a:	481c      	ldr	r0, [pc, #112]	@ (80016ec <main+0xd4>)
 800167c:	f7ff fc60 	bl	8000f40 <LowPass_FirstOrder_Init>
  HighPass_FirstOrder_Init(&hpFilt, 100.0f, SAMPLING_RATE);
 8001680:	eddf 0a17 	vldr	s1, [pc, #92]	@ 80016e0 <main+0xc8>
 8001684:	ed9f 0a1a 	vldr	s0, [pc, #104]	@ 80016f0 <main+0xd8>
 8001688:	481a      	ldr	r0, [pc, #104]	@ (80016f4 <main+0xdc>)
 800168a:	f7ff fbaf 	bl	8000dec <HighPass_FirstOrder_Init>
  EQ_init(&eq, SAMPLING_RATE);
 800168e:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 80016e0 <main+0xc8>
 8001692:	4819      	ldr	r0, [pc, #100]	@ (80016f8 <main+0xe0>)
 8001694:	f7ff fd08 	bl	80010a8 <EQ_init>
  EQ_setParam(&eq, 150, 2, 50);
 8001698:	ed9f 1a18 	vldr	s2, [pc, #96]	@ 80016fc <main+0xe4>
 800169c:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 80016a0:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 8001700 <main+0xe8>
 80016a4:	4814      	ldr	r0, [pc, #80]	@ (80016f8 <main+0xe0>)
 80016a6:	f7ff fd37 	bl	8001118 <EQ_setParam>
  //EQ_setParam()


  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 80016aa:	2110      	movs	r1, #16
 80016ac:	4815      	ldr	r0, [pc, #84]	@ (8001704 <main+0xec>)
 80016ae:	f001 fa74 	bl	8002b9a <HAL_DAC_Start>
  HAL_ADC_Start(&hadc1);
 80016b2:	4815      	ldr	r0, [pc, #84]	@ (8001708 <main+0xf0>)
 80016b4:	f000 fe4e 	bl	8002354 <HAL_ADC_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80016b8:	f009 f864 	bl	800a784 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

    if (dataReadyFlag) {
 80016bc:	4b13      	ldr	r3, [pc, #76]	@ (800170c <main+0xf4>)
 80016be:	881b      	ldrh	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d0f9      	beq.n	80016b8 <main+0xa0>
    	dataReadyFlag = 0;
 80016c4:	4b11      	ldr	r3, [pc, #68]	@ (800170c <main+0xf4>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	801a      	strh	r2, [r3, #0]
    	processData(dly);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f7ff fea0 	bl	8001410 <processData>
    MX_USB_HOST_Process();
 80016d0:	e7f2      	b.n	80016b8 <main+0xa0>
 80016d2:	bf00      	nop
 80016d4:	200001fc 	.word	0x200001fc
 80016d8:	20000154 	.word	0x20000154
 80016dc:	3ed0fac7 	.word	0x3ed0fac7
 80016e0:	473b8000 	.word	0x473b8000
 80016e4:	00000000 	.word	0x00000000
 80016e8:	453b8000 	.word	0x453b8000
 80016ec:	20000308 	.word	0x20000308
 80016f0:	42c80000 	.word	0x42c80000
 80016f4:	20000318 	.word	0x20000318
 80016f8:	20000328 	.word	0x20000328
 80016fc:	42480000 	.word	0x42480000
 8001700:	43160000 	.word	0x43160000
 8001704:	200000ec 	.word	0x200000ec
 8001708:	200000a4 	.word	0x200000a4
 800170c:	20000306 	.word	0x20000306

08001710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b094      	sub	sp, #80	@ 0x50
 8001714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001716:	f107 0320 	add.w	r3, r7, #32
 800171a:	2230      	movs	r2, #48	@ 0x30
 800171c:	2100      	movs	r1, #0
 800171e:	4618      	mov	r0, r3
 8001720:	f009 fce9 	bl	800b0f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001724:	f107 030c 	add.w	r3, r7, #12
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001734:	2300      	movs	r3, #0
 8001736:	60bb      	str	r3, [r7, #8]
 8001738:	4b28      	ldr	r3, [pc, #160]	@ (80017dc <SystemClock_Config+0xcc>)
 800173a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173c:	4a27      	ldr	r2, [pc, #156]	@ (80017dc <SystemClock_Config+0xcc>)
 800173e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001742:	6413      	str	r3, [r2, #64]	@ 0x40
 8001744:	4b25      	ldr	r3, [pc, #148]	@ (80017dc <SystemClock_Config+0xcc>)
 8001746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001748:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800174c:	60bb      	str	r3, [r7, #8]
 800174e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001750:	2300      	movs	r3, #0
 8001752:	607b      	str	r3, [r7, #4]
 8001754:	4b22      	ldr	r3, [pc, #136]	@ (80017e0 <SystemClock_Config+0xd0>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a21      	ldr	r2, [pc, #132]	@ (80017e0 <SystemClock_Config+0xd0>)
 800175a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800175e:	6013      	str	r3, [r2, #0]
 8001760:	4b1f      	ldr	r3, [pc, #124]	@ (80017e0 <SystemClock_Config+0xd0>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001768:	607b      	str	r3, [r7, #4]
 800176a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800176c:	2301      	movs	r3, #1
 800176e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001770:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001774:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001776:	2302      	movs	r3, #2
 8001778:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800177a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800177e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001780:	2308      	movs	r3, #8
 8001782:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001784:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001788:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800178a:	2302      	movs	r3, #2
 800178c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800178e:	2307      	movs	r3, #7
 8001790:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001792:	f107 0320 	add.w	r3, r7, #32
 8001796:	4618      	mov	r0, r3
 8001798:	f005 f81a 	bl	80067d0 <HAL_RCC_OscConfig>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80017a2:	f000 fa41 	bl	8001c28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017a6:	230f      	movs	r3, #15
 80017a8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017aa:	2302      	movs	r3, #2
 80017ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017ae:	2300      	movs	r3, #0
 80017b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017b2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80017b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017be:	f107 030c 	add.w	r3, r7, #12
 80017c2:	2105      	movs	r1, #5
 80017c4:	4618      	mov	r0, r3
 80017c6:	f005 fa7b 	bl	8006cc0 <HAL_RCC_ClockConfig>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80017d0:	f000 fa2a 	bl	8001c28 <Error_Handler>
  }
}
 80017d4:	bf00      	nop
 80017d6:	3750      	adds	r7, #80	@ 0x50
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40023800 	.word	0x40023800
 80017e0:	40007000 	.word	0x40007000

080017e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017ea:	463b      	mov	r3, r7
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80017f6:	4b21      	ldr	r3, [pc, #132]	@ (800187c <MX_ADC1_Init+0x98>)
 80017f8:	4a21      	ldr	r2, [pc, #132]	@ (8001880 <MX_ADC1_Init+0x9c>)
 80017fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80017fc:	4b1f      	ldr	r3, [pc, #124]	@ (800187c <MX_ADC1_Init+0x98>)
 80017fe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001802:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001804:	4b1d      	ldr	r3, [pc, #116]	@ (800187c <MX_ADC1_Init+0x98>)
 8001806:	2200      	movs	r2, #0
 8001808:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800180a:	4b1c      	ldr	r3, [pc, #112]	@ (800187c <MX_ADC1_Init+0x98>)
 800180c:	2200      	movs	r2, #0
 800180e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001810:	4b1a      	ldr	r3, [pc, #104]	@ (800187c <MX_ADC1_Init+0x98>)
 8001812:	2200      	movs	r2, #0
 8001814:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001816:	4b19      	ldr	r3, [pc, #100]	@ (800187c <MX_ADC1_Init+0x98>)
 8001818:	2200      	movs	r2, #0
 800181a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800181e:	4b17      	ldr	r3, [pc, #92]	@ (800187c <MX_ADC1_Init+0x98>)
 8001820:	2200      	movs	r2, #0
 8001822:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001824:	4b15      	ldr	r3, [pc, #84]	@ (800187c <MX_ADC1_Init+0x98>)
 8001826:	4a17      	ldr	r2, [pc, #92]	@ (8001884 <MX_ADC1_Init+0xa0>)
 8001828:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800182a:	4b14      	ldr	r3, [pc, #80]	@ (800187c <MX_ADC1_Init+0x98>)
 800182c:	2200      	movs	r2, #0
 800182e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001830:	4b12      	ldr	r3, [pc, #72]	@ (800187c <MX_ADC1_Init+0x98>)
 8001832:	2201      	movs	r2, #1
 8001834:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001836:	4b11      	ldr	r3, [pc, #68]	@ (800187c <MX_ADC1_Init+0x98>)
 8001838:	2200      	movs	r2, #0
 800183a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800183e:	4b0f      	ldr	r3, [pc, #60]	@ (800187c <MX_ADC1_Init+0x98>)
 8001840:	2201      	movs	r2, #1
 8001842:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001844:	480d      	ldr	r0, [pc, #52]	@ (800187c <MX_ADC1_Init+0x98>)
 8001846:	f000 fd41 	bl	80022cc <HAL_ADC_Init>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001850:	f000 f9ea 	bl	8001c28 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001854:	2301      	movs	r3, #1
 8001856:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001858:	2301      	movs	r3, #1
 800185a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800185c:	2300      	movs	r3, #0
 800185e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001860:	463b      	mov	r3, r7
 8001862:	4619      	mov	r1, r3
 8001864:	4805      	ldr	r0, [pc, #20]	@ (800187c <MX_ADC1_Init+0x98>)
 8001866:	f000 fe47 	bl	80024f8 <HAL_ADC_ConfigChannel>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001870:	f000 f9da 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001874:	bf00      	nop
 8001876:	3710      	adds	r7, #16
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	200000a4 	.word	0x200000a4
 8001880:	40012000 	.word	0x40012000
 8001884:	0f000001 	.word	0x0f000001

08001888 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800188e:	463b      	mov	r3, r7
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001896:	4b0f      	ldr	r3, [pc, #60]	@ (80018d4 <MX_DAC_Init+0x4c>)
 8001898:	4a0f      	ldr	r2, [pc, #60]	@ (80018d8 <MX_DAC_Init+0x50>)
 800189a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800189c:	480d      	ldr	r0, [pc, #52]	@ (80018d4 <MX_DAC_Init+0x4c>)
 800189e:	f001 f95a 	bl	8002b56 <HAL_DAC_Init>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80018a8:	f000 f9be 	bl	8001c28 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80018ac:	2300      	movs	r3, #0
 80018ae:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80018b0:	2300      	movs	r3, #0
 80018b2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80018b4:	463b      	mov	r3, r7
 80018b6:	2210      	movs	r2, #16
 80018b8:	4619      	mov	r1, r3
 80018ba:	4806      	ldr	r0, [pc, #24]	@ (80018d4 <MX_DAC_Init+0x4c>)
 80018bc:	f001 f9ee 	bl	8002c9c <HAL_DAC_ConfigChannel>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80018c6:	f000 f9af 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	200000ec 	.word	0x200000ec
 80018d8:	40007400 	.word	0x40007400

080018dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018e0:	4b12      	ldr	r3, [pc, #72]	@ (800192c <MX_I2C1_Init+0x50>)
 80018e2:	4a13      	ldr	r2, [pc, #76]	@ (8001930 <MX_I2C1_Init+0x54>)
 80018e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80018e6:	4b11      	ldr	r3, [pc, #68]	@ (800192c <MX_I2C1_Init+0x50>)
 80018e8:	4a12      	ldr	r2, [pc, #72]	@ (8001934 <MX_I2C1_Init+0x58>)
 80018ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018ec:	4b0f      	ldr	r3, [pc, #60]	@ (800192c <MX_I2C1_Init+0x50>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018f2:	4b0e      	ldr	r3, [pc, #56]	@ (800192c <MX_I2C1_Init+0x50>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018f8:	4b0c      	ldr	r3, [pc, #48]	@ (800192c <MX_I2C1_Init+0x50>)
 80018fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80018fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001900:	4b0a      	ldr	r3, [pc, #40]	@ (800192c <MX_I2C1_Init+0x50>)
 8001902:	2200      	movs	r2, #0
 8001904:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001906:	4b09      	ldr	r3, [pc, #36]	@ (800192c <MX_I2C1_Init+0x50>)
 8001908:	2200      	movs	r2, #0
 800190a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800190c:	4b07      	ldr	r3, [pc, #28]	@ (800192c <MX_I2C1_Init+0x50>)
 800190e:	2200      	movs	r2, #0
 8001910:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001912:	4b06      	ldr	r3, [pc, #24]	@ (800192c <MX_I2C1_Init+0x50>)
 8001914:	2200      	movs	r2, #0
 8001916:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001918:	4804      	ldr	r0, [pc, #16]	@ (800192c <MX_I2C1_Init+0x50>)
 800191a:	f004 f873 	bl	8005a04 <HAL_I2C_Init>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001924:	f000 f980 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001928:	bf00      	nop
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20000100 	.word	0x20000100
 8001930:	40005400 	.word	0x40005400
 8001934:	000186a0 	.word	0x000186a0

08001938 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800193c:	4b13      	ldr	r3, [pc, #76]	@ (800198c <MX_I2S3_Init+0x54>)
 800193e:	4a14      	ldr	r2, [pc, #80]	@ (8001990 <MX_I2S3_Init+0x58>)
 8001940:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_RX;
 8001942:	4b12      	ldr	r3, [pc, #72]	@ (800198c <MX_I2S3_Init+0x54>)
 8001944:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001948:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800194a:	4b10      	ldr	r3, [pc, #64]	@ (800198c <MX_I2S3_Init+0x54>)
 800194c:	2200      	movs	r2, #0
 800194e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8001950:	4b0e      	ldr	r3, [pc, #56]	@ (800198c <MX_I2S3_Init+0x54>)
 8001952:	2201      	movs	r2, #1
 8001954:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001956:	4b0d      	ldr	r3, [pc, #52]	@ (800198c <MX_I2S3_Init+0x54>)
 8001958:	2200      	movs	r2, #0
 800195a:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 800195c:	4b0b      	ldr	r3, [pc, #44]	@ (800198c <MX_I2S3_Init+0x54>)
 800195e:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8001962:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001964:	4b09      	ldr	r3, [pc, #36]	@ (800198c <MX_I2S3_Init+0x54>)
 8001966:	2200      	movs	r2, #0
 8001968:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800196a:	4b08      	ldr	r3, [pc, #32]	@ (800198c <MX_I2S3_Init+0x54>)
 800196c:	2200      	movs	r2, #0
 800196e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001970:	4b06      	ldr	r3, [pc, #24]	@ (800198c <MX_I2S3_Init+0x54>)
 8001972:	2200      	movs	r2, #0
 8001974:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001976:	4805      	ldr	r0, [pc, #20]	@ (800198c <MX_I2S3_Init+0x54>)
 8001978:	f004 f988 	bl	8005c8c <HAL_I2S_Init>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001982:	f000 f951 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20000154 	.word	0x20000154
 8001990:	40003c00 	.word	0x40003c00

08001994 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	607b      	str	r3, [r7, #4]
 800199e:	4b0c      	ldr	r3, [pc, #48]	@ (80019d0 <MX_DMA_Init+0x3c>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a2:	4a0b      	ldr	r2, [pc, #44]	@ (80019d0 <MX_DMA_Init+0x3c>)
 80019a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80019a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019aa:	4b09      	ldr	r3, [pc, #36]	@ (80019d0 <MX_DMA_Init+0x3c>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019b2:	607b      	str	r3, [r7, #4]
 80019b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2100      	movs	r1, #0
 80019ba:	200b      	movs	r0, #11
 80019bc:	f001 f895 	bl	8002aea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80019c0:	200b      	movs	r0, #11
 80019c2:	f001 f8ae 	bl	8002b22 <HAL_NVIC_EnableIRQ>

}
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40023800 	.word	0x40023800

080019d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b08c      	sub	sp, #48	@ 0x30
 80019d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019da:	f107 031c 	add.w	r3, r7, #28
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	605a      	str	r2, [r3, #4]
 80019e4:	609a      	str	r2, [r3, #8]
 80019e6:	60da      	str	r2, [r3, #12]
 80019e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	61bb      	str	r3, [r7, #24]
 80019ee:	4b7a      	ldr	r3, [pc, #488]	@ (8001bd8 <MX_GPIO_Init+0x204>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f2:	4a79      	ldr	r2, [pc, #484]	@ (8001bd8 <MX_GPIO_Init+0x204>)
 80019f4:	f043 0310 	orr.w	r3, r3, #16
 80019f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019fa:	4b77      	ldr	r3, [pc, #476]	@ (8001bd8 <MX_GPIO_Init+0x204>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fe:	f003 0310 	and.w	r3, r3, #16
 8001a02:	61bb      	str	r3, [r7, #24]
 8001a04:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	617b      	str	r3, [r7, #20]
 8001a0a:	4b73      	ldr	r3, [pc, #460]	@ (8001bd8 <MX_GPIO_Init+0x204>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0e:	4a72      	ldr	r2, [pc, #456]	@ (8001bd8 <MX_GPIO_Init+0x204>)
 8001a10:	f043 0304 	orr.w	r3, r3, #4
 8001a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a16:	4b70      	ldr	r3, [pc, #448]	@ (8001bd8 <MX_GPIO_Init+0x204>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1a:	f003 0304 	and.w	r3, r3, #4
 8001a1e:	617b      	str	r3, [r7, #20]
 8001a20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	613b      	str	r3, [r7, #16]
 8001a26:	4b6c      	ldr	r3, [pc, #432]	@ (8001bd8 <MX_GPIO_Init+0x204>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2a:	4a6b      	ldr	r2, [pc, #428]	@ (8001bd8 <MX_GPIO_Init+0x204>)
 8001a2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a32:	4b69      	ldr	r3, [pc, #420]	@ (8001bd8 <MX_GPIO_Init+0x204>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a3a:	613b      	str	r3, [r7, #16]
 8001a3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	4b65      	ldr	r3, [pc, #404]	@ (8001bd8 <MX_GPIO_Init+0x204>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a46:	4a64      	ldr	r2, [pc, #400]	@ (8001bd8 <MX_GPIO_Init+0x204>)
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a4e:	4b62      	ldr	r3, [pc, #392]	@ (8001bd8 <MX_GPIO_Init+0x204>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60bb      	str	r3, [r7, #8]
 8001a5e:	4b5e      	ldr	r3, [pc, #376]	@ (8001bd8 <MX_GPIO_Init+0x204>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a62:	4a5d      	ldr	r2, [pc, #372]	@ (8001bd8 <MX_GPIO_Init+0x204>)
 8001a64:	f043 0302 	orr.w	r3, r3, #2
 8001a68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a6a:	4b5b      	ldr	r3, [pc, #364]	@ (8001bd8 <MX_GPIO_Init+0x204>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	60bb      	str	r3, [r7, #8]
 8001a74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	607b      	str	r3, [r7, #4]
 8001a7a:	4b57      	ldr	r3, [pc, #348]	@ (8001bd8 <MX_GPIO_Init+0x204>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7e:	4a56      	ldr	r2, [pc, #344]	@ (8001bd8 <MX_GPIO_Init+0x204>)
 8001a80:	f043 0308 	orr.w	r3, r3, #8
 8001a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a86:	4b54      	ldr	r3, [pc, #336]	@ (8001bd8 <MX_GPIO_Init+0x204>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8a:	f003 0308 	and.w	r3, r3, #8
 8001a8e:	607b      	str	r3, [r7, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001a92:	2200      	movs	r2, #0
 8001a94:	2108      	movs	r1, #8
 8001a96:	4851      	ldr	r0, [pc, #324]	@ (8001bdc <MX_GPIO_Init+0x208>)
 8001a98:	f001 fe66 	bl	8003768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	2101      	movs	r1, #1
 8001aa0:	484f      	ldr	r0, [pc, #316]	@ (8001be0 <MX_GPIO_Init+0x20c>)
 8001aa2:	f001 fe61 	bl	8003768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001aac:	484d      	ldr	r0, [pc, #308]	@ (8001be4 <MX_GPIO_Init+0x210>)
 8001aae:	f001 fe5b 	bl	8003768 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001ab2:	2308      	movs	r3, #8
 8001ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001ac2:	f107 031c 	add.w	r3, r7, #28
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4844      	ldr	r0, [pc, #272]	@ (8001bdc <MX_GPIO_Init+0x208>)
 8001aca:	f001 fcb1 	bl	8003430 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ada:	2300      	movs	r3, #0
 8001adc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001ade:	f107 031c 	add.w	r3, r7, #28
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	483e      	ldr	r0, [pc, #248]	@ (8001be0 <MX_GPIO_Init+0x20c>)
 8001ae6:	f001 fca3 	bl	8003430 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001aea:	2308      	movs	r3, #8
 8001aec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aee:	2302      	movs	r3, #2
 8001af0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af6:	2300      	movs	r3, #0
 8001af8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001afa:	2305      	movs	r3, #5
 8001afc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001afe:	f107 031c 	add.w	r3, r7, #28
 8001b02:	4619      	mov	r1, r3
 8001b04:	4836      	ldr	r0, [pc, #216]	@ (8001be0 <MX_GPIO_Init+0x20c>)
 8001b06:	f001 fc93 	bl	8003430 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001b0e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001b12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b18:	f107 031c 	add.w	r3, r7, #28
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4832      	ldr	r0, [pc, #200]	@ (8001be8 <MX_GPIO_Init+0x214>)
 8001b20:	f001 fc86 	bl	8003430 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001b24:	23c0      	movs	r3, #192	@ 0xc0
 8001b26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b30:	2300      	movs	r3, #0
 8001b32:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b34:	2305      	movs	r3, #5
 8001b36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b38:	f107 031c 	add.w	r3, r7, #28
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	482a      	ldr	r0, [pc, #168]	@ (8001be8 <MX_GPIO_Init+0x214>)
 8001b40:	f001 fc76 	bl	8003430 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001b44:	2304      	movs	r3, #4
 8001b46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001b50:	f107 031c 	add.w	r3, r7, #28
 8001b54:	4619      	mov	r1, r3
 8001b56:	4825      	ldr	r0, [pc, #148]	@ (8001bec <MX_GPIO_Init+0x218>)
 8001b58:	f001 fc6a 	bl	8003430 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001b5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b62:	2302      	movs	r3, #2
 8001b64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b6e:	2305      	movs	r3, #5
 8001b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001b72:	f107 031c 	add.w	r3, r7, #28
 8001b76:	4619      	mov	r1, r3
 8001b78:	481c      	ldr	r0, [pc, #112]	@ (8001bec <MX_GPIO_Init+0x218>)
 8001b7a:	f001 fc59 	bl	8003430 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001b7e:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8001b82:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b84:	2301      	movs	r3, #1
 8001b86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b90:	f107 031c 	add.w	r3, r7, #28
 8001b94:	4619      	mov	r1, r3
 8001b96:	4813      	ldr	r0, [pc, #76]	@ (8001be4 <MX_GPIO_Init+0x210>)
 8001b98:	f001 fc4a 	bl	8003430 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001b9c:	2320      	movs	r3, #32
 8001b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001ba8:	f107 031c 	add.w	r3, r7, #28
 8001bac:	4619      	mov	r1, r3
 8001bae:	480d      	ldr	r0, [pc, #52]	@ (8001be4 <MX_GPIO_Init+0x210>)
 8001bb0:	f001 fc3e 	bl	8003430 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001bb8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001bbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001bc2:	f107 031c 	add.w	r3, r7, #28
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4804      	ldr	r0, [pc, #16]	@ (8001bdc <MX_GPIO_Init+0x208>)
 8001bca:	f001 fc31 	bl	8003430 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001bce:	bf00      	nop
 8001bd0:	3730      	adds	r7, #48	@ 0x30
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	40020800 	.word	0x40020800
 8001be4:	40020c00 	.word	0x40020c00
 8001be8:	40020000 	.word	0x40020000
 8001bec:	40020400 	.word	0x40020400

08001bf0 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	617b      	str	r3, [r7, #20]
 8001c00:	e009      	b.n	8001c16 <_write+0x26>
		ITM_SendChar(*ptr++);
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	1c5a      	adds	r2, r3, #1
 8001c06:	60ba      	str	r2, [r7, #8]
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff fbac 	bl	8001368 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	3301      	adds	r3, #1
 8001c14:	617b      	str	r3, [r7, #20]
 8001c16:	697a      	ldr	r2, [r7, #20]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	dbf1      	blt.n	8001c02 <_write+0x12>
	}
	return len;
 8001c1e:	687b      	ldr	r3, [r7, #4]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3718      	adds	r7, #24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c2c:	b672      	cpsid	i
}
 8001c2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c30:	bf00      	nop
 8001c32:	e7fd      	b.n	8001c30 <Error_Handler+0x8>

08001c34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	607b      	str	r3, [r7, #4]
 8001c3e:	4b10      	ldr	r3, [pc, #64]	@ (8001c80 <HAL_MspInit+0x4c>)
 8001c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c42:	4a0f      	ldr	r2, [pc, #60]	@ (8001c80 <HAL_MspInit+0x4c>)
 8001c44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c48:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001c80 <HAL_MspInit+0x4c>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c52:	607b      	str	r3, [r7, #4]
 8001c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	603b      	str	r3, [r7, #0]
 8001c5a:	4b09      	ldr	r3, [pc, #36]	@ (8001c80 <HAL_MspInit+0x4c>)
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5e:	4a08      	ldr	r2, [pc, #32]	@ (8001c80 <HAL_MspInit+0x4c>)
 8001c60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c64:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c66:	4b06      	ldr	r3, [pc, #24]	@ (8001c80 <HAL_MspInit+0x4c>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c6e:	603b      	str	r3, [r7, #0]
 8001c70:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c72:	2007      	movs	r0, #7
 8001c74:	f000 ff2e 	bl	8002ad4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c78:	bf00      	nop
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40023800 	.word	0x40023800

08001c84 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b08a      	sub	sp, #40	@ 0x28
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c8c:	f107 0314 	add.w	r3, r7, #20
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	605a      	str	r2, [r3, #4]
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	60da      	str	r2, [r3, #12]
 8001c9a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a17      	ldr	r2, [pc, #92]	@ (8001d00 <HAL_ADC_MspInit+0x7c>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d127      	bne.n	8001cf6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	613b      	str	r3, [r7, #16]
 8001caa:	4b16      	ldr	r3, [pc, #88]	@ (8001d04 <HAL_ADC_MspInit+0x80>)
 8001cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cae:	4a15      	ldr	r2, [pc, #84]	@ (8001d04 <HAL_ADC_MspInit+0x80>)
 8001cb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cb6:	4b13      	ldr	r3, [pc, #76]	@ (8001d04 <HAL_ADC_MspInit+0x80>)
 8001cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cbe:	613b      	str	r3, [r7, #16]
 8001cc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8001d04 <HAL_ADC_MspInit+0x80>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cca:	4a0e      	ldr	r2, [pc, #56]	@ (8001d04 <HAL_ADC_MspInit+0x80>)
 8001ccc:	f043 0301 	orr.w	r3, r3, #1
 8001cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8001d04 <HAL_ADC_MspInit+0x80>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cea:	f107 0314 	add.w	r3, r7, #20
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4805      	ldr	r0, [pc, #20]	@ (8001d08 <HAL_ADC_MspInit+0x84>)
 8001cf2:	f001 fb9d 	bl	8003430 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001cf6:	bf00      	nop
 8001cf8:	3728      	adds	r7, #40	@ 0x28
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40012000 	.word	0x40012000
 8001d04:	40023800 	.word	0x40023800
 8001d08:	40020000 	.word	0x40020000

08001d0c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08a      	sub	sp, #40	@ 0x28
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d14:	f107 0314 	add.w	r3, r7, #20
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	60da      	str	r2, [r3, #12]
 8001d22:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a17      	ldr	r2, [pc, #92]	@ (8001d88 <HAL_DAC_MspInit+0x7c>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d127      	bne.n	8001d7e <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	613b      	str	r3, [r7, #16]
 8001d32:	4b16      	ldr	r3, [pc, #88]	@ (8001d8c <HAL_DAC_MspInit+0x80>)
 8001d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d36:	4a15      	ldr	r2, [pc, #84]	@ (8001d8c <HAL_DAC_MspInit+0x80>)
 8001d38:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001d3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d3e:	4b13      	ldr	r3, [pc, #76]	@ (8001d8c <HAL_DAC_MspInit+0x80>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d42:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001d46:	613b      	str	r3, [r7, #16]
 8001d48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60fb      	str	r3, [r7, #12]
 8001d4e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d8c <HAL_DAC_MspInit+0x80>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d52:	4a0e      	ldr	r2, [pc, #56]	@ (8001d8c <HAL_DAC_MspInit+0x80>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d8c <HAL_DAC_MspInit+0x80>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001d66:	2320      	movs	r3, #32
 8001d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d72:	f107 0314 	add.w	r3, r7, #20
 8001d76:	4619      	mov	r1, r3
 8001d78:	4805      	ldr	r0, [pc, #20]	@ (8001d90 <HAL_DAC_MspInit+0x84>)
 8001d7a:	f001 fb59 	bl	8003430 <HAL_GPIO_Init>

  /* USER CODE END DAC_MspInit 1 */

  }

}
 8001d7e:	bf00      	nop
 8001d80:	3728      	adds	r7, #40	@ 0x28
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40007400 	.word	0x40007400
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	40020000 	.word	0x40020000

08001d94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08a      	sub	sp, #40	@ 0x28
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9c:	f107 0314 	add.w	r3, r7, #20
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	60da      	str	r2, [r3, #12]
 8001daa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a19      	ldr	r2, [pc, #100]	@ (8001e18 <HAL_I2C_MspInit+0x84>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d12c      	bne.n	8001e10 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	613b      	str	r3, [r7, #16]
 8001dba:	4b18      	ldr	r3, [pc, #96]	@ (8001e1c <HAL_I2C_MspInit+0x88>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dbe:	4a17      	ldr	r2, [pc, #92]	@ (8001e1c <HAL_I2C_MspInit+0x88>)
 8001dc0:	f043 0302 	orr.w	r3, r3, #2
 8001dc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dc6:	4b15      	ldr	r3, [pc, #84]	@ (8001e1c <HAL_I2C_MspInit+0x88>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	613b      	str	r3, [r7, #16]
 8001dd0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001dd2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001dd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dd8:	2312      	movs	r3, #18
 8001dda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de0:	2300      	movs	r3, #0
 8001de2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001de4:	2304      	movs	r3, #4
 8001de6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de8:	f107 0314 	add.w	r3, r7, #20
 8001dec:	4619      	mov	r1, r3
 8001dee:	480c      	ldr	r0, [pc, #48]	@ (8001e20 <HAL_I2C_MspInit+0x8c>)
 8001df0:	f001 fb1e 	bl	8003430 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001df4:	2300      	movs	r3, #0
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	4b08      	ldr	r3, [pc, #32]	@ (8001e1c <HAL_I2C_MspInit+0x88>)
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfc:	4a07      	ldr	r2, [pc, #28]	@ (8001e1c <HAL_I2C_MspInit+0x88>)
 8001dfe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e02:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e04:	4b05      	ldr	r3, [pc, #20]	@ (8001e1c <HAL_I2C_MspInit+0x88>)
 8001e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001e10:	bf00      	nop
 8001e12:	3728      	adds	r7, #40	@ 0x28
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40005400 	.word	0x40005400
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	40020400 	.word	0x40020400

08001e24 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b08e      	sub	sp, #56	@ 0x38
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e3c:	f107 0314 	add.w	r3, r7, #20
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a4a      	ldr	r2, [pc, #296]	@ (8001f78 <HAL_I2S_MspInit+0x154>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	f040 808c 	bne.w	8001f6e <HAL_I2S_MspInit+0x14a>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001e56:	2301      	movs	r3, #1
 8001e58:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001e5a:	23c0      	movs	r3, #192	@ 0xc0
 8001e5c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001e5e:	2302      	movs	r3, #2
 8001e60:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e62:	f107 0314 	add.w	r3, r7, #20
 8001e66:	4618      	mov	r0, r3
 8001e68:	f005 f936 	bl	80070d8 <HAL_RCCEx_PeriphCLKConfig>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8001e72:	f7ff fed9 	bl	8001c28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	613b      	str	r3, [r7, #16]
 8001e7a:	4b40      	ldr	r3, [pc, #256]	@ (8001f7c <HAL_I2S_MspInit+0x158>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7e:	4a3f      	ldr	r2, [pc, #252]	@ (8001f7c <HAL_I2S_MspInit+0x158>)
 8001e80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e84:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e86:	4b3d      	ldr	r3, [pc, #244]	@ (8001f7c <HAL_I2S_MspInit+0x158>)
 8001e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e8e:	613b      	str	r3, [r7, #16]
 8001e90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	4b39      	ldr	r3, [pc, #228]	@ (8001f7c <HAL_I2S_MspInit+0x158>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9a:	4a38      	ldr	r2, [pc, #224]	@ (8001f7c <HAL_I2S_MspInit+0x158>)
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ea2:	4b36      	ldr	r3, [pc, #216]	@ (8001f7c <HAL_I2S_MspInit+0x158>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60bb      	str	r3, [r7, #8]
 8001eb2:	4b32      	ldr	r3, [pc, #200]	@ (8001f7c <HAL_I2S_MspInit+0x158>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb6:	4a31      	ldr	r2, [pc, #196]	@ (8001f7c <HAL_I2S_MspInit+0x158>)
 8001eb8:	f043 0304 	orr.w	r3, r3, #4
 8001ebc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ebe:	4b2f      	ldr	r3, [pc, #188]	@ (8001f7c <HAL_I2S_MspInit+0x158>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec2:	f003 0304 	and.w	r3, r3, #4
 8001ec6:	60bb      	str	r3, [r7, #8]
 8001ec8:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001eca:	2310      	movs	r3, #16
 8001ecc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001eda:	2306      	movs	r3, #6
 8001edc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001ede:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4826      	ldr	r0, [pc, #152]	@ (8001f80 <HAL_I2S_MspInit+0x15c>)
 8001ee6:	f001 faa3 	bl	8003430 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001eea:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001eee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001efc:	2306      	movs	r3, #6
 8001efe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f04:	4619      	mov	r1, r3
 8001f06:	481f      	ldr	r0, [pc, #124]	@ (8001f84 <HAL_I2S_MspInit+0x160>)
 8001f08:	f001 fa92 	bl	8003430 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_RX Init */
    hdma_spi3_rx.Instance = DMA1_Stream0;
 8001f0c:	4b1e      	ldr	r3, [pc, #120]	@ (8001f88 <HAL_I2S_MspInit+0x164>)
 8001f0e:	4a1f      	ldr	r2, [pc, #124]	@ (8001f8c <HAL_I2S_MspInit+0x168>)
 8001f10:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 8001f12:	4b1d      	ldr	r3, [pc, #116]	@ (8001f88 <HAL_I2S_MspInit+0x164>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f18:	4b1b      	ldr	r3, [pc, #108]	@ (8001f88 <HAL_I2S_MspInit+0x164>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f1e:	4b1a      	ldr	r3, [pc, #104]	@ (8001f88 <HAL_I2S_MspInit+0x164>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f24:	4b18      	ldr	r3, [pc, #96]	@ (8001f88 <HAL_I2S_MspInit+0x164>)
 8001f26:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f2a:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f2c:	4b16      	ldr	r3, [pc, #88]	@ (8001f88 <HAL_I2S_MspInit+0x164>)
 8001f2e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001f32:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f34:	4b14      	ldr	r3, [pc, #80]	@ (8001f88 <HAL_I2S_MspInit+0x164>)
 8001f36:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f3a:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 8001f3c:	4b12      	ldr	r3, [pc, #72]	@ (8001f88 <HAL_I2S_MspInit+0x164>)
 8001f3e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f42:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001f44:	4b10      	ldr	r3, [pc, #64]	@ (8001f88 <HAL_I2S_MspInit+0x164>)
 8001f46:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001f4a:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f4c:	4b0e      	ldr	r3, [pc, #56]	@ (8001f88 <HAL_I2S_MspInit+0x164>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8001f52:	480d      	ldr	r0, [pc, #52]	@ (8001f88 <HAL_I2S_MspInit+0x164>)
 8001f54:	f000 fefc 	bl	8002d50 <HAL_DMA_Init>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <HAL_I2S_MspInit+0x13e>
    {
      Error_Handler();
 8001f5e:	f7ff fe63 	bl	8001c28 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi3_rx);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a08      	ldr	r2, [pc, #32]	@ (8001f88 <HAL_I2S_MspInit+0x164>)
 8001f66:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001f68:	4a07      	ldr	r2, [pc, #28]	@ (8001f88 <HAL_I2S_MspInit+0x164>)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001f6e:	bf00      	nop
 8001f70:	3738      	adds	r7, #56	@ 0x38
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40003c00 	.word	0x40003c00
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	40020000 	.word	0x40020000
 8001f84:	40020800 	.word	0x40020800
 8001f88:	2000019c 	.word	0x2000019c
 8001f8c:	40026010 	.word	0x40026010

08001f90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f94:	bf00      	nop
 8001f96:	e7fd      	b.n	8001f94 <NMI_Handler+0x4>

08001f98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f9c:	bf00      	nop
 8001f9e:	e7fd      	b.n	8001f9c <HardFault_Handler+0x4>

08001fa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fa4:	bf00      	nop
 8001fa6:	e7fd      	b.n	8001fa4 <MemManage_Handler+0x4>

08001fa8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fac:	bf00      	nop
 8001fae:	e7fd      	b.n	8001fac <BusFault_Handler+0x4>

08001fb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fb4:	bf00      	nop
 8001fb6:	e7fd      	b.n	8001fb4 <UsageFault_Handler+0x4>

08001fb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fbc:	bf00      	nop
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fd8:	bf00      	nop
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fe6:	f000 f92d 	bl	8002244 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fea:	bf00      	nop
 8001fec:	bd80      	pop	{r7, pc}
	...

08001ff0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8001ff4:	4802      	ldr	r0, [pc, #8]	@ (8002000 <DMA1_Stream0_IRQHandler+0x10>)
 8001ff6:	f000 ffb1 	bl	8002f5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	2000019c 	.word	0x2000019c

08002004 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002008:	4802      	ldr	r0, [pc, #8]	@ (8002014 <OTG_FS_IRQHandler+0x10>)
 800200a:	f001 fea7 	bl	8003d5c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	20000750 	.word	0x20000750

08002018 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]
 8002028:	e00a      	b.n	8002040 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800202a:	f3af 8000 	nop.w
 800202e:	4601      	mov	r1, r0
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	1c5a      	adds	r2, r3, #1
 8002034:	60ba      	str	r2, [r7, #8]
 8002036:	b2ca      	uxtb	r2, r1
 8002038:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	3301      	adds	r3, #1
 800203e:	617b      	str	r3, [r7, #20]
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	429a      	cmp	r2, r3
 8002046:	dbf0      	blt.n	800202a <_read+0x12>
  }

  return len;
 8002048:	687b      	ldr	r3, [r7, #4]
}
 800204a:	4618      	mov	r0, r3
 800204c:	3718      	adds	r7, #24
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800205a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800205e:	4618      	mov	r0, r3
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800206a:	b480      	push	{r7}
 800206c:	b083      	sub	sp, #12
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
 8002072:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800207a:	605a      	str	r2, [r3, #4]
  return 0;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <_isatty>:

int _isatty(int file)
{
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002092:	2301      	movs	r3, #1
}
 8002094:	4618      	mov	r0, r3
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
	...

080020bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020c4:	4a14      	ldr	r2, [pc, #80]	@ (8002118 <_sbrk+0x5c>)
 80020c6:	4b15      	ldr	r3, [pc, #84]	@ (800211c <_sbrk+0x60>)
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020d0:	4b13      	ldr	r3, [pc, #76]	@ (8002120 <_sbrk+0x64>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d102      	bne.n	80020de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020d8:	4b11      	ldr	r3, [pc, #68]	@ (8002120 <_sbrk+0x64>)
 80020da:	4a12      	ldr	r2, [pc, #72]	@ (8002124 <_sbrk+0x68>)
 80020dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020de:	4b10      	ldr	r3, [pc, #64]	@ (8002120 <_sbrk+0x64>)
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4413      	add	r3, r2
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d207      	bcs.n	80020fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020ec:	f009 f862 	bl	800b1b4 <__errno>
 80020f0:	4603      	mov	r3, r0
 80020f2:	220c      	movs	r2, #12
 80020f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020f6:	f04f 33ff 	mov.w	r3, #4294967295
 80020fa:	e009      	b.n	8002110 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020fc:	4b08      	ldr	r3, [pc, #32]	@ (8002120 <_sbrk+0x64>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002102:	4b07      	ldr	r3, [pc, #28]	@ (8002120 <_sbrk+0x64>)
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4413      	add	r3, r2
 800210a:	4a05      	ldr	r2, [pc, #20]	@ (8002120 <_sbrk+0x64>)
 800210c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800210e:	68fb      	ldr	r3, [r7, #12]
}
 8002110:	4618      	mov	r0, r3
 8002112:	3718      	adds	r7, #24
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	20020000 	.word	0x20020000
 800211c:	00000400 	.word	0x00000400
 8002120:	2000036c 	.word	0x2000036c
 8002124:	20000c80 	.word	0x20000c80

08002128 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800212c:	4b06      	ldr	r3, [pc, #24]	@ (8002148 <SystemInit+0x20>)
 800212e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002132:	4a05      	ldr	r2, [pc, #20]	@ (8002148 <SystemInit+0x20>)
 8002134:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002138:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800213c:	bf00      	nop
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	e000ed00 	.word	0xe000ed00

0800214c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800214c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002184 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002150:	f7ff ffea 	bl	8002128 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002154:	480c      	ldr	r0, [pc, #48]	@ (8002188 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002156:	490d      	ldr	r1, [pc, #52]	@ (800218c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002158:	4a0d      	ldr	r2, [pc, #52]	@ (8002190 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800215a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800215c:	e002      	b.n	8002164 <LoopCopyDataInit>

0800215e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800215e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002160:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002162:	3304      	adds	r3, #4

08002164 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002164:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002166:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002168:	d3f9      	bcc.n	800215e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800216a:	4a0a      	ldr	r2, [pc, #40]	@ (8002194 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800216c:	4c0a      	ldr	r4, [pc, #40]	@ (8002198 <LoopFillZerobss+0x22>)
  movs r3, #0
 800216e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002170:	e001      	b.n	8002176 <LoopFillZerobss>

08002172 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002172:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002174:	3204      	adds	r2, #4

08002176 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002176:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002178:	d3fb      	bcc.n	8002172 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800217a:	f009 f821 	bl	800b1c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800217e:	f7ff fa4b 	bl	8001618 <main>
  bx  lr    
 8002182:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002184:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002188:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800218c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002190:	0800cb0c 	.word	0x0800cb0c
  ldr r2, =_sbss
 8002194:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002198:	20000c7c 	.word	0x20000c7c

0800219c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800219c:	e7fe      	b.n	800219c <ADC_IRQHandler>
	...

080021a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021a4:	4b0e      	ldr	r3, [pc, #56]	@ (80021e0 <HAL_Init+0x40>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a0d      	ldr	r2, [pc, #52]	@ (80021e0 <HAL_Init+0x40>)
 80021aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021b0:	4b0b      	ldr	r3, [pc, #44]	@ (80021e0 <HAL_Init+0x40>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a0a      	ldr	r2, [pc, #40]	@ (80021e0 <HAL_Init+0x40>)
 80021b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021bc:	4b08      	ldr	r3, [pc, #32]	@ (80021e0 <HAL_Init+0x40>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a07      	ldr	r2, [pc, #28]	@ (80021e0 <HAL_Init+0x40>)
 80021c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021c8:	2003      	movs	r0, #3
 80021ca:	f000 fc83 	bl	8002ad4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021ce:	2000      	movs	r0, #0
 80021d0:	f000 f808 	bl	80021e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021d4:	f7ff fd2e 	bl	8001c34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40023c00 	.word	0x40023c00

080021e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021ec:	4b12      	ldr	r3, [pc, #72]	@ (8002238 <HAL_InitTick+0x54>)
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	4b12      	ldr	r3, [pc, #72]	@ (800223c <HAL_InitTick+0x58>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	4619      	mov	r1, r3
 80021f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80021fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002202:	4618      	mov	r0, r3
 8002204:	f000 fc9b 	bl	8002b3e <HAL_SYSTICK_Config>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e00e      	b.n	8002230 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b0f      	cmp	r3, #15
 8002216:	d80a      	bhi.n	800222e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002218:	2200      	movs	r2, #0
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	f04f 30ff 	mov.w	r0, #4294967295
 8002220:	f000 fc63 	bl	8002aea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002224:	4a06      	ldr	r2, [pc, #24]	@ (8002240 <HAL_InitTick+0x5c>)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800222a:	2300      	movs	r3, #0
 800222c:	e000      	b.n	8002230 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
}
 8002230:	4618      	mov	r0, r3
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	20000000 	.word	0x20000000
 800223c:	20000008 	.word	0x20000008
 8002240:	20000004 	.word	0x20000004

08002244 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002248:	4b06      	ldr	r3, [pc, #24]	@ (8002264 <HAL_IncTick+0x20>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	461a      	mov	r2, r3
 800224e:	4b06      	ldr	r3, [pc, #24]	@ (8002268 <HAL_IncTick+0x24>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4413      	add	r3, r2
 8002254:	4a04      	ldr	r2, [pc, #16]	@ (8002268 <HAL_IncTick+0x24>)
 8002256:	6013      	str	r3, [r2, #0]
}
 8002258:	bf00      	nop
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	20000008 	.word	0x20000008
 8002268:	20000370 	.word	0x20000370

0800226c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  return uwTick;
 8002270:	4b03      	ldr	r3, [pc, #12]	@ (8002280 <HAL_GetTick+0x14>)
 8002272:	681b      	ldr	r3, [r3, #0]
}
 8002274:	4618      	mov	r0, r3
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	20000370 	.word	0x20000370

08002284 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800228c:	f7ff ffee 	bl	800226c <HAL_GetTick>
 8002290:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800229c:	d005      	beq.n	80022aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800229e:	4b0a      	ldr	r3, [pc, #40]	@ (80022c8 <HAL_Delay+0x44>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	461a      	mov	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	4413      	add	r3, r2
 80022a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022aa:	bf00      	nop
 80022ac:	f7ff ffde 	bl	800226c <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d8f7      	bhi.n	80022ac <HAL_Delay+0x28>
  {
  }
}
 80022bc:	bf00      	nop
 80022be:	bf00      	nop
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	20000008 	.word	0x20000008

080022cc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022d4:	2300      	movs	r3, #0
 80022d6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e033      	b.n	800234a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d109      	bne.n	80022fe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7ff fcca 	bl	8001c84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002302:	f003 0310 	and.w	r3, r3, #16
 8002306:	2b00      	cmp	r3, #0
 8002308:	d118      	bne.n	800233c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002312:	f023 0302 	bic.w	r3, r3, #2
 8002316:	f043 0202 	orr.w	r2, r3, #2
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 fa0c 	bl	800273c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800232e:	f023 0303 	bic.w	r3, r3, #3
 8002332:	f043 0201 	orr.w	r2, r3, #1
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	641a      	str	r2, [r3, #64]	@ 0x40
 800233a:	e001      	b.n	8002340 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002348:	7bfb      	ldrb	r3, [r7, #15]
}
 800234a:	4618      	mov	r0, r3
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
	...

08002354 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800235c:	2300      	movs	r3, #0
 800235e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002366:	2b01      	cmp	r3, #1
 8002368:	d101      	bne.n	800236e <HAL_ADC_Start+0x1a>
 800236a:	2302      	movs	r3, #2
 800236c:	e0b2      	b.n	80024d4 <HAL_ADC_Start+0x180>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2201      	movs	r2, #1
 8002372:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	2b01      	cmp	r3, #1
 8002382:	d018      	beq.n	80023b6 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	689a      	ldr	r2, [r3, #8]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f042 0201 	orr.w	r2, r2, #1
 8002392:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002394:	4b52      	ldr	r3, [pc, #328]	@ (80024e0 <HAL_ADC_Start+0x18c>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a52      	ldr	r2, [pc, #328]	@ (80024e4 <HAL_ADC_Start+0x190>)
 800239a:	fba2 2303 	umull	r2, r3, r2, r3
 800239e:	0c9a      	lsrs	r2, r3, #18
 80023a0:	4613      	mov	r3, r2
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	4413      	add	r3, r2
 80023a6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80023a8:	e002      	b.n	80023b0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	3b01      	subs	r3, #1
 80023ae:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f9      	bne.n	80023aa <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d17a      	bne.n	80024ba <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80023cc:	f023 0301 	bic.w	r3, r3, #1
 80023d0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d007      	beq.n	80023f6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ea:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80023ee:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002402:	d106      	bne.n	8002412 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002408:	f023 0206 	bic.w	r2, r3, #6
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	645a      	str	r2, [r3, #68]	@ 0x44
 8002410:	e002      	b.n	8002418 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002420:	4b31      	ldr	r3, [pc, #196]	@ (80024e8 <HAL_ADC_Start+0x194>)
 8002422:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800242c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f003 031f 	and.w	r3, r3, #31
 8002436:	2b00      	cmp	r3, #0
 8002438:	d12a      	bne.n	8002490 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a2b      	ldr	r2, [pc, #172]	@ (80024ec <HAL_ADC_Start+0x198>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d015      	beq.n	8002470 <HAL_ADC_Start+0x11c>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a29      	ldr	r2, [pc, #164]	@ (80024f0 <HAL_ADC_Start+0x19c>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d105      	bne.n	800245a <HAL_ADC_Start+0x106>
 800244e:	4b26      	ldr	r3, [pc, #152]	@ (80024e8 <HAL_ADC_Start+0x194>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f003 031f 	and.w	r3, r3, #31
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00a      	beq.n	8002470 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a25      	ldr	r2, [pc, #148]	@ (80024f4 <HAL_ADC_Start+0x1a0>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d136      	bne.n	80024d2 <HAL_ADC_Start+0x17e>
 8002464:	4b20      	ldr	r3, [pc, #128]	@ (80024e8 <HAL_ADC_Start+0x194>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f003 0310 	and.w	r3, r3, #16
 800246c:	2b00      	cmp	r3, #0
 800246e:	d130      	bne.n	80024d2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d129      	bne.n	80024d2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	689a      	ldr	r2, [r3, #8]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800248c:	609a      	str	r2, [r3, #8]
 800248e:	e020      	b.n	80024d2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a15      	ldr	r2, [pc, #84]	@ (80024ec <HAL_ADC_Start+0x198>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d11b      	bne.n	80024d2 <HAL_ADC_Start+0x17e>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d114      	bne.n	80024d2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	689a      	ldr	r2, [r3, #8]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80024b6:	609a      	str	r2, [r3, #8]
 80024b8:	e00b      	b.n	80024d2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024be:	f043 0210 	orr.w	r2, r3, #16
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ca:	f043 0201 	orr.w	r2, r3, #1
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	20000000 	.word	0x20000000
 80024e4:	431bde83 	.word	0x431bde83
 80024e8:	40012300 	.word	0x40012300
 80024ec:	40012000 	.word	0x40012000
 80024f0:	40012100 	.word	0x40012100
 80024f4:	40012200 	.word	0x40012200

080024f8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002502:	2300      	movs	r3, #0
 8002504:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800250c:	2b01      	cmp	r3, #1
 800250e:	d101      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x1c>
 8002510:	2302      	movs	r3, #2
 8002512:	e105      	b.n	8002720 <HAL_ADC_ConfigChannel+0x228>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2b09      	cmp	r3, #9
 8002522:	d925      	bls.n	8002570 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68d9      	ldr	r1, [r3, #12]
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	b29b      	uxth	r3, r3
 8002530:	461a      	mov	r2, r3
 8002532:	4613      	mov	r3, r2
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	4413      	add	r3, r2
 8002538:	3b1e      	subs	r3, #30
 800253a:	2207      	movs	r2, #7
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	43da      	mvns	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	400a      	ands	r2, r1
 8002548:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68d9      	ldr	r1, [r3, #12]
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	b29b      	uxth	r3, r3
 800255a:	4618      	mov	r0, r3
 800255c:	4603      	mov	r3, r0
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	4403      	add	r3, r0
 8002562:	3b1e      	subs	r3, #30
 8002564:	409a      	lsls	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	430a      	orrs	r2, r1
 800256c:	60da      	str	r2, [r3, #12]
 800256e:	e022      	b.n	80025b6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6919      	ldr	r1, [r3, #16]
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	b29b      	uxth	r3, r3
 800257c:	461a      	mov	r2, r3
 800257e:	4613      	mov	r3, r2
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	4413      	add	r3, r2
 8002584:	2207      	movs	r2, #7
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	43da      	mvns	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	400a      	ands	r2, r1
 8002592:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6919      	ldr	r1, [r3, #16]
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	689a      	ldr	r2, [r3, #8]
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	4618      	mov	r0, r3
 80025a6:	4603      	mov	r3, r0
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	4403      	add	r3, r0
 80025ac:	409a      	lsls	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	2b06      	cmp	r3, #6
 80025bc:	d824      	bhi.n	8002608 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	4613      	mov	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4413      	add	r3, r2
 80025ce:	3b05      	subs	r3, #5
 80025d0:	221f      	movs	r2, #31
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	43da      	mvns	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	400a      	ands	r2, r1
 80025de:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	4618      	mov	r0, r3
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685a      	ldr	r2, [r3, #4]
 80025f2:	4613      	mov	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4413      	add	r3, r2
 80025f8:	3b05      	subs	r3, #5
 80025fa:	fa00 f203 	lsl.w	r2, r0, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	635a      	str	r2, [r3, #52]	@ 0x34
 8002606:	e04c      	b.n	80026a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	2b0c      	cmp	r3, #12
 800260e:	d824      	bhi.n	800265a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	4613      	mov	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	4413      	add	r3, r2
 8002620:	3b23      	subs	r3, #35	@ 0x23
 8002622:	221f      	movs	r2, #31
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	43da      	mvns	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	400a      	ands	r2, r1
 8002630:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	b29b      	uxth	r3, r3
 800263e:	4618      	mov	r0, r3
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	4613      	mov	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4413      	add	r3, r2
 800264a:	3b23      	subs	r3, #35	@ 0x23
 800264c:	fa00 f203 	lsl.w	r2, r0, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	430a      	orrs	r2, r1
 8002656:	631a      	str	r2, [r3, #48]	@ 0x30
 8002658:	e023      	b.n	80026a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685a      	ldr	r2, [r3, #4]
 8002664:	4613      	mov	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4413      	add	r3, r2
 800266a:	3b41      	subs	r3, #65	@ 0x41
 800266c:	221f      	movs	r2, #31
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	43da      	mvns	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	400a      	ands	r2, r1
 800267a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	b29b      	uxth	r3, r3
 8002688:	4618      	mov	r0, r3
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685a      	ldr	r2, [r3, #4]
 800268e:	4613      	mov	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4413      	add	r3, r2
 8002694:	3b41      	subs	r3, #65	@ 0x41
 8002696:	fa00 f203 	lsl.w	r2, r0, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	430a      	orrs	r2, r1
 80026a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026a2:	4b22      	ldr	r3, [pc, #136]	@ (800272c <HAL_ADC_ConfigChannel+0x234>)
 80026a4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a21      	ldr	r2, [pc, #132]	@ (8002730 <HAL_ADC_ConfigChannel+0x238>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d109      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x1cc>
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2b12      	cmp	r3, #18
 80026b6:	d105      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a19      	ldr	r2, [pc, #100]	@ (8002730 <HAL_ADC_ConfigChannel+0x238>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d123      	bne.n	8002716 <HAL_ADC_ConfigChannel+0x21e>
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2b10      	cmp	r3, #16
 80026d4:	d003      	beq.n	80026de <HAL_ADC_ConfigChannel+0x1e6>
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2b11      	cmp	r3, #17
 80026dc:	d11b      	bne.n	8002716 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2b10      	cmp	r3, #16
 80026f0:	d111      	bne.n	8002716 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026f2:	4b10      	ldr	r3, [pc, #64]	@ (8002734 <HAL_ADC_ConfigChannel+0x23c>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a10      	ldr	r2, [pc, #64]	@ (8002738 <HAL_ADC_ConfigChannel+0x240>)
 80026f8:	fba2 2303 	umull	r2, r3, r2, r3
 80026fc:	0c9a      	lsrs	r2, r3, #18
 80026fe:	4613      	mov	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	4413      	add	r3, r2
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002708:	e002      	b.n	8002710 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	3b01      	subs	r3, #1
 800270e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1f9      	bne.n	800270a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3714      	adds	r7, #20
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	40012300 	.word	0x40012300
 8002730:	40012000 	.word	0x40012000
 8002734:	20000000 	.word	0x20000000
 8002738:	431bde83 	.word	0x431bde83

0800273c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002744:	4b79      	ldr	r3, [pc, #484]	@ (800292c <ADC_Init+0x1f0>)
 8002746:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	431a      	orrs	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	685a      	ldr	r2, [r3, #4]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002770:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6859      	ldr	r1, [r3, #4]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	021a      	lsls	r2, r3, #8
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	430a      	orrs	r2, r1
 8002784:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	685a      	ldr	r2, [r3, #4]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002794:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6859      	ldr	r1, [r3, #4]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689a      	ldr	r2, [r3, #8]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	430a      	orrs	r2, r1
 80027a6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	689a      	ldr	r2, [r3, #8]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6899      	ldr	r1, [r3, #8]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	68da      	ldr	r2, [r3, #12]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	430a      	orrs	r2, r1
 80027c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ce:	4a58      	ldr	r2, [pc, #352]	@ (8002930 <ADC_Init+0x1f4>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d022      	beq.n	800281a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	689a      	ldr	r2, [r3, #8]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80027e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6899      	ldr	r1, [r3, #8]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	430a      	orrs	r2, r1
 80027f4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002804:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6899      	ldr	r1, [r3, #8]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	430a      	orrs	r2, r1
 8002816:	609a      	str	r2, [r3, #8]
 8002818:	e00f      	b.n	800283a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002828:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002838:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 0202 	bic.w	r2, r2, #2
 8002848:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	6899      	ldr	r1, [r3, #8]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	7e1b      	ldrb	r3, [r3, #24]
 8002854:	005a      	lsls	r2, r3, #1
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	430a      	orrs	r2, r1
 800285c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d01b      	beq.n	80028a0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002876:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	685a      	ldr	r2, [r3, #4]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002886:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6859      	ldr	r1, [r3, #4]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002892:	3b01      	subs	r3, #1
 8002894:	035a      	lsls	r2, r3, #13
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	430a      	orrs	r2, r1
 800289c:	605a      	str	r2, [r3, #4]
 800289e:	e007      	b.n	80028b0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	685a      	ldr	r2, [r3, #4]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028ae:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80028be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	69db      	ldr	r3, [r3, #28]
 80028ca:	3b01      	subs	r3, #1
 80028cc:	051a      	lsls	r2, r3, #20
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	430a      	orrs	r2, r1
 80028d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80028e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	6899      	ldr	r1, [r3, #8]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80028f2:	025a      	lsls	r2, r3, #9
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	430a      	orrs	r2, r1
 80028fa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689a      	ldr	r2, [r3, #8]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800290a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6899      	ldr	r1, [r3, #8]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	029a      	lsls	r2, r3, #10
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	430a      	orrs	r2, r1
 800291e:	609a      	str	r2, [r3, #8]
}
 8002920:	bf00      	nop
 8002922:	3714      	adds	r7, #20
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	40012300 	.word	0x40012300
 8002930:	0f000001 	.word	0x0f000001

08002934 <__NVIC_SetPriorityGrouping>:
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f003 0307 	and.w	r3, r3, #7
 8002942:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002944:	4b0c      	ldr	r3, [pc, #48]	@ (8002978 <__NVIC_SetPriorityGrouping+0x44>)
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800294a:	68ba      	ldr	r2, [r7, #8]
 800294c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002950:	4013      	ands	r3, r2
 8002952:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800295c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002960:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002964:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002966:	4a04      	ldr	r2, [pc, #16]	@ (8002978 <__NVIC_SetPriorityGrouping+0x44>)
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	60d3      	str	r3, [r2, #12]
}
 800296c:	bf00      	nop
 800296e:	3714      	adds	r7, #20
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr
 8002978:	e000ed00 	.word	0xe000ed00

0800297c <__NVIC_GetPriorityGrouping>:
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002980:	4b04      	ldr	r3, [pc, #16]	@ (8002994 <__NVIC_GetPriorityGrouping+0x18>)
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	0a1b      	lsrs	r3, r3, #8
 8002986:	f003 0307 	and.w	r3, r3, #7
}
 800298a:	4618      	mov	r0, r3
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	e000ed00 	.word	0xe000ed00

08002998 <__NVIC_EnableIRQ>:
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	4603      	mov	r3, r0
 80029a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	db0b      	blt.n	80029c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029aa:	79fb      	ldrb	r3, [r7, #7]
 80029ac:	f003 021f 	and.w	r2, r3, #31
 80029b0:	4907      	ldr	r1, [pc, #28]	@ (80029d0 <__NVIC_EnableIRQ+0x38>)
 80029b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b6:	095b      	lsrs	r3, r3, #5
 80029b8:	2001      	movs	r0, #1
 80029ba:	fa00 f202 	lsl.w	r2, r0, r2
 80029be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	e000e100 	.word	0xe000e100

080029d4 <__NVIC_SetPriority>:
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	4603      	mov	r3, r0
 80029dc:	6039      	str	r1, [r7, #0]
 80029de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	db0a      	blt.n	80029fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	b2da      	uxtb	r2, r3
 80029ec:	490c      	ldr	r1, [pc, #48]	@ (8002a20 <__NVIC_SetPriority+0x4c>)
 80029ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f2:	0112      	lsls	r2, r2, #4
 80029f4:	b2d2      	uxtb	r2, r2
 80029f6:	440b      	add	r3, r1
 80029f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80029fc:	e00a      	b.n	8002a14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	b2da      	uxtb	r2, r3
 8002a02:	4908      	ldr	r1, [pc, #32]	@ (8002a24 <__NVIC_SetPriority+0x50>)
 8002a04:	79fb      	ldrb	r3, [r7, #7]
 8002a06:	f003 030f 	and.w	r3, r3, #15
 8002a0a:	3b04      	subs	r3, #4
 8002a0c:	0112      	lsls	r2, r2, #4
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	440b      	add	r3, r1
 8002a12:	761a      	strb	r2, [r3, #24]
}
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	e000e100 	.word	0xe000e100
 8002a24:	e000ed00 	.word	0xe000ed00

08002a28 <NVIC_EncodePriority>:
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b089      	sub	sp, #36	@ 0x24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	f1c3 0307 	rsb	r3, r3, #7
 8002a42:	2b04      	cmp	r3, #4
 8002a44:	bf28      	it	cs
 8002a46:	2304      	movcs	r3, #4
 8002a48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	2b06      	cmp	r3, #6
 8002a50:	d902      	bls.n	8002a58 <NVIC_EncodePriority+0x30>
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	3b03      	subs	r3, #3
 8002a56:	e000      	b.n	8002a5a <NVIC_EncodePriority+0x32>
 8002a58:	2300      	movs	r3, #0
 8002a5a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	fa02 f303 	lsl.w	r3, r2, r3
 8002a66:	43da      	mvns	r2, r3
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	401a      	ands	r2, r3
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a70:	f04f 31ff 	mov.w	r1, #4294967295
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7a:	43d9      	mvns	r1, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a80:	4313      	orrs	r3, r2
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3724      	adds	r7, #36	@ 0x24
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
	...

08002a90 <SysTick_Config>:
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002aa0:	d301      	bcc.n	8002aa6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e00f      	b.n	8002ac6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002aa6:	4a0a      	ldr	r2, [pc, #40]	@ (8002ad0 <SysTick_Config+0x40>)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002aae:	210f      	movs	r1, #15
 8002ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ab4:	f7ff ff8e 	bl	80029d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ab8:	4b05      	ldr	r3, [pc, #20]	@ (8002ad0 <SysTick_Config+0x40>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002abe:	4b04      	ldr	r3, [pc, #16]	@ (8002ad0 <SysTick_Config+0x40>)
 8002ac0:	2207      	movs	r2, #7
 8002ac2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	e000e010 	.word	0xe000e010

08002ad4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f7ff ff29 	bl	8002934 <__NVIC_SetPriorityGrouping>
}
 8002ae2:	bf00      	nop
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b086      	sub	sp, #24
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	4603      	mov	r3, r0
 8002af2:	60b9      	str	r1, [r7, #8]
 8002af4:	607a      	str	r2, [r7, #4]
 8002af6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002af8:	2300      	movs	r3, #0
 8002afa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002afc:	f7ff ff3e 	bl	800297c <__NVIC_GetPriorityGrouping>
 8002b00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	68b9      	ldr	r1, [r7, #8]
 8002b06:	6978      	ldr	r0, [r7, #20]
 8002b08:	f7ff ff8e 	bl	8002a28 <NVIC_EncodePriority>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b12:	4611      	mov	r1, r2
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff ff5d 	bl	80029d4 <__NVIC_SetPriority>
}
 8002b1a:	bf00      	nop
 8002b1c:	3718      	adds	r7, #24
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b082      	sub	sp, #8
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	4603      	mov	r3, r0
 8002b2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff ff31 	bl	8002998 <__NVIC_EnableIRQ>
}
 8002b36:	bf00      	nop
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b082      	sub	sp, #8
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7ff ffa2 	bl	8002a90 <SysTick_Config>
 8002b4c:	4603      	mov	r3, r0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b082      	sub	sp, #8
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d101      	bne.n	8002b68 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e014      	b.n	8002b92 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	791b      	ldrb	r3, [r3, #4]
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d105      	bne.n	8002b7e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f7ff f8c7 	bl	8001d0c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2202      	movs	r2, #2
 8002b82:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
 8002ba2:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e046      	b.n	8002c3c <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	795b      	ldrb	r3, [r3, #5]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d101      	bne.n	8002bba <HAL_DAC_Start+0x20>
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	e040      	b.n	8002c3c <HAL_DAC_Start+0xa2>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	6819      	ldr	r1, [r3, #0]
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	f003 0310 	and.w	r3, r3, #16
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	409a      	lsls	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d10f      	bne.n	8002c04 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8002bee:	2b3c      	cmp	r3, #60	@ 0x3c
 8002bf0:	d11d      	bne.n	8002c2e <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	685a      	ldr	r2, [r3, #4]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f042 0201 	orr.w	r2, r2, #1
 8002c00:	605a      	str	r2, [r3, #4]
 8002c02:	e014      	b.n	8002c2e <HAL_DAC_Start+0x94>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	f003 0310 	and.w	r3, r3, #16
 8002c14:	213c      	movs	r1, #60	@ 0x3c
 8002c16:	fa01 f303 	lsl.w	r3, r1, r3
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d107      	bne.n	8002c2e <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f042 0202 	orr.w	r2, r2, #2
 8002c2c:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2201      	movs	r2, #1
 8002c32:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b087      	sub	sp, #28
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]
 8002c54:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002c56:	2300      	movs	r3, #0
 8002c58:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d101      	bne.n	8002c64 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e015      	b.n	8002c90 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d105      	bne.n	8002c7c <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4413      	add	r3, r2
 8002c76:	3308      	adds	r3, #8
 8002c78:	617b      	str	r3, [r7, #20]
 8002c7a:	e004      	b.n	8002c86 <HAL_DAC_SetValue+0x3e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002c7c:	697a      	ldr	r2, [r7, #20]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4413      	add	r3, r2
 8002c82:	3314      	adds	r3, #20
 8002c84:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	461a      	mov	r2, r3
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	371c      	adds	r7, #28
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b089      	sub	sp, #36	@ 0x24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d002      	beq.n	8002cb8 <HAL_DAC_ConfigChannel+0x1c>
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d101      	bne.n	8002cbc <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e042      	b.n	8002d42 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	795b      	ldrb	r3, [r3, #5]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d101      	bne.n	8002cc8 <HAL_DAC_ConfigChannel+0x2c>
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	e03c      	b.n	8002d42 <HAL_DAC_ConfigChannel+0xa6>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f003 0310 	and.w	r3, r3, #16
 8002ce2:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002ce6:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8002cea:	43db      	mvns	r3, r3
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f003 0310 	and.w	r3, r3, #16
 8002d04:	697a      	ldr	r2, [r7, #20]
 8002d06:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	6819      	ldr	r1, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f003 0310 	and.w	r3, r3, #16
 8002d24:	22c0      	movs	r2, #192	@ 0xc0
 8002d26:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2a:	43da      	mvns	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	400a      	ands	r2, r1
 8002d32:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2201      	movs	r2, #1
 8002d38:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002d40:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3724      	adds	r7, #36	@ 0x24
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
	...

08002d50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d5c:	f7ff fa86 	bl	800226c <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d101      	bne.n	8002d6c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e099      	b.n	8002ea0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2202      	movs	r2, #2
 8002d70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f022 0201 	bic.w	r2, r2, #1
 8002d8a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d8c:	e00f      	b.n	8002dae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d8e:	f7ff fa6d 	bl	800226c <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b05      	cmp	r3, #5
 8002d9a:	d908      	bls.n	8002dae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2220      	movs	r2, #32
 8002da0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2203      	movs	r2, #3
 8002da6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e078      	b.n	8002ea0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1e8      	bne.n	8002d8e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002dc4:	697a      	ldr	r2, [r7, #20]
 8002dc6:	4b38      	ldr	r3, [pc, #224]	@ (8002ea8 <HAL_DMA_Init+0x158>)
 8002dc8:	4013      	ands	r3, r2
 8002dca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685a      	ldr	r2, [r3, #4]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dda:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002de6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002df2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dfa:	697a      	ldr	r2, [r7, #20]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e04:	2b04      	cmp	r3, #4
 8002e06:	d107      	bne.n	8002e18 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e10:	4313      	orrs	r3, r2
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	697a      	ldr	r2, [r7, #20]
 8002e1e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	f023 0307 	bic.w	r3, r3, #7
 8002e2e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3e:	2b04      	cmp	r3, #4
 8002e40:	d117      	bne.n	8002e72 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00e      	beq.n	8002e72 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 fa6f 	bl	8003338 <DMA_CheckFifoParam>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d008      	beq.n	8002e72 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2240      	movs	r2, #64	@ 0x40
 8002e64:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e016      	b.n	8002ea0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 fa26 	bl	80032cc <DMA_CalcBaseAndBitshift>
 8002e80:	4603      	mov	r3, r0
 8002e82:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e88:	223f      	movs	r2, #63	@ 0x3f
 8002e8a:	409a      	lsls	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3718      	adds	r7, #24
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	f010803f 	.word	0xf010803f

08002eac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
 8002eb8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ec2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d101      	bne.n	8002ed2 <HAL_DMA_Start_IT+0x26>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	e040      	b.n	8002f54 <HAL_DMA_Start_IT+0xa8>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d12f      	bne.n	8002f46 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2202      	movs	r2, #2
 8002eea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	68b9      	ldr	r1, [r7, #8]
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	f000 f9b8 	bl	8003270 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f04:	223f      	movs	r2, #63	@ 0x3f
 8002f06:	409a      	lsls	r2, r3
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f042 0216 	orr.w	r2, r2, #22
 8002f1a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d007      	beq.n	8002f34 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f042 0208 	orr.w	r2, r2, #8
 8002f32:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f042 0201 	orr.w	r2, r2, #1
 8002f42:	601a      	str	r2, [r3, #0]
 8002f44:	e005      	b.n	8002f52 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002f4e:	2302      	movs	r3, #2
 8002f50:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002f52:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3718      	adds	r7, #24
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002f64:	2300      	movs	r3, #0
 8002f66:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f68:	4b8e      	ldr	r3, [pc, #568]	@ (80031a4 <HAL_DMA_IRQHandler+0x248>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a8e      	ldr	r2, [pc, #568]	@ (80031a8 <HAL_DMA_IRQHandler+0x24c>)
 8002f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f72:	0a9b      	lsrs	r3, r3, #10
 8002f74:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f7a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f86:	2208      	movs	r2, #8
 8002f88:	409a      	lsls	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d01a      	beq.n	8002fc8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0304 	and.w	r3, r3, #4
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d013      	beq.n	8002fc8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 0204 	bic.w	r2, r2, #4
 8002fae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb4:	2208      	movs	r2, #8
 8002fb6:	409a      	lsls	r2, r3
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fc0:	f043 0201 	orr.w	r2, r3, #1
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fcc:	2201      	movs	r2, #1
 8002fce:	409a      	lsls	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d012      	beq.n	8002ffe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00b      	beq.n	8002ffe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fea:	2201      	movs	r2, #1
 8002fec:	409a      	lsls	r2, r3
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ff6:	f043 0202 	orr.w	r2, r3, #2
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003002:	2204      	movs	r2, #4
 8003004:	409a      	lsls	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	4013      	ands	r3, r2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d012      	beq.n	8003034 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00b      	beq.n	8003034 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003020:	2204      	movs	r2, #4
 8003022:	409a      	lsls	r2, r3
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800302c:	f043 0204 	orr.w	r2, r3, #4
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003038:	2210      	movs	r2, #16
 800303a:	409a      	lsls	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	4013      	ands	r3, r2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d043      	beq.n	80030cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0308 	and.w	r3, r3, #8
 800304e:	2b00      	cmp	r3, #0
 8003050:	d03c      	beq.n	80030cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003056:	2210      	movs	r2, #16
 8003058:	409a      	lsls	r2, r3
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d018      	beq.n	800309e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d108      	bne.n	800308c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307e:	2b00      	cmp	r3, #0
 8003080:	d024      	beq.n	80030cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	4798      	blx	r3
 800308a:	e01f      	b.n	80030cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003090:	2b00      	cmp	r3, #0
 8003092:	d01b      	beq.n	80030cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	4798      	blx	r3
 800309c:	e016      	b.n	80030cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d107      	bne.n	80030bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f022 0208 	bic.w	r2, r2, #8
 80030ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d003      	beq.n	80030cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030d0:	2220      	movs	r2, #32
 80030d2:	409a      	lsls	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	4013      	ands	r3, r2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f000 808f 	beq.w	80031fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0310 	and.w	r3, r3, #16
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f000 8087 	beq.w	80031fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030f2:	2220      	movs	r2, #32
 80030f4:	409a      	lsls	r2, r3
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b05      	cmp	r3, #5
 8003104:	d136      	bne.n	8003174 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f022 0216 	bic.w	r2, r2, #22
 8003114:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	695a      	ldr	r2, [r3, #20]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003124:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800312a:	2b00      	cmp	r3, #0
 800312c:	d103      	bne.n	8003136 <HAL_DMA_IRQHandler+0x1da>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003132:	2b00      	cmp	r3, #0
 8003134:	d007      	beq.n	8003146 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f022 0208 	bic.w	r2, r2, #8
 8003144:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800314a:	223f      	movs	r2, #63	@ 0x3f
 800314c:	409a      	lsls	r2, r3
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2201      	movs	r2, #1
 8003156:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003166:	2b00      	cmp	r3, #0
 8003168:	d07e      	beq.n	8003268 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	4798      	blx	r3
        }
        return;
 8003172:	e079      	b.n	8003268 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d01d      	beq.n	80031be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10d      	bne.n	80031ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003194:	2b00      	cmp	r3, #0
 8003196:	d031      	beq.n	80031fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	4798      	blx	r3
 80031a0:	e02c      	b.n	80031fc <HAL_DMA_IRQHandler+0x2a0>
 80031a2:	bf00      	nop
 80031a4:	20000000 	.word	0x20000000
 80031a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d023      	beq.n	80031fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	4798      	blx	r3
 80031bc:	e01e      	b.n	80031fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d10f      	bne.n	80031ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f022 0210 	bic.w	r2, r2, #16
 80031da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d003      	beq.n	80031fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003200:	2b00      	cmp	r3, #0
 8003202:	d032      	beq.n	800326a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b00      	cmp	r3, #0
 800320e:	d022      	beq.n	8003256 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2205      	movs	r2, #5
 8003214:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 0201 	bic.w	r2, r2, #1
 8003226:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	3301      	adds	r3, #1
 800322c:	60bb      	str	r3, [r7, #8]
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	429a      	cmp	r2, r3
 8003232:	d307      	bcc.n	8003244 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1f2      	bne.n	8003228 <HAL_DMA_IRQHandler+0x2cc>
 8003242:	e000      	b.n	8003246 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003244:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800325a:	2b00      	cmp	r3, #0
 800325c:	d005      	beq.n	800326a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	4798      	blx	r3
 8003266:	e000      	b.n	800326a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003268:	bf00      	nop
    }
  }
}
 800326a:	3718      	adds	r7, #24
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
 800327c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800328c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	2b40      	cmp	r3, #64	@ 0x40
 800329c:	d108      	bne.n	80032b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68ba      	ldr	r2, [r7, #8]
 80032ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80032ae:	e007      	b.n	80032c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68ba      	ldr	r2, [r7, #8]
 80032b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	60da      	str	r2, [r3, #12]
}
 80032c0:	bf00      	nop
 80032c2:	3714      	adds	r7, #20
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	3b10      	subs	r3, #16
 80032dc:	4a14      	ldr	r2, [pc, #80]	@ (8003330 <DMA_CalcBaseAndBitshift+0x64>)
 80032de:	fba2 2303 	umull	r2, r3, r2, r3
 80032e2:	091b      	lsrs	r3, r3, #4
 80032e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80032e6:	4a13      	ldr	r2, [pc, #76]	@ (8003334 <DMA_CalcBaseAndBitshift+0x68>)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4413      	add	r3, r2
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	461a      	mov	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2b03      	cmp	r3, #3
 80032f8:	d909      	bls.n	800330e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003302:	f023 0303 	bic.w	r3, r3, #3
 8003306:	1d1a      	adds	r2, r3, #4
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	659a      	str	r2, [r3, #88]	@ 0x58
 800330c:	e007      	b.n	800331e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003316:	f023 0303 	bic.w	r3, r3, #3
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003322:	4618      	mov	r0, r3
 8003324:	3714      	adds	r7, #20
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	aaaaaaab 	.word	0xaaaaaaab
 8003334:	0800c6f0 	.word	0x0800c6f0

08003338 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003340:	2300      	movs	r3, #0
 8003342:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003348:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d11f      	bne.n	8003392 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	2b03      	cmp	r3, #3
 8003356:	d856      	bhi.n	8003406 <DMA_CheckFifoParam+0xce>
 8003358:	a201      	add	r2, pc, #4	@ (adr r2, 8003360 <DMA_CheckFifoParam+0x28>)
 800335a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800335e:	bf00      	nop
 8003360:	08003371 	.word	0x08003371
 8003364:	08003383 	.word	0x08003383
 8003368:	08003371 	.word	0x08003371
 800336c:	08003407 	.word	0x08003407
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003374:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d046      	beq.n	800340a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003380:	e043      	b.n	800340a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003386:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800338a:	d140      	bne.n	800340e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003390:	e03d      	b.n	800340e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800339a:	d121      	bne.n	80033e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	2b03      	cmp	r3, #3
 80033a0:	d837      	bhi.n	8003412 <DMA_CheckFifoParam+0xda>
 80033a2:	a201      	add	r2, pc, #4	@ (adr r2, 80033a8 <DMA_CheckFifoParam+0x70>)
 80033a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a8:	080033b9 	.word	0x080033b9
 80033ac:	080033bf 	.word	0x080033bf
 80033b0:	080033b9 	.word	0x080033b9
 80033b4:	080033d1 	.word	0x080033d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	73fb      	strb	r3, [r7, #15]
      break;
 80033bc:	e030      	b.n	8003420 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d025      	beq.n	8003416 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033ce:	e022      	b.n	8003416 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033d4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80033d8:	d11f      	bne.n	800341a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80033de:	e01c      	b.n	800341a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d903      	bls.n	80033ee <DMA_CheckFifoParam+0xb6>
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	2b03      	cmp	r3, #3
 80033ea:	d003      	beq.n	80033f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80033ec:	e018      	b.n	8003420 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	73fb      	strb	r3, [r7, #15]
      break;
 80033f2:	e015      	b.n	8003420 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00e      	beq.n	800341e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	73fb      	strb	r3, [r7, #15]
      break;
 8003404:	e00b      	b.n	800341e <DMA_CheckFifoParam+0xe6>
      break;
 8003406:	bf00      	nop
 8003408:	e00a      	b.n	8003420 <DMA_CheckFifoParam+0xe8>
      break;
 800340a:	bf00      	nop
 800340c:	e008      	b.n	8003420 <DMA_CheckFifoParam+0xe8>
      break;
 800340e:	bf00      	nop
 8003410:	e006      	b.n	8003420 <DMA_CheckFifoParam+0xe8>
      break;
 8003412:	bf00      	nop
 8003414:	e004      	b.n	8003420 <DMA_CheckFifoParam+0xe8>
      break;
 8003416:	bf00      	nop
 8003418:	e002      	b.n	8003420 <DMA_CheckFifoParam+0xe8>
      break;   
 800341a:	bf00      	nop
 800341c:	e000      	b.n	8003420 <DMA_CheckFifoParam+0xe8>
      break;
 800341e:	bf00      	nop
    }
  } 
  
  return status; 
 8003420:	7bfb      	ldrb	r3, [r7, #15]
}
 8003422:	4618      	mov	r0, r3
 8003424:	3714      	adds	r7, #20
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop

08003430 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003430:	b480      	push	{r7}
 8003432:	b089      	sub	sp, #36	@ 0x24
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800343a:	2300      	movs	r3, #0
 800343c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800343e:	2300      	movs	r3, #0
 8003440:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003442:	2300      	movs	r3, #0
 8003444:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003446:	2300      	movs	r3, #0
 8003448:	61fb      	str	r3, [r7, #28]
 800344a:	e16b      	b.n	8003724 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800344c:	2201      	movs	r2, #1
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	fa02 f303 	lsl.w	r3, r2, r3
 8003454:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	4013      	ands	r3, r2
 800345e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003460:	693a      	ldr	r2, [r7, #16]
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	429a      	cmp	r2, r3
 8003466:	f040 815a 	bne.w	800371e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f003 0303 	and.w	r3, r3, #3
 8003472:	2b01      	cmp	r3, #1
 8003474:	d005      	beq.n	8003482 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800347e:	2b02      	cmp	r3, #2
 8003480:	d130      	bne.n	80034e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	2203      	movs	r2, #3
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	43db      	mvns	r3, r3
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	4013      	ands	r3, r2
 8003498:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	68da      	ldr	r2, [r3, #12]
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	fa02 f303 	lsl.w	r3, r2, r3
 80034a6:	69ba      	ldr	r2, [r7, #24]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034b8:	2201      	movs	r2, #1
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	43db      	mvns	r3, r3
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	4013      	ands	r3, r2
 80034c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	091b      	lsrs	r3, r3, #4
 80034ce:	f003 0201 	and.w	r2, r3, #1
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	4313      	orrs	r3, r2
 80034dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f003 0303 	and.w	r3, r3, #3
 80034ec:	2b03      	cmp	r3, #3
 80034ee:	d017      	beq.n	8003520 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	2203      	movs	r2, #3
 80034fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003500:	43db      	mvns	r3, r3
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	4013      	ands	r3, r2
 8003506:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	4313      	orrs	r3, r2
 8003518:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f003 0303 	and.w	r3, r3, #3
 8003528:	2b02      	cmp	r3, #2
 800352a:	d123      	bne.n	8003574 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	08da      	lsrs	r2, r3, #3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3208      	adds	r2, #8
 8003534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003538:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	f003 0307 	and.w	r3, r3, #7
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	220f      	movs	r2, #15
 8003544:	fa02 f303 	lsl.w	r3, r2, r3
 8003548:	43db      	mvns	r3, r3
 800354a:	69ba      	ldr	r2, [r7, #24]
 800354c:	4013      	ands	r3, r2
 800354e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	691a      	ldr	r2, [r3, #16]
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	f003 0307 	and.w	r3, r3, #7
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	fa02 f303 	lsl.w	r3, r2, r3
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	4313      	orrs	r3, r2
 8003564:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	08da      	lsrs	r2, r3, #3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	3208      	adds	r2, #8
 800356e:	69b9      	ldr	r1, [r7, #24]
 8003570:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	2203      	movs	r2, #3
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	43db      	mvns	r3, r3
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	4013      	ands	r3, r2
 800358a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f003 0203 	and.w	r2, r3, #3
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	fa02 f303 	lsl.w	r3, r2, r3
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	4313      	orrs	r3, r2
 80035a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f000 80b4 	beq.w	800371e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035b6:	2300      	movs	r3, #0
 80035b8:	60fb      	str	r3, [r7, #12]
 80035ba:	4b60      	ldr	r3, [pc, #384]	@ (800373c <HAL_GPIO_Init+0x30c>)
 80035bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035be:	4a5f      	ldr	r2, [pc, #380]	@ (800373c <HAL_GPIO_Init+0x30c>)
 80035c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80035c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80035c6:	4b5d      	ldr	r3, [pc, #372]	@ (800373c <HAL_GPIO_Init+0x30c>)
 80035c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035ce:	60fb      	str	r3, [r7, #12]
 80035d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035d2:	4a5b      	ldr	r2, [pc, #364]	@ (8003740 <HAL_GPIO_Init+0x310>)
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	089b      	lsrs	r3, r3, #2
 80035d8:	3302      	adds	r3, #2
 80035da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	f003 0303 	and.w	r3, r3, #3
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	220f      	movs	r2, #15
 80035ea:	fa02 f303 	lsl.w	r3, r2, r3
 80035ee:	43db      	mvns	r3, r3
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	4013      	ands	r3, r2
 80035f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a52      	ldr	r2, [pc, #328]	@ (8003744 <HAL_GPIO_Init+0x314>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d02b      	beq.n	8003656 <HAL_GPIO_Init+0x226>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a51      	ldr	r2, [pc, #324]	@ (8003748 <HAL_GPIO_Init+0x318>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d025      	beq.n	8003652 <HAL_GPIO_Init+0x222>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a50      	ldr	r2, [pc, #320]	@ (800374c <HAL_GPIO_Init+0x31c>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d01f      	beq.n	800364e <HAL_GPIO_Init+0x21e>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a4f      	ldr	r2, [pc, #316]	@ (8003750 <HAL_GPIO_Init+0x320>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d019      	beq.n	800364a <HAL_GPIO_Init+0x21a>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a4e      	ldr	r2, [pc, #312]	@ (8003754 <HAL_GPIO_Init+0x324>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d013      	beq.n	8003646 <HAL_GPIO_Init+0x216>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a4d      	ldr	r2, [pc, #308]	@ (8003758 <HAL_GPIO_Init+0x328>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d00d      	beq.n	8003642 <HAL_GPIO_Init+0x212>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a4c      	ldr	r2, [pc, #304]	@ (800375c <HAL_GPIO_Init+0x32c>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d007      	beq.n	800363e <HAL_GPIO_Init+0x20e>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a4b      	ldr	r2, [pc, #300]	@ (8003760 <HAL_GPIO_Init+0x330>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d101      	bne.n	800363a <HAL_GPIO_Init+0x20a>
 8003636:	2307      	movs	r3, #7
 8003638:	e00e      	b.n	8003658 <HAL_GPIO_Init+0x228>
 800363a:	2308      	movs	r3, #8
 800363c:	e00c      	b.n	8003658 <HAL_GPIO_Init+0x228>
 800363e:	2306      	movs	r3, #6
 8003640:	e00a      	b.n	8003658 <HAL_GPIO_Init+0x228>
 8003642:	2305      	movs	r3, #5
 8003644:	e008      	b.n	8003658 <HAL_GPIO_Init+0x228>
 8003646:	2304      	movs	r3, #4
 8003648:	e006      	b.n	8003658 <HAL_GPIO_Init+0x228>
 800364a:	2303      	movs	r3, #3
 800364c:	e004      	b.n	8003658 <HAL_GPIO_Init+0x228>
 800364e:	2302      	movs	r3, #2
 8003650:	e002      	b.n	8003658 <HAL_GPIO_Init+0x228>
 8003652:	2301      	movs	r3, #1
 8003654:	e000      	b.n	8003658 <HAL_GPIO_Init+0x228>
 8003656:	2300      	movs	r3, #0
 8003658:	69fa      	ldr	r2, [r7, #28]
 800365a:	f002 0203 	and.w	r2, r2, #3
 800365e:	0092      	lsls	r2, r2, #2
 8003660:	4093      	lsls	r3, r2
 8003662:	69ba      	ldr	r2, [r7, #24]
 8003664:	4313      	orrs	r3, r2
 8003666:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003668:	4935      	ldr	r1, [pc, #212]	@ (8003740 <HAL_GPIO_Init+0x310>)
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	089b      	lsrs	r3, r3, #2
 800366e:	3302      	adds	r3, #2
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003676:	4b3b      	ldr	r3, [pc, #236]	@ (8003764 <HAL_GPIO_Init+0x334>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	43db      	mvns	r3, r3
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	4013      	ands	r3, r2
 8003684:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d003      	beq.n	800369a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003692:	69ba      	ldr	r2, [r7, #24]
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	4313      	orrs	r3, r2
 8003698:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800369a:	4a32      	ldr	r2, [pc, #200]	@ (8003764 <HAL_GPIO_Init+0x334>)
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036a0:	4b30      	ldr	r3, [pc, #192]	@ (8003764 <HAL_GPIO_Init+0x334>)
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	43db      	mvns	r3, r3
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	4013      	ands	r3, r2
 80036ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d003      	beq.n	80036c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036c4:	4a27      	ldr	r2, [pc, #156]	@ (8003764 <HAL_GPIO_Init+0x334>)
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80036ca:	4b26      	ldr	r3, [pc, #152]	@ (8003764 <HAL_GPIO_Init+0x334>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	43db      	mvns	r3, r3
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	4013      	ands	r3, r2
 80036d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d003      	beq.n	80036ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80036e6:	69ba      	ldr	r2, [r7, #24]
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036ee:	4a1d      	ldr	r2, [pc, #116]	@ (8003764 <HAL_GPIO_Init+0x334>)
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036f4:	4b1b      	ldr	r3, [pc, #108]	@ (8003764 <HAL_GPIO_Init+0x334>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	43db      	mvns	r3, r3
 80036fe:	69ba      	ldr	r2, [r7, #24]
 8003700:	4013      	ands	r3, r2
 8003702:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d003      	beq.n	8003718 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	4313      	orrs	r3, r2
 8003716:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003718:	4a12      	ldr	r2, [pc, #72]	@ (8003764 <HAL_GPIO_Init+0x334>)
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	3301      	adds	r3, #1
 8003722:	61fb      	str	r3, [r7, #28]
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	2b0f      	cmp	r3, #15
 8003728:	f67f ae90 	bls.w	800344c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800372c:	bf00      	nop
 800372e:	bf00      	nop
 8003730:	3724      	adds	r7, #36	@ 0x24
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	40023800 	.word	0x40023800
 8003740:	40013800 	.word	0x40013800
 8003744:	40020000 	.word	0x40020000
 8003748:	40020400 	.word	0x40020400
 800374c:	40020800 	.word	0x40020800
 8003750:	40020c00 	.word	0x40020c00
 8003754:	40021000 	.word	0x40021000
 8003758:	40021400 	.word	0x40021400
 800375c:	40021800 	.word	0x40021800
 8003760:	40021c00 	.word	0x40021c00
 8003764:	40013c00 	.word	0x40013c00

08003768 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	460b      	mov	r3, r1
 8003772:	807b      	strh	r3, [r7, #2]
 8003774:	4613      	mov	r3, r2
 8003776:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003778:	787b      	ldrb	r3, [r7, #1]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800377e:	887a      	ldrh	r2, [r7, #2]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003784:	e003      	b.n	800378e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003786:	887b      	ldrh	r3, [r7, #2]
 8003788:	041a      	lsls	r2, r3, #16
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	619a      	str	r2, [r3, #24]
}
 800378e:	bf00      	nop
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr

0800379a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b086      	sub	sp, #24
 800379e:	af02      	add	r7, sp, #8
 80037a0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d101      	bne.n	80037ac <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e059      	b.n	8003860 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d106      	bne.n	80037cc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f007 f814 	bl	800a7f4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2203      	movs	r2, #3
 80037d0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037da:	d102      	bne.n	80037e2 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f003 fe2d 	bl	8007446 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6818      	ldr	r0, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	7c1a      	ldrb	r2, [r3, #16]
 80037f4:	f88d 2000 	strb.w	r2, [sp]
 80037f8:	3304      	adds	r3, #4
 80037fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037fc:	f003 fdae 	bl	800735c <USB_CoreInit>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d005      	beq.n	8003812 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2202      	movs	r2, #2
 800380a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e026      	b.n	8003860 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2101      	movs	r1, #1
 8003818:	4618      	mov	r0, r3
 800381a:	f003 fe25 	bl	8007468 <USB_SetCurrentMode>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d005      	beq.n	8003830 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2202      	movs	r2, #2
 8003828:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e017      	b.n	8003860 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6818      	ldr	r0, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	7c1a      	ldrb	r2, [r3, #16]
 8003838:	f88d 2000 	strb.w	r2, [sp]
 800383c:	3304      	adds	r3, #4
 800383e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003840:	f003 ffc8 	bl	80077d4 <USB_HostInit>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d005      	beq.n	8003856 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2202      	movs	r2, #2
 800384e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e004      	b.n	8003860 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8003868:	b590      	push	{r4, r7, lr}
 800386a:	b08b      	sub	sp, #44	@ 0x2c
 800386c:	af04      	add	r7, sp, #16
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	4608      	mov	r0, r1
 8003872:	4611      	mov	r1, r2
 8003874:	461a      	mov	r2, r3
 8003876:	4603      	mov	r3, r0
 8003878:	70fb      	strb	r3, [r7, #3]
 800387a:	460b      	mov	r3, r1
 800387c:	70bb      	strb	r3, [r7, #2]
 800387e:	4613      	mov	r3, r2
 8003880:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8003882:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003884:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800388c:	2b01      	cmp	r3, #1
 800388e:	d101      	bne.n	8003894 <HAL_HCD_HC_Init+0x2c>
 8003890:	2302      	movs	r3, #2
 8003892:	e09d      	b.n	80039d0 <HAL_HCD_HC_Init+0x168>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800389c:	78fa      	ldrb	r2, [r7, #3]
 800389e:	6879      	ldr	r1, [r7, #4]
 80038a0:	4613      	mov	r3, r2
 80038a2:	011b      	lsls	r3, r3, #4
 80038a4:	1a9b      	subs	r3, r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	440b      	add	r3, r1
 80038aa:	3319      	adds	r3, #25
 80038ac:	2200      	movs	r2, #0
 80038ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80038b0:	78fa      	ldrb	r2, [r7, #3]
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	4613      	mov	r3, r2
 80038b6:	011b      	lsls	r3, r3, #4
 80038b8:	1a9b      	subs	r3, r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	440b      	add	r3, r1
 80038be:	3314      	adds	r3, #20
 80038c0:	787a      	ldrb	r2, [r7, #1]
 80038c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80038c4:	78fa      	ldrb	r2, [r7, #3]
 80038c6:	6879      	ldr	r1, [r7, #4]
 80038c8:	4613      	mov	r3, r2
 80038ca:	011b      	lsls	r3, r3, #4
 80038cc:	1a9b      	subs	r3, r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	440b      	add	r3, r1
 80038d2:	3315      	adds	r3, #21
 80038d4:	78fa      	ldrb	r2, [r7, #3]
 80038d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80038d8:	78fa      	ldrb	r2, [r7, #3]
 80038da:	6879      	ldr	r1, [r7, #4]
 80038dc:	4613      	mov	r3, r2
 80038de:	011b      	lsls	r3, r3, #4
 80038e0:	1a9b      	subs	r3, r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	440b      	add	r3, r1
 80038e6:	3326      	adds	r3, #38	@ 0x26
 80038e8:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80038ec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80038ee:	78fa      	ldrb	r2, [r7, #3]
 80038f0:	78bb      	ldrb	r3, [r7, #2]
 80038f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038f6:	b2d8      	uxtb	r0, r3
 80038f8:	6879      	ldr	r1, [r7, #4]
 80038fa:	4613      	mov	r3, r2
 80038fc:	011b      	lsls	r3, r3, #4
 80038fe:	1a9b      	subs	r3, r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	440b      	add	r3, r1
 8003904:	3316      	adds	r3, #22
 8003906:	4602      	mov	r2, r0
 8003908:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800390a:	78fb      	ldrb	r3, [r7, #3]
 800390c:	4619      	mov	r1, r3
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 fbc8 	bl	80040a4 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8003914:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003918:	2b00      	cmp	r3, #0
 800391a:	da0a      	bge.n	8003932 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800391c:	78fa      	ldrb	r2, [r7, #3]
 800391e:	6879      	ldr	r1, [r7, #4]
 8003920:	4613      	mov	r3, r2
 8003922:	011b      	lsls	r3, r3, #4
 8003924:	1a9b      	subs	r3, r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	440b      	add	r3, r1
 800392a:	3317      	adds	r3, #23
 800392c:	2201      	movs	r2, #1
 800392e:	701a      	strb	r2, [r3, #0]
 8003930:	e009      	b.n	8003946 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003932:	78fa      	ldrb	r2, [r7, #3]
 8003934:	6879      	ldr	r1, [r7, #4]
 8003936:	4613      	mov	r3, r2
 8003938:	011b      	lsls	r3, r3, #4
 800393a:	1a9b      	subs	r3, r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	440b      	add	r3, r1
 8003940:	3317      	adds	r3, #23
 8003942:	2200      	movs	r2, #0
 8003944:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4618      	mov	r0, r3
 800394c:	f004 f8a6 	bl	8007a9c <USB_GetHostSpeed>
 8003950:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8003952:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003956:	2b01      	cmp	r3, #1
 8003958:	d10b      	bne.n	8003972 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800395a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800395e:	2b01      	cmp	r3, #1
 8003960:	d107      	bne.n	8003972 <HAL_HCD_HC_Init+0x10a>
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d104      	bne.n	8003972 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	2bbc      	cmp	r3, #188	@ 0xbc
 800396c:	d901      	bls.n	8003972 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800396e:	23bc      	movs	r3, #188	@ 0xbc
 8003970:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8003972:	78fa      	ldrb	r2, [r7, #3]
 8003974:	6879      	ldr	r1, [r7, #4]
 8003976:	4613      	mov	r3, r2
 8003978:	011b      	lsls	r3, r3, #4
 800397a:	1a9b      	subs	r3, r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	440b      	add	r3, r1
 8003980:	3318      	adds	r3, #24
 8003982:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8003986:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8003988:	78fa      	ldrb	r2, [r7, #3]
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	b298      	uxth	r0, r3
 800398e:	6879      	ldr	r1, [r7, #4]
 8003990:	4613      	mov	r3, r2
 8003992:	011b      	lsls	r3, r3, #4
 8003994:	1a9b      	subs	r3, r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	440b      	add	r3, r1
 800399a:	3328      	adds	r3, #40	@ 0x28
 800399c:	4602      	mov	r2, r0
 800399e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6818      	ldr	r0, [r3, #0]
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	787c      	ldrb	r4, [r7, #1]
 80039aa:	78ba      	ldrb	r2, [r7, #2]
 80039ac:	78f9      	ldrb	r1, [r7, #3]
 80039ae:	9302      	str	r3, [sp, #8]
 80039b0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80039b4:	9301      	str	r3, [sp, #4]
 80039b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80039ba:	9300      	str	r3, [sp, #0]
 80039bc:	4623      	mov	r3, r4
 80039be:	f004 f895 	bl	8007aec <USB_HC_Init>
 80039c2:	4603      	mov	r3, r0
 80039c4:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80039ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	371c      	adds	r7, #28
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd90      	pop	{r4, r7, pc}

080039d8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	460b      	mov	r3, r1
 80039e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80039e4:	2300      	movs	r3, #0
 80039e6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d101      	bne.n	80039f6 <HAL_HCD_HC_Halt+0x1e>
 80039f2:	2302      	movs	r3, #2
 80039f4:	e00f      	b.n	8003a16 <HAL_HCD_HC_Halt+0x3e>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	78fa      	ldrb	r2, [r7, #3]
 8003a04:	4611      	mov	r1, r2
 8003a06:	4618      	mov	r0, r3
 8003a08:	f004 fc27 	bl	800825a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
	...

08003a20 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	4608      	mov	r0, r1
 8003a2a:	4611      	mov	r1, r2
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	4603      	mov	r3, r0
 8003a30:	70fb      	strb	r3, [r7, #3]
 8003a32:	460b      	mov	r3, r1
 8003a34:	70bb      	strb	r3, [r7, #2]
 8003a36:	4613      	mov	r3, r2
 8003a38:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003a3a:	78fa      	ldrb	r2, [r7, #3]
 8003a3c:	6879      	ldr	r1, [r7, #4]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	011b      	lsls	r3, r3, #4
 8003a42:	1a9b      	subs	r3, r3, r2
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	440b      	add	r3, r1
 8003a48:	3317      	adds	r3, #23
 8003a4a:	78ba      	ldrb	r2, [r7, #2]
 8003a4c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003a4e:	78fa      	ldrb	r2, [r7, #3]
 8003a50:	6879      	ldr	r1, [r7, #4]
 8003a52:	4613      	mov	r3, r2
 8003a54:	011b      	lsls	r3, r3, #4
 8003a56:	1a9b      	subs	r3, r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	440b      	add	r3, r1
 8003a5c:	3326      	adds	r3, #38	@ 0x26
 8003a5e:	787a      	ldrb	r2, [r7, #1]
 8003a60:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003a62:	7c3b      	ldrb	r3, [r7, #16]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d114      	bne.n	8003a92 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003a68:	78fa      	ldrb	r2, [r7, #3]
 8003a6a:	6879      	ldr	r1, [r7, #4]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	011b      	lsls	r3, r3, #4
 8003a70:	1a9b      	subs	r3, r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	440b      	add	r3, r1
 8003a76:	332a      	adds	r3, #42	@ 0x2a
 8003a78:	2203      	movs	r2, #3
 8003a7a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003a7c:	78fa      	ldrb	r2, [r7, #3]
 8003a7e:	6879      	ldr	r1, [r7, #4]
 8003a80:	4613      	mov	r3, r2
 8003a82:	011b      	lsls	r3, r3, #4
 8003a84:	1a9b      	subs	r3, r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	440b      	add	r3, r1
 8003a8a:	3319      	adds	r3, #25
 8003a8c:	7f3a      	ldrb	r2, [r7, #28]
 8003a8e:	701a      	strb	r2, [r3, #0]
 8003a90:	e009      	b.n	8003aa6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003a92:	78fa      	ldrb	r2, [r7, #3]
 8003a94:	6879      	ldr	r1, [r7, #4]
 8003a96:	4613      	mov	r3, r2
 8003a98:	011b      	lsls	r3, r3, #4
 8003a9a:	1a9b      	subs	r3, r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	440b      	add	r3, r1
 8003aa0:	332a      	adds	r3, #42	@ 0x2a
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003aa6:	787b      	ldrb	r3, [r7, #1]
 8003aa8:	2b03      	cmp	r3, #3
 8003aaa:	f200 8102 	bhi.w	8003cb2 <HAL_HCD_HC_SubmitRequest+0x292>
 8003aae:	a201      	add	r2, pc, #4	@ (adr r2, 8003ab4 <HAL_HCD_HC_SubmitRequest+0x94>)
 8003ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab4:	08003ac5 	.word	0x08003ac5
 8003ab8:	08003c9d 	.word	0x08003c9d
 8003abc:	08003b89 	.word	0x08003b89
 8003ac0:	08003c13 	.word	0x08003c13
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8003ac4:	7c3b      	ldrb	r3, [r7, #16]
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	f040 80f5 	bne.w	8003cb6 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8003acc:	78bb      	ldrb	r3, [r7, #2]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d12d      	bne.n	8003b2e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8003ad2:	8b3b      	ldrh	r3, [r7, #24]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d109      	bne.n	8003aec <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8003ad8:	78fa      	ldrb	r2, [r7, #3]
 8003ada:	6879      	ldr	r1, [r7, #4]
 8003adc:	4613      	mov	r3, r2
 8003ade:	011b      	lsls	r3, r3, #4
 8003ae0:	1a9b      	subs	r3, r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	440b      	add	r3, r1
 8003ae6:	333d      	adds	r3, #61	@ 0x3d
 8003ae8:	2201      	movs	r2, #1
 8003aea:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8003aec:	78fa      	ldrb	r2, [r7, #3]
 8003aee:	6879      	ldr	r1, [r7, #4]
 8003af0:	4613      	mov	r3, r2
 8003af2:	011b      	lsls	r3, r3, #4
 8003af4:	1a9b      	subs	r3, r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	440b      	add	r3, r1
 8003afa:	333d      	adds	r3, #61	@ 0x3d
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d10a      	bne.n	8003b18 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b02:	78fa      	ldrb	r2, [r7, #3]
 8003b04:	6879      	ldr	r1, [r7, #4]
 8003b06:	4613      	mov	r3, r2
 8003b08:	011b      	lsls	r3, r3, #4
 8003b0a:	1a9b      	subs	r3, r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	440b      	add	r3, r1
 8003b10:	332a      	adds	r3, #42	@ 0x2a
 8003b12:	2200      	movs	r2, #0
 8003b14:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8003b16:	e0ce      	b.n	8003cb6 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b18:	78fa      	ldrb	r2, [r7, #3]
 8003b1a:	6879      	ldr	r1, [r7, #4]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	011b      	lsls	r3, r3, #4
 8003b20:	1a9b      	subs	r3, r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	440b      	add	r3, r1
 8003b26:	332a      	adds	r3, #42	@ 0x2a
 8003b28:	2202      	movs	r2, #2
 8003b2a:	701a      	strb	r2, [r3, #0]
      break;
 8003b2c:	e0c3      	b.n	8003cb6 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8003b2e:	78fa      	ldrb	r2, [r7, #3]
 8003b30:	6879      	ldr	r1, [r7, #4]
 8003b32:	4613      	mov	r3, r2
 8003b34:	011b      	lsls	r3, r3, #4
 8003b36:	1a9b      	subs	r3, r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	440b      	add	r3, r1
 8003b3c:	331a      	adds	r3, #26
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	f040 80b8 	bne.w	8003cb6 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8003b46:	78fa      	ldrb	r2, [r7, #3]
 8003b48:	6879      	ldr	r1, [r7, #4]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	011b      	lsls	r3, r3, #4
 8003b4e:	1a9b      	subs	r3, r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	440b      	add	r3, r1
 8003b54:	333c      	adds	r3, #60	@ 0x3c
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d10a      	bne.n	8003b72 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b5c:	78fa      	ldrb	r2, [r7, #3]
 8003b5e:	6879      	ldr	r1, [r7, #4]
 8003b60:	4613      	mov	r3, r2
 8003b62:	011b      	lsls	r3, r3, #4
 8003b64:	1a9b      	subs	r3, r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	440b      	add	r3, r1
 8003b6a:	332a      	adds	r3, #42	@ 0x2a
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	701a      	strb	r2, [r3, #0]
      break;
 8003b70:	e0a1      	b.n	8003cb6 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b72:	78fa      	ldrb	r2, [r7, #3]
 8003b74:	6879      	ldr	r1, [r7, #4]
 8003b76:	4613      	mov	r3, r2
 8003b78:	011b      	lsls	r3, r3, #4
 8003b7a:	1a9b      	subs	r3, r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	440b      	add	r3, r1
 8003b80:	332a      	adds	r3, #42	@ 0x2a
 8003b82:	2202      	movs	r2, #2
 8003b84:	701a      	strb	r2, [r3, #0]
      break;
 8003b86:	e096      	b.n	8003cb6 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003b88:	78bb      	ldrb	r3, [r7, #2]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d120      	bne.n	8003bd0 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003b8e:	78fa      	ldrb	r2, [r7, #3]
 8003b90:	6879      	ldr	r1, [r7, #4]
 8003b92:	4613      	mov	r3, r2
 8003b94:	011b      	lsls	r3, r3, #4
 8003b96:	1a9b      	subs	r3, r3, r2
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	440b      	add	r3, r1
 8003b9c:	333d      	adds	r3, #61	@ 0x3d
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d10a      	bne.n	8003bba <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003ba4:	78fa      	ldrb	r2, [r7, #3]
 8003ba6:	6879      	ldr	r1, [r7, #4]
 8003ba8:	4613      	mov	r3, r2
 8003baa:	011b      	lsls	r3, r3, #4
 8003bac:	1a9b      	subs	r3, r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	440b      	add	r3, r1
 8003bb2:	332a      	adds	r3, #42	@ 0x2a
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003bb8:	e07e      	b.n	8003cb8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003bba:	78fa      	ldrb	r2, [r7, #3]
 8003bbc:	6879      	ldr	r1, [r7, #4]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	011b      	lsls	r3, r3, #4
 8003bc2:	1a9b      	subs	r3, r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	440b      	add	r3, r1
 8003bc8:	332a      	adds	r3, #42	@ 0x2a
 8003bca:	2202      	movs	r2, #2
 8003bcc:	701a      	strb	r2, [r3, #0]
      break;
 8003bce:	e073      	b.n	8003cb8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003bd0:	78fa      	ldrb	r2, [r7, #3]
 8003bd2:	6879      	ldr	r1, [r7, #4]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	011b      	lsls	r3, r3, #4
 8003bd8:	1a9b      	subs	r3, r3, r2
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	440b      	add	r3, r1
 8003bde:	333c      	adds	r3, #60	@ 0x3c
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10a      	bne.n	8003bfc <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003be6:	78fa      	ldrb	r2, [r7, #3]
 8003be8:	6879      	ldr	r1, [r7, #4]
 8003bea:	4613      	mov	r3, r2
 8003bec:	011b      	lsls	r3, r3, #4
 8003bee:	1a9b      	subs	r3, r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	440b      	add	r3, r1
 8003bf4:	332a      	adds	r3, #42	@ 0x2a
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	701a      	strb	r2, [r3, #0]
      break;
 8003bfa:	e05d      	b.n	8003cb8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003bfc:	78fa      	ldrb	r2, [r7, #3]
 8003bfe:	6879      	ldr	r1, [r7, #4]
 8003c00:	4613      	mov	r3, r2
 8003c02:	011b      	lsls	r3, r3, #4
 8003c04:	1a9b      	subs	r3, r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	440b      	add	r3, r1
 8003c0a:	332a      	adds	r3, #42	@ 0x2a
 8003c0c:	2202      	movs	r2, #2
 8003c0e:	701a      	strb	r2, [r3, #0]
      break;
 8003c10:	e052      	b.n	8003cb8 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003c12:	78bb      	ldrb	r3, [r7, #2]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d120      	bne.n	8003c5a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003c18:	78fa      	ldrb	r2, [r7, #3]
 8003c1a:	6879      	ldr	r1, [r7, #4]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	011b      	lsls	r3, r3, #4
 8003c20:	1a9b      	subs	r3, r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	440b      	add	r3, r1
 8003c26:	333d      	adds	r3, #61	@ 0x3d
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10a      	bne.n	8003c44 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003c2e:	78fa      	ldrb	r2, [r7, #3]
 8003c30:	6879      	ldr	r1, [r7, #4]
 8003c32:	4613      	mov	r3, r2
 8003c34:	011b      	lsls	r3, r3, #4
 8003c36:	1a9b      	subs	r3, r3, r2
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	440b      	add	r3, r1
 8003c3c:	332a      	adds	r3, #42	@ 0x2a
 8003c3e:	2200      	movs	r2, #0
 8003c40:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003c42:	e039      	b.n	8003cb8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003c44:	78fa      	ldrb	r2, [r7, #3]
 8003c46:	6879      	ldr	r1, [r7, #4]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	011b      	lsls	r3, r3, #4
 8003c4c:	1a9b      	subs	r3, r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	440b      	add	r3, r1
 8003c52:	332a      	adds	r3, #42	@ 0x2a
 8003c54:	2202      	movs	r2, #2
 8003c56:	701a      	strb	r2, [r3, #0]
      break;
 8003c58:	e02e      	b.n	8003cb8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003c5a:	78fa      	ldrb	r2, [r7, #3]
 8003c5c:	6879      	ldr	r1, [r7, #4]
 8003c5e:	4613      	mov	r3, r2
 8003c60:	011b      	lsls	r3, r3, #4
 8003c62:	1a9b      	subs	r3, r3, r2
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	440b      	add	r3, r1
 8003c68:	333c      	adds	r3, #60	@ 0x3c
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d10a      	bne.n	8003c86 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003c70:	78fa      	ldrb	r2, [r7, #3]
 8003c72:	6879      	ldr	r1, [r7, #4]
 8003c74:	4613      	mov	r3, r2
 8003c76:	011b      	lsls	r3, r3, #4
 8003c78:	1a9b      	subs	r3, r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	440b      	add	r3, r1
 8003c7e:	332a      	adds	r3, #42	@ 0x2a
 8003c80:	2200      	movs	r2, #0
 8003c82:	701a      	strb	r2, [r3, #0]
      break;
 8003c84:	e018      	b.n	8003cb8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003c86:	78fa      	ldrb	r2, [r7, #3]
 8003c88:	6879      	ldr	r1, [r7, #4]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	011b      	lsls	r3, r3, #4
 8003c8e:	1a9b      	subs	r3, r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	440b      	add	r3, r1
 8003c94:	332a      	adds	r3, #42	@ 0x2a
 8003c96:	2202      	movs	r2, #2
 8003c98:	701a      	strb	r2, [r3, #0]
      break;
 8003c9a:	e00d      	b.n	8003cb8 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003c9c:	78fa      	ldrb	r2, [r7, #3]
 8003c9e:	6879      	ldr	r1, [r7, #4]
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	011b      	lsls	r3, r3, #4
 8003ca4:	1a9b      	subs	r3, r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	440b      	add	r3, r1
 8003caa:	332a      	adds	r3, #42	@ 0x2a
 8003cac:	2200      	movs	r2, #0
 8003cae:	701a      	strb	r2, [r3, #0]
      break;
 8003cb0:	e002      	b.n	8003cb8 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8003cb2:	bf00      	nop
 8003cb4:	e000      	b.n	8003cb8 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8003cb6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003cb8:	78fa      	ldrb	r2, [r7, #3]
 8003cba:	6879      	ldr	r1, [r7, #4]
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	011b      	lsls	r3, r3, #4
 8003cc0:	1a9b      	subs	r3, r3, r2
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	440b      	add	r3, r1
 8003cc6:	332c      	adds	r3, #44	@ 0x2c
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003ccc:	78fa      	ldrb	r2, [r7, #3]
 8003cce:	8b39      	ldrh	r1, [r7, #24]
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	011b      	lsls	r3, r3, #4
 8003cd6:	1a9b      	subs	r3, r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	4403      	add	r3, r0
 8003cdc:	3334      	adds	r3, #52	@ 0x34
 8003cde:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003ce0:	78fa      	ldrb	r2, [r7, #3]
 8003ce2:	6879      	ldr	r1, [r7, #4]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	011b      	lsls	r3, r3, #4
 8003ce8:	1a9b      	subs	r3, r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	440b      	add	r3, r1
 8003cee:	334c      	adds	r3, #76	@ 0x4c
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003cf4:	78fa      	ldrb	r2, [r7, #3]
 8003cf6:	6879      	ldr	r1, [r7, #4]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	011b      	lsls	r3, r3, #4
 8003cfc:	1a9b      	subs	r3, r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	440b      	add	r3, r1
 8003d02:	3338      	adds	r3, #56	@ 0x38
 8003d04:	2200      	movs	r2, #0
 8003d06:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003d08:	78fa      	ldrb	r2, [r7, #3]
 8003d0a:	6879      	ldr	r1, [r7, #4]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	011b      	lsls	r3, r3, #4
 8003d10:	1a9b      	subs	r3, r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	440b      	add	r3, r1
 8003d16:	3315      	adds	r3, #21
 8003d18:	78fa      	ldrb	r2, [r7, #3]
 8003d1a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003d1c:	78fa      	ldrb	r2, [r7, #3]
 8003d1e:	6879      	ldr	r1, [r7, #4]
 8003d20:	4613      	mov	r3, r2
 8003d22:	011b      	lsls	r3, r3, #4
 8003d24:	1a9b      	subs	r3, r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	440b      	add	r3, r1
 8003d2a:	334d      	adds	r3, #77	@ 0x4d
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6818      	ldr	r0, [r3, #0]
 8003d34:	78fa      	ldrb	r2, [r7, #3]
 8003d36:	4613      	mov	r3, r2
 8003d38:	011b      	lsls	r3, r3, #4
 8003d3a:	1a9b      	subs	r3, r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	3310      	adds	r3, #16
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	4413      	add	r3, r2
 8003d44:	1d19      	adds	r1, r3, #4
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	799b      	ldrb	r3, [r3, #6]
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	f003 fffa 	bl	8007d44 <USB_HC_StartXfer>
 8003d50:	4603      	mov	r3, r0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3708      	adds	r7, #8
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop

08003d5c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b086      	sub	sp, #24
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f003 fcee 	bl	8007754 <USB_GetMode>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	f040 80fb 	bne.w	8003f76 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4618      	mov	r0, r3
 8003d86:	f003 fcb1 	bl	80076ec <USB_ReadInterrupts>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	f000 80f1 	beq.w	8003f74 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f003 fca8 	bl	80076ec <USB_ReadInterrupts>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003da2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003da6:	d104      	bne.n	8003db2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003db0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f003 fc98 	bl	80076ec <USB_ReadInterrupts>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003dc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003dc6:	d104      	bne.n	8003dd2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003dd0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f003 fc88 	bl	80076ec <USB_ReadInterrupts>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003de2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003de6:	d104      	bne.n	8003df2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003df0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f003 fc78 	bl	80076ec <USB_ReadInterrupts>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d103      	bne.n	8003e0e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f003 fc6a 	bl	80076ec <USB_ReadInterrupts>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003e1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e22:	d120      	bne.n	8003e66 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003e2c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d113      	bne.n	8003e66 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003e3e:	2110      	movs	r1, #16
 8003e40:	6938      	ldr	r0, [r7, #16]
 8003e42:	f003 fb5d 	bl	8007500 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003e46:	6938      	ldr	r0, [r7, #16]
 8003e48:	f003 fb8c 	bl	8007564 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	7a5b      	ldrb	r3, [r3, #9]
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d105      	bne.n	8003e60 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2101      	movs	r1, #1
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f003 fd7e 	bl	800795c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f006 fd45 	bl	800a8f0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f003 fc3e 	bl	80076ec <USB_ReadInterrupts>
 8003e70:	4603      	mov	r3, r0
 8003e72:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e7a:	d102      	bne.n	8003e82 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f001 fd4d 	bl	800591c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f003 fc30 	bl	80076ec <USB_ReadInterrupts>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	f003 0308 	and.w	r3, r3, #8
 8003e92:	2b08      	cmp	r3, #8
 8003e94:	d106      	bne.n	8003ea4 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f006 fd0e 	bl	800a8b8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2208      	movs	r2, #8
 8003ea2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f003 fc1f 	bl	80076ec <USB_ReadInterrupts>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eb4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003eb8:	d139      	bne.n	8003f2e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f004 f9ba 	bl	8008238 <USB_HC_ReadInterrupt>
 8003ec4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	617b      	str	r3, [r7, #20]
 8003eca:	e025      	b.n	8003f18 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	f003 030f 	and.w	r3, r3, #15
 8003ed2:	68ba      	ldr	r2, [r7, #8]
 8003ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d018      	beq.n	8003f12 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	015a      	lsls	r2, r3, #5
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ef2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ef6:	d106      	bne.n	8003f06 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	4619      	mov	r1, r3
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 f905 	bl	800410e <HCD_HC_IN_IRQHandler>
 8003f04:	e005      	b.n	8003f12 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 ff67 	bl	8004de0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	3301      	adds	r3, #1
 8003f16:	617b      	str	r3, [r7, #20]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	795b      	ldrb	r3, [r3, #5]
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d3d3      	bcc.n	8003ecc <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4618      	mov	r0, r3
 8003f34:	f003 fbda 	bl	80076ec <USB_ReadInterrupts>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	f003 0310 	and.w	r3, r3, #16
 8003f3e:	2b10      	cmp	r3, #16
 8003f40:	d101      	bne.n	8003f46 <HAL_HCD_IRQHandler+0x1ea>
 8003f42:	2301      	movs	r3, #1
 8003f44:	e000      	b.n	8003f48 <HAL_HCD_IRQHandler+0x1ec>
 8003f46:	2300      	movs	r3, #0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d014      	beq.n	8003f76 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	699a      	ldr	r2, [r3, #24]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f022 0210 	bic.w	r2, r2, #16
 8003f5a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f001 fbfe 	bl	800575e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	699a      	ldr	r2, [r3, #24]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f042 0210 	orr.w	r2, r2, #16
 8003f70:	619a      	str	r2, [r3, #24]
 8003f72:	e000      	b.n	8003f76 <HAL_HCD_IRQHandler+0x21a>
      return;
 8003f74:	bf00      	nop
    }
  }
}
 8003f76:	3718      	adds	r7, #24
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d101      	bne.n	8003f92 <HAL_HCD_Start+0x16>
 8003f8e:	2302      	movs	r3, #2
 8003f90:	e013      	b.n	8003fba <HAL_HCD_Start+0x3e>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2101      	movs	r1, #1
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f003 fd42 	bl	8007a2a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f003 fa3a 	bl	8007424 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3708      	adds	r7, #8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b082      	sub	sp, #8
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d101      	bne.n	8003fd8 <HAL_HCD_Stop+0x16>
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	e00d      	b.n	8003ff4 <HAL_HCD_Stop+0x32>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f004 fa95 	bl	8008514 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3708      	adds	r7, #8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4618      	mov	r0, r3
 800400a:	f003 fce4 	bl	80079d6 <USB_ResetPort>
 800400e:	4603      	mov	r3, r0
}
 8004010:	4618      	mov	r0, r3
 8004012:	3708      	adds	r7, #8
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	460b      	mov	r3, r1
 8004022:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004024:	78fa      	ldrb	r2, [r7, #3]
 8004026:	6879      	ldr	r1, [r7, #4]
 8004028:	4613      	mov	r3, r2
 800402a:	011b      	lsls	r3, r3, #4
 800402c:	1a9b      	subs	r3, r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	440b      	add	r3, r1
 8004032:	334c      	adds	r3, #76	@ 0x4c
 8004034:	781b      	ldrb	r3, [r3, #0]
}
 8004036:	4618      	mov	r0, r3
 8004038:	370c      	adds	r7, #12
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr

08004042 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8004042:	b480      	push	{r7}
 8004044:	b083      	sub	sp, #12
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
 800404a:	460b      	mov	r3, r1
 800404c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800404e:	78fa      	ldrb	r2, [r7, #3]
 8004050:	6879      	ldr	r1, [r7, #4]
 8004052:	4613      	mov	r3, r2
 8004054:	011b      	lsls	r3, r3, #4
 8004056:	1a9b      	subs	r3, r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	440b      	add	r3, r1
 800405c:	3338      	adds	r3, #56	@ 0x38
 800405e:	681b      	ldr	r3, [r3, #0]
}
 8004060:	4618      	mov	r0, r3
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4618      	mov	r0, r3
 800407a:	f003 fd26 	bl	8007aca <USB_GetCurrentFrame>
 800407e:	4603      	mov	r3, r0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3708      	adds	r7, #8
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4618      	mov	r0, r3
 8004096:	f003 fd01 	bl	8007a9c <USB_GetHostSpeed>
 800409a:	4603      	mov	r3, r0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3708      	adds	r7, #8
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	460b      	mov	r3, r1
 80040ae:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80040b0:	78fa      	ldrb	r2, [r7, #3]
 80040b2:	6879      	ldr	r1, [r7, #4]
 80040b4:	4613      	mov	r3, r2
 80040b6:	011b      	lsls	r3, r3, #4
 80040b8:	1a9b      	subs	r3, r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	440b      	add	r3, r1
 80040be:	331a      	adds	r3, #26
 80040c0:	2200      	movs	r2, #0
 80040c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80040c4:	78fa      	ldrb	r2, [r7, #3]
 80040c6:	6879      	ldr	r1, [r7, #4]
 80040c8:	4613      	mov	r3, r2
 80040ca:	011b      	lsls	r3, r3, #4
 80040cc:	1a9b      	subs	r3, r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	440b      	add	r3, r1
 80040d2:	331b      	adds	r3, #27
 80040d4:	2200      	movs	r2, #0
 80040d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80040d8:	78fa      	ldrb	r2, [r7, #3]
 80040da:	6879      	ldr	r1, [r7, #4]
 80040dc:	4613      	mov	r3, r2
 80040de:	011b      	lsls	r3, r3, #4
 80040e0:	1a9b      	subs	r3, r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	440b      	add	r3, r1
 80040e6:	3325      	adds	r3, #37	@ 0x25
 80040e8:	2200      	movs	r2, #0
 80040ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80040ec:	78fa      	ldrb	r2, [r7, #3]
 80040ee:	6879      	ldr	r1, [r7, #4]
 80040f0:	4613      	mov	r3, r2
 80040f2:	011b      	lsls	r3, r3, #4
 80040f4:	1a9b      	subs	r3, r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	440b      	add	r3, r1
 80040fa:	3324      	adds	r3, #36	@ 0x24
 80040fc:	2200      	movs	r2, #0
 80040fe:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800410e:	b580      	push	{r7, lr}
 8004110:	b086      	sub	sp, #24
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
 8004116:	460b      	mov	r3, r1
 8004118:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	78fa      	ldrb	r2, [r7, #3]
 800412a:	4611      	mov	r1, r2
 800412c:	4618      	mov	r0, r3
 800412e:	f003 faf0 	bl	8007712 <USB_ReadChInterrupts>
 8004132:	4603      	mov	r3, r0
 8004134:	f003 0304 	and.w	r3, r3, #4
 8004138:	2b04      	cmp	r3, #4
 800413a:	d11a      	bne.n	8004172 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800413c:	78fb      	ldrb	r3, [r7, #3]
 800413e:	015a      	lsls	r2, r3, #5
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	4413      	add	r3, r2
 8004144:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004148:	461a      	mov	r2, r3
 800414a:	2304      	movs	r3, #4
 800414c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800414e:	78fa      	ldrb	r2, [r7, #3]
 8004150:	6879      	ldr	r1, [r7, #4]
 8004152:	4613      	mov	r3, r2
 8004154:	011b      	lsls	r3, r3, #4
 8004156:	1a9b      	subs	r3, r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	440b      	add	r3, r1
 800415c:	334d      	adds	r3, #77	@ 0x4d
 800415e:	2207      	movs	r2, #7
 8004160:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	78fa      	ldrb	r2, [r7, #3]
 8004168:	4611      	mov	r1, r2
 800416a:	4618      	mov	r0, r3
 800416c:	f004 f875 	bl	800825a <USB_HC_Halt>
 8004170:	e09e      	b.n	80042b0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	78fa      	ldrb	r2, [r7, #3]
 8004178:	4611      	mov	r1, r2
 800417a:	4618      	mov	r0, r3
 800417c:	f003 fac9 	bl	8007712 <USB_ReadChInterrupts>
 8004180:	4603      	mov	r3, r0
 8004182:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004186:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800418a:	d11b      	bne.n	80041c4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 800418c:	78fb      	ldrb	r3, [r7, #3]
 800418e:	015a      	lsls	r2, r3, #5
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	4413      	add	r3, r2
 8004194:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004198:	461a      	mov	r2, r3
 800419a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800419e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80041a0:	78fa      	ldrb	r2, [r7, #3]
 80041a2:	6879      	ldr	r1, [r7, #4]
 80041a4:	4613      	mov	r3, r2
 80041a6:	011b      	lsls	r3, r3, #4
 80041a8:	1a9b      	subs	r3, r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	440b      	add	r3, r1
 80041ae:	334d      	adds	r3, #77	@ 0x4d
 80041b0:	2208      	movs	r2, #8
 80041b2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	78fa      	ldrb	r2, [r7, #3]
 80041ba:	4611      	mov	r1, r2
 80041bc:	4618      	mov	r0, r3
 80041be:	f004 f84c 	bl	800825a <USB_HC_Halt>
 80041c2:	e075      	b.n	80042b0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	78fa      	ldrb	r2, [r7, #3]
 80041ca:	4611      	mov	r1, r2
 80041cc:	4618      	mov	r0, r3
 80041ce:	f003 faa0 	bl	8007712 <USB_ReadChInterrupts>
 80041d2:	4603      	mov	r3, r0
 80041d4:	f003 0308 	and.w	r3, r3, #8
 80041d8:	2b08      	cmp	r3, #8
 80041da:	d11a      	bne.n	8004212 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80041dc:	78fb      	ldrb	r3, [r7, #3]
 80041de:	015a      	lsls	r2, r3, #5
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	4413      	add	r3, r2
 80041e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041e8:	461a      	mov	r2, r3
 80041ea:	2308      	movs	r3, #8
 80041ec:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80041ee:	78fa      	ldrb	r2, [r7, #3]
 80041f0:	6879      	ldr	r1, [r7, #4]
 80041f2:	4613      	mov	r3, r2
 80041f4:	011b      	lsls	r3, r3, #4
 80041f6:	1a9b      	subs	r3, r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	440b      	add	r3, r1
 80041fc:	334d      	adds	r3, #77	@ 0x4d
 80041fe:	2206      	movs	r2, #6
 8004200:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	78fa      	ldrb	r2, [r7, #3]
 8004208:	4611      	mov	r1, r2
 800420a:	4618      	mov	r0, r3
 800420c:	f004 f825 	bl	800825a <USB_HC_Halt>
 8004210:	e04e      	b.n	80042b0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	78fa      	ldrb	r2, [r7, #3]
 8004218:	4611      	mov	r1, r2
 800421a:	4618      	mov	r0, r3
 800421c:	f003 fa79 	bl	8007712 <USB_ReadChInterrupts>
 8004220:	4603      	mov	r3, r0
 8004222:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004226:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800422a:	d11b      	bne.n	8004264 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800422c:	78fb      	ldrb	r3, [r7, #3]
 800422e:	015a      	lsls	r2, r3, #5
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	4413      	add	r3, r2
 8004234:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004238:	461a      	mov	r2, r3
 800423a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800423e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004240:	78fa      	ldrb	r2, [r7, #3]
 8004242:	6879      	ldr	r1, [r7, #4]
 8004244:	4613      	mov	r3, r2
 8004246:	011b      	lsls	r3, r3, #4
 8004248:	1a9b      	subs	r3, r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	440b      	add	r3, r1
 800424e:	334d      	adds	r3, #77	@ 0x4d
 8004250:	2209      	movs	r2, #9
 8004252:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	78fa      	ldrb	r2, [r7, #3]
 800425a:	4611      	mov	r1, r2
 800425c:	4618      	mov	r0, r3
 800425e:	f003 fffc 	bl	800825a <USB_HC_Halt>
 8004262:	e025      	b.n	80042b0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	78fa      	ldrb	r2, [r7, #3]
 800426a:	4611      	mov	r1, r2
 800426c:	4618      	mov	r0, r3
 800426e:	f003 fa50 	bl	8007712 <USB_ReadChInterrupts>
 8004272:	4603      	mov	r3, r0
 8004274:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004278:	2b80      	cmp	r3, #128	@ 0x80
 800427a:	d119      	bne.n	80042b0 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800427c:	78fb      	ldrb	r3, [r7, #3]
 800427e:	015a      	lsls	r2, r3, #5
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	4413      	add	r3, r2
 8004284:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004288:	461a      	mov	r2, r3
 800428a:	2380      	movs	r3, #128	@ 0x80
 800428c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800428e:	78fa      	ldrb	r2, [r7, #3]
 8004290:	6879      	ldr	r1, [r7, #4]
 8004292:	4613      	mov	r3, r2
 8004294:	011b      	lsls	r3, r3, #4
 8004296:	1a9b      	subs	r3, r3, r2
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	440b      	add	r3, r1
 800429c:	334d      	adds	r3, #77	@ 0x4d
 800429e:	2207      	movs	r2, #7
 80042a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	78fa      	ldrb	r2, [r7, #3]
 80042a8:	4611      	mov	r1, r2
 80042aa:	4618      	mov	r0, r3
 80042ac:	f003 ffd5 	bl	800825a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	78fa      	ldrb	r2, [r7, #3]
 80042b6:	4611      	mov	r1, r2
 80042b8:	4618      	mov	r0, r3
 80042ba:	f003 fa2a 	bl	8007712 <USB_ReadChInterrupts>
 80042be:	4603      	mov	r3, r0
 80042c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042c8:	d112      	bne.n	80042f0 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	78fa      	ldrb	r2, [r7, #3]
 80042d0:	4611      	mov	r1, r2
 80042d2:	4618      	mov	r0, r3
 80042d4:	f003 ffc1 	bl	800825a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80042d8:	78fb      	ldrb	r3, [r7, #3]
 80042da:	015a      	lsls	r2, r3, #5
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	4413      	add	r3, r2
 80042e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042e4:	461a      	mov	r2, r3
 80042e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80042ea:	6093      	str	r3, [r2, #8]
 80042ec:	f000 bd75 	b.w	8004dda <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	78fa      	ldrb	r2, [r7, #3]
 80042f6:	4611      	mov	r1, r2
 80042f8:	4618      	mov	r0, r3
 80042fa:	f003 fa0a 	bl	8007712 <USB_ReadChInterrupts>
 80042fe:	4603      	mov	r3, r0
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	2b01      	cmp	r3, #1
 8004306:	f040 8128 	bne.w	800455a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800430a:	78fb      	ldrb	r3, [r7, #3]
 800430c:	015a      	lsls	r2, r3, #5
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	4413      	add	r3, r2
 8004312:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004316:	461a      	mov	r2, r3
 8004318:	2320      	movs	r3, #32
 800431a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800431c:	78fa      	ldrb	r2, [r7, #3]
 800431e:	6879      	ldr	r1, [r7, #4]
 8004320:	4613      	mov	r3, r2
 8004322:	011b      	lsls	r3, r3, #4
 8004324:	1a9b      	subs	r3, r3, r2
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	440b      	add	r3, r1
 800432a:	331b      	adds	r3, #27
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d119      	bne.n	8004366 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004332:	78fa      	ldrb	r2, [r7, #3]
 8004334:	6879      	ldr	r1, [r7, #4]
 8004336:	4613      	mov	r3, r2
 8004338:	011b      	lsls	r3, r3, #4
 800433a:	1a9b      	subs	r3, r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	440b      	add	r3, r1
 8004340:	331b      	adds	r3, #27
 8004342:	2200      	movs	r2, #0
 8004344:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004346:	78fb      	ldrb	r3, [r7, #3]
 8004348:	015a      	lsls	r2, r3, #5
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	4413      	add	r3, r2
 800434e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	78fa      	ldrb	r2, [r7, #3]
 8004356:	0151      	lsls	r1, r2, #5
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	440a      	add	r2, r1
 800435c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004360:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004364:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	799b      	ldrb	r3, [r3, #6]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d01b      	beq.n	80043a6 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800436e:	78fa      	ldrb	r2, [r7, #3]
 8004370:	6879      	ldr	r1, [r7, #4]
 8004372:	4613      	mov	r3, r2
 8004374:	011b      	lsls	r3, r3, #4
 8004376:	1a9b      	subs	r3, r3, r2
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	440b      	add	r3, r1
 800437c:	3330      	adds	r3, #48	@ 0x30
 800437e:	6819      	ldr	r1, [r3, #0]
 8004380:	78fb      	ldrb	r3, [r7, #3]
 8004382:	015a      	lsls	r2, r3, #5
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	4413      	add	r3, r2
 8004388:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004392:	78fa      	ldrb	r2, [r7, #3]
 8004394:	1ac9      	subs	r1, r1, r3
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	4613      	mov	r3, r2
 800439a:	011b      	lsls	r3, r3, #4
 800439c:	1a9b      	subs	r3, r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	4403      	add	r3, r0
 80043a2:	3338      	adds	r3, #56	@ 0x38
 80043a4:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80043a6:	78fa      	ldrb	r2, [r7, #3]
 80043a8:	6879      	ldr	r1, [r7, #4]
 80043aa:	4613      	mov	r3, r2
 80043ac:	011b      	lsls	r3, r3, #4
 80043ae:	1a9b      	subs	r3, r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	440b      	add	r3, r1
 80043b4:	334d      	adds	r3, #77	@ 0x4d
 80043b6:	2201      	movs	r2, #1
 80043b8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80043ba:	78fa      	ldrb	r2, [r7, #3]
 80043bc:	6879      	ldr	r1, [r7, #4]
 80043be:	4613      	mov	r3, r2
 80043c0:	011b      	lsls	r3, r3, #4
 80043c2:	1a9b      	subs	r3, r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	440b      	add	r3, r1
 80043c8:	3344      	adds	r3, #68	@ 0x44
 80043ca:	2200      	movs	r2, #0
 80043cc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80043ce:	78fb      	ldrb	r3, [r7, #3]
 80043d0:	015a      	lsls	r2, r3, #5
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	4413      	add	r3, r2
 80043d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043da:	461a      	mov	r2, r3
 80043dc:	2301      	movs	r3, #1
 80043de:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80043e0:	78fa      	ldrb	r2, [r7, #3]
 80043e2:	6879      	ldr	r1, [r7, #4]
 80043e4:	4613      	mov	r3, r2
 80043e6:	011b      	lsls	r3, r3, #4
 80043e8:	1a9b      	subs	r3, r3, r2
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	440b      	add	r3, r1
 80043ee:	3326      	adds	r3, #38	@ 0x26
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00a      	beq.n	800440c <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80043f6:	78fa      	ldrb	r2, [r7, #3]
 80043f8:	6879      	ldr	r1, [r7, #4]
 80043fa:	4613      	mov	r3, r2
 80043fc:	011b      	lsls	r3, r3, #4
 80043fe:	1a9b      	subs	r3, r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	440b      	add	r3, r1
 8004404:	3326      	adds	r3, #38	@ 0x26
 8004406:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004408:	2b02      	cmp	r3, #2
 800440a:	d110      	bne.n	800442e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	78fa      	ldrb	r2, [r7, #3]
 8004412:	4611      	mov	r1, r2
 8004414:	4618      	mov	r0, r3
 8004416:	f003 ff20 	bl	800825a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800441a:	78fb      	ldrb	r3, [r7, #3]
 800441c:	015a      	lsls	r2, r3, #5
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	4413      	add	r3, r2
 8004422:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004426:	461a      	mov	r2, r3
 8004428:	2310      	movs	r3, #16
 800442a:	6093      	str	r3, [r2, #8]
 800442c:	e03d      	b.n	80044aa <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800442e:	78fa      	ldrb	r2, [r7, #3]
 8004430:	6879      	ldr	r1, [r7, #4]
 8004432:	4613      	mov	r3, r2
 8004434:	011b      	lsls	r3, r3, #4
 8004436:	1a9b      	subs	r3, r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	440b      	add	r3, r1
 800443c:	3326      	adds	r3, #38	@ 0x26
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	2b03      	cmp	r3, #3
 8004442:	d00a      	beq.n	800445a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8004444:	78fa      	ldrb	r2, [r7, #3]
 8004446:	6879      	ldr	r1, [r7, #4]
 8004448:	4613      	mov	r3, r2
 800444a:	011b      	lsls	r3, r3, #4
 800444c:	1a9b      	subs	r3, r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	440b      	add	r3, r1
 8004452:	3326      	adds	r3, #38	@ 0x26
 8004454:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004456:	2b01      	cmp	r3, #1
 8004458:	d127      	bne.n	80044aa <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800445a:	78fb      	ldrb	r3, [r7, #3]
 800445c:	015a      	lsls	r2, r3, #5
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	4413      	add	r3, r2
 8004462:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	78fa      	ldrb	r2, [r7, #3]
 800446a:	0151      	lsls	r1, r2, #5
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	440a      	add	r2, r1
 8004470:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004474:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004478:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800447a:	78fa      	ldrb	r2, [r7, #3]
 800447c:	6879      	ldr	r1, [r7, #4]
 800447e:	4613      	mov	r3, r2
 8004480:	011b      	lsls	r3, r3, #4
 8004482:	1a9b      	subs	r3, r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	440b      	add	r3, r1
 8004488:	334c      	adds	r3, #76	@ 0x4c
 800448a:	2201      	movs	r2, #1
 800448c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800448e:	78fa      	ldrb	r2, [r7, #3]
 8004490:	6879      	ldr	r1, [r7, #4]
 8004492:	4613      	mov	r3, r2
 8004494:	011b      	lsls	r3, r3, #4
 8004496:	1a9b      	subs	r3, r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	440b      	add	r3, r1
 800449c:	334c      	adds	r3, #76	@ 0x4c
 800449e:	781a      	ldrb	r2, [r3, #0]
 80044a0:	78fb      	ldrb	r3, [r7, #3]
 80044a2:	4619      	mov	r1, r3
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f006 fa31 	bl	800a90c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	799b      	ldrb	r3, [r3, #6]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d13b      	bne.n	800452a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80044b2:	78fa      	ldrb	r2, [r7, #3]
 80044b4:	6879      	ldr	r1, [r7, #4]
 80044b6:	4613      	mov	r3, r2
 80044b8:	011b      	lsls	r3, r3, #4
 80044ba:	1a9b      	subs	r3, r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	440b      	add	r3, r1
 80044c0:	3338      	adds	r3, #56	@ 0x38
 80044c2:	6819      	ldr	r1, [r3, #0]
 80044c4:	78fa      	ldrb	r2, [r7, #3]
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	4613      	mov	r3, r2
 80044ca:	011b      	lsls	r3, r3, #4
 80044cc:	1a9b      	subs	r3, r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	4403      	add	r3, r0
 80044d2:	3328      	adds	r3, #40	@ 0x28
 80044d4:	881b      	ldrh	r3, [r3, #0]
 80044d6:	440b      	add	r3, r1
 80044d8:	1e59      	subs	r1, r3, #1
 80044da:	78fa      	ldrb	r2, [r7, #3]
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	4613      	mov	r3, r2
 80044e0:	011b      	lsls	r3, r3, #4
 80044e2:	1a9b      	subs	r3, r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	4403      	add	r3, r0
 80044e8:	3328      	adds	r3, #40	@ 0x28
 80044ea:	881b      	ldrh	r3, [r3, #0]
 80044ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80044f0:	f003 0301 	and.w	r3, r3, #1
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f000 8470 	beq.w	8004dda <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80044fa:	78fa      	ldrb	r2, [r7, #3]
 80044fc:	6879      	ldr	r1, [r7, #4]
 80044fe:	4613      	mov	r3, r2
 8004500:	011b      	lsls	r3, r3, #4
 8004502:	1a9b      	subs	r3, r3, r2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	440b      	add	r3, r1
 8004508:	333c      	adds	r3, #60	@ 0x3c
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	78fa      	ldrb	r2, [r7, #3]
 800450e:	f083 0301 	eor.w	r3, r3, #1
 8004512:	b2d8      	uxtb	r0, r3
 8004514:	6879      	ldr	r1, [r7, #4]
 8004516:	4613      	mov	r3, r2
 8004518:	011b      	lsls	r3, r3, #4
 800451a:	1a9b      	subs	r3, r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	440b      	add	r3, r1
 8004520:	333c      	adds	r3, #60	@ 0x3c
 8004522:	4602      	mov	r2, r0
 8004524:	701a      	strb	r2, [r3, #0]
 8004526:	f000 bc58 	b.w	8004dda <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800452a:	78fa      	ldrb	r2, [r7, #3]
 800452c:	6879      	ldr	r1, [r7, #4]
 800452e:	4613      	mov	r3, r2
 8004530:	011b      	lsls	r3, r3, #4
 8004532:	1a9b      	subs	r3, r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	440b      	add	r3, r1
 8004538:	333c      	adds	r3, #60	@ 0x3c
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	78fa      	ldrb	r2, [r7, #3]
 800453e:	f083 0301 	eor.w	r3, r3, #1
 8004542:	b2d8      	uxtb	r0, r3
 8004544:	6879      	ldr	r1, [r7, #4]
 8004546:	4613      	mov	r3, r2
 8004548:	011b      	lsls	r3, r3, #4
 800454a:	1a9b      	subs	r3, r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	440b      	add	r3, r1
 8004550:	333c      	adds	r3, #60	@ 0x3c
 8004552:	4602      	mov	r2, r0
 8004554:	701a      	strb	r2, [r3, #0]
 8004556:	f000 bc40 	b.w	8004dda <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	78fa      	ldrb	r2, [r7, #3]
 8004560:	4611      	mov	r1, r2
 8004562:	4618      	mov	r0, r3
 8004564:	f003 f8d5 	bl	8007712 <USB_ReadChInterrupts>
 8004568:	4603      	mov	r3, r0
 800456a:	f003 0320 	and.w	r3, r3, #32
 800456e:	2b20      	cmp	r3, #32
 8004570:	d131      	bne.n	80045d6 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004572:	78fb      	ldrb	r3, [r7, #3]
 8004574:	015a      	lsls	r2, r3, #5
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	4413      	add	r3, r2
 800457a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800457e:	461a      	mov	r2, r3
 8004580:	2320      	movs	r3, #32
 8004582:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8004584:	78fa      	ldrb	r2, [r7, #3]
 8004586:	6879      	ldr	r1, [r7, #4]
 8004588:	4613      	mov	r3, r2
 800458a:	011b      	lsls	r3, r3, #4
 800458c:	1a9b      	subs	r3, r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	440b      	add	r3, r1
 8004592:	331a      	adds	r3, #26
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	2b01      	cmp	r3, #1
 8004598:	f040 841f 	bne.w	8004dda <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800459c:	78fa      	ldrb	r2, [r7, #3]
 800459e:	6879      	ldr	r1, [r7, #4]
 80045a0:	4613      	mov	r3, r2
 80045a2:	011b      	lsls	r3, r3, #4
 80045a4:	1a9b      	subs	r3, r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	440b      	add	r3, r1
 80045aa:	331b      	adds	r3, #27
 80045ac:	2201      	movs	r2, #1
 80045ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80045b0:	78fa      	ldrb	r2, [r7, #3]
 80045b2:	6879      	ldr	r1, [r7, #4]
 80045b4:	4613      	mov	r3, r2
 80045b6:	011b      	lsls	r3, r3, #4
 80045b8:	1a9b      	subs	r3, r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	440b      	add	r3, r1
 80045be:	334d      	adds	r3, #77	@ 0x4d
 80045c0:	2203      	movs	r2, #3
 80045c2:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	78fa      	ldrb	r2, [r7, #3]
 80045ca:	4611      	mov	r1, r2
 80045cc:	4618      	mov	r0, r3
 80045ce:	f003 fe44 	bl	800825a <USB_HC_Halt>
 80045d2:	f000 bc02 	b.w	8004dda <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	78fa      	ldrb	r2, [r7, #3]
 80045dc:	4611      	mov	r1, r2
 80045de:	4618      	mov	r0, r3
 80045e0:	f003 f897 	bl	8007712 <USB_ReadChInterrupts>
 80045e4:	4603      	mov	r3, r0
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	f040 8305 	bne.w	8004bfa <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80045f0:	78fb      	ldrb	r3, [r7, #3]
 80045f2:	015a      	lsls	r2, r3, #5
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	4413      	add	r3, r2
 80045f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045fc:	461a      	mov	r2, r3
 80045fe:	2302      	movs	r3, #2
 8004600:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004602:	78fa      	ldrb	r2, [r7, #3]
 8004604:	6879      	ldr	r1, [r7, #4]
 8004606:	4613      	mov	r3, r2
 8004608:	011b      	lsls	r3, r3, #4
 800460a:	1a9b      	subs	r3, r3, r2
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	440b      	add	r3, r1
 8004610:	334d      	adds	r3, #77	@ 0x4d
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d114      	bne.n	8004642 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004618:	78fa      	ldrb	r2, [r7, #3]
 800461a:	6879      	ldr	r1, [r7, #4]
 800461c:	4613      	mov	r3, r2
 800461e:	011b      	lsls	r3, r3, #4
 8004620:	1a9b      	subs	r3, r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	440b      	add	r3, r1
 8004626:	334d      	adds	r3, #77	@ 0x4d
 8004628:	2202      	movs	r2, #2
 800462a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800462c:	78fa      	ldrb	r2, [r7, #3]
 800462e:	6879      	ldr	r1, [r7, #4]
 8004630:	4613      	mov	r3, r2
 8004632:	011b      	lsls	r3, r3, #4
 8004634:	1a9b      	subs	r3, r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	440b      	add	r3, r1
 800463a:	334c      	adds	r3, #76	@ 0x4c
 800463c:	2201      	movs	r2, #1
 800463e:	701a      	strb	r2, [r3, #0]
 8004640:	e2cc      	b.n	8004bdc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004642:	78fa      	ldrb	r2, [r7, #3]
 8004644:	6879      	ldr	r1, [r7, #4]
 8004646:	4613      	mov	r3, r2
 8004648:	011b      	lsls	r3, r3, #4
 800464a:	1a9b      	subs	r3, r3, r2
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	440b      	add	r3, r1
 8004650:	334d      	adds	r3, #77	@ 0x4d
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	2b06      	cmp	r3, #6
 8004656:	d114      	bne.n	8004682 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004658:	78fa      	ldrb	r2, [r7, #3]
 800465a:	6879      	ldr	r1, [r7, #4]
 800465c:	4613      	mov	r3, r2
 800465e:	011b      	lsls	r3, r3, #4
 8004660:	1a9b      	subs	r3, r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	440b      	add	r3, r1
 8004666:	334d      	adds	r3, #77	@ 0x4d
 8004668:	2202      	movs	r2, #2
 800466a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800466c:	78fa      	ldrb	r2, [r7, #3]
 800466e:	6879      	ldr	r1, [r7, #4]
 8004670:	4613      	mov	r3, r2
 8004672:	011b      	lsls	r3, r3, #4
 8004674:	1a9b      	subs	r3, r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	440b      	add	r3, r1
 800467a:	334c      	adds	r3, #76	@ 0x4c
 800467c:	2205      	movs	r2, #5
 800467e:	701a      	strb	r2, [r3, #0]
 8004680:	e2ac      	b.n	8004bdc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004682:	78fa      	ldrb	r2, [r7, #3]
 8004684:	6879      	ldr	r1, [r7, #4]
 8004686:	4613      	mov	r3, r2
 8004688:	011b      	lsls	r3, r3, #4
 800468a:	1a9b      	subs	r3, r3, r2
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	440b      	add	r3, r1
 8004690:	334d      	adds	r3, #77	@ 0x4d
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	2b07      	cmp	r3, #7
 8004696:	d00b      	beq.n	80046b0 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004698:	78fa      	ldrb	r2, [r7, #3]
 800469a:	6879      	ldr	r1, [r7, #4]
 800469c:	4613      	mov	r3, r2
 800469e:	011b      	lsls	r3, r3, #4
 80046a0:	1a9b      	subs	r3, r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	440b      	add	r3, r1
 80046a6:	334d      	adds	r3, #77	@ 0x4d
 80046a8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80046aa:	2b09      	cmp	r3, #9
 80046ac:	f040 80a6 	bne.w	80047fc <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80046b0:	78fa      	ldrb	r2, [r7, #3]
 80046b2:	6879      	ldr	r1, [r7, #4]
 80046b4:	4613      	mov	r3, r2
 80046b6:	011b      	lsls	r3, r3, #4
 80046b8:	1a9b      	subs	r3, r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	440b      	add	r3, r1
 80046be:	334d      	adds	r3, #77	@ 0x4d
 80046c0:	2202      	movs	r2, #2
 80046c2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80046c4:	78fa      	ldrb	r2, [r7, #3]
 80046c6:	6879      	ldr	r1, [r7, #4]
 80046c8:	4613      	mov	r3, r2
 80046ca:	011b      	lsls	r3, r3, #4
 80046cc:	1a9b      	subs	r3, r3, r2
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	440b      	add	r3, r1
 80046d2:	3344      	adds	r3, #68	@ 0x44
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	1c59      	adds	r1, r3, #1
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	4613      	mov	r3, r2
 80046dc:	011b      	lsls	r3, r3, #4
 80046de:	1a9b      	subs	r3, r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	4403      	add	r3, r0
 80046e4:	3344      	adds	r3, #68	@ 0x44
 80046e6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80046e8:	78fa      	ldrb	r2, [r7, #3]
 80046ea:	6879      	ldr	r1, [r7, #4]
 80046ec:	4613      	mov	r3, r2
 80046ee:	011b      	lsls	r3, r3, #4
 80046f0:	1a9b      	subs	r3, r3, r2
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	440b      	add	r3, r1
 80046f6:	3344      	adds	r3, #68	@ 0x44
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d943      	bls.n	8004786 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80046fe:	78fa      	ldrb	r2, [r7, #3]
 8004700:	6879      	ldr	r1, [r7, #4]
 8004702:	4613      	mov	r3, r2
 8004704:	011b      	lsls	r3, r3, #4
 8004706:	1a9b      	subs	r3, r3, r2
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	440b      	add	r3, r1
 800470c:	3344      	adds	r3, #68	@ 0x44
 800470e:	2200      	movs	r2, #0
 8004710:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8004712:	78fa      	ldrb	r2, [r7, #3]
 8004714:	6879      	ldr	r1, [r7, #4]
 8004716:	4613      	mov	r3, r2
 8004718:	011b      	lsls	r3, r3, #4
 800471a:	1a9b      	subs	r3, r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	440b      	add	r3, r1
 8004720:	331a      	adds	r3, #26
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d123      	bne.n	8004770 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8004728:	78fa      	ldrb	r2, [r7, #3]
 800472a:	6879      	ldr	r1, [r7, #4]
 800472c:	4613      	mov	r3, r2
 800472e:	011b      	lsls	r3, r3, #4
 8004730:	1a9b      	subs	r3, r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	440b      	add	r3, r1
 8004736:	331b      	adds	r3, #27
 8004738:	2200      	movs	r2, #0
 800473a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800473c:	78fa      	ldrb	r2, [r7, #3]
 800473e:	6879      	ldr	r1, [r7, #4]
 8004740:	4613      	mov	r3, r2
 8004742:	011b      	lsls	r3, r3, #4
 8004744:	1a9b      	subs	r3, r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	440b      	add	r3, r1
 800474a:	331c      	adds	r3, #28
 800474c:	2200      	movs	r2, #0
 800474e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004750:	78fb      	ldrb	r3, [r7, #3]
 8004752:	015a      	lsls	r2, r3, #5
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	4413      	add	r3, r2
 8004758:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	78fa      	ldrb	r2, [r7, #3]
 8004760:	0151      	lsls	r1, r2, #5
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	440a      	add	r2, r1
 8004766:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800476a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800476e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004770:	78fa      	ldrb	r2, [r7, #3]
 8004772:	6879      	ldr	r1, [r7, #4]
 8004774:	4613      	mov	r3, r2
 8004776:	011b      	lsls	r3, r3, #4
 8004778:	1a9b      	subs	r3, r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	440b      	add	r3, r1
 800477e:	334c      	adds	r3, #76	@ 0x4c
 8004780:	2204      	movs	r2, #4
 8004782:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004784:	e229      	b.n	8004bda <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004786:	78fa      	ldrb	r2, [r7, #3]
 8004788:	6879      	ldr	r1, [r7, #4]
 800478a:	4613      	mov	r3, r2
 800478c:	011b      	lsls	r3, r3, #4
 800478e:	1a9b      	subs	r3, r3, r2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	440b      	add	r3, r1
 8004794:	334c      	adds	r3, #76	@ 0x4c
 8004796:	2202      	movs	r2, #2
 8004798:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800479a:	78fa      	ldrb	r2, [r7, #3]
 800479c:	6879      	ldr	r1, [r7, #4]
 800479e:	4613      	mov	r3, r2
 80047a0:	011b      	lsls	r3, r3, #4
 80047a2:	1a9b      	subs	r3, r3, r2
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	440b      	add	r3, r1
 80047a8:	3326      	adds	r3, #38	@ 0x26
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00b      	beq.n	80047c8 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80047b0:	78fa      	ldrb	r2, [r7, #3]
 80047b2:	6879      	ldr	r1, [r7, #4]
 80047b4:	4613      	mov	r3, r2
 80047b6:	011b      	lsls	r3, r3, #4
 80047b8:	1a9b      	subs	r3, r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	440b      	add	r3, r1
 80047be:	3326      	adds	r3, #38	@ 0x26
 80047c0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	f040 8209 	bne.w	8004bda <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80047c8:	78fb      	ldrb	r3, [r7, #3]
 80047ca:	015a      	lsls	r2, r3, #5
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	4413      	add	r3, r2
 80047d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80047de:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80047e6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80047e8:	78fb      	ldrb	r3, [r7, #3]
 80047ea:	015a      	lsls	r2, r3, #5
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	4413      	add	r3, r2
 80047f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047f4:	461a      	mov	r2, r3
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80047fa:	e1ee      	b.n	8004bda <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80047fc:	78fa      	ldrb	r2, [r7, #3]
 80047fe:	6879      	ldr	r1, [r7, #4]
 8004800:	4613      	mov	r3, r2
 8004802:	011b      	lsls	r3, r3, #4
 8004804:	1a9b      	subs	r3, r3, r2
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	440b      	add	r3, r1
 800480a:	334d      	adds	r3, #77	@ 0x4d
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	2b05      	cmp	r3, #5
 8004810:	f040 80c8 	bne.w	80049a4 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004814:	78fa      	ldrb	r2, [r7, #3]
 8004816:	6879      	ldr	r1, [r7, #4]
 8004818:	4613      	mov	r3, r2
 800481a:	011b      	lsls	r3, r3, #4
 800481c:	1a9b      	subs	r3, r3, r2
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	440b      	add	r3, r1
 8004822:	334d      	adds	r3, #77	@ 0x4d
 8004824:	2202      	movs	r2, #2
 8004826:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004828:	78fa      	ldrb	r2, [r7, #3]
 800482a:	6879      	ldr	r1, [r7, #4]
 800482c:	4613      	mov	r3, r2
 800482e:	011b      	lsls	r3, r3, #4
 8004830:	1a9b      	subs	r3, r3, r2
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	440b      	add	r3, r1
 8004836:	331b      	adds	r3, #27
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	2b01      	cmp	r3, #1
 800483c:	f040 81ce 	bne.w	8004bdc <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004840:	78fa      	ldrb	r2, [r7, #3]
 8004842:	6879      	ldr	r1, [r7, #4]
 8004844:	4613      	mov	r3, r2
 8004846:	011b      	lsls	r3, r3, #4
 8004848:	1a9b      	subs	r3, r3, r2
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	440b      	add	r3, r1
 800484e:	3326      	adds	r3, #38	@ 0x26
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	2b03      	cmp	r3, #3
 8004854:	d16b      	bne.n	800492e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8004856:	78fa      	ldrb	r2, [r7, #3]
 8004858:	6879      	ldr	r1, [r7, #4]
 800485a:	4613      	mov	r3, r2
 800485c:	011b      	lsls	r3, r3, #4
 800485e:	1a9b      	subs	r3, r3, r2
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	440b      	add	r3, r1
 8004864:	3348      	adds	r3, #72	@ 0x48
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	1c59      	adds	r1, r3, #1
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	4613      	mov	r3, r2
 800486e:	011b      	lsls	r3, r3, #4
 8004870:	1a9b      	subs	r3, r3, r2
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	4403      	add	r3, r0
 8004876:	3348      	adds	r3, #72	@ 0x48
 8004878:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800487a:	78fa      	ldrb	r2, [r7, #3]
 800487c:	6879      	ldr	r1, [r7, #4]
 800487e:	4613      	mov	r3, r2
 8004880:	011b      	lsls	r3, r3, #4
 8004882:	1a9b      	subs	r3, r3, r2
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	440b      	add	r3, r1
 8004888:	3348      	adds	r3, #72	@ 0x48
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2b02      	cmp	r3, #2
 800488e:	d943      	bls.n	8004918 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8004890:	78fa      	ldrb	r2, [r7, #3]
 8004892:	6879      	ldr	r1, [r7, #4]
 8004894:	4613      	mov	r3, r2
 8004896:	011b      	lsls	r3, r3, #4
 8004898:	1a9b      	subs	r3, r3, r2
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	440b      	add	r3, r1
 800489e:	3348      	adds	r3, #72	@ 0x48
 80048a0:	2200      	movs	r2, #0
 80048a2:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80048a4:	78fa      	ldrb	r2, [r7, #3]
 80048a6:	6879      	ldr	r1, [r7, #4]
 80048a8:	4613      	mov	r3, r2
 80048aa:	011b      	lsls	r3, r3, #4
 80048ac:	1a9b      	subs	r3, r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	440b      	add	r3, r1
 80048b2:	331b      	adds	r3, #27
 80048b4:	2200      	movs	r2, #0
 80048b6:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80048b8:	78fa      	ldrb	r2, [r7, #3]
 80048ba:	6879      	ldr	r1, [r7, #4]
 80048bc:	4613      	mov	r3, r2
 80048be:	011b      	lsls	r3, r3, #4
 80048c0:	1a9b      	subs	r3, r3, r2
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	440b      	add	r3, r1
 80048c6:	3344      	adds	r3, #68	@ 0x44
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d809      	bhi.n	80048e2 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80048ce:	78fa      	ldrb	r2, [r7, #3]
 80048d0:	6879      	ldr	r1, [r7, #4]
 80048d2:	4613      	mov	r3, r2
 80048d4:	011b      	lsls	r3, r3, #4
 80048d6:	1a9b      	subs	r3, r3, r2
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	440b      	add	r3, r1
 80048dc:	331c      	adds	r3, #28
 80048de:	2201      	movs	r2, #1
 80048e0:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80048e2:	78fb      	ldrb	r3, [r7, #3]
 80048e4:	015a      	lsls	r2, r3, #5
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	4413      	add	r3, r2
 80048ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	78fa      	ldrb	r2, [r7, #3]
 80048f2:	0151      	lsls	r1, r2, #5
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	440a      	add	r2, r1
 80048f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80048fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004900:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8004902:	78fa      	ldrb	r2, [r7, #3]
 8004904:	6879      	ldr	r1, [r7, #4]
 8004906:	4613      	mov	r3, r2
 8004908:	011b      	lsls	r3, r3, #4
 800490a:	1a9b      	subs	r3, r3, r2
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	440b      	add	r3, r1
 8004910:	334c      	adds	r3, #76	@ 0x4c
 8004912:	2204      	movs	r2, #4
 8004914:	701a      	strb	r2, [r3, #0]
 8004916:	e014      	b.n	8004942 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004918:	78fa      	ldrb	r2, [r7, #3]
 800491a:	6879      	ldr	r1, [r7, #4]
 800491c:	4613      	mov	r3, r2
 800491e:	011b      	lsls	r3, r3, #4
 8004920:	1a9b      	subs	r3, r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	440b      	add	r3, r1
 8004926:	334c      	adds	r3, #76	@ 0x4c
 8004928:	2202      	movs	r2, #2
 800492a:	701a      	strb	r2, [r3, #0]
 800492c:	e009      	b.n	8004942 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800492e:	78fa      	ldrb	r2, [r7, #3]
 8004930:	6879      	ldr	r1, [r7, #4]
 8004932:	4613      	mov	r3, r2
 8004934:	011b      	lsls	r3, r3, #4
 8004936:	1a9b      	subs	r3, r3, r2
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	440b      	add	r3, r1
 800493c:	334c      	adds	r3, #76	@ 0x4c
 800493e:	2202      	movs	r2, #2
 8004940:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004942:	78fa      	ldrb	r2, [r7, #3]
 8004944:	6879      	ldr	r1, [r7, #4]
 8004946:	4613      	mov	r3, r2
 8004948:	011b      	lsls	r3, r3, #4
 800494a:	1a9b      	subs	r3, r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	440b      	add	r3, r1
 8004950:	3326      	adds	r3, #38	@ 0x26
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00b      	beq.n	8004970 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004958:	78fa      	ldrb	r2, [r7, #3]
 800495a:	6879      	ldr	r1, [r7, #4]
 800495c:	4613      	mov	r3, r2
 800495e:	011b      	lsls	r3, r3, #4
 8004960:	1a9b      	subs	r3, r3, r2
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	440b      	add	r3, r1
 8004966:	3326      	adds	r3, #38	@ 0x26
 8004968:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800496a:	2b02      	cmp	r3, #2
 800496c:	f040 8136 	bne.w	8004bdc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004970:	78fb      	ldrb	r3, [r7, #3]
 8004972:	015a      	lsls	r2, r3, #5
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	4413      	add	r3, r2
 8004978:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004986:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800498e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004990:	78fb      	ldrb	r3, [r7, #3]
 8004992:	015a      	lsls	r2, r3, #5
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	4413      	add	r3, r2
 8004998:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800499c:	461a      	mov	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6013      	str	r3, [r2, #0]
 80049a2:	e11b      	b.n	8004bdc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80049a4:	78fa      	ldrb	r2, [r7, #3]
 80049a6:	6879      	ldr	r1, [r7, #4]
 80049a8:	4613      	mov	r3, r2
 80049aa:	011b      	lsls	r3, r3, #4
 80049ac:	1a9b      	subs	r3, r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	440b      	add	r3, r1
 80049b2:	334d      	adds	r3, #77	@ 0x4d
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	2b03      	cmp	r3, #3
 80049b8:	f040 8081 	bne.w	8004abe <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80049bc:	78fa      	ldrb	r2, [r7, #3]
 80049be:	6879      	ldr	r1, [r7, #4]
 80049c0:	4613      	mov	r3, r2
 80049c2:	011b      	lsls	r3, r3, #4
 80049c4:	1a9b      	subs	r3, r3, r2
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	440b      	add	r3, r1
 80049ca:	334d      	adds	r3, #77	@ 0x4d
 80049cc:	2202      	movs	r2, #2
 80049ce:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80049d0:	78fa      	ldrb	r2, [r7, #3]
 80049d2:	6879      	ldr	r1, [r7, #4]
 80049d4:	4613      	mov	r3, r2
 80049d6:	011b      	lsls	r3, r3, #4
 80049d8:	1a9b      	subs	r3, r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	440b      	add	r3, r1
 80049de:	331b      	adds	r3, #27
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	f040 80fa 	bne.w	8004bdc <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80049e8:	78fa      	ldrb	r2, [r7, #3]
 80049ea:	6879      	ldr	r1, [r7, #4]
 80049ec:	4613      	mov	r3, r2
 80049ee:	011b      	lsls	r3, r3, #4
 80049f0:	1a9b      	subs	r3, r3, r2
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	440b      	add	r3, r1
 80049f6:	334c      	adds	r3, #76	@ 0x4c
 80049f8:	2202      	movs	r2, #2
 80049fa:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80049fc:	78fb      	ldrb	r3, [r7, #3]
 80049fe:	015a      	lsls	r2, r3, #5
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	4413      	add	r3, r2
 8004a04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	78fa      	ldrb	r2, [r7, #3]
 8004a0c:	0151      	lsls	r1, r2, #5
 8004a0e:	693a      	ldr	r2, [r7, #16]
 8004a10:	440a      	add	r2, r1
 8004a12:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004a16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a1a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8004a1c:	78fb      	ldrb	r3, [r7, #3]
 8004a1e:	015a      	lsls	r2, r3, #5
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	4413      	add	r3, r2
 8004a24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	78fa      	ldrb	r2, [r7, #3]
 8004a2c:	0151      	lsls	r1, r2, #5
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	440a      	add	r2, r1
 8004a32:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004a36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a3a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8004a3c:	78fb      	ldrb	r3, [r7, #3]
 8004a3e:	015a      	lsls	r2, r3, #5
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	4413      	add	r3, r2
 8004a44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	78fa      	ldrb	r2, [r7, #3]
 8004a4c:	0151      	lsls	r1, r2, #5
 8004a4e:	693a      	ldr	r2, [r7, #16]
 8004a50:	440a      	add	r2, r1
 8004a52:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004a56:	f023 0320 	bic.w	r3, r3, #32
 8004a5a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004a5c:	78fa      	ldrb	r2, [r7, #3]
 8004a5e:	6879      	ldr	r1, [r7, #4]
 8004a60:	4613      	mov	r3, r2
 8004a62:	011b      	lsls	r3, r3, #4
 8004a64:	1a9b      	subs	r3, r3, r2
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	440b      	add	r3, r1
 8004a6a:	3326      	adds	r3, #38	@ 0x26
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00b      	beq.n	8004a8a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004a72:	78fa      	ldrb	r2, [r7, #3]
 8004a74:	6879      	ldr	r1, [r7, #4]
 8004a76:	4613      	mov	r3, r2
 8004a78:	011b      	lsls	r3, r3, #4
 8004a7a:	1a9b      	subs	r3, r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	440b      	add	r3, r1
 8004a80:	3326      	adds	r3, #38	@ 0x26
 8004a82:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	f040 80a9 	bne.w	8004bdc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004a8a:	78fb      	ldrb	r3, [r7, #3]
 8004a8c:	015a      	lsls	r2, r3, #5
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	4413      	add	r3, r2
 8004a92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004aa0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004aa8:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004aaa:	78fb      	ldrb	r3, [r7, #3]
 8004aac:	015a      	lsls	r2, r3, #5
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6013      	str	r3, [r2, #0]
 8004abc:	e08e      	b.n	8004bdc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004abe:	78fa      	ldrb	r2, [r7, #3]
 8004ac0:	6879      	ldr	r1, [r7, #4]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	011b      	lsls	r3, r3, #4
 8004ac6:	1a9b      	subs	r3, r3, r2
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	440b      	add	r3, r1
 8004acc:	334d      	adds	r3, #77	@ 0x4d
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	2b04      	cmp	r3, #4
 8004ad2:	d143      	bne.n	8004b5c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004ad4:	78fa      	ldrb	r2, [r7, #3]
 8004ad6:	6879      	ldr	r1, [r7, #4]
 8004ad8:	4613      	mov	r3, r2
 8004ada:	011b      	lsls	r3, r3, #4
 8004adc:	1a9b      	subs	r3, r3, r2
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	440b      	add	r3, r1
 8004ae2:	334d      	adds	r3, #77	@ 0x4d
 8004ae4:	2202      	movs	r2, #2
 8004ae6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004ae8:	78fa      	ldrb	r2, [r7, #3]
 8004aea:	6879      	ldr	r1, [r7, #4]
 8004aec:	4613      	mov	r3, r2
 8004aee:	011b      	lsls	r3, r3, #4
 8004af0:	1a9b      	subs	r3, r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	440b      	add	r3, r1
 8004af6:	334c      	adds	r3, #76	@ 0x4c
 8004af8:	2202      	movs	r2, #2
 8004afa:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004afc:	78fa      	ldrb	r2, [r7, #3]
 8004afe:	6879      	ldr	r1, [r7, #4]
 8004b00:	4613      	mov	r3, r2
 8004b02:	011b      	lsls	r3, r3, #4
 8004b04:	1a9b      	subs	r3, r3, r2
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	440b      	add	r3, r1
 8004b0a:	3326      	adds	r3, #38	@ 0x26
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00a      	beq.n	8004b28 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004b12:	78fa      	ldrb	r2, [r7, #3]
 8004b14:	6879      	ldr	r1, [r7, #4]
 8004b16:	4613      	mov	r3, r2
 8004b18:	011b      	lsls	r3, r3, #4
 8004b1a:	1a9b      	subs	r3, r3, r2
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	440b      	add	r3, r1
 8004b20:	3326      	adds	r3, #38	@ 0x26
 8004b22:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d159      	bne.n	8004bdc <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004b28:	78fb      	ldrb	r3, [r7, #3]
 8004b2a:	015a      	lsls	r2, r3, #5
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	4413      	add	r3, r2
 8004b30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004b3e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004b46:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004b48:	78fb      	ldrb	r3, [r7, #3]
 8004b4a:	015a      	lsls	r2, r3, #5
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	4413      	add	r3, r2
 8004b50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b54:	461a      	mov	r2, r3
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6013      	str	r3, [r2, #0]
 8004b5a:	e03f      	b.n	8004bdc <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8004b5c:	78fa      	ldrb	r2, [r7, #3]
 8004b5e:	6879      	ldr	r1, [r7, #4]
 8004b60:	4613      	mov	r3, r2
 8004b62:	011b      	lsls	r3, r3, #4
 8004b64:	1a9b      	subs	r3, r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	440b      	add	r3, r1
 8004b6a:	334d      	adds	r3, #77	@ 0x4d
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	2b08      	cmp	r3, #8
 8004b70:	d126      	bne.n	8004bc0 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004b72:	78fa      	ldrb	r2, [r7, #3]
 8004b74:	6879      	ldr	r1, [r7, #4]
 8004b76:	4613      	mov	r3, r2
 8004b78:	011b      	lsls	r3, r3, #4
 8004b7a:	1a9b      	subs	r3, r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	440b      	add	r3, r1
 8004b80:	334d      	adds	r3, #77	@ 0x4d
 8004b82:	2202      	movs	r2, #2
 8004b84:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004b86:	78fa      	ldrb	r2, [r7, #3]
 8004b88:	6879      	ldr	r1, [r7, #4]
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	011b      	lsls	r3, r3, #4
 8004b8e:	1a9b      	subs	r3, r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	440b      	add	r3, r1
 8004b94:	3344      	adds	r3, #68	@ 0x44
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	1c59      	adds	r1, r3, #1
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	011b      	lsls	r3, r3, #4
 8004ba0:	1a9b      	subs	r3, r3, r2
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	4403      	add	r3, r0
 8004ba6:	3344      	adds	r3, #68	@ 0x44
 8004ba8:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8004baa:	78fa      	ldrb	r2, [r7, #3]
 8004bac:	6879      	ldr	r1, [r7, #4]
 8004bae:	4613      	mov	r3, r2
 8004bb0:	011b      	lsls	r3, r3, #4
 8004bb2:	1a9b      	subs	r3, r3, r2
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	440b      	add	r3, r1
 8004bb8:	334c      	adds	r3, #76	@ 0x4c
 8004bba:	2204      	movs	r2, #4
 8004bbc:	701a      	strb	r2, [r3, #0]
 8004bbe:	e00d      	b.n	8004bdc <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8004bc0:	78fa      	ldrb	r2, [r7, #3]
 8004bc2:	6879      	ldr	r1, [r7, #4]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	011b      	lsls	r3, r3, #4
 8004bc8:	1a9b      	subs	r3, r3, r2
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	440b      	add	r3, r1
 8004bce:	334d      	adds	r3, #77	@ 0x4d
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	f000 8100 	beq.w	8004dd8 <HCD_HC_IN_IRQHandler+0xcca>
 8004bd8:	e000      	b.n	8004bdc <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004bda:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004bdc:	78fa      	ldrb	r2, [r7, #3]
 8004bde:	6879      	ldr	r1, [r7, #4]
 8004be0:	4613      	mov	r3, r2
 8004be2:	011b      	lsls	r3, r3, #4
 8004be4:	1a9b      	subs	r3, r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	440b      	add	r3, r1
 8004bea:	334c      	adds	r3, #76	@ 0x4c
 8004bec:	781a      	ldrb	r2, [r3, #0]
 8004bee:	78fb      	ldrb	r3, [r7, #3]
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f005 fe8a 	bl	800a90c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004bf8:	e0ef      	b.n	8004dda <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	78fa      	ldrb	r2, [r7, #3]
 8004c00:	4611      	mov	r1, r2
 8004c02:	4618      	mov	r0, r3
 8004c04:	f002 fd85 	bl	8007712 <USB_ReadChInterrupts>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c0e:	2b40      	cmp	r3, #64	@ 0x40
 8004c10:	d12f      	bne.n	8004c72 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004c12:	78fb      	ldrb	r3, [r7, #3]
 8004c14:	015a      	lsls	r2, r3, #5
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	4413      	add	r3, r2
 8004c1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c1e:	461a      	mov	r2, r3
 8004c20:	2340      	movs	r3, #64	@ 0x40
 8004c22:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004c24:	78fa      	ldrb	r2, [r7, #3]
 8004c26:	6879      	ldr	r1, [r7, #4]
 8004c28:	4613      	mov	r3, r2
 8004c2a:	011b      	lsls	r3, r3, #4
 8004c2c:	1a9b      	subs	r3, r3, r2
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	440b      	add	r3, r1
 8004c32:	334d      	adds	r3, #77	@ 0x4d
 8004c34:	2205      	movs	r2, #5
 8004c36:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004c38:	78fa      	ldrb	r2, [r7, #3]
 8004c3a:	6879      	ldr	r1, [r7, #4]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	011b      	lsls	r3, r3, #4
 8004c40:	1a9b      	subs	r3, r3, r2
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	440b      	add	r3, r1
 8004c46:	331a      	adds	r3, #26
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d109      	bne.n	8004c62 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004c4e:	78fa      	ldrb	r2, [r7, #3]
 8004c50:	6879      	ldr	r1, [r7, #4]
 8004c52:	4613      	mov	r3, r2
 8004c54:	011b      	lsls	r3, r3, #4
 8004c56:	1a9b      	subs	r3, r3, r2
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	440b      	add	r3, r1
 8004c5c:	3344      	adds	r3, #68	@ 0x44
 8004c5e:	2200      	movs	r2, #0
 8004c60:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	78fa      	ldrb	r2, [r7, #3]
 8004c68:	4611      	mov	r1, r2
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f003 faf5 	bl	800825a <USB_HC_Halt>
 8004c70:	e0b3      	b.n	8004dda <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	78fa      	ldrb	r2, [r7, #3]
 8004c78:	4611      	mov	r1, r2
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f002 fd49 	bl	8007712 <USB_ReadChInterrupts>
 8004c80:	4603      	mov	r3, r0
 8004c82:	f003 0310 	and.w	r3, r3, #16
 8004c86:	2b10      	cmp	r3, #16
 8004c88:	f040 80a7 	bne.w	8004dda <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004c8c:	78fa      	ldrb	r2, [r7, #3]
 8004c8e:	6879      	ldr	r1, [r7, #4]
 8004c90:	4613      	mov	r3, r2
 8004c92:	011b      	lsls	r3, r3, #4
 8004c94:	1a9b      	subs	r3, r3, r2
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	440b      	add	r3, r1
 8004c9a:	3326      	adds	r3, #38	@ 0x26
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	2b03      	cmp	r3, #3
 8004ca0:	d11b      	bne.n	8004cda <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004ca2:	78fa      	ldrb	r2, [r7, #3]
 8004ca4:	6879      	ldr	r1, [r7, #4]
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	011b      	lsls	r3, r3, #4
 8004caa:	1a9b      	subs	r3, r3, r2
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	440b      	add	r3, r1
 8004cb0:	3344      	adds	r3, #68	@ 0x44
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8004cb6:	78fa      	ldrb	r2, [r7, #3]
 8004cb8:	6879      	ldr	r1, [r7, #4]
 8004cba:	4613      	mov	r3, r2
 8004cbc:	011b      	lsls	r3, r3, #4
 8004cbe:	1a9b      	subs	r3, r3, r2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	440b      	add	r3, r1
 8004cc4:	334d      	adds	r3, #77	@ 0x4d
 8004cc6:	2204      	movs	r2, #4
 8004cc8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	78fa      	ldrb	r2, [r7, #3]
 8004cd0:	4611      	mov	r1, r2
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f003 fac1 	bl	800825a <USB_HC_Halt>
 8004cd8:	e03f      	b.n	8004d5a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004cda:	78fa      	ldrb	r2, [r7, #3]
 8004cdc:	6879      	ldr	r1, [r7, #4]
 8004cde:	4613      	mov	r3, r2
 8004ce0:	011b      	lsls	r3, r3, #4
 8004ce2:	1a9b      	subs	r3, r3, r2
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	440b      	add	r3, r1
 8004ce8:	3326      	adds	r3, #38	@ 0x26
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00a      	beq.n	8004d06 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004cf0:	78fa      	ldrb	r2, [r7, #3]
 8004cf2:	6879      	ldr	r1, [r7, #4]
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	011b      	lsls	r3, r3, #4
 8004cf8:	1a9b      	subs	r3, r3, r2
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	440b      	add	r3, r1
 8004cfe:	3326      	adds	r3, #38	@ 0x26
 8004d00:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d129      	bne.n	8004d5a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004d06:	78fa      	ldrb	r2, [r7, #3]
 8004d08:	6879      	ldr	r1, [r7, #4]
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	011b      	lsls	r3, r3, #4
 8004d0e:	1a9b      	subs	r3, r3, r2
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	440b      	add	r3, r1
 8004d14:	3344      	adds	r3, #68	@ 0x44
 8004d16:	2200      	movs	r2, #0
 8004d18:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	799b      	ldrb	r3, [r3, #6]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00a      	beq.n	8004d38 <HCD_HC_IN_IRQHandler+0xc2a>
 8004d22:	78fa      	ldrb	r2, [r7, #3]
 8004d24:	6879      	ldr	r1, [r7, #4]
 8004d26:	4613      	mov	r3, r2
 8004d28:	011b      	lsls	r3, r3, #4
 8004d2a:	1a9b      	subs	r3, r3, r2
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	440b      	add	r3, r1
 8004d30:	331b      	adds	r3, #27
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d110      	bne.n	8004d5a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004d38:	78fa      	ldrb	r2, [r7, #3]
 8004d3a:	6879      	ldr	r1, [r7, #4]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	011b      	lsls	r3, r3, #4
 8004d40:	1a9b      	subs	r3, r3, r2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	440b      	add	r3, r1
 8004d46:	334d      	adds	r3, #77	@ 0x4d
 8004d48:	2204      	movs	r2, #4
 8004d4a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	78fa      	ldrb	r2, [r7, #3]
 8004d52:	4611      	mov	r1, r2
 8004d54:	4618      	mov	r0, r3
 8004d56:	f003 fa80 	bl	800825a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004d5a:	78fa      	ldrb	r2, [r7, #3]
 8004d5c:	6879      	ldr	r1, [r7, #4]
 8004d5e:	4613      	mov	r3, r2
 8004d60:	011b      	lsls	r3, r3, #4
 8004d62:	1a9b      	subs	r3, r3, r2
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	440b      	add	r3, r1
 8004d68:	331b      	adds	r3, #27
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d129      	bne.n	8004dc4 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004d70:	78fa      	ldrb	r2, [r7, #3]
 8004d72:	6879      	ldr	r1, [r7, #4]
 8004d74:	4613      	mov	r3, r2
 8004d76:	011b      	lsls	r3, r3, #4
 8004d78:	1a9b      	subs	r3, r3, r2
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	440b      	add	r3, r1
 8004d7e:	331b      	adds	r3, #27
 8004d80:	2200      	movs	r2, #0
 8004d82:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004d84:	78fb      	ldrb	r3, [r7, #3]
 8004d86:	015a      	lsls	r2, r3, #5
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	78fa      	ldrb	r2, [r7, #3]
 8004d94:	0151      	lsls	r1, r2, #5
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	440a      	add	r2, r1
 8004d9a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004d9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004da2:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004da4:	78fb      	ldrb	r3, [r7, #3]
 8004da6:	015a      	lsls	r2, r3, #5
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	4413      	add	r3, r2
 8004dac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	78fa      	ldrb	r2, [r7, #3]
 8004db4:	0151      	lsls	r1, r2, #5
 8004db6:	693a      	ldr	r2, [r7, #16]
 8004db8:	440a      	add	r2, r1
 8004dba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004dbe:	f043 0320 	orr.w	r3, r3, #32
 8004dc2:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004dc4:	78fb      	ldrb	r3, [r7, #3]
 8004dc6:	015a      	lsls	r2, r3, #5
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	4413      	add	r3, r2
 8004dcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	2310      	movs	r3, #16
 8004dd4:	6093      	str	r3, [r2, #8]
 8004dd6:	e000      	b.n	8004dda <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004dd8:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004dda:	3718      	adds	r7, #24
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	460b      	mov	r3, r1
 8004dea:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	78fa      	ldrb	r2, [r7, #3]
 8004dfc:	4611      	mov	r1, r2
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f002 fc87 	bl	8007712 <USB_ReadChInterrupts>
 8004e04:	4603      	mov	r3, r0
 8004e06:	f003 0304 	and.w	r3, r3, #4
 8004e0a:	2b04      	cmp	r3, #4
 8004e0c:	d11b      	bne.n	8004e46 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004e0e:	78fb      	ldrb	r3, [r7, #3]
 8004e10:	015a      	lsls	r2, r3, #5
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	4413      	add	r3, r2
 8004e16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	2304      	movs	r3, #4
 8004e1e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004e20:	78fa      	ldrb	r2, [r7, #3]
 8004e22:	6879      	ldr	r1, [r7, #4]
 8004e24:	4613      	mov	r3, r2
 8004e26:	011b      	lsls	r3, r3, #4
 8004e28:	1a9b      	subs	r3, r3, r2
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	440b      	add	r3, r1
 8004e2e:	334d      	adds	r3, #77	@ 0x4d
 8004e30:	2207      	movs	r2, #7
 8004e32:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	78fa      	ldrb	r2, [r7, #3]
 8004e3a:	4611      	mov	r1, r2
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f003 fa0c 	bl	800825a <USB_HC_Halt>
 8004e42:	f000 bc89 	b.w	8005758 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	78fa      	ldrb	r2, [r7, #3]
 8004e4c:	4611      	mov	r1, r2
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f002 fc5f 	bl	8007712 <USB_ReadChInterrupts>
 8004e54:	4603      	mov	r3, r0
 8004e56:	f003 0320 	and.w	r3, r3, #32
 8004e5a:	2b20      	cmp	r3, #32
 8004e5c:	f040 8082 	bne.w	8004f64 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004e60:	78fb      	ldrb	r3, [r7, #3]
 8004e62:	015a      	lsls	r2, r3, #5
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	4413      	add	r3, r2
 8004e68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	2320      	movs	r3, #32
 8004e70:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8004e72:	78fa      	ldrb	r2, [r7, #3]
 8004e74:	6879      	ldr	r1, [r7, #4]
 8004e76:	4613      	mov	r3, r2
 8004e78:	011b      	lsls	r3, r3, #4
 8004e7a:	1a9b      	subs	r3, r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	440b      	add	r3, r1
 8004e80:	3319      	adds	r3, #25
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d124      	bne.n	8004ed2 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004e88:	78fa      	ldrb	r2, [r7, #3]
 8004e8a:	6879      	ldr	r1, [r7, #4]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	011b      	lsls	r3, r3, #4
 8004e90:	1a9b      	subs	r3, r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	440b      	add	r3, r1
 8004e96:	3319      	adds	r3, #25
 8004e98:	2200      	movs	r2, #0
 8004e9a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004e9c:	78fa      	ldrb	r2, [r7, #3]
 8004e9e:	6879      	ldr	r1, [r7, #4]
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	011b      	lsls	r3, r3, #4
 8004ea4:	1a9b      	subs	r3, r3, r2
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	440b      	add	r3, r1
 8004eaa:	334c      	adds	r3, #76	@ 0x4c
 8004eac:	2202      	movs	r2, #2
 8004eae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004eb0:	78fa      	ldrb	r2, [r7, #3]
 8004eb2:	6879      	ldr	r1, [r7, #4]
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	011b      	lsls	r3, r3, #4
 8004eb8:	1a9b      	subs	r3, r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	440b      	add	r3, r1
 8004ebe:	334d      	adds	r3, #77	@ 0x4d
 8004ec0:	2203      	movs	r2, #3
 8004ec2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	78fa      	ldrb	r2, [r7, #3]
 8004eca:	4611      	mov	r1, r2
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f003 f9c4 	bl	800825a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8004ed2:	78fa      	ldrb	r2, [r7, #3]
 8004ed4:	6879      	ldr	r1, [r7, #4]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	011b      	lsls	r3, r3, #4
 8004eda:	1a9b      	subs	r3, r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	440b      	add	r3, r1
 8004ee0:	331a      	adds	r3, #26
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	f040 8437 	bne.w	8005758 <HCD_HC_OUT_IRQHandler+0x978>
 8004eea:	78fa      	ldrb	r2, [r7, #3]
 8004eec:	6879      	ldr	r1, [r7, #4]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	011b      	lsls	r3, r3, #4
 8004ef2:	1a9b      	subs	r3, r3, r2
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	440b      	add	r3, r1
 8004ef8:	331b      	adds	r3, #27
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f040 842b 	bne.w	8005758 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004f02:	78fa      	ldrb	r2, [r7, #3]
 8004f04:	6879      	ldr	r1, [r7, #4]
 8004f06:	4613      	mov	r3, r2
 8004f08:	011b      	lsls	r3, r3, #4
 8004f0a:	1a9b      	subs	r3, r3, r2
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	440b      	add	r3, r1
 8004f10:	3326      	adds	r3, #38	@ 0x26
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d009      	beq.n	8004f2c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004f18:	78fa      	ldrb	r2, [r7, #3]
 8004f1a:	6879      	ldr	r1, [r7, #4]
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	011b      	lsls	r3, r3, #4
 8004f20:	1a9b      	subs	r3, r3, r2
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	440b      	add	r3, r1
 8004f26:	331b      	adds	r3, #27
 8004f28:	2201      	movs	r2, #1
 8004f2a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004f2c:	78fa      	ldrb	r2, [r7, #3]
 8004f2e:	6879      	ldr	r1, [r7, #4]
 8004f30:	4613      	mov	r3, r2
 8004f32:	011b      	lsls	r3, r3, #4
 8004f34:	1a9b      	subs	r3, r3, r2
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	440b      	add	r3, r1
 8004f3a:	334d      	adds	r3, #77	@ 0x4d
 8004f3c:	2203      	movs	r2, #3
 8004f3e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	78fa      	ldrb	r2, [r7, #3]
 8004f46:	4611      	mov	r1, r2
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f003 f986 	bl	800825a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8004f4e:	78fa      	ldrb	r2, [r7, #3]
 8004f50:	6879      	ldr	r1, [r7, #4]
 8004f52:	4613      	mov	r3, r2
 8004f54:	011b      	lsls	r3, r3, #4
 8004f56:	1a9b      	subs	r3, r3, r2
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	440b      	add	r3, r1
 8004f5c:	3344      	adds	r3, #68	@ 0x44
 8004f5e:	2200      	movs	r2, #0
 8004f60:	601a      	str	r2, [r3, #0]
 8004f62:	e3f9      	b.n	8005758 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	78fa      	ldrb	r2, [r7, #3]
 8004f6a:	4611      	mov	r1, r2
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f002 fbd0 	bl	8007712 <USB_ReadChInterrupts>
 8004f72:	4603      	mov	r3, r0
 8004f74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f7c:	d111      	bne.n	8004fa2 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004f7e:	78fb      	ldrb	r3, [r7, #3]
 8004f80:	015a      	lsls	r2, r3, #5
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	4413      	add	r3, r2
 8004f86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004f90:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	78fa      	ldrb	r2, [r7, #3]
 8004f98:	4611      	mov	r1, r2
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f003 f95d 	bl	800825a <USB_HC_Halt>
 8004fa0:	e3da      	b.n	8005758 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	78fa      	ldrb	r2, [r7, #3]
 8004fa8:	4611      	mov	r1, r2
 8004faa:	4618      	mov	r0, r3
 8004fac:	f002 fbb1 	bl	8007712 <USB_ReadChInterrupts>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	f003 0301 	and.w	r3, r3, #1
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d168      	bne.n	800508c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004fba:	78fa      	ldrb	r2, [r7, #3]
 8004fbc:	6879      	ldr	r1, [r7, #4]
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	011b      	lsls	r3, r3, #4
 8004fc2:	1a9b      	subs	r3, r3, r2
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	440b      	add	r3, r1
 8004fc8:	3344      	adds	r3, #68	@ 0x44
 8004fca:	2200      	movs	r2, #0
 8004fcc:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	78fa      	ldrb	r2, [r7, #3]
 8004fd4:	4611      	mov	r1, r2
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f002 fb9b 	bl	8007712 <USB_ReadChInterrupts>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fe2:	2b40      	cmp	r3, #64	@ 0x40
 8004fe4:	d112      	bne.n	800500c <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004fe6:	78fa      	ldrb	r2, [r7, #3]
 8004fe8:	6879      	ldr	r1, [r7, #4]
 8004fea:	4613      	mov	r3, r2
 8004fec:	011b      	lsls	r3, r3, #4
 8004fee:	1a9b      	subs	r3, r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	440b      	add	r3, r1
 8004ff4:	3319      	adds	r3, #25
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004ffa:	78fb      	ldrb	r3, [r7, #3]
 8004ffc:	015a      	lsls	r2, r3, #5
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	4413      	add	r3, r2
 8005002:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005006:	461a      	mov	r2, r3
 8005008:	2340      	movs	r3, #64	@ 0x40
 800500a:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 800500c:	78fa      	ldrb	r2, [r7, #3]
 800500e:	6879      	ldr	r1, [r7, #4]
 8005010:	4613      	mov	r3, r2
 8005012:	011b      	lsls	r3, r3, #4
 8005014:	1a9b      	subs	r3, r3, r2
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	440b      	add	r3, r1
 800501a:	331b      	adds	r3, #27
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d019      	beq.n	8005056 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005022:	78fa      	ldrb	r2, [r7, #3]
 8005024:	6879      	ldr	r1, [r7, #4]
 8005026:	4613      	mov	r3, r2
 8005028:	011b      	lsls	r3, r3, #4
 800502a:	1a9b      	subs	r3, r3, r2
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	440b      	add	r3, r1
 8005030:	331b      	adds	r3, #27
 8005032:	2200      	movs	r2, #0
 8005034:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005036:	78fb      	ldrb	r3, [r7, #3]
 8005038:	015a      	lsls	r2, r3, #5
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	4413      	add	r3, r2
 800503e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	78fa      	ldrb	r2, [r7, #3]
 8005046:	0151      	lsls	r1, r2, #5
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	440a      	add	r2, r1
 800504c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005050:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005054:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8005056:	78fb      	ldrb	r3, [r7, #3]
 8005058:	015a      	lsls	r2, r3, #5
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	4413      	add	r3, r2
 800505e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005062:	461a      	mov	r2, r3
 8005064:	2301      	movs	r3, #1
 8005066:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8005068:	78fa      	ldrb	r2, [r7, #3]
 800506a:	6879      	ldr	r1, [r7, #4]
 800506c:	4613      	mov	r3, r2
 800506e:	011b      	lsls	r3, r3, #4
 8005070:	1a9b      	subs	r3, r3, r2
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	440b      	add	r3, r1
 8005076:	334d      	adds	r3, #77	@ 0x4d
 8005078:	2201      	movs	r2, #1
 800507a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	78fa      	ldrb	r2, [r7, #3]
 8005082:	4611      	mov	r1, r2
 8005084:	4618      	mov	r0, r3
 8005086:	f003 f8e8 	bl	800825a <USB_HC_Halt>
 800508a:	e365      	b.n	8005758 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	78fa      	ldrb	r2, [r7, #3]
 8005092:	4611      	mov	r1, r2
 8005094:	4618      	mov	r0, r3
 8005096:	f002 fb3c 	bl	8007712 <USB_ReadChInterrupts>
 800509a:	4603      	mov	r3, r0
 800509c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050a0:	2b40      	cmp	r3, #64	@ 0x40
 80050a2:	d139      	bne.n	8005118 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80050a4:	78fa      	ldrb	r2, [r7, #3]
 80050a6:	6879      	ldr	r1, [r7, #4]
 80050a8:	4613      	mov	r3, r2
 80050aa:	011b      	lsls	r3, r3, #4
 80050ac:	1a9b      	subs	r3, r3, r2
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	440b      	add	r3, r1
 80050b2:	334d      	adds	r3, #77	@ 0x4d
 80050b4:	2205      	movs	r2, #5
 80050b6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80050b8:	78fa      	ldrb	r2, [r7, #3]
 80050ba:	6879      	ldr	r1, [r7, #4]
 80050bc:	4613      	mov	r3, r2
 80050be:	011b      	lsls	r3, r3, #4
 80050c0:	1a9b      	subs	r3, r3, r2
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	440b      	add	r3, r1
 80050c6:	331a      	adds	r3, #26
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d109      	bne.n	80050e2 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80050ce:	78fa      	ldrb	r2, [r7, #3]
 80050d0:	6879      	ldr	r1, [r7, #4]
 80050d2:	4613      	mov	r3, r2
 80050d4:	011b      	lsls	r3, r3, #4
 80050d6:	1a9b      	subs	r3, r3, r2
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	440b      	add	r3, r1
 80050dc:	3319      	adds	r3, #25
 80050de:	2201      	movs	r2, #1
 80050e0:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80050e2:	78fa      	ldrb	r2, [r7, #3]
 80050e4:	6879      	ldr	r1, [r7, #4]
 80050e6:	4613      	mov	r3, r2
 80050e8:	011b      	lsls	r3, r3, #4
 80050ea:	1a9b      	subs	r3, r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	440b      	add	r3, r1
 80050f0:	3344      	adds	r3, #68	@ 0x44
 80050f2:	2200      	movs	r2, #0
 80050f4:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	78fa      	ldrb	r2, [r7, #3]
 80050fc:	4611      	mov	r1, r2
 80050fe:	4618      	mov	r0, r3
 8005100:	f003 f8ab 	bl	800825a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005104:	78fb      	ldrb	r3, [r7, #3]
 8005106:	015a      	lsls	r2, r3, #5
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	4413      	add	r3, r2
 800510c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005110:	461a      	mov	r2, r3
 8005112:	2340      	movs	r3, #64	@ 0x40
 8005114:	6093      	str	r3, [r2, #8]
 8005116:	e31f      	b.n	8005758 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	78fa      	ldrb	r2, [r7, #3]
 800511e:	4611      	mov	r1, r2
 8005120:	4618      	mov	r0, r3
 8005122:	f002 faf6 	bl	8007712 <USB_ReadChInterrupts>
 8005126:	4603      	mov	r3, r0
 8005128:	f003 0308 	and.w	r3, r3, #8
 800512c:	2b08      	cmp	r3, #8
 800512e:	d11a      	bne.n	8005166 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8005130:	78fb      	ldrb	r3, [r7, #3]
 8005132:	015a      	lsls	r2, r3, #5
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	4413      	add	r3, r2
 8005138:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800513c:	461a      	mov	r2, r3
 800513e:	2308      	movs	r3, #8
 8005140:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8005142:	78fa      	ldrb	r2, [r7, #3]
 8005144:	6879      	ldr	r1, [r7, #4]
 8005146:	4613      	mov	r3, r2
 8005148:	011b      	lsls	r3, r3, #4
 800514a:	1a9b      	subs	r3, r3, r2
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	440b      	add	r3, r1
 8005150:	334d      	adds	r3, #77	@ 0x4d
 8005152:	2206      	movs	r2, #6
 8005154:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	78fa      	ldrb	r2, [r7, #3]
 800515c:	4611      	mov	r1, r2
 800515e:	4618      	mov	r0, r3
 8005160:	f003 f87b 	bl	800825a <USB_HC_Halt>
 8005164:	e2f8      	b.n	8005758 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	78fa      	ldrb	r2, [r7, #3]
 800516c:	4611      	mov	r1, r2
 800516e:	4618      	mov	r0, r3
 8005170:	f002 facf 	bl	8007712 <USB_ReadChInterrupts>
 8005174:	4603      	mov	r3, r0
 8005176:	f003 0310 	and.w	r3, r3, #16
 800517a:	2b10      	cmp	r3, #16
 800517c:	d144      	bne.n	8005208 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800517e:	78fa      	ldrb	r2, [r7, #3]
 8005180:	6879      	ldr	r1, [r7, #4]
 8005182:	4613      	mov	r3, r2
 8005184:	011b      	lsls	r3, r3, #4
 8005186:	1a9b      	subs	r3, r3, r2
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	440b      	add	r3, r1
 800518c:	3344      	adds	r3, #68	@ 0x44
 800518e:	2200      	movs	r2, #0
 8005190:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8005192:	78fa      	ldrb	r2, [r7, #3]
 8005194:	6879      	ldr	r1, [r7, #4]
 8005196:	4613      	mov	r3, r2
 8005198:	011b      	lsls	r3, r3, #4
 800519a:	1a9b      	subs	r3, r3, r2
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	440b      	add	r3, r1
 80051a0:	334d      	adds	r3, #77	@ 0x4d
 80051a2:	2204      	movs	r2, #4
 80051a4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80051a6:	78fa      	ldrb	r2, [r7, #3]
 80051a8:	6879      	ldr	r1, [r7, #4]
 80051aa:	4613      	mov	r3, r2
 80051ac:	011b      	lsls	r3, r3, #4
 80051ae:	1a9b      	subs	r3, r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	440b      	add	r3, r1
 80051b4:	3319      	adds	r3, #25
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d114      	bne.n	80051e6 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80051bc:	78fa      	ldrb	r2, [r7, #3]
 80051be:	6879      	ldr	r1, [r7, #4]
 80051c0:	4613      	mov	r3, r2
 80051c2:	011b      	lsls	r3, r3, #4
 80051c4:	1a9b      	subs	r3, r3, r2
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	440b      	add	r3, r1
 80051ca:	3318      	adds	r3, #24
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d109      	bne.n	80051e6 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80051d2:	78fa      	ldrb	r2, [r7, #3]
 80051d4:	6879      	ldr	r1, [r7, #4]
 80051d6:	4613      	mov	r3, r2
 80051d8:	011b      	lsls	r3, r3, #4
 80051da:	1a9b      	subs	r3, r3, r2
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	440b      	add	r3, r1
 80051e0:	3319      	adds	r3, #25
 80051e2:	2201      	movs	r2, #1
 80051e4:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	78fa      	ldrb	r2, [r7, #3]
 80051ec:	4611      	mov	r1, r2
 80051ee:	4618      	mov	r0, r3
 80051f0:	f003 f833 	bl	800825a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80051f4:	78fb      	ldrb	r3, [r7, #3]
 80051f6:	015a      	lsls	r2, r3, #5
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	4413      	add	r3, r2
 80051fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005200:	461a      	mov	r2, r3
 8005202:	2310      	movs	r3, #16
 8005204:	6093      	str	r3, [r2, #8]
 8005206:	e2a7      	b.n	8005758 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	78fa      	ldrb	r2, [r7, #3]
 800520e:	4611      	mov	r1, r2
 8005210:	4618      	mov	r0, r3
 8005212:	f002 fa7e 	bl	8007712 <USB_ReadChInterrupts>
 8005216:	4603      	mov	r3, r0
 8005218:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800521c:	2b80      	cmp	r3, #128	@ 0x80
 800521e:	f040 8083 	bne.w	8005328 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	799b      	ldrb	r3, [r3, #6]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d111      	bne.n	800524e <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800522a:	78fa      	ldrb	r2, [r7, #3]
 800522c:	6879      	ldr	r1, [r7, #4]
 800522e:	4613      	mov	r3, r2
 8005230:	011b      	lsls	r3, r3, #4
 8005232:	1a9b      	subs	r3, r3, r2
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	440b      	add	r3, r1
 8005238:	334d      	adds	r3, #77	@ 0x4d
 800523a:	2207      	movs	r2, #7
 800523c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	78fa      	ldrb	r2, [r7, #3]
 8005244:	4611      	mov	r1, r2
 8005246:	4618      	mov	r0, r3
 8005248:	f003 f807 	bl	800825a <USB_HC_Halt>
 800524c:	e062      	b.n	8005314 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800524e:	78fa      	ldrb	r2, [r7, #3]
 8005250:	6879      	ldr	r1, [r7, #4]
 8005252:	4613      	mov	r3, r2
 8005254:	011b      	lsls	r3, r3, #4
 8005256:	1a9b      	subs	r3, r3, r2
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	440b      	add	r3, r1
 800525c:	3344      	adds	r3, #68	@ 0x44
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	1c59      	adds	r1, r3, #1
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	4613      	mov	r3, r2
 8005266:	011b      	lsls	r3, r3, #4
 8005268:	1a9b      	subs	r3, r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	4403      	add	r3, r0
 800526e:	3344      	adds	r3, #68	@ 0x44
 8005270:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005272:	78fa      	ldrb	r2, [r7, #3]
 8005274:	6879      	ldr	r1, [r7, #4]
 8005276:	4613      	mov	r3, r2
 8005278:	011b      	lsls	r3, r3, #4
 800527a:	1a9b      	subs	r3, r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	440b      	add	r3, r1
 8005280:	3344      	adds	r3, #68	@ 0x44
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2b02      	cmp	r3, #2
 8005286:	d922      	bls.n	80052ce <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005288:	78fa      	ldrb	r2, [r7, #3]
 800528a:	6879      	ldr	r1, [r7, #4]
 800528c:	4613      	mov	r3, r2
 800528e:	011b      	lsls	r3, r3, #4
 8005290:	1a9b      	subs	r3, r3, r2
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	440b      	add	r3, r1
 8005296:	3344      	adds	r3, #68	@ 0x44
 8005298:	2200      	movs	r2, #0
 800529a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800529c:	78fa      	ldrb	r2, [r7, #3]
 800529e:	6879      	ldr	r1, [r7, #4]
 80052a0:	4613      	mov	r3, r2
 80052a2:	011b      	lsls	r3, r3, #4
 80052a4:	1a9b      	subs	r3, r3, r2
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	440b      	add	r3, r1
 80052aa:	334c      	adds	r3, #76	@ 0x4c
 80052ac:	2204      	movs	r2, #4
 80052ae:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80052b0:	78fa      	ldrb	r2, [r7, #3]
 80052b2:	6879      	ldr	r1, [r7, #4]
 80052b4:	4613      	mov	r3, r2
 80052b6:	011b      	lsls	r3, r3, #4
 80052b8:	1a9b      	subs	r3, r3, r2
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	440b      	add	r3, r1
 80052be:	334c      	adds	r3, #76	@ 0x4c
 80052c0:	781a      	ldrb	r2, [r3, #0]
 80052c2:	78fb      	ldrb	r3, [r7, #3]
 80052c4:	4619      	mov	r1, r3
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f005 fb20 	bl	800a90c <HAL_HCD_HC_NotifyURBChange_Callback>
 80052cc:	e022      	b.n	8005314 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80052ce:	78fa      	ldrb	r2, [r7, #3]
 80052d0:	6879      	ldr	r1, [r7, #4]
 80052d2:	4613      	mov	r3, r2
 80052d4:	011b      	lsls	r3, r3, #4
 80052d6:	1a9b      	subs	r3, r3, r2
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	440b      	add	r3, r1
 80052dc:	334c      	adds	r3, #76	@ 0x4c
 80052de:	2202      	movs	r2, #2
 80052e0:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80052e2:	78fb      	ldrb	r3, [r7, #3]
 80052e4:	015a      	lsls	r2, r3, #5
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	4413      	add	r3, r2
 80052ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80052f8:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005300:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005302:	78fb      	ldrb	r3, [r7, #3]
 8005304:	015a      	lsls	r2, r3, #5
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	4413      	add	r3, r2
 800530a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800530e:	461a      	mov	r2, r3
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005314:	78fb      	ldrb	r3, [r7, #3]
 8005316:	015a      	lsls	r2, r3, #5
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	4413      	add	r3, r2
 800531c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005320:	461a      	mov	r2, r3
 8005322:	2380      	movs	r3, #128	@ 0x80
 8005324:	6093      	str	r3, [r2, #8]
 8005326:	e217      	b.n	8005758 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	78fa      	ldrb	r2, [r7, #3]
 800532e:	4611      	mov	r1, r2
 8005330:	4618      	mov	r0, r3
 8005332:	f002 f9ee 	bl	8007712 <USB_ReadChInterrupts>
 8005336:	4603      	mov	r3, r0
 8005338:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800533c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005340:	d11b      	bne.n	800537a <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005342:	78fa      	ldrb	r2, [r7, #3]
 8005344:	6879      	ldr	r1, [r7, #4]
 8005346:	4613      	mov	r3, r2
 8005348:	011b      	lsls	r3, r3, #4
 800534a:	1a9b      	subs	r3, r3, r2
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	440b      	add	r3, r1
 8005350:	334d      	adds	r3, #77	@ 0x4d
 8005352:	2209      	movs	r2, #9
 8005354:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	78fa      	ldrb	r2, [r7, #3]
 800535c:	4611      	mov	r1, r2
 800535e:	4618      	mov	r0, r3
 8005360:	f002 ff7b 	bl	800825a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005364:	78fb      	ldrb	r3, [r7, #3]
 8005366:	015a      	lsls	r2, r3, #5
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	4413      	add	r3, r2
 800536c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005370:	461a      	mov	r2, r3
 8005372:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005376:	6093      	str	r3, [r2, #8]
 8005378:	e1ee      	b.n	8005758 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	78fa      	ldrb	r2, [r7, #3]
 8005380:	4611      	mov	r1, r2
 8005382:	4618      	mov	r0, r3
 8005384:	f002 f9c5 	bl	8007712 <USB_ReadChInterrupts>
 8005388:	4603      	mov	r3, r0
 800538a:	f003 0302 	and.w	r3, r3, #2
 800538e:	2b02      	cmp	r3, #2
 8005390:	f040 81df 	bne.w	8005752 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005394:	78fb      	ldrb	r3, [r7, #3]
 8005396:	015a      	lsls	r2, r3, #5
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	4413      	add	r3, r2
 800539c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053a0:	461a      	mov	r2, r3
 80053a2:	2302      	movs	r3, #2
 80053a4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80053a6:	78fa      	ldrb	r2, [r7, #3]
 80053a8:	6879      	ldr	r1, [r7, #4]
 80053aa:	4613      	mov	r3, r2
 80053ac:	011b      	lsls	r3, r3, #4
 80053ae:	1a9b      	subs	r3, r3, r2
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	440b      	add	r3, r1
 80053b4:	334d      	adds	r3, #77	@ 0x4d
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	f040 8093 	bne.w	80054e4 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80053be:	78fa      	ldrb	r2, [r7, #3]
 80053c0:	6879      	ldr	r1, [r7, #4]
 80053c2:	4613      	mov	r3, r2
 80053c4:	011b      	lsls	r3, r3, #4
 80053c6:	1a9b      	subs	r3, r3, r2
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	440b      	add	r3, r1
 80053cc:	334d      	adds	r3, #77	@ 0x4d
 80053ce:	2202      	movs	r2, #2
 80053d0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80053d2:	78fa      	ldrb	r2, [r7, #3]
 80053d4:	6879      	ldr	r1, [r7, #4]
 80053d6:	4613      	mov	r3, r2
 80053d8:	011b      	lsls	r3, r3, #4
 80053da:	1a9b      	subs	r3, r3, r2
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	440b      	add	r3, r1
 80053e0:	334c      	adds	r3, #76	@ 0x4c
 80053e2:	2201      	movs	r2, #1
 80053e4:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80053e6:	78fa      	ldrb	r2, [r7, #3]
 80053e8:	6879      	ldr	r1, [r7, #4]
 80053ea:	4613      	mov	r3, r2
 80053ec:	011b      	lsls	r3, r3, #4
 80053ee:	1a9b      	subs	r3, r3, r2
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	440b      	add	r3, r1
 80053f4:	3326      	adds	r3, #38	@ 0x26
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d00b      	beq.n	8005414 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80053fc:	78fa      	ldrb	r2, [r7, #3]
 80053fe:	6879      	ldr	r1, [r7, #4]
 8005400:	4613      	mov	r3, r2
 8005402:	011b      	lsls	r3, r3, #4
 8005404:	1a9b      	subs	r3, r3, r2
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	440b      	add	r3, r1
 800540a:	3326      	adds	r3, #38	@ 0x26
 800540c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800540e:	2b03      	cmp	r3, #3
 8005410:	f040 8190 	bne.w	8005734 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	799b      	ldrb	r3, [r3, #6]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d115      	bne.n	8005448 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800541c:	78fa      	ldrb	r2, [r7, #3]
 800541e:	6879      	ldr	r1, [r7, #4]
 8005420:	4613      	mov	r3, r2
 8005422:	011b      	lsls	r3, r3, #4
 8005424:	1a9b      	subs	r3, r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	440b      	add	r3, r1
 800542a:	333d      	adds	r3, #61	@ 0x3d
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	78fa      	ldrb	r2, [r7, #3]
 8005430:	f083 0301 	eor.w	r3, r3, #1
 8005434:	b2d8      	uxtb	r0, r3
 8005436:	6879      	ldr	r1, [r7, #4]
 8005438:	4613      	mov	r3, r2
 800543a:	011b      	lsls	r3, r3, #4
 800543c:	1a9b      	subs	r3, r3, r2
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	440b      	add	r3, r1
 8005442:	333d      	adds	r3, #61	@ 0x3d
 8005444:	4602      	mov	r2, r0
 8005446:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	799b      	ldrb	r3, [r3, #6]
 800544c:	2b01      	cmp	r3, #1
 800544e:	f040 8171 	bne.w	8005734 <HCD_HC_OUT_IRQHandler+0x954>
 8005452:	78fa      	ldrb	r2, [r7, #3]
 8005454:	6879      	ldr	r1, [r7, #4]
 8005456:	4613      	mov	r3, r2
 8005458:	011b      	lsls	r3, r3, #4
 800545a:	1a9b      	subs	r3, r3, r2
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	440b      	add	r3, r1
 8005460:	3334      	adds	r3, #52	@ 0x34
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	f000 8165 	beq.w	8005734 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800546a:	78fa      	ldrb	r2, [r7, #3]
 800546c:	6879      	ldr	r1, [r7, #4]
 800546e:	4613      	mov	r3, r2
 8005470:	011b      	lsls	r3, r3, #4
 8005472:	1a9b      	subs	r3, r3, r2
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	440b      	add	r3, r1
 8005478:	3334      	adds	r3, #52	@ 0x34
 800547a:	6819      	ldr	r1, [r3, #0]
 800547c:	78fa      	ldrb	r2, [r7, #3]
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	4613      	mov	r3, r2
 8005482:	011b      	lsls	r3, r3, #4
 8005484:	1a9b      	subs	r3, r3, r2
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	4403      	add	r3, r0
 800548a:	3328      	adds	r3, #40	@ 0x28
 800548c:	881b      	ldrh	r3, [r3, #0]
 800548e:	440b      	add	r3, r1
 8005490:	1e59      	subs	r1, r3, #1
 8005492:	78fa      	ldrb	r2, [r7, #3]
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	4613      	mov	r3, r2
 8005498:	011b      	lsls	r3, r3, #4
 800549a:	1a9b      	subs	r3, r3, r2
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	4403      	add	r3, r0
 80054a0:	3328      	adds	r3, #40	@ 0x28
 80054a2:	881b      	ldrh	r3, [r3, #0]
 80054a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80054a8:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	f003 0301 	and.w	r3, r3, #1
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	f000 813f 	beq.w	8005734 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80054b6:	78fa      	ldrb	r2, [r7, #3]
 80054b8:	6879      	ldr	r1, [r7, #4]
 80054ba:	4613      	mov	r3, r2
 80054bc:	011b      	lsls	r3, r3, #4
 80054be:	1a9b      	subs	r3, r3, r2
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	440b      	add	r3, r1
 80054c4:	333d      	adds	r3, #61	@ 0x3d
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	78fa      	ldrb	r2, [r7, #3]
 80054ca:	f083 0301 	eor.w	r3, r3, #1
 80054ce:	b2d8      	uxtb	r0, r3
 80054d0:	6879      	ldr	r1, [r7, #4]
 80054d2:	4613      	mov	r3, r2
 80054d4:	011b      	lsls	r3, r3, #4
 80054d6:	1a9b      	subs	r3, r3, r2
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	440b      	add	r3, r1
 80054dc:	333d      	adds	r3, #61	@ 0x3d
 80054de:	4602      	mov	r2, r0
 80054e0:	701a      	strb	r2, [r3, #0]
 80054e2:	e127      	b.n	8005734 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80054e4:	78fa      	ldrb	r2, [r7, #3]
 80054e6:	6879      	ldr	r1, [r7, #4]
 80054e8:	4613      	mov	r3, r2
 80054ea:	011b      	lsls	r3, r3, #4
 80054ec:	1a9b      	subs	r3, r3, r2
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	440b      	add	r3, r1
 80054f2:	334d      	adds	r3, #77	@ 0x4d
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	2b03      	cmp	r3, #3
 80054f8:	d120      	bne.n	800553c <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80054fa:	78fa      	ldrb	r2, [r7, #3]
 80054fc:	6879      	ldr	r1, [r7, #4]
 80054fe:	4613      	mov	r3, r2
 8005500:	011b      	lsls	r3, r3, #4
 8005502:	1a9b      	subs	r3, r3, r2
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	440b      	add	r3, r1
 8005508:	334d      	adds	r3, #77	@ 0x4d
 800550a:	2202      	movs	r2, #2
 800550c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800550e:	78fa      	ldrb	r2, [r7, #3]
 8005510:	6879      	ldr	r1, [r7, #4]
 8005512:	4613      	mov	r3, r2
 8005514:	011b      	lsls	r3, r3, #4
 8005516:	1a9b      	subs	r3, r3, r2
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	440b      	add	r3, r1
 800551c:	331b      	adds	r3, #27
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	2b01      	cmp	r3, #1
 8005522:	f040 8107 	bne.w	8005734 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005526:	78fa      	ldrb	r2, [r7, #3]
 8005528:	6879      	ldr	r1, [r7, #4]
 800552a:	4613      	mov	r3, r2
 800552c:	011b      	lsls	r3, r3, #4
 800552e:	1a9b      	subs	r3, r3, r2
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	440b      	add	r3, r1
 8005534:	334c      	adds	r3, #76	@ 0x4c
 8005536:	2202      	movs	r2, #2
 8005538:	701a      	strb	r2, [r3, #0]
 800553a:	e0fb      	b.n	8005734 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800553c:	78fa      	ldrb	r2, [r7, #3]
 800553e:	6879      	ldr	r1, [r7, #4]
 8005540:	4613      	mov	r3, r2
 8005542:	011b      	lsls	r3, r3, #4
 8005544:	1a9b      	subs	r3, r3, r2
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	440b      	add	r3, r1
 800554a:	334d      	adds	r3, #77	@ 0x4d
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	2b04      	cmp	r3, #4
 8005550:	d13a      	bne.n	80055c8 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005552:	78fa      	ldrb	r2, [r7, #3]
 8005554:	6879      	ldr	r1, [r7, #4]
 8005556:	4613      	mov	r3, r2
 8005558:	011b      	lsls	r3, r3, #4
 800555a:	1a9b      	subs	r3, r3, r2
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	440b      	add	r3, r1
 8005560:	334d      	adds	r3, #77	@ 0x4d
 8005562:	2202      	movs	r2, #2
 8005564:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005566:	78fa      	ldrb	r2, [r7, #3]
 8005568:	6879      	ldr	r1, [r7, #4]
 800556a:	4613      	mov	r3, r2
 800556c:	011b      	lsls	r3, r3, #4
 800556e:	1a9b      	subs	r3, r3, r2
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	440b      	add	r3, r1
 8005574:	334c      	adds	r3, #76	@ 0x4c
 8005576:	2202      	movs	r2, #2
 8005578:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800557a:	78fa      	ldrb	r2, [r7, #3]
 800557c:	6879      	ldr	r1, [r7, #4]
 800557e:	4613      	mov	r3, r2
 8005580:	011b      	lsls	r3, r3, #4
 8005582:	1a9b      	subs	r3, r3, r2
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	440b      	add	r3, r1
 8005588:	331b      	adds	r3, #27
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	2b01      	cmp	r3, #1
 800558e:	f040 80d1 	bne.w	8005734 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8005592:	78fa      	ldrb	r2, [r7, #3]
 8005594:	6879      	ldr	r1, [r7, #4]
 8005596:	4613      	mov	r3, r2
 8005598:	011b      	lsls	r3, r3, #4
 800559a:	1a9b      	subs	r3, r3, r2
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	440b      	add	r3, r1
 80055a0:	331b      	adds	r3, #27
 80055a2:	2200      	movs	r2, #0
 80055a4:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80055a6:	78fb      	ldrb	r3, [r7, #3]
 80055a8:	015a      	lsls	r2, r3, #5
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	4413      	add	r3, r2
 80055ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	78fa      	ldrb	r2, [r7, #3]
 80055b6:	0151      	lsls	r1, r2, #5
 80055b8:	693a      	ldr	r2, [r7, #16]
 80055ba:	440a      	add	r2, r1
 80055bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80055c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055c4:	6053      	str	r3, [r2, #4]
 80055c6:	e0b5      	b.n	8005734 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80055c8:	78fa      	ldrb	r2, [r7, #3]
 80055ca:	6879      	ldr	r1, [r7, #4]
 80055cc:	4613      	mov	r3, r2
 80055ce:	011b      	lsls	r3, r3, #4
 80055d0:	1a9b      	subs	r3, r3, r2
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	440b      	add	r3, r1
 80055d6:	334d      	adds	r3, #77	@ 0x4d
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	2b05      	cmp	r3, #5
 80055dc:	d114      	bne.n	8005608 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80055de:	78fa      	ldrb	r2, [r7, #3]
 80055e0:	6879      	ldr	r1, [r7, #4]
 80055e2:	4613      	mov	r3, r2
 80055e4:	011b      	lsls	r3, r3, #4
 80055e6:	1a9b      	subs	r3, r3, r2
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	440b      	add	r3, r1
 80055ec:	334d      	adds	r3, #77	@ 0x4d
 80055ee:	2202      	movs	r2, #2
 80055f0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80055f2:	78fa      	ldrb	r2, [r7, #3]
 80055f4:	6879      	ldr	r1, [r7, #4]
 80055f6:	4613      	mov	r3, r2
 80055f8:	011b      	lsls	r3, r3, #4
 80055fa:	1a9b      	subs	r3, r3, r2
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	440b      	add	r3, r1
 8005600:	334c      	adds	r3, #76	@ 0x4c
 8005602:	2202      	movs	r2, #2
 8005604:	701a      	strb	r2, [r3, #0]
 8005606:	e095      	b.n	8005734 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8005608:	78fa      	ldrb	r2, [r7, #3]
 800560a:	6879      	ldr	r1, [r7, #4]
 800560c:	4613      	mov	r3, r2
 800560e:	011b      	lsls	r3, r3, #4
 8005610:	1a9b      	subs	r3, r3, r2
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	440b      	add	r3, r1
 8005616:	334d      	adds	r3, #77	@ 0x4d
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	2b06      	cmp	r3, #6
 800561c:	d114      	bne.n	8005648 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800561e:	78fa      	ldrb	r2, [r7, #3]
 8005620:	6879      	ldr	r1, [r7, #4]
 8005622:	4613      	mov	r3, r2
 8005624:	011b      	lsls	r3, r3, #4
 8005626:	1a9b      	subs	r3, r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	440b      	add	r3, r1
 800562c:	334d      	adds	r3, #77	@ 0x4d
 800562e:	2202      	movs	r2, #2
 8005630:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8005632:	78fa      	ldrb	r2, [r7, #3]
 8005634:	6879      	ldr	r1, [r7, #4]
 8005636:	4613      	mov	r3, r2
 8005638:	011b      	lsls	r3, r3, #4
 800563a:	1a9b      	subs	r3, r3, r2
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	440b      	add	r3, r1
 8005640:	334c      	adds	r3, #76	@ 0x4c
 8005642:	2205      	movs	r2, #5
 8005644:	701a      	strb	r2, [r3, #0]
 8005646:	e075      	b.n	8005734 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005648:	78fa      	ldrb	r2, [r7, #3]
 800564a:	6879      	ldr	r1, [r7, #4]
 800564c:	4613      	mov	r3, r2
 800564e:	011b      	lsls	r3, r3, #4
 8005650:	1a9b      	subs	r3, r3, r2
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	440b      	add	r3, r1
 8005656:	334d      	adds	r3, #77	@ 0x4d
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	2b07      	cmp	r3, #7
 800565c:	d00a      	beq.n	8005674 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800565e:	78fa      	ldrb	r2, [r7, #3]
 8005660:	6879      	ldr	r1, [r7, #4]
 8005662:	4613      	mov	r3, r2
 8005664:	011b      	lsls	r3, r3, #4
 8005666:	1a9b      	subs	r3, r3, r2
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	440b      	add	r3, r1
 800566c:	334d      	adds	r3, #77	@ 0x4d
 800566e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005670:	2b09      	cmp	r3, #9
 8005672:	d170      	bne.n	8005756 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005674:	78fa      	ldrb	r2, [r7, #3]
 8005676:	6879      	ldr	r1, [r7, #4]
 8005678:	4613      	mov	r3, r2
 800567a:	011b      	lsls	r3, r3, #4
 800567c:	1a9b      	subs	r3, r3, r2
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	440b      	add	r3, r1
 8005682:	334d      	adds	r3, #77	@ 0x4d
 8005684:	2202      	movs	r2, #2
 8005686:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005688:	78fa      	ldrb	r2, [r7, #3]
 800568a:	6879      	ldr	r1, [r7, #4]
 800568c:	4613      	mov	r3, r2
 800568e:	011b      	lsls	r3, r3, #4
 8005690:	1a9b      	subs	r3, r3, r2
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	440b      	add	r3, r1
 8005696:	3344      	adds	r3, #68	@ 0x44
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	1c59      	adds	r1, r3, #1
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	4613      	mov	r3, r2
 80056a0:	011b      	lsls	r3, r3, #4
 80056a2:	1a9b      	subs	r3, r3, r2
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	4403      	add	r3, r0
 80056a8:	3344      	adds	r3, #68	@ 0x44
 80056aa:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80056ac:	78fa      	ldrb	r2, [r7, #3]
 80056ae:	6879      	ldr	r1, [r7, #4]
 80056b0:	4613      	mov	r3, r2
 80056b2:	011b      	lsls	r3, r3, #4
 80056b4:	1a9b      	subs	r3, r3, r2
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	440b      	add	r3, r1
 80056ba:	3344      	adds	r3, #68	@ 0x44
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d914      	bls.n	80056ec <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80056c2:	78fa      	ldrb	r2, [r7, #3]
 80056c4:	6879      	ldr	r1, [r7, #4]
 80056c6:	4613      	mov	r3, r2
 80056c8:	011b      	lsls	r3, r3, #4
 80056ca:	1a9b      	subs	r3, r3, r2
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	440b      	add	r3, r1
 80056d0:	3344      	adds	r3, #68	@ 0x44
 80056d2:	2200      	movs	r2, #0
 80056d4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80056d6:	78fa      	ldrb	r2, [r7, #3]
 80056d8:	6879      	ldr	r1, [r7, #4]
 80056da:	4613      	mov	r3, r2
 80056dc:	011b      	lsls	r3, r3, #4
 80056de:	1a9b      	subs	r3, r3, r2
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	440b      	add	r3, r1
 80056e4:	334c      	adds	r3, #76	@ 0x4c
 80056e6:	2204      	movs	r2, #4
 80056e8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80056ea:	e022      	b.n	8005732 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80056ec:	78fa      	ldrb	r2, [r7, #3]
 80056ee:	6879      	ldr	r1, [r7, #4]
 80056f0:	4613      	mov	r3, r2
 80056f2:	011b      	lsls	r3, r3, #4
 80056f4:	1a9b      	subs	r3, r3, r2
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	440b      	add	r3, r1
 80056fa:	334c      	adds	r3, #76	@ 0x4c
 80056fc:	2202      	movs	r2, #2
 80056fe:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005700:	78fb      	ldrb	r3, [r7, #3]
 8005702:	015a      	lsls	r2, r3, #5
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	4413      	add	r3, r2
 8005708:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005716:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800571e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005720:	78fb      	ldrb	r3, [r7, #3]
 8005722:	015a      	lsls	r2, r3, #5
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	4413      	add	r3, r2
 8005728:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800572c:	461a      	mov	r2, r3
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005732:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005734:	78fa      	ldrb	r2, [r7, #3]
 8005736:	6879      	ldr	r1, [r7, #4]
 8005738:	4613      	mov	r3, r2
 800573a:	011b      	lsls	r3, r3, #4
 800573c:	1a9b      	subs	r3, r3, r2
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	440b      	add	r3, r1
 8005742:	334c      	adds	r3, #76	@ 0x4c
 8005744:	781a      	ldrb	r2, [r3, #0]
 8005746:	78fb      	ldrb	r3, [r7, #3]
 8005748:	4619      	mov	r1, r3
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f005 f8de 	bl	800a90c <HAL_HCD_HC_NotifyURBChange_Callback>
 8005750:	e002      	b.n	8005758 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8005752:	bf00      	nop
 8005754:	e000      	b.n	8005758 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8005756:	bf00      	nop
  }
}
 8005758:	3718      	adds	r7, #24
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800575e:	b580      	push	{r7, lr}
 8005760:	b08a      	sub	sp, #40	@ 0x28
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800576c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800576e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	6a1b      	ldr	r3, [r3, #32]
 8005776:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	f003 030f 	and.w	r3, r3, #15
 800577e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	0c5b      	lsrs	r3, r3, #17
 8005784:	f003 030f 	and.w	r3, r3, #15
 8005788:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	091b      	lsrs	r3, r3, #4
 800578e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005792:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	2b02      	cmp	r3, #2
 8005798:	d004      	beq.n	80057a4 <HCD_RXQLVL_IRQHandler+0x46>
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	2b05      	cmp	r3, #5
 800579e:	f000 80b6 	beq.w	800590e <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80057a2:	e0b7      	b.n	8005914 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	f000 80b3 	beq.w	8005912 <HCD_RXQLVL_IRQHandler+0x1b4>
 80057ac:	6879      	ldr	r1, [r7, #4]
 80057ae:	69ba      	ldr	r2, [r7, #24]
 80057b0:	4613      	mov	r3, r2
 80057b2:	011b      	lsls	r3, r3, #4
 80057b4:	1a9b      	subs	r3, r3, r2
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	440b      	add	r3, r1
 80057ba:	332c      	adds	r3, #44	@ 0x2c
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	f000 80a7 	beq.w	8005912 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80057c4:	6879      	ldr	r1, [r7, #4]
 80057c6:	69ba      	ldr	r2, [r7, #24]
 80057c8:	4613      	mov	r3, r2
 80057ca:	011b      	lsls	r3, r3, #4
 80057cc:	1a9b      	subs	r3, r3, r2
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	440b      	add	r3, r1
 80057d2:	3338      	adds	r3, #56	@ 0x38
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	18d1      	adds	r1, r2, r3
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	69ba      	ldr	r2, [r7, #24]
 80057de:	4613      	mov	r3, r2
 80057e0:	011b      	lsls	r3, r3, #4
 80057e2:	1a9b      	subs	r3, r3, r2
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	4403      	add	r3, r0
 80057e8:	3334      	adds	r3, #52	@ 0x34
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4299      	cmp	r1, r3
 80057ee:	f200 8083 	bhi.w	80058f8 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6818      	ldr	r0, [r3, #0]
 80057f6:	6879      	ldr	r1, [r7, #4]
 80057f8:	69ba      	ldr	r2, [r7, #24]
 80057fa:	4613      	mov	r3, r2
 80057fc:	011b      	lsls	r3, r3, #4
 80057fe:	1a9b      	subs	r3, r3, r2
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	440b      	add	r3, r1
 8005804:	332c      	adds	r3, #44	@ 0x2c
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	b292      	uxth	r2, r2
 800580c:	4619      	mov	r1, r3
 800580e:	f001 ff15 	bl	800763c <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8005812:	6879      	ldr	r1, [r7, #4]
 8005814:	69ba      	ldr	r2, [r7, #24]
 8005816:	4613      	mov	r3, r2
 8005818:	011b      	lsls	r3, r3, #4
 800581a:	1a9b      	subs	r3, r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	440b      	add	r3, r1
 8005820:	332c      	adds	r3, #44	@ 0x2c
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	18d1      	adds	r1, r2, r3
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	69ba      	ldr	r2, [r7, #24]
 800582c:	4613      	mov	r3, r2
 800582e:	011b      	lsls	r3, r3, #4
 8005830:	1a9b      	subs	r3, r3, r2
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	4403      	add	r3, r0
 8005836:	332c      	adds	r3, #44	@ 0x2c
 8005838:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800583a:	6879      	ldr	r1, [r7, #4]
 800583c:	69ba      	ldr	r2, [r7, #24]
 800583e:	4613      	mov	r3, r2
 8005840:	011b      	lsls	r3, r3, #4
 8005842:	1a9b      	subs	r3, r3, r2
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	440b      	add	r3, r1
 8005848:	3338      	adds	r3, #56	@ 0x38
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	18d1      	adds	r1, r2, r3
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	69ba      	ldr	r2, [r7, #24]
 8005854:	4613      	mov	r3, r2
 8005856:	011b      	lsls	r3, r3, #4
 8005858:	1a9b      	subs	r3, r3, r2
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	4403      	add	r3, r0
 800585e:	3338      	adds	r3, #56	@ 0x38
 8005860:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	015a      	lsls	r2, r3, #5
 8005866:	6a3b      	ldr	r3, [r7, #32]
 8005868:	4413      	add	r3, r2
 800586a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	0cdb      	lsrs	r3, r3, #19
 8005872:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005876:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005878:	6879      	ldr	r1, [r7, #4]
 800587a:	69ba      	ldr	r2, [r7, #24]
 800587c:	4613      	mov	r3, r2
 800587e:	011b      	lsls	r3, r3, #4
 8005880:	1a9b      	subs	r3, r3, r2
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	440b      	add	r3, r1
 8005886:	3328      	adds	r3, #40	@ 0x28
 8005888:	881b      	ldrh	r3, [r3, #0]
 800588a:	461a      	mov	r2, r3
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	4293      	cmp	r3, r2
 8005890:	d13f      	bne.n	8005912 <HCD_RXQLVL_IRQHandler+0x1b4>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d03c      	beq.n	8005912 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	015a      	lsls	r2, r3, #5
 800589c:	6a3b      	ldr	r3, [r7, #32]
 800589e:	4413      	add	r3, r2
 80058a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80058ae:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80058b6:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	015a      	lsls	r2, r3, #5
 80058bc:	6a3b      	ldr	r3, [r7, #32]
 80058be:	4413      	add	r3, r2
 80058c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058c4:	461a      	mov	r2, r3
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80058ca:	6879      	ldr	r1, [r7, #4]
 80058cc:	69ba      	ldr	r2, [r7, #24]
 80058ce:	4613      	mov	r3, r2
 80058d0:	011b      	lsls	r3, r3, #4
 80058d2:	1a9b      	subs	r3, r3, r2
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	440b      	add	r3, r1
 80058d8:	333c      	adds	r3, #60	@ 0x3c
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	f083 0301 	eor.w	r3, r3, #1
 80058e0:	b2d8      	uxtb	r0, r3
 80058e2:	6879      	ldr	r1, [r7, #4]
 80058e4:	69ba      	ldr	r2, [r7, #24]
 80058e6:	4613      	mov	r3, r2
 80058e8:	011b      	lsls	r3, r3, #4
 80058ea:	1a9b      	subs	r3, r3, r2
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	440b      	add	r3, r1
 80058f0:	333c      	adds	r3, #60	@ 0x3c
 80058f2:	4602      	mov	r2, r0
 80058f4:	701a      	strb	r2, [r3, #0]
      break;
 80058f6:	e00c      	b.n	8005912 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80058f8:	6879      	ldr	r1, [r7, #4]
 80058fa:	69ba      	ldr	r2, [r7, #24]
 80058fc:	4613      	mov	r3, r2
 80058fe:	011b      	lsls	r3, r3, #4
 8005900:	1a9b      	subs	r3, r3, r2
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	440b      	add	r3, r1
 8005906:	334c      	adds	r3, #76	@ 0x4c
 8005908:	2204      	movs	r2, #4
 800590a:	701a      	strb	r2, [r3, #0]
      break;
 800590c:	e001      	b.n	8005912 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800590e:	bf00      	nop
 8005910:	e000      	b.n	8005914 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8005912:	bf00      	nop
  }
}
 8005914:	bf00      	nop
 8005916:	3728      	adds	r7, #40	@ 0x28
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b086      	sub	sp, #24
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005948:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f003 0302 	and.w	r3, r3, #2
 8005950:	2b02      	cmp	r3, #2
 8005952:	d10b      	bne.n	800596c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f003 0301 	and.w	r3, r3, #1
 800595a:	2b01      	cmp	r3, #1
 800595c:	d102      	bne.n	8005964 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f004 ffb8 	bl	800a8d4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	f043 0302 	orr.w	r3, r3, #2
 800596a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f003 0308 	and.w	r3, r3, #8
 8005972:	2b08      	cmp	r3, #8
 8005974:	d132      	bne.n	80059dc <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	f043 0308 	orr.w	r3, r3, #8
 800597c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f003 0304 	and.w	r3, r3, #4
 8005984:	2b04      	cmp	r3, #4
 8005986:	d126      	bne.n	80059d6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	7a5b      	ldrb	r3, [r3, #9]
 800598c:	2b02      	cmp	r3, #2
 800598e:	d113      	bne.n	80059b8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005996:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800599a:	d106      	bne.n	80059aa <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2102      	movs	r1, #2
 80059a2:	4618      	mov	r0, r3
 80059a4:	f001 ffda 	bl	800795c <USB_InitFSLSPClkSel>
 80059a8:	e011      	b.n	80059ce <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2101      	movs	r1, #1
 80059b0:	4618      	mov	r0, r3
 80059b2:	f001 ffd3 	bl	800795c <USB_InitFSLSPClkSel>
 80059b6:	e00a      	b.n	80059ce <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	79db      	ldrb	r3, [r3, #7]
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d106      	bne.n	80059ce <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80059c6:	461a      	mov	r2, r3
 80059c8:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80059cc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f004 ffaa 	bl	800a928 <HAL_HCD_PortEnabled_Callback>
 80059d4:	e002      	b.n	80059dc <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f004 ffb4 	bl	800a944 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f003 0320 	and.w	r3, r3, #32
 80059e2:	2b20      	cmp	r3, #32
 80059e4:	d103      	bne.n	80059ee <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	f043 0320 	orr.w	r3, r3, #32
 80059ec:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80059f4:	461a      	mov	r2, r3
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	6013      	str	r3, [r2, #0]
}
 80059fa:	bf00      	nop
 80059fc:	3718      	adds	r7, #24
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
	...

08005a04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d101      	bne.n	8005a16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e12b      	b.n	8005c6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d106      	bne.n	8005a30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f7fc f9b2 	bl	8001d94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2224      	movs	r2, #36	@ 0x24
 8005a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f022 0201 	bic.w	r2, r2, #1
 8005a46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005a56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005a66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005a68:	f001 fb22 	bl	80070b0 <HAL_RCC_GetPCLK1Freq>
 8005a6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	4a81      	ldr	r2, [pc, #516]	@ (8005c78 <HAL_I2C_Init+0x274>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d807      	bhi.n	8005a88 <HAL_I2C_Init+0x84>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	4a80      	ldr	r2, [pc, #512]	@ (8005c7c <HAL_I2C_Init+0x278>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	bf94      	ite	ls
 8005a80:	2301      	movls	r3, #1
 8005a82:	2300      	movhi	r3, #0
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	e006      	b.n	8005a96 <HAL_I2C_Init+0x92>
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	4a7d      	ldr	r2, [pc, #500]	@ (8005c80 <HAL_I2C_Init+0x27c>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	bf94      	ite	ls
 8005a90:	2301      	movls	r3, #1
 8005a92:	2300      	movhi	r3, #0
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d001      	beq.n	8005a9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e0e7      	b.n	8005c6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	4a78      	ldr	r2, [pc, #480]	@ (8005c84 <HAL_I2C_Init+0x280>)
 8005aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8005aa6:	0c9b      	lsrs	r3, r3, #18
 8005aa8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68ba      	ldr	r2, [r7, #8]
 8005aba:	430a      	orrs	r2, r1
 8005abc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	6a1b      	ldr	r3, [r3, #32]
 8005ac4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	4a6a      	ldr	r2, [pc, #424]	@ (8005c78 <HAL_I2C_Init+0x274>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d802      	bhi.n	8005ad8 <HAL_I2C_Init+0xd4>
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	e009      	b.n	8005aec <HAL_I2C_Init+0xe8>
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005ade:	fb02 f303 	mul.w	r3, r2, r3
 8005ae2:	4a69      	ldr	r2, [pc, #420]	@ (8005c88 <HAL_I2C_Init+0x284>)
 8005ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ae8:	099b      	lsrs	r3, r3, #6
 8005aea:	3301      	adds	r3, #1
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	6812      	ldr	r2, [r2, #0]
 8005af0:	430b      	orrs	r3, r1
 8005af2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	69db      	ldr	r3, [r3, #28]
 8005afa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005afe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	495c      	ldr	r1, [pc, #368]	@ (8005c78 <HAL_I2C_Init+0x274>)
 8005b08:	428b      	cmp	r3, r1
 8005b0a:	d819      	bhi.n	8005b40 <HAL_I2C_Init+0x13c>
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	1e59      	subs	r1, r3, #1
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	005b      	lsls	r3, r3, #1
 8005b16:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b1a:	1c59      	adds	r1, r3, #1
 8005b1c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005b20:	400b      	ands	r3, r1
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00a      	beq.n	8005b3c <HAL_I2C_Init+0x138>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	1e59      	subs	r1, r3, #1
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	005b      	lsls	r3, r3, #1
 8005b30:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b34:	3301      	adds	r3, #1
 8005b36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b3a:	e051      	b.n	8005be0 <HAL_I2C_Init+0x1dc>
 8005b3c:	2304      	movs	r3, #4
 8005b3e:	e04f      	b.n	8005be0 <HAL_I2C_Init+0x1dc>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d111      	bne.n	8005b6c <HAL_I2C_Init+0x168>
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	1e58      	subs	r0, r3, #1
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6859      	ldr	r1, [r3, #4]
 8005b50:	460b      	mov	r3, r1
 8005b52:	005b      	lsls	r3, r3, #1
 8005b54:	440b      	add	r3, r1
 8005b56:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	bf0c      	ite	eq
 8005b64:	2301      	moveq	r3, #1
 8005b66:	2300      	movne	r3, #0
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	e012      	b.n	8005b92 <HAL_I2C_Init+0x18e>
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	1e58      	subs	r0, r3, #1
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6859      	ldr	r1, [r3, #4]
 8005b74:	460b      	mov	r3, r1
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	440b      	add	r3, r1
 8005b7a:	0099      	lsls	r1, r3, #2
 8005b7c:	440b      	add	r3, r1
 8005b7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b82:	3301      	adds	r3, #1
 8005b84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	bf0c      	ite	eq
 8005b8c:	2301      	moveq	r3, #1
 8005b8e:	2300      	movne	r3, #0
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d001      	beq.n	8005b9a <HAL_I2C_Init+0x196>
 8005b96:	2301      	movs	r3, #1
 8005b98:	e022      	b.n	8005be0 <HAL_I2C_Init+0x1dc>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d10e      	bne.n	8005bc0 <HAL_I2C_Init+0x1bc>
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	1e58      	subs	r0, r3, #1
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6859      	ldr	r1, [r3, #4]
 8005baa:	460b      	mov	r3, r1
 8005bac:	005b      	lsls	r3, r3, #1
 8005bae:	440b      	add	r3, r1
 8005bb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bbe:	e00f      	b.n	8005be0 <HAL_I2C_Init+0x1dc>
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	1e58      	subs	r0, r3, #1
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6859      	ldr	r1, [r3, #4]
 8005bc8:	460b      	mov	r3, r1
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	440b      	add	r3, r1
 8005bce:	0099      	lsls	r1, r3, #2
 8005bd0:	440b      	add	r3, r1
 8005bd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bdc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005be0:	6879      	ldr	r1, [r7, #4]
 8005be2:	6809      	ldr	r1, [r1, #0]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	69da      	ldr	r2, [r3, #28]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a1b      	ldr	r3, [r3, #32]
 8005bfa:	431a      	orrs	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	430a      	orrs	r2, r1
 8005c02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005c0e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	6911      	ldr	r1, [r2, #16]
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	68d2      	ldr	r2, [r2, #12]
 8005c1a:	4311      	orrs	r1, r2
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	6812      	ldr	r2, [r2, #0]
 8005c20:	430b      	orrs	r3, r1
 8005c22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	695a      	ldr	r2, [r3, #20]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	699b      	ldr	r3, [r3, #24]
 8005c36:	431a      	orrs	r2, r3
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	430a      	orrs	r2, r1
 8005c3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f042 0201 	orr.w	r2, r2, #1
 8005c4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2220      	movs	r2, #32
 8005c5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3710      	adds	r7, #16
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	000186a0 	.word	0x000186a0
 8005c7c:	001e847f 	.word	0x001e847f
 8005c80:	003d08ff 	.word	0x003d08ff
 8005c84:	431bde83 	.word	0x431bde83
 8005c88:	10624dd3 	.word	0x10624dd3

08005c8c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b088      	sub	sp, #32
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d101      	bne.n	8005c9e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e128      	b.n	8005ef0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d109      	bne.n	8005cbe <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a90      	ldr	r2, [pc, #576]	@ (8005ef8 <HAL_I2S_Init+0x26c>)
 8005cb6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f7fc f8b3 	bl	8001e24 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2202      	movs	r2, #2
 8005cc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	69db      	ldr	r3, [r3, #28]
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	6812      	ldr	r2, [r2, #0]
 8005cd0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005cd4:	f023 030f 	bic.w	r3, r3, #15
 8005cd8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2202      	movs	r2, #2
 8005ce0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	695b      	ldr	r3, [r3, #20]
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d060      	beq.n	8005dac <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d102      	bne.n	8005cf8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005cf2:	2310      	movs	r3, #16
 8005cf4:	617b      	str	r3, [r7, #20]
 8005cf6:	e001      	b.n	8005cfc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005cf8:	2320      	movs	r3, #32
 8005cfa:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	2b20      	cmp	r3, #32
 8005d02:	d802      	bhi.n	8005d0a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	005b      	lsls	r3, r3, #1
 8005d08:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005d0a:	2001      	movs	r0, #1
 8005d0c:	f001 fac6 	bl	800729c <HAL_RCCEx_GetPeriphCLKFreq>
 8005d10:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d1a:	d125      	bne.n	8005d68 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d010      	beq.n	8005d46 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d2e:	4613      	mov	r3, r2
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	4413      	add	r3, r2
 8005d34:	005b      	lsls	r3, r3, #1
 8005d36:	461a      	mov	r2, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	695b      	ldr	r3, [r3, #20]
 8005d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d40:	3305      	adds	r3, #5
 8005d42:	613b      	str	r3, [r7, #16]
 8005d44:	e01f      	b.n	8005d86 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	00db      	lsls	r3, r3, #3
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d50:	4613      	mov	r3, r2
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	4413      	add	r3, r2
 8005d56:	005b      	lsls	r3, r3, #1
 8005d58:	461a      	mov	r2, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	695b      	ldr	r3, [r3, #20]
 8005d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d62:	3305      	adds	r3, #5
 8005d64:	613b      	str	r3, [r7, #16]
 8005d66:	e00e      	b.n	8005d86 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d70:	4613      	mov	r3, r2
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	4413      	add	r3, r2
 8005d76:	005b      	lsls	r3, r3, #1
 8005d78:	461a      	mov	r2, r3
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	695b      	ldr	r3, [r3, #20]
 8005d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d82:	3305      	adds	r3, #5
 8005d84:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	4a5c      	ldr	r2, [pc, #368]	@ (8005efc <HAL_I2S_Init+0x270>)
 8005d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d8e:	08db      	lsrs	r3, r3, #3
 8005d90:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	f003 0301 	and.w	r3, r3, #1
 8005d98:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005d9a:	693a      	ldr	r2, [r7, #16]
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	085b      	lsrs	r3, r3, #1
 8005da2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	021b      	lsls	r3, r3, #8
 8005da8:	61bb      	str	r3, [r7, #24]
 8005daa:	e003      	b.n	8005db4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005dac:	2302      	movs	r3, #2
 8005dae:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005db0:	2300      	movs	r3, #0
 8005db2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d902      	bls.n	8005dc0 <HAL_I2S_Init+0x134>
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	2bff      	cmp	r3, #255	@ 0xff
 8005dbe:	d907      	bls.n	8005dd0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dc4:	f043 0210 	orr.w	r2, r3, #16
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e08f      	b.n	8005ef0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	691a      	ldr	r2, [r3, #16]
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	ea42 0103 	orr.w	r1, r2, r3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	69fa      	ldr	r2, [r7, #28]
 8005de0:	430a      	orrs	r2, r1
 8005de2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	69db      	ldr	r3, [r3, #28]
 8005dea:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005dee:	f023 030f 	bic.w	r3, r3, #15
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	6851      	ldr	r1, [r2, #4]
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	6892      	ldr	r2, [r2, #8]
 8005dfa:	4311      	orrs	r1, r2
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	68d2      	ldr	r2, [r2, #12]
 8005e00:	4311      	orrs	r1, r2
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	6992      	ldr	r2, [r2, #24]
 8005e06:	430a      	orrs	r2, r1
 8005e08:	431a      	orrs	r2, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e12:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6a1b      	ldr	r3, [r3, #32]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d161      	bne.n	8005ee0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	4a38      	ldr	r2, [pc, #224]	@ (8005f00 <HAL_I2S_Init+0x274>)
 8005e20:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a37      	ldr	r2, [pc, #220]	@ (8005f04 <HAL_I2S_Init+0x278>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d101      	bne.n	8005e30 <HAL_I2S_Init+0x1a4>
 8005e2c:	4b36      	ldr	r3, [pc, #216]	@ (8005f08 <HAL_I2S_Init+0x27c>)
 8005e2e:	e001      	b.n	8005e34 <HAL_I2S_Init+0x1a8>
 8005e30:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e34:	69db      	ldr	r3, [r3, #28]
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	6812      	ldr	r2, [r2, #0]
 8005e3a:	4932      	ldr	r1, [pc, #200]	@ (8005f04 <HAL_I2S_Init+0x278>)
 8005e3c:	428a      	cmp	r2, r1
 8005e3e:	d101      	bne.n	8005e44 <HAL_I2S_Init+0x1b8>
 8005e40:	4a31      	ldr	r2, [pc, #196]	@ (8005f08 <HAL_I2S_Init+0x27c>)
 8005e42:	e001      	b.n	8005e48 <HAL_I2S_Init+0x1bc>
 8005e44:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8005e48:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005e4c:	f023 030f 	bic.w	r3, r3, #15
 8005e50:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a2b      	ldr	r2, [pc, #172]	@ (8005f04 <HAL_I2S_Init+0x278>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d101      	bne.n	8005e60 <HAL_I2S_Init+0x1d4>
 8005e5c:	4b2a      	ldr	r3, [pc, #168]	@ (8005f08 <HAL_I2S_Init+0x27c>)
 8005e5e:	e001      	b.n	8005e64 <HAL_I2S_Init+0x1d8>
 8005e60:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e64:	2202      	movs	r2, #2
 8005e66:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a25      	ldr	r2, [pc, #148]	@ (8005f04 <HAL_I2S_Init+0x278>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d101      	bne.n	8005e76 <HAL_I2S_Init+0x1ea>
 8005e72:	4b25      	ldr	r3, [pc, #148]	@ (8005f08 <HAL_I2S_Init+0x27c>)
 8005e74:	e001      	b.n	8005e7a <HAL_I2S_Init+0x1ee>
 8005e76:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e7a:	69db      	ldr	r3, [r3, #28]
 8005e7c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e86:	d003      	beq.n	8005e90 <HAL_I2S_Init+0x204>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d103      	bne.n	8005e98 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005e90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005e94:	613b      	str	r3, [r7, #16]
 8005e96:	e001      	b.n	8005e9c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	699b      	ldr	r3, [r3, #24]
 8005eb8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	b29a      	uxth	r2, r3
 8005ebe:	897b      	ldrh	r3, [r7, #10]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005ec8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a0d      	ldr	r2, [pc, #52]	@ (8005f04 <HAL_I2S_Init+0x278>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d101      	bne.n	8005ed8 <HAL_I2S_Init+0x24c>
 8005ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8005f08 <HAL_I2S_Init+0x27c>)
 8005ed6:	e001      	b.n	8005edc <HAL_I2S_Init+0x250>
 8005ed8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005edc:	897a      	ldrh	r2, [r7, #10]
 8005ede:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8005eee:	2300      	movs	r3, #0
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3720      	adds	r7, #32
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}
 8005ef8:	08006209 	.word	0x08006209
 8005efc:	cccccccd 	.word	0xcccccccd
 8005f00:	0800631d 	.word	0x0800631d
 8005f04:	40003800 	.word	0x40003800
 8005f08:	40003400 	.word	0x40003400

08005f0c <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b086      	sub	sp, #24
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	4613      	mov	r3, r2
 8005f18:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d002      	beq.n	8005f26 <HAL_I2S_Receive_DMA+0x1a>
 8005f20:	88fb      	ldrh	r3, [r7, #6]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d101      	bne.n	8005f2a <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e09d      	b.n	8006066 <HAL_I2S_Receive_DMA+0x15a>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d001      	beq.n	8005f3a <HAL_I2S_Receive_DMA+0x2e>
  {
    return HAL_BUSY;
 8005f36:	2302      	movs	r3, #2
 8005f38:	e095      	b.n	8006066 <HAL_I2S_Receive_DMA+0x15a>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d101      	bne.n	8005f4a <HAL_I2S_Receive_DMA+0x3e>
 8005f46:	2302      	movs	r3, #2
 8005f48:	e08d      	b.n	8006066 <HAL_I2S_Receive_DMA+0x15a>
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2204      	movs	r2, #4
 8005f56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pRxBuffPtr = pData;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	68ba      	ldr	r2, [r7, #8]
 8005f64:	62da      	str	r2, [r3, #44]	@ 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	69db      	ldr	r3, [r3, #28]
 8005f6c:	f003 0307 	and.w	r3, r3, #7
 8005f70:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	2b03      	cmp	r3, #3
 8005f76:	d002      	beq.n	8005f7e <HAL_I2S_Receive_DMA+0x72>
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	2b05      	cmp	r3, #5
 8005f7c:	d10a      	bne.n	8005f94 <HAL_I2S_Receive_DMA+0x88>
  {
    hi2s->RxXferSize = (Size << 1U);
 8005f7e:	88fb      	ldrh	r3, [r7, #6]
 8005f80:	005b      	lsls	r3, r3, #1
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = (Size << 1U);
 8005f88:	88fb      	ldrh	r3, [r7, #6]
 8005f8a:	005b      	lsls	r3, r3, #1
 8005f8c:	b29a      	uxth	r2, r3
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	865a      	strh	r2, [r3, #50]	@ 0x32
 8005f92:	e005      	b.n	8005fa0 <HAL_I2S_Receive_DMA+0x94>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	88fa      	ldrh	r2, [r7, #6]
 8005f98:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = Size;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	88fa      	ldrh	r2, [r7, #6]
 8005f9e:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fa4:	4a32      	ldr	r2, [pc, #200]	@ (8006070 <HAL_I2S_Receive_DMA+0x164>)
 8005fa6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fac:	4a31      	ldr	r2, [pc, #196]	@ (8006074 <HAL_I2S_Receive_DMA+0x168>)
 8005fae:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fb4:	4a30      	ldr	r2, [pc, #192]	@ (8006078 <HAL_I2S_Receive_DMA+0x16c>)
 8005fb6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	69db      	ldr	r3, [r3, #28]
 8005fbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fc2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005fc6:	d10a      	bne.n	8005fde <HAL_I2S_Receive_DMA+0xd2>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005fc8:	2300      	movs	r3, #0
 8005fca:	613b      	str	r3, [r7, #16]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	613b      	str	r3, [r7, #16]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	613b      	str	r3, [r7, #16]
 8005fdc:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	330c      	adds	r3, #12
 8005fe8:	4619      	mov	r1, r3
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fee:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8005ff4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8005ff6:	f7fc ff59 	bl	8002eac <HAL_DMA_Start_IT>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d00f      	beq.n	8006020 <HAL_I2S_Receive_DMA+0x114>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006004:	f043 0208 	orr.w	r2, r3, #8
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2200      	movs	r2, #0
 8006018:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	e022      	b.n	8006066 <HAL_I2S_Receive_DMA+0x15a>
  }

  __HAL_UNLOCK(hi2s);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2200      	movs	r2, #0
 8006024:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	f003 0301 	and.w	r3, r3, #1
 8006032:	2b00      	cmp	r3, #0
 8006034:	d107      	bne.n	8006046 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	685a      	ldr	r2, [r3, #4]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f042 0201 	orr.w	r2, r2, #1
 8006044:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	69db      	ldr	r3, [r3, #28]
 800604c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006050:	2b00      	cmp	r3, #0
 8006052:	d107      	bne.n	8006064 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	69da      	ldr	r2, [r3, #28]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006062:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	3718      	adds	r7, #24
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	080060e7 	.word	0x080060e7
 8006074:	080060a5 	.word	0x080060a5
 8006078:	08006103 	.word	0x08006103

0800607c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8006084:	bf00      	nop
 8006086:	370c      	adds	r7, #12
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006098:	bf00      	nop
 800609a:	370c      	adds	r7, #12
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060b0:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	69db      	ldr	r3, [r3, #28]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d10e      	bne.n	80060d8 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	685a      	ldr	r2, [r3, #4]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f022 0201 	bic.w	r2, r2, #1
 80060c8:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2200      	movs	r2, #0
 80060ce:	865a      	strh	r2, [r3, #50]	@ 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 80060d8:	68f8      	ldr	r0, [r7, #12]
 80060da:	f7fb f983 	bl	80013e4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80060de:	bf00      	nop
 80060e0:	3710      	adds	r7, #16
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}

080060e6 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80060e6:	b580      	push	{r7, lr}
 80060e8:	b084      	sub	sp, #16
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060f2:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f7fb f95f 	bl	80013b8 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80060fa:	bf00      	nop
 80060fc:	3710      	adds	r7, #16
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}

08006102 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8006102:	b580      	push	{r7, lr}
 8006104:	b084      	sub	sp, #16
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800610e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	685a      	ldr	r2, [r3, #4]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f022 0203 	bic.w	r2, r2, #3
 800611e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2200      	movs	r2, #0
 8006124:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2200      	movs	r2, #0
 800612a:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006138:	f043 0208 	orr.w	r2, r3, #8
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f7ff ffa5 	bl	8006090 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006146:	bf00      	nop
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800614e:	b580      	push	{r7, lr}
 8006150:	b082      	sub	sp, #8
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800615a:	881a      	ldrh	r2, [r3, #0]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006166:	1c9a      	adds	r2, r3, #2
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006170:	b29b      	uxth	r3, r3
 8006172:	3b01      	subs	r3, #1
 8006174:	b29a      	uxth	r2, r3
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800617e:	b29b      	uxth	r3, r3
 8006180:	2b00      	cmp	r3, #0
 8006182:	d10e      	bne.n	80061a2 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	685a      	ldr	r2, [r3, #4]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006192:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f7ff ff6d 	bl	800607c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80061a2:	bf00      	nop
 80061a4:	3708      	adds	r7, #8
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b082      	sub	sp, #8
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68da      	ldr	r2, [r3, #12]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061bc:	b292      	uxth	r2, r2
 80061be:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061c4:	1c9a      	adds	r2, r3, #2
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	3b01      	subs	r3, #1
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80061dc:	b29b      	uxth	r3, r3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d10e      	bne.n	8006200 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	685a      	ldr	r2, [r3, #4]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80061f0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2201      	movs	r2, #1
 80061f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f7fb f8f2 	bl	80013e4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006200:	bf00      	nop
 8006202:	3708      	adds	r7, #8
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b086      	sub	sp, #24
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800621e:	b2db      	uxtb	r3, r3
 8006220:	2b04      	cmp	r3, #4
 8006222:	d13a      	bne.n	800629a <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	f003 0301 	and.w	r3, r3, #1
 800622a:	2b01      	cmp	r3, #1
 800622c:	d109      	bne.n	8006242 <I2S_IRQHandler+0x3a>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006238:	2b40      	cmp	r3, #64	@ 0x40
 800623a:	d102      	bne.n	8006242 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f7ff ffb4 	bl	80061aa <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006248:	2b40      	cmp	r3, #64	@ 0x40
 800624a:	d126      	bne.n	800629a <I2S_IRQHandler+0x92>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	f003 0320 	and.w	r3, r3, #32
 8006256:	2b20      	cmp	r3, #32
 8006258:	d11f      	bne.n	800629a <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	685a      	ldr	r2, [r3, #4]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006268:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800626a:	2300      	movs	r3, #0
 800626c:	613b      	str	r3, [r7, #16]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	613b      	str	r3, [r7, #16]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	613b      	str	r3, [r7, #16]
 800627e:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800628c:	f043 0202 	orr.w	r2, r3, #2
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f7ff fefb 	bl	8006090 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	2b03      	cmp	r3, #3
 80062a4:	d136      	bne.n	8006314 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	f003 0302 	and.w	r3, r3, #2
 80062ac:	2b02      	cmp	r3, #2
 80062ae:	d109      	bne.n	80062c4 <I2S_IRQHandler+0xbc>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062ba:	2b80      	cmp	r3, #128	@ 0x80
 80062bc:	d102      	bne.n	80062c4 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f7ff ff45 	bl	800614e <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	f003 0308 	and.w	r3, r3, #8
 80062ca:	2b08      	cmp	r3, #8
 80062cc:	d122      	bne.n	8006314 <I2S_IRQHandler+0x10c>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	f003 0320 	and.w	r3, r3, #32
 80062d8:	2b20      	cmp	r3, #32
 80062da:	d11b      	bne.n	8006314 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	685a      	ldr	r2, [r3, #4]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80062ea:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80062ec:	2300      	movs	r3, #0
 80062ee:	60fb      	str	r3, [r7, #12]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	60fb      	str	r3, [r7, #12]
 80062f8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2201      	movs	r2, #1
 80062fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006306:	f043 0204 	orr.w	r2, r3, #4
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f7ff febe 	bl	8006090 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006314:	bf00      	nop
 8006316:	3718      	adds	r7, #24
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b088      	sub	sp, #32
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a92      	ldr	r2, [pc, #584]	@ (800657c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d101      	bne.n	800633a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006336:	4b92      	ldr	r3, [pc, #584]	@ (8006580 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006338:	e001      	b.n	800633e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800633a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a8b      	ldr	r2, [pc, #556]	@ (800657c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d101      	bne.n	8006358 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006354:	4b8a      	ldr	r3, [pc, #552]	@ (8006580 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006356:	e001      	b.n	800635c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006358:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006368:	d004      	beq.n	8006374 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	2b00      	cmp	r3, #0
 8006370:	f040 8099 	bne.w	80064a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	f003 0302 	and.w	r3, r3, #2
 800637a:	2b02      	cmp	r3, #2
 800637c:	d107      	bne.n	800638e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006384:	2b00      	cmp	r3, #0
 8006386:	d002      	beq.n	800638e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 f925 	bl	80065d8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800638e:	69bb      	ldr	r3, [r7, #24]
 8006390:	f003 0301 	and.w	r3, r3, #1
 8006394:	2b01      	cmp	r3, #1
 8006396:	d107      	bne.n	80063a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d002      	beq.n	80063a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 f9c8 	bl	8006738 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063ae:	2b40      	cmp	r3, #64	@ 0x40
 80063b0:	d13a      	bne.n	8006428 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	f003 0320 	and.w	r3, r3, #32
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d035      	beq.n	8006428 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a6e      	ldr	r2, [pc, #440]	@ (800657c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d101      	bne.n	80063ca <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80063c6:	4b6e      	ldr	r3, [pc, #440]	@ (8006580 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80063c8:	e001      	b.n	80063ce <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80063ca:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80063ce:	685a      	ldr	r2, [r3, #4]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4969      	ldr	r1, [pc, #420]	@ (800657c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80063d6:	428b      	cmp	r3, r1
 80063d8:	d101      	bne.n	80063de <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80063da:	4b69      	ldr	r3, [pc, #420]	@ (8006580 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80063dc:	e001      	b.n	80063e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80063de:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80063e2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80063e6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	685a      	ldr	r2, [r3, #4]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80063f6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80063f8:	2300      	movs	r3, #0
 80063fa:	60fb      	str	r3, [r7, #12]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	60fb      	str	r3, [r7, #12]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	60fb      	str	r3, [r7, #12]
 800640c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2201      	movs	r2, #1
 8006412:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800641a:	f043 0202 	orr.w	r2, r3, #2
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f7ff fe34 	bl	8006090 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	f003 0308 	and.w	r3, r3, #8
 800642e:	2b08      	cmp	r3, #8
 8006430:	f040 80c3 	bne.w	80065ba <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	f003 0320 	and.w	r3, r3, #32
 800643a:	2b00      	cmp	r3, #0
 800643c:	f000 80bd 	beq.w	80065ba <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	685a      	ldr	r2, [r3, #4]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800644e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a49      	ldr	r2, [pc, #292]	@ (800657c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d101      	bne.n	800645e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800645a:	4b49      	ldr	r3, [pc, #292]	@ (8006580 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800645c:	e001      	b.n	8006462 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800645e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006462:	685a      	ldr	r2, [r3, #4]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4944      	ldr	r1, [pc, #272]	@ (800657c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800646a:	428b      	cmp	r3, r1
 800646c:	d101      	bne.n	8006472 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800646e:	4b44      	ldr	r3, [pc, #272]	@ (8006580 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006470:	e001      	b.n	8006476 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006472:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006476:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800647a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800647c:	2300      	movs	r3, #0
 800647e:	60bb      	str	r3, [r7, #8]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	60bb      	str	r3, [r7, #8]
 8006488:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2201      	movs	r2, #1
 800648e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006496:	f043 0204 	orr.w	r2, r3, #4
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f7ff fdf6 	bl	8006090 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80064a4:	e089      	b.n	80065ba <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	f003 0302 	and.w	r3, r3, #2
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d107      	bne.n	80064c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d002      	beq.n	80064c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 f8be 	bl	800663c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	f003 0301 	and.w	r3, r3, #1
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d107      	bne.n	80064da <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d002      	beq.n	80064da <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 f8fd 	bl	80066d4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064e0:	2b40      	cmp	r3, #64	@ 0x40
 80064e2:	d12f      	bne.n	8006544 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	f003 0320 	and.w	r3, r3, #32
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d02a      	beq.n	8006544 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	685a      	ldr	r2, [r3, #4]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80064fc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a1e      	ldr	r2, [pc, #120]	@ (800657c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d101      	bne.n	800650c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006508:	4b1d      	ldr	r3, [pc, #116]	@ (8006580 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800650a:	e001      	b.n	8006510 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800650c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006510:	685a      	ldr	r2, [r3, #4]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4919      	ldr	r1, [pc, #100]	@ (800657c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006518:	428b      	cmp	r3, r1
 800651a:	d101      	bne.n	8006520 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800651c:	4b18      	ldr	r3, [pc, #96]	@ (8006580 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800651e:	e001      	b.n	8006524 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006520:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006524:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006528:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2201      	movs	r2, #1
 800652e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006536:	f043 0202 	orr.w	r2, r3, #2
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f7ff fda6 	bl	8006090 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	f003 0308 	and.w	r3, r3, #8
 800654a:	2b08      	cmp	r3, #8
 800654c:	d136      	bne.n	80065bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	f003 0320 	and.w	r3, r3, #32
 8006554:	2b00      	cmp	r3, #0
 8006556:	d031      	beq.n	80065bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a07      	ldr	r2, [pc, #28]	@ (800657c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d101      	bne.n	8006566 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006562:	4b07      	ldr	r3, [pc, #28]	@ (8006580 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006564:	e001      	b.n	800656a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006566:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800656a:	685a      	ldr	r2, [r3, #4]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4902      	ldr	r1, [pc, #8]	@ (800657c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006572:	428b      	cmp	r3, r1
 8006574:	d106      	bne.n	8006584 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8006576:	4b02      	ldr	r3, [pc, #8]	@ (8006580 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006578:	e006      	b.n	8006588 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800657a:	bf00      	nop
 800657c:	40003800 	.word	0x40003800
 8006580:	40003400 	.word	0x40003400
 8006584:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006588:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800658c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	685a      	ldr	r2, [r3, #4]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800659c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2201      	movs	r2, #1
 80065a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065aa:	f043 0204 	orr.w	r2, r3, #4
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f7ff fd6c 	bl	8006090 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80065b8:	e000      	b.n	80065bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80065ba:	bf00      	nop
}
 80065bc:	bf00      	nop
 80065be:	3720      	adds	r7, #32
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80065cc:	bf00      	nop
 80065ce:	370c      	adds	r7, #12
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065e4:	1c99      	adds	r1, r3, #2
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	6251      	str	r1, [r2, #36]	@ 0x24
 80065ea:	881a      	ldrh	r2, [r3, #0]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	3b01      	subs	r3, #1
 80065fa:	b29a      	uxth	r2, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006604:	b29b      	uxth	r3, r3
 8006606:	2b00      	cmp	r3, #0
 8006608:	d113      	bne.n	8006632 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	685a      	ldr	r2, [r3, #4]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006618:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800661e:	b29b      	uxth	r3, r3
 8006620:	2b00      	cmp	r3, #0
 8006622:	d106      	bne.n	8006632 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f7ff ffc9 	bl	80065c4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006632:	bf00      	nop
 8006634:	3708      	adds	r7, #8
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
	...

0800663c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b082      	sub	sp, #8
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006648:	1c99      	adds	r1, r3, #2
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	6251      	str	r1, [r2, #36]	@ 0x24
 800664e:	8819      	ldrh	r1, [r3, #0]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a1d      	ldr	r2, [pc, #116]	@ (80066cc <I2SEx_TxISR_I2SExt+0x90>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d101      	bne.n	800665e <I2SEx_TxISR_I2SExt+0x22>
 800665a:	4b1d      	ldr	r3, [pc, #116]	@ (80066d0 <I2SEx_TxISR_I2SExt+0x94>)
 800665c:	e001      	b.n	8006662 <I2SEx_TxISR_I2SExt+0x26>
 800665e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006662:	460a      	mov	r2, r1
 8006664:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800666a:	b29b      	uxth	r3, r3
 800666c:	3b01      	subs	r3, #1
 800666e:	b29a      	uxth	r2, r3
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006678:	b29b      	uxth	r3, r3
 800667a:	2b00      	cmp	r3, #0
 800667c:	d121      	bne.n	80066c2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a12      	ldr	r2, [pc, #72]	@ (80066cc <I2SEx_TxISR_I2SExt+0x90>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d101      	bne.n	800668c <I2SEx_TxISR_I2SExt+0x50>
 8006688:	4b11      	ldr	r3, [pc, #68]	@ (80066d0 <I2SEx_TxISR_I2SExt+0x94>)
 800668a:	e001      	b.n	8006690 <I2SEx_TxISR_I2SExt+0x54>
 800668c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006690:	685a      	ldr	r2, [r3, #4]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	490d      	ldr	r1, [pc, #52]	@ (80066cc <I2SEx_TxISR_I2SExt+0x90>)
 8006698:	428b      	cmp	r3, r1
 800669a:	d101      	bne.n	80066a0 <I2SEx_TxISR_I2SExt+0x64>
 800669c:	4b0c      	ldr	r3, [pc, #48]	@ (80066d0 <I2SEx_TxISR_I2SExt+0x94>)
 800669e:	e001      	b.n	80066a4 <I2SEx_TxISR_I2SExt+0x68>
 80066a0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80066a4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80066a8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d106      	bne.n	80066c2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f7ff ff81 	bl	80065c4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80066c2:	bf00      	nop
 80066c4:	3708      	adds	r7, #8
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	bf00      	nop
 80066cc:	40003800 	.word	0x40003800
 80066d0:	40003400 	.word	0x40003400

080066d4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b082      	sub	sp, #8
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	68d8      	ldr	r0, [r3, #12]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066e6:	1c99      	adds	r1, r3, #2
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80066ec:	b282      	uxth	r2, r0
 80066ee:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	3b01      	subs	r3, #1
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006702:	b29b      	uxth	r3, r3
 8006704:	2b00      	cmp	r3, #0
 8006706:	d113      	bne.n	8006730 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	685a      	ldr	r2, [r3, #4]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006716:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800671c:	b29b      	uxth	r3, r3
 800671e:	2b00      	cmp	r3, #0
 8006720:	d106      	bne.n	8006730 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2201      	movs	r2, #1
 8006726:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f7ff ff4a 	bl	80065c4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006730:	bf00      	nop
 8006732:	3708      	adds	r7, #8
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a20      	ldr	r2, [pc, #128]	@ (80067c8 <I2SEx_RxISR_I2SExt+0x90>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d101      	bne.n	800674e <I2SEx_RxISR_I2SExt+0x16>
 800674a:	4b20      	ldr	r3, [pc, #128]	@ (80067cc <I2SEx_RxISR_I2SExt+0x94>)
 800674c:	e001      	b.n	8006752 <I2SEx_RxISR_I2SExt+0x1a>
 800674e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006752:	68d8      	ldr	r0, [r3, #12]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006758:	1c99      	adds	r1, r3, #2
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800675e:	b282      	uxth	r2, r0
 8006760:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006766:	b29b      	uxth	r3, r3
 8006768:	3b01      	subs	r3, #1
 800676a:	b29a      	uxth	r2, r3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006774:	b29b      	uxth	r3, r3
 8006776:	2b00      	cmp	r3, #0
 8006778:	d121      	bne.n	80067be <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a12      	ldr	r2, [pc, #72]	@ (80067c8 <I2SEx_RxISR_I2SExt+0x90>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d101      	bne.n	8006788 <I2SEx_RxISR_I2SExt+0x50>
 8006784:	4b11      	ldr	r3, [pc, #68]	@ (80067cc <I2SEx_RxISR_I2SExt+0x94>)
 8006786:	e001      	b.n	800678c <I2SEx_RxISR_I2SExt+0x54>
 8006788:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800678c:	685a      	ldr	r2, [r3, #4]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	490d      	ldr	r1, [pc, #52]	@ (80067c8 <I2SEx_RxISR_I2SExt+0x90>)
 8006794:	428b      	cmp	r3, r1
 8006796:	d101      	bne.n	800679c <I2SEx_RxISR_I2SExt+0x64>
 8006798:	4b0c      	ldr	r3, [pc, #48]	@ (80067cc <I2SEx_RxISR_I2SExt+0x94>)
 800679a:	e001      	b.n	80067a0 <I2SEx_RxISR_I2SExt+0x68>
 800679c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80067a0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80067a4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d106      	bne.n	80067be <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f7ff ff03 	bl	80065c4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80067be:	bf00      	nop
 80067c0:	3708      	adds	r7, #8
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	40003800 	.word	0x40003800
 80067cc:	40003400 	.word	0x40003400

080067d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b086      	sub	sp, #24
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d101      	bne.n	80067e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e267      	b.n	8006cb2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 0301 	and.w	r3, r3, #1
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d075      	beq.n	80068da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80067ee:	4b88      	ldr	r3, [pc, #544]	@ (8006a10 <HAL_RCC_OscConfig+0x240>)
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	f003 030c 	and.w	r3, r3, #12
 80067f6:	2b04      	cmp	r3, #4
 80067f8:	d00c      	beq.n	8006814 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80067fa:	4b85      	ldr	r3, [pc, #532]	@ (8006a10 <HAL_RCC_OscConfig+0x240>)
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006802:	2b08      	cmp	r3, #8
 8006804:	d112      	bne.n	800682c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006806:	4b82      	ldr	r3, [pc, #520]	@ (8006a10 <HAL_RCC_OscConfig+0x240>)
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800680e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006812:	d10b      	bne.n	800682c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006814:	4b7e      	ldr	r3, [pc, #504]	@ (8006a10 <HAL_RCC_OscConfig+0x240>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800681c:	2b00      	cmp	r3, #0
 800681e:	d05b      	beq.n	80068d8 <HAL_RCC_OscConfig+0x108>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d157      	bne.n	80068d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	e242      	b.n	8006cb2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006834:	d106      	bne.n	8006844 <HAL_RCC_OscConfig+0x74>
 8006836:	4b76      	ldr	r3, [pc, #472]	@ (8006a10 <HAL_RCC_OscConfig+0x240>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a75      	ldr	r2, [pc, #468]	@ (8006a10 <HAL_RCC_OscConfig+0x240>)
 800683c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006840:	6013      	str	r3, [r2, #0]
 8006842:	e01d      	b.n	8006880 <HAL_RCC_OscConfig+0xb0>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800684c:	d10c      	bne.n	8006868 <HAL_RCC_OscConfig+0x98>
 800684e:	4b70      	ldr	r3, [pc, #448]	@ (8006a10 <HAL_RCC_OscConfig+0x240>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a6f      	ldr	r2, [pc, #444]	@ (8006a10 <HAL_RCC_OscConfig+0x240>)
 8006854:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006858:	6013      	str	r3, [r2, #0]
 800685a:	4b6d      	ldr	r3, [pc, #436]	@ (8006a10 <HAL_RCC_OscConfig+0x240>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a6c      	ldr	r2, [pc, #432]	@ (8006a10 <HAL_RCC_OscConfig+0x240>)
 8006860:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006864:	6013      	str	r3, [r2, #0]
 8006866:	e00b      	b.n	8006880 <HAL_RCC_OscConfig+0xb0>
 8006868:	4b69      	ldr	r3, [pc, #420]	@ (8006a10 <HAL_RCC_OscConfig+0x240>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a68      	ldr	r2, [pc, #416]	@ (8006a10 <HAL_RCC_OscConfig+0x240>)
 800686e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006872:	6013      	str	r3, [r2, #0]
 8006874:	4b66      	ldr	r3, [pc, #408]	@ (8006a10 <HAL_RCC_OscConfig+0x240>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a65      	ldr	r2, [pc, #404]	@ (8006a10 <HAL_RCC_OscConfig+0x240>)
 800687a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800687e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d013      	beq.n	80068b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006888:	f7fb fcf0 	bl	800226c <HAL_GetTick>
 800688c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800688e:	e008      	b.n	80068a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006890:	f7fb fcec 	bl	800226c <HAL_GetTick>
 8006894:	4602      	mov	r2, r0
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	2b64      	cmp	r3, #100	@ 0x64
 800689c:	d901      	bls.n	80068a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800689e:	2303      	movs	r3, #3
 80068a0:	e207      	b.n	8006cb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068a2:	4b5b      	ldr	r3, [pc, #364]	@ (8006a10 <HAL_RCC_OscConfig+0x240>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d0f0      	beq.n	8006890 <HAL_RCC_OscConfig+0xc0>
 80068ae:	e014      	b.n	80068da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068b0:	f7fb fcdc 	bl	800226c <HAL_GetTick>
 80068b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068b6:	e008      	b.n	80068ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068b8:	f7fb fcd8 	bl	800226c <HAL_GetTick>
 80068bc:	4602      	mov	r2, r0
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	1ad3      	subs	r3, r2, r3
 80068c2:	2b64      	cmp	r3, #100	@ 0x64
 80068c4:	d901      	bls.n	80068ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80068c6:	2303      	movs	r3, #3
 80068c8:	e1f3      	b.n	8006cb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068ca:	4b51      	ldr	r3, [pc, #324]	@ (8006a10 <HAL_RCC_OscConfig+0x240>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d1f0      	bne.n	80068b8 <HAL_RCC_OscConfig+0xe8>
 80068d6:	e000      	b.n	80068da <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 0302 	and.w	r3, r3, #2
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d063      	beq.n	80069ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80068e6:	4b4a      	ldr	r3, [pc, #296]	@ (8006a10 <HAL_RCC_OscConfig+0x240>)
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	f003 030c 	and.w	r3, r3, #12
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d00b      	beq.n	800690a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80068f2:	4b47      	ldr	r3, [pc, #284]	@ (8006a10 <HAL_RCC_OscConfig+0x240>)
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80068fa:	2b08      	cmp	r3, #8
 80068fc:	d11c      	bne.n	8006938 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80068fe:	4b44      	ldr	r3, [pc, #272]	@ (8006a10 <HAL_RCC_OscConfig+0x240>)
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006906:	2b00      	cmp	r3, #0
 8006908:	d116      	bne.n	8006938 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800690a:	4b41      	ldr	r3, [pc, #260]	@ (8006a10 <HAL_RCC_OscConfig+0x240>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f003 0302 	and.w	r3, r3, #2
 8006912:	2b00      	cmp	r3, #0
 8006914:	d005      	beq.n	8006922 <HAL_RCC_OscConfig+0x152>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	2b01      	cmp	r3, #1
 800691c:	d001      	beq.n	8006922 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e1c7      	b.n	8006cb2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006922:	4b3b      	ldr	r3, [pc, #236]	@ (8006a10 <HAL_RCC_OscConfig+0x240>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	00db      	lsls	r3, r3, #3
 8006930:	4937      	ldr	r1, [pc, #220]	@ (8006a10 <HAL_RCC_OscConfig+0x240>)
 8006932:	4313      	orrs	r3, r2
 8006934:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006936:	e03a      	b.n	80069ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d020      	beq.n	8006982 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006940:	4b34      	ldr	r3, [pc, #208]	@ (8006a14 <HAL_RCC_OscConfig+0x244>)
 8006942:	2201      	movs	r2, #1
 8006944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006946:	f7fb fc91 	bl	800226c <HAL_GetTick>
 800694a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800694c:	e008      	b.n	8006960 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800694e:	f7fb fc8d 	bl	800226c <HAL_GetTick>
 8006952:	4602      	mov	r2, r0
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	1ad3      	subs	r3, r2, r3
 8006958:	2b02      	cmp	r3, #2
 800695a:	d901      	bls.n	8006960 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800695c:	2303      	movs	r3, #3
 800695e:	e1a8      	b.n	8006cb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006960:	4b2b      	ldr	r3, [pc, #172]	@ (8006a10 <HAL_RCC_OscConfig+0x240>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 0302 	and.w	r3, r3, #2
 8006968:	2b00      	cmp	r3, #0
 800696a:	d0f0      	beq.n	800694e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800696c:	4b28      	ldr	r3, [pc, #160]	@ (8006a10 <HAL_RCC_OscConfig+0x240>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	691b      	ldr	r3, [r3, #16]
 8006978:	00db      	lsls	r3, r3, #3
 800697a:	4925      	ldr	r1, [pc, #148]	@ (8006a10 <HAL_RCC_OscConfig+0x240>)
 800697c:	4313      	orrs	r3, r2
 800697e:	600b      	str	r3, [r1, #0]
 8006980:	e015      	b.n	80069ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006982:	4b24      	ldr	r3, [pc, #144]	@ (8006a14 <HAL_RCC_OscConfig+0x244>)
 8006984:	2200      	movs	r2, #0
 8006986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006988:	f7fb fc70 	bl	800226c <HAL_GetTick>
 800698c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800698e:	e008      	b.n	80069a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006990:	f7fb fc6c 	bl	800226c <HAL_GetTick>
 8006994:	4602      	mov	r2, r0
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	1ad3      	subs	r3, r2, r3
 800699a:	2b02      	cmp	r3, #2
 800699c:	d901      	bls.n	80069a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800699e:	2303      	movs	r3, #3
 80069a0:	e187      	b.n	8006cb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069a2:	4b1b      	ldr	r3, [pc, #108]	@ (8006a10 <HAL_RCC_OscConfig+0x240>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f003 0302 	and.w	r3, r3, #2
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1f0      	bne.n	8006990 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 0308 	and.w	r3, r3, #8
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d036      	beq.n	8006a28 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	695b      	ldr	r3, [r3, #20]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d016      	beq.n	80069f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069c2:	4b15      	ldr	r3, [pc, #84]	@ (8006a18 <HAL_RCC_OscConfig+0x248>)
 80069c4:	2201      	movs	r2, #1
 80069c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069c8:	f7fb fc50 	bl	800226c <HAL_GetTick>
 80069cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069ce:	e008      	b.n	80069e2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069d0:	f7fb fc4c 	bl	800226c <HAL_GetTick>
 80069d4:	4602      	mov	r2, r0
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	1ad3      	subs	r3, r2, r3
 80069da:	2b02      	cmp	r3, #2
 80069dc:	d901      	bls.n	80069e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80069de:	2303      	movs	r3, #3
 80069e0:	e167      	b.n	8006cb2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069e2:	4b0b      	ldr	r3, [pc, #44]	@ (8006a10 <HAL_RCC_OscConfig+0x240>)
 80069e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069e6:	f003 0302 	and.w	r3, r3, #2
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d0f0      	beq.n	80069d0 <HAL_RCC_OscConfig+0x200>
 80069ee:	e01b      	b.n	8006a28 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80069f0:	4b09      	ldr	r3, [pc, #36]	@ (8006a18 <HAL_RCC_OscConfig+0x248>)
 80069f2:	2200      	movs	r2, #0
 80069f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069f6:	f7fb fc39 	bl	800226c <HAL_GetTick>
 80069fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069fc:	e00e      	b.n	8006a1c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069fe:	f7fb fc35 	bl	800226c <HAL_GetTick>
 8006a02:	4602      	mov	r2, r0
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	1ad3      	subs	r3, r2, r3
 8006a08:	2b02      	cmp	r3, #2
 8006a0a:	d907      	bls.n	8006a1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006a0c:	2303      	movs	r3, #3
 8006a0e:	e150      	b.n	8006cb2 <HAL_RCC_OscConfig+0x4e2>
 8006a10:	40023800 	.word	0x40023800
 8006a14:	42470000 	.word	0x42470000
 8006a18:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a1c:	4b88      	ldr	r3, [pc, #544]	@ (8006c40 <HAL_RCC_OscConfig+0x470>)
 8006a1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a20:	f003 0302 	and.w	r3, r3, #2
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d1ea      	bne.n	80069fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 0304 	and.w	r3, r3, #4
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	f000 8097 	beq.w	8006b64 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a36:	2300      	movs	r3, #0
 8006a38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a3a:	4b81      	ldr	r3, [pc, #516]	@ (8006c40 <HAL_RCC_OscConfig+0x470>)
 8006a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d10f      	bne.n	8006a66 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a46:	2300      	movs	r3, #0
 8006a48:	60bb      	str	r3, [r7, #8]
 8006a4a:	4b7d      	ldr	r3, [pc, #500]	@ (8006c40 <HAL_RCC_OscConfig+0x470>)
 8006a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a4e:	4a7c      	ldr	r2, [pc, #496]	@ (8006c40 <HAL_RCC_OscConfig+0x470>)
 8006a50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a54:	6413      	str	r3, [r2, #64]	@ 0x40
 8006a56:	4b7a      	ldr	r3, [pc, #488]	@ (8006c40 <HAL_RCC_OscConfig+0x470>)
 8006a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a5e:	60bb      	str	r3, [r7, #8]
 8006a60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a62:	2301      	movs	r3, #1
 8006a64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a66:	4b77      	ldr	r3, [pc, #476]	@ (8006c44 <HAL_RCC_OscConfig+0x474>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d118      	bne.n	8006aa4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a72:	4b74      	ldr	r3, [pc, #464]	@ (8006c44 <HAL_RCC_OscConfig+0x474>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a73      	ldr	r2, [pc, #460]	@ (8006c44 <HAL_RCC_OscConfig+0x474>)
 8006a78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a7e:	f7fb fbf5 	bl	800226c <HAL_GetTick>
 8006a82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a84:	e008      	b.n	8006a98 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a86:	f7fb fbf1 	bl	800226c <HAL_GetTick>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	1ad3      	subs	r3, r2, r3
 8006a90:	2b02      	cmp	r3, #2
 8006a92:	d901      	bls.n	8006a98 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006a94:	2303      	movs	r3, #3
 8006a96:	e10c      	b.n	8006cb2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a98:	4b6a      	ldr	r3, [pc, #424]	@ (8006c44 <HAL_RCC_OscConfig+0x474>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d0f0      	beq.n	8006a86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d106      	bne.n	8006aba <HAL_RCC_OscConfig+0x2ea>
 8006aac:	4b64      	ldr	r3, [pc, #400]	@ (8006c40 <HAL_RCC_OscConfig+0x470>)
 8006aae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ab0:	4a63      	ldr	r2, [pc, #396]	@ (8006c40 <HAL_RCC_OscConfig+0x470>)
 8006ab2:	f043 0301 	orr.w	r3, r3, #1
 8006ab6:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ab8:	e01c      	b.n	8006af4 <HAL_RCC_OscConfig+0x324>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	2b05      	cmp	r3, #5
 8006ac0:	d10c      	bne.n	8006adc <HAL_RCC_OscConfig+0x30c>
 8006ac2:	4b5f      	ldr	r3, [pc, #380]	@ (8006c40 <HAL_RCC_OscConfig+0x470>)
 8006ac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ac6:	4a5e      	ldr	r2, [pc, #376]	@ (8006c40 <HAL_RCC_OscConfig+0x470>)
 8006ac8:	f043 0304 	orr.w	r3, r3, #4
 8006acc:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ace:	4b5c      	ldr	r3, [pc, #368]	@ (8006c40 <HAL_RCC_OscConfig+0x470>)
 8006ad0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ad2:	4a5b      	ldr	r2, [pc, #364]	@ (8006c40 <HAL_RCC_OscConfig+0x470>)
 8006ad4:	f043 0301 	orr.w	r3, r3, #1
 8006ad8:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ada:	e00b      	b.n	8006af4 <HAL_RCC_OscConfig+0x324>
 8006adc:	4b58      	ldr	r3, [pc, #352]	@ (8006c40 <HAL_RCC_OscConfig+0x470>)
 8006ade:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ae0:	4a57      	ldr	r2, [pc, #348]	@ (8006c40 <HAL_RCC_OscConfig+0x470>)
 8006ae2:	f023 0301 	bic.w	r3, r3, #1
 8006ae6:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ae8:	4b55      	ldr	r3, [pc, #340]	@ (8006c40 <HAL_RCC_OscConfig+0x470>)
 8006aea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006aec:	4a54      	ldr	r2, [pc, #336]	@ (8006c40 <HAL_RCC_OscConfig+0x470>)
 8006aee:	f023 0304 	bic.w	r3, r3, #4
 8006af2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d015      	beq.n	8006b28 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006afc:	f7fb fbb6 	bl	800226c <HAL_GetTick>
 8006b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b02:	e00a      	b.n	8006b1a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b04:	f7fb fbb2 	bl	800226c <HAL_GetTick>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	1ad3      	subs	r3, r2, r3
 8006b0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d901      	bls.n	8006b1a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006b16:	2303      	movs	r3, #3
 8006b18:	e0cb      	b.n	8006cb2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b1a:	4b49      	ldr	r3, [pc, #292]	@ (8006c40 <HAL_RCC_OscConfig+0x470>)
 8006b1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b1e:	f003 0302 	and.w	r3, r3, #2
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d0ee      	beq.n	8006b04 <HAL_RCC_OscConfig+0x334>
 8006b26:	e014      	b.n	8006b52 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b28:	f7fb fba0 	bl	800226c <HAL_GetTick>
 8006b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b2e:	e00a      	b.n	8006b46 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b30:	f7fb fb9c 	bl	800226c <HAL_GetTick>
 8006b34:	4602      	mov	r2, r0
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	1ad3      	subs	r3, r2, r3
 8006b3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d901      	bls.n	8006b46 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006b42:	2303      	movs	r3, #3
 8006b44:	e0b5      	b.n	8006cb2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b46:	4b3e      	ldr	r3, [pc, #248]	@ (8006c40 <HAL_RCC_OscConfig+0x470>)
 8006b48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b4a:	f003 0302 	and.w	r3, r3, #2
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d1ee      	bne.n	8006b30 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006b52:	7dfb      	ldrb	r3, [r7, #23]
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d105      	bne.n	8006b64 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b58:	4b39      	ldr	r3, [pc, #228]	@ (8006c40 <HAL_RCC_OscConfig+0x470>)
 8006b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b5c:	4a38      	ldr	r2, [pc, #224]	@ (8006c40 <HAL_RCC_OscConfig+0x470>)
 8006b5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b62:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	699b      	ldr	r3, [r3, #24]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	f000 80a1 	beq.w	8006cb0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006b6e:	4b34      	ldr	r3, [pc, #208]	@ (8006c40 <HAL_RCC_OscConfig+0x470>)
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	f003 030c 	and.w	r3, r3, #12
 8006b76:	2b08      	cmp	r3, #8
 8006b78:	d05c      	beq.n	8006c34 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	699b      	ldr	r3, [r3, #24]
 8006b7e:	2b02      	cmp	r3, #2
 8006b80:	d141      	bne.n	8006c06 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b82:	4b31      	ldr	r3, [pc, #196]	@ (8006c48 <HAL_RCC_OscConfig+0x478>)
 8006b84:	2200      	movs	r2, #0
 8006b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b88:	f7fb fb70 	bl	800226c <HAL_GetTick>
 8006b8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b8e:	e008      	b.n	8006ba2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b90:	f7fb fb6c 	bl	800226c <HAL_GetTick>
 8006b94:	4602      	mov	r2, r0
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	1ad3      	subs	r3, r2, r3
 8006b9a:	2b02      	cmp	r3, #2
 8006b9c:	d901      	bls.n	8006ba2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	e087      	b.n	8006cb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ba2:	4b27      	ldr	r3, [pc, #156]	@ (8006c40 <HAL_RCC_OscConfig+0x470>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d1f0      	bne.n	8006b90 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	69da      	ldr	r2, [r3, #28]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a1b      	ldr	r3, [r3, #32]
 8006bb6:	431a      	orrs	r2, r3
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bbc:	019b      	lsls	r3, r3, #6
 8006bbe:	431a      	orrs	r2, r3
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bc4:	085b      	lsrs	r3, r3, #1
 8006bc6:	3b01      	subs	r3, #1
 8006bc8:	041b      	lsls	r3, r3, #16
 8006bca:	431a      	orrs	r2, r3
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bd0:	061b      	lsls	r3, r3, #24
 8006bd2:	491b      	ldr	r1, [pc, #108]	@ (8006c40 <HAL_RCC_OscConfig+0x470>)
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006bd8:	4b1b      	ldr	r3, [pc, #108]	@ (8006c48 <HAL_RCC_OscConfig+0x478>)
 8006bda:	2201      	movs	r2, #1
 8006bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bde:	f7fb fb45 	bl	800226c <HAL_GetTick>
 8006be2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006be4:	e008      	b.n	8006bf8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006be6:	f7fb fb41 	bl	800226c <HAL_GetTick>
 8006bea:	4602      	mov	r2, r0
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d901      	bls.n	8006bf8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006bf4:	2303      	movs	r3, #3
 8006bf6:	e05c      	b.n	8006cb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bf8:	4b11      	ldr	r3, [pc, #68]	@ (8006c40 <HAL_RCC_OscConfig+0x470>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d0f0      	beq.n	8006be6 <HAL_RCC_OscConfig+0x416>
 8006c04:	e054      	b.n	8006cb0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c06:	4b10      	ldr	r3, [pc, #64]	@ (8006c48 <HAL_RCC_OscConfig+0x478>)
 8006c08:	2200      	movs	r2, #0
 8006c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c0c:	f7fb fb2e 	bl	800226c <HAL_GetTick>
 8006c10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c12:	e008      	b.n	8006c26 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c14:	f7fb fb2a 	bl	800226c <HAL_GetTick>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	1ad3      	subs	r3, r2, r3
 8006c1e:	2b02      	cmp	r3, #2
 8006c20:	d901      	bls.n	8006c26 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006c22:	2303      	movs	r3, #3
 8006c24:	e045      	b.n	8006cb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c26:	4b06      	ldr	r3, [pc, #24]	@ (8006c40 <HAL_RCC_OscConfig+0x470>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d1f0      	bne.n	8006c14 <HAL_RCC_OscConfig+0x444>
 8006c32:	e03d      	b.n	8006cb0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	699b      	ldr	r3, [r3, #24]
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d107      	bne.n	8006c4c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e038      	b.n	8006cb2 <HAL_RCC_OscConfig+0x4e2>
 8006c40:	40023800 	.word	0x40023800
 8006c44:	40007000 	.word	0x40007000
 8006c48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006c4c:	4b1b      	ldr	r3, [pc, #108]	@ (8006cbc <HAL_RCC_OscConfig+0x4ec>)
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	699b      	ldr	r3, [r3, #24]
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d028      	beq.n	8006cac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d121      	bne.n	8006cac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d11a      	bne.n	8006cac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006c76:	68fa      	ldr	r2, [r7, #12]
 8006c78:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006c82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d111      	bne.n	8006cac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c92:	085b      	lsrs	r3, r3, #1
 8006c94:	3b01      	subs	r3, #1
 8006c96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d107      	bne.n	8006cac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ca6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d001      	beq.n	8006cb0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	e000      	b.n	8006cb2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006cb0:	2300      	movs	r3, #0
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3718      	adds	r7, #24
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	40023800 	.word	0x40023800

08006cc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b084      	sub	sp, #16
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d101      	bne.n	8006cd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e0cc      	b.n	8006e6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006cd4:	4b68      	ldr	r3, [pc, #416]	@ (8006e78 <HAL_RCC_ClockConfig+0x1b8>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 0307 	and.w	r3, r3, #7
 8006cdc:	683a      	ldr	r2, [r7, #0]
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d90c      	bls.n	8006cfc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ce2:	4b65      	ldr	r3, [pc, #404]	@ (8006e78 <HAL_RCC_ClockConfig+0x1b8>)
 8006ce4:	683a      	ldr	r2, [r7, #0]
 8006ce6:	b2d2      	uxtb	r2, r2
 8006ce8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cea:	4b63      	ldr	r3, [pc, #396]	@ (8006e78 <HAL_RCC_ClockConfig+0x1b8>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 0307 	and.w	r3, r3, #7
 8006cf2:	683a      	ldr	r2, [r7, #0]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d001      	beq.n	8006cfc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e0b8      	b.n	8006e6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f003 0302 	and.w	r3, r3, #2
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d020      	beq.n	8006d4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f003 0304 	and.w	r3, r3, #4
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d005      	beq.n	8006d20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d14:	4b59      	ldr	r3, [pc, #356]	@ (8006e7c <HAL_RCC_ClockConfig+0x1bc>)
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	4a58      	ldr	r2, [pc, #352]	@ (8006e7c <HAL_RCC_ClockConfig+0x1bc>)
 8006d1a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006d1e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 0308 	and.w	r3, r3, #8
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d005      	beq.n	8006d38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d2c:	4b53      	ldr	r3, [pc, #332]	@ (8006e7c <HAL_RCC_ClockConfig+0x1bc>)
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	4a52      	ldr	r2, [pc, #328]	@ (8006e7c <HAL_RCC_ClockConfig+0x1bc>)
 8006d32:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006d36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d38:	4b50      	ldr	r3, [pc, #320]	@ (8006e7c <HAL_RCC_ClockConfig+0x1bc>)
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	494d      	ldr	r1, [pc, #308]	@ (8006e7c <HAL_RCC_ClockConfig+0x1bc>)
 8006d46:	4313      	orrs	r3, r2
 8006d48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f003 0301 	and.w	r3, r3, #1
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d044      	beq.n	8006de0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d107      	bne.n	8006d6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d5e:	4b47      	ldr	r3, [pc, #284]	@ (8006e7c <HAL_RCC_ClockConfig+0x1bc>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d119      	bne.n	8006d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e07f      	b.n	8006e6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	d003      	beq.n	8006d7e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d7a:	2b03      	cmp	r3, #3
 8006d7c:	d107      	bne.n	8006d8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d7e:	4b3f      	ldr	r3, [pc, #252]	@ (8006e7c <HAL_RCC_ClockConfig+0x1bc>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d109      	bne.n	8006d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e06f      	b.n	8006e6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d8e:	4b3b      	ldr	r3, [pc, #236]	@ (8006e7c <HAL_RCC_ClockConfig+0x1bc>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f003 0302 	and.w	r3, r3, #2
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d101      	bne.n	8006d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e067      	b.n	8006e6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d9e:	4b37      	ldr	r3, [pc, #220]	@ (8006e7c <HAL_RCC_ClockConfig+0x1bc>)
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	f023 0203 	bic.w	r2, r3, #3
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	4934      	ldr	r1, [pc, #208]	@ (8006e7c <HAL_RCC_ClockConfig+0x1bc>)
 8006dac:	4313      	orrs	r3, r2
 8006dae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006db0:	f7fb fa5c 	bl	800226c <HAL_GetTick>
 8006db4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006db6:	e00a      	b.n	8006dce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006db8:	f7fb fa58 	bl	800226c <HAL_GetTick>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d901      	bls.n	8006dce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	e04f      	b.n	8006e6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dce:	4b2b      	ldr	r3, [pc, #172]	@ (8006e7c <HAL_RCC_ClockConfig+0x1bc>)
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	f003 020c 	and.w	r2, r3, #12
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d1eb      	bne.n	8006db8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006de0:	4b25      	ldr	r3, [pc, #148]	@ (8006e78 <HAL_RCC_ClockConfig+0x1b8>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 0307 	and.w	r3, r3, #7
 8006de8:	683a      	ldr	r2, [r7, #0]
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d20c      	bcs.n	8006e08 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dee:	4b22      	ldr	r3, [pc, #136]	@ (8006e78 <HAL_RCC_ClockConfig+0x1b8>)
 8006df0:	683a      	ldr	r2, [r7, #0]
 8006df2:	b2d2      	uxtb	r2, r2
 8006df4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006df6:	4b20      	ldr	r3, [pc, #128]	@ (8006e78 <HAL_RCC_ClockConfig+0x1b8>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f003 0307 	and.w	r3, r3, #7
 8006dfe:	683a      	ldr	r2, [r7, #0]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d001      	beq.n	8006e08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	e032      	b.n	8006e6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f003 0304 	and.w	r3, r3, #4
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d008      	beq.n	8006e26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e14:	4b19      	ldr	r3, [pc, #100]	@ (8006e7c <HAL_RCC_ClockConfig+0x1bc>)
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	4916      	ldr	r1, [pc, #88]	@ (8006e7c <HAL_RCC_ClockConfig+0x1bc>)
 8006e22:	4313      	orrs	r3, r2
 8006e24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f003 0308 	and.w	r3, r3, #8
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d009      	beq.n	8006e46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e32:	4b12      	ldr	r3, [pc, #72]	@ (8006e7c <HAL_RCC_ClockConfig+0x1bc>)
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	691b      	ldr	r3, [r3, #16]
 8006e3e:	00db      	lsls	r3, r3, #3
 8006e40:	490e      	ldr	r1, [pc, #56]	@ (8006e7c <HAL_RCC_ClockConfig+0x1bc>)
 8006e42:	4313      	orrs	r3, r2
 8006e44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006e46:	f000 f821 	bl	8006e8c <HAL_RCC_GetSysClockFreq>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8006e7c <HAL_RCC_ClockConfig+0x1bc>)
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	091b      	lsrs	r3, r3, #4
 8006e52:	f003 030f 	and.w	r3, r3, #15
 8006e56:	490a      	ldr	r1, [pc, #40]	@ (8006e80 <HAL_RCC_ClockConfig+0x1c0>)
 8006e58:	5ccb      	ldrb	r3, [r1, r3]
 8006e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8006e5e:	4a09      	ldr	r2, [pc, #36]	@ (8006e84 <HAL_RCC_ClockConfig+0x1c4>)
 8006e60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006e62:	4b09      	ldr	r3, [pc, #36]	@ (8006e88 <HAL_RCC_ClockConfig+0x1c8>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4618      	mov	r0, r3
 8006e68:	f7fb f9bc 	bl	80021e4 <HAL_InitTick>

  return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3710      	adds	r7, #16
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	40023c00 	.word	0x40023c00
 8006e7c:	40023800 	.word	0x40023800
 8006e80:	0800c6d8 	.word	0x0800c6d8
 8006e84:	20000000 	.word	0x20000000
 8006e88:	20000004 	.word	0x20000004

08006e8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e90:	b094      	sub	sp, #80	@ 0x50
 8006e92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006e94:	2300      	movs	r3, #0
 8006e96:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ea4:	4b79      	ldr	r3, [pc, #484]	@ (800708c <HAL_RCC_GetSysClockFreq+0x200>)
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	f003 030c 	and.w	r3, r3, #12
 8006eac:	2b08      	cmp	r3, #8
 8006eae:	d00d      	beq.n	8006ecc <HAL_RCC_GetSysClockFreq+0x40>
 8006eb0:	2b08      	cmp	r3, #8
 8006eb2:	f200 80e1 	bhi.w	8007078 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d002      	beq.n	8006ec0 <HAL_RCC_GetSysClockFreq+0x34>
 8006eba:	2b04      	cmp	r3, #4
 8006ebc:	d003      	beq.n	8006ec6 <HAL_RCC_GetSysClockFreq+0x3a>
 8006ebe:	e0db      	b.n	8007078 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ec0:	4b73      	ldr	r3, [pc, #460]	@ (8007090 <HAL_RCC_GetSysClockFreq+0x204>)
 8006ec2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006ec4:	e0db      	b.n	800707e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006ec6:	4b73      	ldr	r3, [pc, #460]	@ (8007094 <HAL_RCC_GetSysClockFreq+0x208>)
 8006ec8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006eca:	e0d8      	b.n	800707e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ecc:	4b6f      	ldr	r3, [pc, #444]	@ (800708c <HAL_RCC_GetSysClockFreq+0x200>)
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ed4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006ed6:	4b6d      	ldr	r3, [pc, #436]	@ (800708c <HAL_RCC_GetSysClockFreq+0x200>)
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d063      	beq.n	8006faa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ee2:	4b6a      	ldr	r3, [pc, #424]	@ (800708c <HAL_RCC_GetSysClockFreq+0x200>)
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	099b      	lsrs	r3, r3, #6
 8006ee8:	2200      	movs	r2, #0
 8006eea:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006eec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ef0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ef4:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006efa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006efe:	4622      	mov	r2, r4
 8006f00:	462b      	mov	r3, r5
 8006f02:	f04f 0000 	mov.w	r0, #0
 8006f06:	f04f 0100 	mov.w	r1, #0
 8006f0a:	0159      	lsls	r1, r3, #5
 8006f0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f10:	0150      	lsls	r0, r2, #5
 8006f12:	4602      	mov	r2, r0
 8006f14:	460b      	mov	r3, r1
 8006f16:	4621      	mov	r1, r4
 8006f18:	1a51      	subs	r1, r2, r1
 8006f1a:	6139      	str	r1, [r7, #16]
 8006f1c:	4629      	mov	r1, r5
 8006f1e:	eb63 0301 	sbc.w	r3, r3, r1
 8006f22:	617b      	str	r3, [r7, #20]
 8006f24:	f04f 0200 	mov.w	r2, #0
 8006f28:	f04f 0300 	mov.w	r3, #0
 8006f2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f30:	4659      	mov	r1, fp
 8006f32:	018b      	lsls	r3, r1, #6
 8006f34:	4651      	mov	r1, sl
 8006f36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006f3a:	4651      	mov	r1, sl
 8006f3c:	018a      	lsls	r2, r1, #6
 8006f3e:	4651      	mov	r1, sl
 8006f40:	ebb2 0801 	subs.w	r8, r2, r1
 8006f44:	4659      	mov	r1, fp
 8006f46:	eb63 0901 	sbc.w	r9, r3, r1
 8006f4a:	f04f 0200 	mov.w	r2, #0
 8006f4e:	f04f 0300 	mov.w	r3, #0
 8006f52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f5e:	4690      	mov	r8, r2
 8006f60:	4699      	mov	r9, r3
 8006f62:	4623      	mov	r3, r4
 8006f64:	eb18 0303 	adds.w	r3, r8, r3
 8006f68:	60bb      	str	r3, [r7, #8]
 8006f6a:	462b      	mov	r3, r5
 8006f6c:	eb49 0303 	adc.w	r3, r9, r3
 8006f70:	60fb      	str	r3, [r7, #12]
 8006f72:	f04f 0200 	mov.w	r2, #0
 8006f76:	f04f 0300 	mov.w	r3, #0
 8006f7a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006f7e:	4629      	mov	r1, r5
 8006f80:	024b      	lsls	r3, r1, #9
 8006f82:	4621      	mov	r1, r4
 8006f84:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006f88:	4621      	mov	r1, r4
 8006f8a:	024a      	lsls	r2, r1, #9
 8006f8c:	4610      	mov	r0, r2
 8006f8e:	4619      	mov	r1, r3
 8006f90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f92:	2200      	movs	r2, #0
 8006f94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006f9c:	f7f9 fc9e 	bl	80008dc <__aeabi_uldivmod>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	4613      	mov	r3, r2
 8006fa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006fa8:	e058      	b.n	800705c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006faa:	4b38      	ldr	r3, [pc, #224]	@ (800708c <HAL_RCC_GetSysClockFreq+0x200>)
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	099b      	lsrs	r3, r3, #6
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	4611      	mov	r1, r2
 8006fb6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006fba:	623b      	str	r3, [r7, #32]
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fc0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006fc4:	4642      	mov	r2, r8
 8006fc6:	464b      	mov	r3, r9
 8006fc8:	f04f 0000 	mov.w	r0, #0
 8006fcc:	f04f 0100 	mov.w	r1, #0
 8006fd0:	0159      	lsls	r1, r3, #5
 8006fd2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006fd6:	0150      	lsls	r0, r2, #5
 8006fd8:	4602      	mov	r2, r0
 8006fda:	460b      	mov	r3, r1
 8006fdc:	4641      	mov	r1, r8
 8006fde:	ebb2 0a01 	subs.w	sl, r2, r1
 8006fe2:	4649      	mov	r1, r9
 8006fe4:	eb63 0b01 	sbc.w	fp, r3, r1
 8006fe8:	f04f 0200 	mov.w	r2, #0
 8006fec:	f04f 0300 	mov.w	r3, #0
 8006ff0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006ff4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006ff8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006ffc:	ebb2 040a 	subs.w	r4, r2, sl
 8007000:	eb63 050b 	sbc.w	r5, r3, fp
 8007004:	f04f 0200 	mov.w	r2, #0
 8007008:	f04f 0300 	mov.w	r3, #0
 800700c:	00eb      	lsls	r3, r5, #3
 800700e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007012:	00e2      	lsls	r2, r4, #3
 8007014:	4614      	mov	r4, r2
 8007016:	461d      	mov	r5, r3
 8007018:	4643      	mov	r3, r8
 800701a:	18e3      	adds	r3, r4, r3
 800701c:	603b      	str	r3, [r7, #0]
 800701e:	464b      	mov	r3, r9
 8007020:	eb45 0303 	adc.w	r3, r5, r3
 8007024:	607b      	str	r3, [r7, #4]
 8007026:	f04f 0200 	mov.w	r2, #0
 800702a:	f04f 0300 	mov.w	r3, #0
 800702e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007032:	4629      	mov	r1, r5
 8007034:	028b      	lsls	r3, r1, #10
 8007036:	4621      	mov	r1, r4
 8007038:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800703c:	4621      	mov	r1, r4
 800703e:	028a      	lsls	r2, r1, #10
 8007040:	4610      	mov	r0, r2
 8007042:	4619      	mov	r1, r3
 8007044:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007046:	2200      	movs	r2, #0
 8007048:	61bb      	str	r3, [r7, #24]
 800704a:	61fa      	str	r2, [r7, #28]
 800704c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007050:	f7f9 fc44 	bl	80008dc <__aeabi_uldivmod>
 8007054:	4602      	mov	r2, r0
 8007056:	460b      	mov	r3, r1
 8007058:	4613      	mov	r3, r2
 800705a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800705c:	4b0b      	ldr	r3, [pc, #44]	@ (800708c <HAL_RCC_GetSysClockFreq+0x200>)
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	0c1b      	lsrs	r3, r3, #16
 8007062:	f003 0303 	and.w	r3, r3, #3
 8007066:	3301      	adds	r3, #1
 8007068:	005b      	lsls	r3, r3, #1
 800706a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800706c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800706e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007070:	fbb2 f3f3 	udiv	r3, r2, r3
 8007074:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007076:	e002      	b.n	800707e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007078:	4b05      	ldr	r3, [pc, #20]	@ (8007090 <HAL_RCC_GetSysClockFreq+0x204>)
 800707a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800707c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800707e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007080:	4618      	mov	r0, r3
 8007082:	3750      	adds	r7, #80	@ 0x50
 8007084:	46bd      	mov	sp, r7
 8007086:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800708a:	bf00      	nop
 800708c:	40023800 	.word	0x40023800
 8007090:	00f42400 	.word	0x00f42400
 8007094:	007a1200 	.word	0x007a1200

08007098 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007098:	b480      	push	{r7}
 800709a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800709c:	4b03      	ldr	r3, [pc, #12]	@ (80070ac <HAL_RCC_GetHCLKFreq+0x14>)
 800709e:	681b      	ldr	r3, [r3, #0]
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr
 80070aa:	bf00      	nop
 80070ac:	20000000 	.word	0x20000000

080070b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80070b4:	f7ff fff0 	bl	8007098 <HAL_RCC_GetHCLKFreq>
 80070b8:	4602      	mov	r2, r0
 80070ba:	4b05      	ldr	r3, [pc, #20]	@ (80070d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	0a9b      	lsrs	r3, r3, #10
 80070c0:	f003 0307 	and.w	r3, r3, #7
 80070c4:	4903      	ldr	r1, [pc, #12]	@ (80070d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80070c6:	5ccb      	ldrb	r3, [r1, r3]
 80070c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	40023800 	.word	0x40023800
 80070d4:	0800c6e8 	.word	0x0800c6e8

080070d8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b086      	sub	sp, #24
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80070e0:	2300      	movs	r3, #0
 80070e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80070e4:	2300      	movs	r3, #0
 80070e6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 0301 	and.w	r3, r3, #1
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d105      	bne.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d035      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007100:	4b62      	ldr	r3, [pc, #392]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007102:	2200      	movs	r2, #0
 8007104:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007106:	f7fb f8b1 	bl	800226c <HAL_GetTick>
 800710a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800710c:	e008      	b.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800710e:	f7fb f8ad 	bl	800226c <HAL_GetTick>
 8007112:	4602      	mov	r2, r0
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	1ad3      	subs	r3, r2, r3
 8007118:	2b02      	cmp	r3, #2
 800711a:	d901      	bls.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800711c:	2303      	movs	r3, #3
 800711e:	e0b0      	b.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007120:	4b5b      	ldr	r3, [pc, #364]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007128:	2b00      	cmp	r3, #0
 800712a:	d1f0      	bne.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	019a      	lsls	r2, r3, #6
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	071b      	lsls	r3, r3, #28
 8007138:	4955      	ldr	r1, [pc, #340]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800713a:	4313      	orrs	r3, r2
 800713c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007140:	4b52      	ldr	r3, [pc, #328]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007142:	2201      	movs	r2, #1
 8007144:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007146:	f7fb f891 	bl	800226c <HAL_GetTick>
 800714a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800714c:	e008      	b.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800714e:	f7fb f88d 	bl	800226c <HAL_GetTick>
 8007152:	4602      	mov	r2, r0
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	1ad3      	subs	r3, r2, r3
 8007158:	2b02      	cmp	r3, #2
 800715a:	d901      	bls.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800715c:	2303      	movs	r3, #3
 800715e:	e090      	b.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007160:	4b4b      	ldr	r3, [pc, #300]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007168:	2b00      	cmp	r3, #0
 800716a:	d0f0      	beq.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f003 0302 	and.w	r3, r3, #2
 8007174:	2b00      	cmp	r3, #0
 8007176:	f000 8083 	beq.w	8007280 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800717a:	2300      	movs	r3, #0
 800717c:	60fb      	str	r3, [r7, #12]
 800717e:	4b44      	ldr	r3, [pc, #272]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007182:	4a43      	ldr	r2, [pc, #268]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007184:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007188:	6413      	str	r3, [r2, #64]	@ 0x40
 800718a:	4b41      	ldr	r3, [pc, #260]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800718c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800718e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007192:	60fb      	str	r3, [r7, #12]
 8007194:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007196:	4b3f      	ldr	r3, [pc, #252]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a3e      	ldr	r2, [pc, #248]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800719c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071a0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80071a2:	f7fb f863 	bl	800226c <HAL_GetTick>
 80071a6:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80071a8:	e008      	b.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071aa:	f7fb f85f 	bl	800226c <HAL_GetTick>
 80071ae:	4602      	mov	r2, r0
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	1ad3      	subs	r3, r2, r3
 80071b4:	2b02      	cmp	r3, #2
 80071b6:	d901      	bls.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80071b8:	2303      	movs	r3, #3
 80071ba:	e062      	b.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80071bc:	4b35      	ldr	r3, [pc, #212]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d0f0      	beq.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80071c8:	4b31      	ldr	r3, [pc, #196]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071d0:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d02f      	beq.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	68db      	ldr	r3, [r3, #12]
 80071dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071e0:	693a      	ldr	r2, [r7, #16]
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d028      	beq.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80071e6:	4b2a      	ldr	r3, [pc, #168]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071ee:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80071f0:	4b29      	ldr	r3, [pc, #164]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80071f2:	2201      	movs	r2, #1
 80071f4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80071f6:	4b28      	ldr	r3, [pc, #160]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80071f8:	2200      	movs	r2, #0
 80071fa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80071fc:	4a24      	ldr	r2, [pc, #144]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007202:	4b23      	ldr	r3, [pc, #140]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007206:	f003 0301 	and.w	r3, r3, #1
 800720a:	2b01      	cmp	r3, #1
 800720c:	d114      	bne.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800720e:	f7fb f82d 	bl	800226c <HAL_GetTick>
 8007212:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007214:	e00a      	b.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007216:	f7fb f829 	bl	800226c <HAL_GetTick>
 800721a:	4602      	mov	r2, r0
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	1ad3      	subs	r3, r2, r3
 8007220:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007224:	4293      	cmp	r3, r2
 8007226:	d901      	bls.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007228:	2303      	movs	r3, #3
 800722a:	e02a      	b.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800722c:	4b18      	ldr	r3, [pc, #96]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800722e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007230:	f003 0302 	and.w	r3, r3, #2
 8007234:	2b00      	cmp	r3, #0
 8007236:	d0ee      	beq.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007240:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007244:	d10d      	bne.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007246:	4b12      	ldr	r3, [pc, #72]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007256:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800725a:	490d      	ldr	r1, [pc, #52]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800725c:	4313      	orrs	r3, r2
 800725e:	608b      	str	r3, [r1, #8]
 8007260:	e005      	b.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007262:	4b0b      	ldr	r3, [pc, #44]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	4a0a      	ldr	r2, [pc, #40]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007268:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800726c:	6093      	str	r3, [r2, #8]
 800726e:	4b08      	ldr	r3, [pc, #32]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007270:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800727a:	4905      	ldr	r1, [pc, #20]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800727c:	4313      	orrs	r3, r2
 800727e:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007280:	2300      	movs	r3, #0
}
 8007282:	4618      	mov	r0, r3
 8007284:	3718      	adds	r7, #24
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	42470068 	.word	0x42470068
 8007290:	40023800 	.word	0x40023800
 8007294:	40007000 	.word	0x40007000
 8007298:	42470e40 	.word	0x42470e40

0800729c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800729c:	b480      	push	{r7}
 800729e:	b087      	sub	sp, #28
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80072a4:	2300      	movs	r3, #0
 80072a6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80072a8:	2300      	movs	r3, #0
 80072aa:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80072ac:	2300      	movs	r3, #0
 80072ae:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80072b0:	2300      	movs	r3, #0
 80072b2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d13f      	bne.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80072ba:	4b24      	ldr	r3, [pc, #144]	@ (800734c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80072c2:	60fb      	str	r3, [r7, #12]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d006      	beq.n	80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80072d0:	d12f      	bne.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80072d2:	4b1f      	ldr	r3, [pc, #124]	@ (8007350 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80072d4:	617b      	str	r3, [r7, #20]
          break;
 80072d6:	e02f      	b.n	8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80072d8:	4b1c      	ldr	r3, [pc, #112]	@ (800734c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80072e4:	d108      	bne.n	80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80072e6:	4b19      	ldr	r3, [pc, #100]	@ (800734c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80072ee:	4a19      	ldr	r2, [pc, #100]	@ (8007354 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80072f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80072f4:	613b      	str	r3, [r7, #16]
 80072f6:	e007      	b.n	8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80072f8:	4b14      	ldr	r3, [pc, #80]	@ (800734c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007300:	4a15      	ldr	r2, [pc, #84]	@ (8007358 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8007302:	fbb2 f3f3 	udiv	r3, r2, r3
 8007306:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007308:	4b10      	ldr	r3, [pc, #64]	@ (800734c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800730a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800730e:	099b      	lsrs	r3, r3, #6
 8007310:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	fb02 f303 	mul.w	r3, r2, r3
 800731a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800731c:	4b0b      	ldr	r3, [pc, #44]	@ (800734c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800731e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007322:	0f1b      	lsrs	r3, r3, #28
 8007324:	f003 0307 	and.w	r3, r3, #7
 8007328:	68ba      	ldr	r2, [r7, #8]
 800732a:	fbb2 f3f3 	udiv	r3, r2, r3
 800732e:	617b      	str	r3, [r7, #20]
          break;
 8007330:	e002      	b.n	8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8007332:	2300      	movs	r3, #0
 8007334:	617b      	str	r3, [r7, #20]
          break;
 8007336:	bf00      	nop
        }
      }
      break;
 8007338:	e000      	b.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 800733a:	bf00      	nop
    }
  }
  return frequency;
 800733c:	697b      	ldr	r3, [r7, #20]
}
 800733e:	4618      	mov	r0, r3
 8007340:	371c      	adds	r7, #28
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr
 800734a:	bf00      	nop
 800734c:	40023800 	.word	0x40023800
 8007350:	00bb8000 	.word	0x00bb8000
 8007354:	007a1200 	.word	0x007a1200
 8007358:	00f42400 	.word	0x00f42400

0800735c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800735c:	b084      	sub	sp, #16
 800735e:	b580      	push	{r7, lr}
 8007360:	b084      	sub	sp, #16
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
 8007366:	f107 001c 	add.w	r0, r7, #28
 800736a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800736e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007372:	2b01      	cmp	r3, #1
 8007374:	d123      	bne.n	80073be <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800737a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800738a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	68db      	ldr	r3, [r3, #12]
 8007396:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800739e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d105      	bne.n	80073b2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 f9dc 	bl	8007770 <USB_CoreReset>
 80073b8:	4603      	mov	r3, r0
 80073ba:	73fb      	strb	r3, [r7, #15]
 80073bc:	e01b      	b.n	80073f6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 f9d0 	bl	8007770 <USB_CoreReset>
 80073d0:	4603      	mov	r3, r0
 80073d2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80073d4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d106      	bne.n	80073ea <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073e0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	639a      	str	r2, [r3, #56]	@ 0x38
 80073e8:	e005      	b.n	80073f6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ee:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80073f6:	7fbb      	ldrb	r3, [r7, #30]
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d10b      	bne.n	8007414 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	f043 0206 	orr.w	r2, r3, #6
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	f043 0220 	orr.w	r2, r3, #32
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007414:	7bfb      	ldrb	r3, [r7, #15]
}
 8007416:	4618      	mov	r0, r3
 8007418:	3710      	adds	r7, #16
 800741a:	46bd      	mov	sp, r7
 800741c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007420:	b004      	add	sp, #16
 8007422:	4770      	bx	lr

08007424 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	f043 0201 	orr.w	r2, r3, #1
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007438:	2300      	movs	r3, #0
}
 800743a:	4618      	mov	r0, r3
 800743c:	370c      	adds	r7, #12
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr

08007446 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007446:	b480      	push	{r7}
 8007448:	b083      	sub	sp, #12
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	f023 0201 	bic.w	r2, r3, #1
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800745a:	2300      	movs	r3, #0
}
 800745c:	4618      	mov	r0, r3
 800745e:	370c      	adds	r7, #12
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	460b      	mov	r3, r1
 8007472:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007474:	2300      	movs	r3, #0
 8007476:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007484:	78fb      	ldrb	r3, [r7, #3]
 8007486:	2b01      	cmp	r3, #1
 8007488:	d115      	bne.n	80074b6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	68db      	ldr	r3, [r3, #12]
 800748e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007496:	200a      	movs	r0, #10
 8007498:	f7fa fef4 	bl	8002284 <HAL_Delay>
      ms += 10U;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	330a      	adds	r3, #10
 80074a0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 f956 	bl	8007754 <USB_GetMode>
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d01e      	beq.n	80074ec <USB_SetCurrentMode+0x84>
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2bc7      	cmp	r3, #199	@ 0xc7
 80074b2:	d9f0      	bls.n	8007496 <USB_SetCurrentMode+0x2e>
 80074b4:	e01a      	b.n	80074ec <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80074b6:	78fb      	ldrb	r3, [r7, #3]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d115      	bne.n	80074e8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	68db      	ldr	r3, [r3, #12]
 80074c0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80074c8:	200a      	movs	r0, #10
 80074ca:	f7fa fedb 	bl	8002284 <HAL_Delay>
      ms += 10U;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	330a      	adds	r3, #10
 80074d2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 f93d 	bl	8007754 <USB_GetMode>
 80074da:	4603      	mov	r3, r0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d005      	beq.n	80074ec <USB_SetCurrentMode+0x84>
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2bc7      	cmp	r3, #199	@ 0xc7
 80074e4:	d9f0      	bls.n	80074c8 <USB_SetCurrentMode+0x60>
 80074e6:	e001      	b.n	80074ec <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	e005      	b.n	80074f8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2bc8      	cmp	r3, #200	@ 0xc8
 80074f0:	d101      	bne.n	80074f6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	e000      	b.n	80074f8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80074f6:	2300      	movs	r3, #0
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3710      	adds	r7, #16
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007500:	b480      	push	{r7}
 8007502:	b085      	sub	sp, #20
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800750a:	2300      	movs	r3, #0
 800750c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	3301      	adds	r3, #1
 8007512:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800751a:	d901      	bls.n	8007520 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800751c:	2303      	movs	r3, #3
 800751e:	e01b      	b.n	8007558 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	691b      	ldr	r3, [r3, #16]
 8007524:	2b00      	cmp	r3, #0
 8007526:	daf2      	bge.n	800750e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007528:	2300      	movs	r3, #0
 800752a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	019b      	lsls	r3, r3, #6
 8007530:	f043 0220 	orr.w	r2, r3, #32
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	3301      	adds	r3, #1
 800753c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007544:	d901      	bls.n	800754a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007546:	2303      	movs	r3, #3
 8007548:	e006      	b.n	8007558 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	691b      	ldr	r3, [r3, #16]
 800754e:	f003 0320 	and.w	r3, r3, #32
 8007552:	2b20      	cmp	r3, #32
 8007554:	d0f0      	beq.n	8007538 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007556:	2300      	movs	r3, #0
}
 8007558:	4618      	mov	r0, r3
 800755a:	3714      	adds	r7, #20
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007564:	b480      	push	{r7}
 8007566:	b085      	sub	sp, #20
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800756c:	2300      	movs	r3, #0
 800756e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	3301      	adds	r3, #1
 8007574:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800757c:	d901      	bls.n	8007582 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800757e:	2303      	movs	r3, #3
 8007580:	e018      	b.n	80075b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	691b      	ldr	r3, [r3, #16]
 8007586:	2b00      	cmp	r3, #0
 8007588:	daf2      	bge.n	8007570 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800758a:	2300      	movs	r3, #0
 800758c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2210      	movs	r2, #16
 8007592:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	3301      	adds	r3, #1
 8007598:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80075a0:	d901      	bls.n	80075a6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80075a2:	2303      	movs	r3, #3
 80075a4:	e006      	b.n	80075b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	691b      	ldr	r3, [r3, #16]
 80075aa:	f003 0310 	and.w	r3, r3, #16
 80075ae:	2b10      	cmp	r3, #16
 80075b0:	d0f0      	beq.n	8007594 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80075b2:	2300      	movs	r3, #0
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3714      	adds	r7, #20
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr

080075c0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b089      	sub	sp, #36	@ 0x24
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	60f8      	str	r0, [r7, #12]
 80075c8:	60b9      	str	r1, [r7, #8]
 80075ca:	4611      	mov	r1, r2
 80075cc:	461a      	mov	r2, r3
 80075ce:	460b      	mov	r3, r1
 80075d0:	71fb      	strb	r3, [r7, #7]
 80075d2:	4613      	mov	r3, r2
 80075d4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80075de:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d123      	bne.n	800762e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80075e6:	88bb      	ldrh	r3, [r7, #4]
 80075e8:	3303      	adds	r3, #3
 80075ea:	089b      	lsrs	r3, r3, #2
 80075ec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80075ee:	2300      	movs	r3, #0
 80075f0:	61bb      	str	r3, [r7, #24]
 80075f2:	e018      	b.n	8007626 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80075f4:	79fb      	ldrb	r3, [r7, #7]
 80075f6:	031a      	lsls	r2, r3, #12
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	4413      	add	r3, r2
 80075fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007600:	461a      	mov	r2, r3
 8007602:	69fb      	ldr	r3, [r7, #28]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007608:	69fb      	ldr	r3, [r7, #28]
 800760a:	3301      	adds	r3, #1
 800760c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	3301      	adds	r3, #1
 8007612:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	3301      	adds	r3, #1
 8007618:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	3301      	adds	r3, #1
 800761e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007620:	69bb      	ldr	r3, [r7, #24]
 8007622:	3301      	adds	r3, #1
 8007624:	61bb      	str	r3, [r7, #24]
 8007626:	69ba      	ldr	r2, [r7, #24]
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	429a      	cmp	r2, r3
 800762c:	d3e2      	bcc.n	80075f4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800762e:	2300      	movs	r3, #0
}
 8007630:	4618      	mov	r0, r3
 8007632:	3724      	adds	r7, #36	@ 0x24
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800763c:	b480      	push	{r7}
 800763e:	b08b      	sub	sp, #44	@ 0x2c
 8007640:	af00      	add	r7, sp, #0
 8007642:	60f8      	str	r0, [r7, #12]
 8007644:	60b9      	str	r1, [r7, #8]
 8007646:	4613      	mov	r3, r2
 8007648:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007652:	88fb      	ldrh	r3, [r7, #6]
 8007654:	089b      	lsrs	r3, r3, #2
 8007656:	b29b      	uxth	r3, r3
 8007658:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800765a:	88fb      	ldrh	r3, [r7, #6]
 800765c:	f003 0303 	and.w	r3, r3, #3
 8007660:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007662:	2300      	movs	r3, #0
 8007664:	623b      	str	r3, [r7, #32]
 8007666:	e014      	b.n	8007692 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007672:	601a      	str	r2, [r3, #0]
    pDest++;
 8007674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007676:	3301      	adds	r3, #1
 8007678:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800767a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800767c:	3301      	adds	r3, #1
 800767e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007682:	3301      	adds	r3, #1
 8007684:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007688:	3301      	adds	r3, #1
 800768a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800768c:	6a3b      	ldr	r3, [r7, #32]
 800768e:	3301      	adds	r3, #1
 8007690:	623b      	str	r3, [r7, #32]
 8007692:	6a3a      	ldr	r2, [r7, #32]
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	429a      	cmp	r2, r3
 8007698:	d3e6      	bcc.n	8007668 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800769a:	8bfb      	ldrh	r3, [r7, #30]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d01e      	beq.n	80076de <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80076a0:	2300      	movs	r3, #0
 80076a2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076aa:	461a      	mov	r2, r3
 80076ac:	f107 0310 	add.w	r3, r7, #16
 80076b0:	6812      	ldr	r2, [r2, #0]
 80076b2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80076b4:	693a      	ldr	r2, [r7, #16]
 80076b6:	6a3b      	ldr	r3, [r7, #32]
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	00db      	lsls	r3, r3, #3
 80076bc:	fa22 f303 	lsr.w	r3, r2, r3
 80076c0:	b2da      	uxtb	r2, r3
 80076c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c4:	701a      	strb	r2, [r3, #0]
      i++;
 80076c6:	6a3b      	ldr	r3, [r7, #32]
 80076c8:	3301      	adds	r3, #1
 80076ca:	623b      	str	r3, [r7, #32]
      pDest++;
 80076cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ce:	3301      	adds	r3, #1
 80076d0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80076d2:	8bfb      	ldrh	r3, [r7, #30]
 80076d4:	3b01      	subs	r3, #1
 80076d6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80076d8:	8bfb      	ldrh	r3, [r7, #30]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d1ea      	bne.n	80076b4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80076de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	372c      	adds	r7, #44	@ 0x2c
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b085      	sub	sp, #20
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	695b      	ldr	r3, [r3, #20]
 80076f8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	699b      	ldr	r3, [r3, #24]
 80076fe:	68fa      	ldr	r2, [r7, #12]
 8007700:	4013      	ands	r3, r2
 8007702:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007704:	68fb      	ldr	r3, [r7, #12]
}
 8007706:	4618      	mov	r0, r3
 8007708:	3714      	adds	r7, #20
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr

08007712 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8007712:	b480      	push	{r7}
 8007714:	b085      	sub	sp, #20
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
 800771a:	460b      	mov	r3, r1
 800771c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8007722:	78fb      	ldrb	r3, [r7, #3]
 8007724:	015a      	lsls	r2, r3, #5
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	4413      	add	r3, r2
 800772a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8007732:	78fb      	ldrb	r3, [r7, #3]
 8007734:	015a      	lsls	r2, r3, #5
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	4413      	add	r3, r2
 800773a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	68ba      	ldr	r2, [r7, #8]
 8007742:	4013      	ands	r3, r2
 8007744:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007746:	68bb      	ldr	r3, [r7, #8]
}
 8007748:	4618      	mov	r0, r3
 800774a:	3714      	adds	r7, #20
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr

08007754 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007754:	b480      	push	{r7}
 8007756:	b083      	sub	sp, #12
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	695b      	ldr	r3, [r3, #20]
 8007760:	f003 0301 	and.w	r3, r3, #1
}
 8007764:	4618      	mov	r0, r3
 8007766:	370c      	adds	r7, #12
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007770:	b480      	push	{r7}
 8007772:	b085      	sub	sp, #20
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007778:	2300      	movs	r3, #0
 800777a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	3301      	adds	r3, #1
 8007780:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007788:	d901      	bls.n	800778e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800778a:	2303      	movs	r3, #3
 800778c:	e01b      	b.n	80077c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	691b      	ldr	r3, [r3, #16]
 8007792:	2b00      	cmp	r3, #0
 8007794:	daf2      	bge.n	800777c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007796:	2300      	movs	r3, #0
 8007798:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	691b      	ldr	r3, [r3, #16]
 800779e:	f043 0201 	orr.w	r2, r3, #1
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	3301      	adds	r3, #1
 80077aa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80077b2:	d901      	bls.n	80077b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80077b4:	2303      	movs	r3, #3
 80077b6:	e006      	b.n	80077c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	691b      	ldr	r3, [r3, #16]
 80077bc:	f003 0301 	and.w	r3, r3, #1
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d0f0      	beq.n	80077a6 <USB_CoreReset+0x36>

  return HAL_OK;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3714      	adds	r7, #20
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr
	...

080077d4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80077d4:	b084      	sub	sp, #16
 80077d6:	b580      	push	{r7, lr}
 80077d8:	b086      	sub	sp, #24
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
 80077de:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80077e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80077e6:	2300      	movs	r3, #0
 80077e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80077f4:	461a      	mov	r2, r3
 80077f6:	2300      	movs	r3, #0
 80077f8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077fe:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800780a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007816:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	68db      	ldr	r3, [r3, #12]
 8007822:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007826:	2b00      	cmp	r3, #0
 8007828:	d119      	bne.n	800785e <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800782a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800782e:	2b01      	cmp	r3, #1
 8007830:	d10a      	bne.n	8007848 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	68fa      	ldr	r2, [r7, #12]
 800783c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007840:	f043 0304 	orr.w	r3, r3, #4
 8007844:	6013      	str	r3, [r2, #0]
 8007846:	e014      	b.n	8007872 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	68fa      	ldr	r2, [r7, #12]
 8007852:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007856:	f023 0304 	bic.w	r3, r3, #4
 800785a:	6013      	str	r3, [r2, #0]
 800785c:	e009      	b.n	8007872 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	68fa      	ldr	r2, [r7, #12]
 8007868:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800786c:	f023 0304 	bic.w	r3, r3, #4
 8007870:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007872:	2110      	movs	r1, #16
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f7ff fe43 	bl	8007500 <USB_FlushTxFifo>
 800787a:	4603      	mov	r3, r0
 800787c:	2b00      	cmp	r3, #0
 800787e:	d001      	beq.n	8007884 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8007880:	2301      	movs	r3, #1
 8007882:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f7ff fe6d 	bl	8007564 <USB_FlushRxFifo>
 800788a:	4603      	mov	r3, r0
 800788c:	2b00      	cmp	r3, #0
 800788e:	d001      	beq.n	8007894 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007894:	2300      	movs	r3, #0
 8007896:	613b      	str	r3, [r7, #16]
 8007898:	e015      	b.n	80078c6 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	015a      	lsls	r2, r3, #5
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	4413      	add	r3, r2
 80078a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078a6:	461a      	mov	r2, r3
 80078a8:	f04f 33ff 	mov.w	r3, #4294967295
 80078ac:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	015a      	lsls	r2, r3, #5
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	4413      	add	r3, r2
 80078b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078ba:	461a      	mov	r2, r3
 80078bc:	2300      	movs	r3, #0
 80078be:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	3301      	adds	r3, #1
 80078c4:	613b      	str	r3, [r7, #16]
 80078c6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80078ca:	461a      	mov	r2, r3
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d3e3      	bcc.n	800789a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2200      	movs	r2, #0
 80078d6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f04f 32ff 	mov.w	r2, #4294967295
 80078de:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	4a18      	ldr	r2, [pc, #96]	@ (8007944 <USB_HostInit+0x170>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d10b      	bne.n	8007900 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80078ee:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4a15      	ldr	r2, [pc, #84]	@ (8007948 <USB_HostInit+0x174>)
 80078f4:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4a14      	ldr	r2, [pc, #80]	@ (800794c <USB_HostInit+0x178>)
 80078fa:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80078fe:	e009      	b.n	8007914 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2280      	movs	r2, #128	@ 0x80
 8007904:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	4a11      	ldr	r2, [pc, #68]	@ (8007950 <USB_HostInit+0x17c>)
 800790a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	4a11      	ldr	r2, [pc, #68]	@ (8007954 <USB_HostInit+0x180>)
 8007910:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007914:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007918:	2b00      	cmp	r3, #0
 800791a:	d105      	bne.n	8007928 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	699b      	ldr	r3, [r3, #24]
 8007920:	f043 0210 	orr.w	r2, r3, #16
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	699a      	ldr	r2, [r3, #24]
 800792c:	4b0a      	ldr	r3, [pc, #40]	@ (8007958 <USB_HostInit+0x184>)
 800792e:	4313      	orrs	r3, r2
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007934:	7dfb      	ldrb	r3, [r7, #23]
}
 8007936:	4618      	mov	r0, r3
 8007938:	3718      	adds	r7, #24
 800793a:	46bd      	mov	sp, r7
 800793c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007940:	b004      	add	sp, #16
 8007942:	4770      	bx	lr
 8007944:	40040000 	.word	0x40040000
 8007948:	01000200 	.word	0x01000200
 800794c:	00e00300 	.word	0x00e00300
 8007950:	00600080 	.word	0x00600080
 8007954:	004000e0 	.word	0x004000e0
 8007958:	a3200008 	.word	0xa3200008

0800795c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800795c:	b480      	push	{r7}
 800795e:	b085      	sub	sp, #20
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	460b      	mov	r3, r1
 8007966:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	68fa      	ldr	r2, [r7, #12]
 8007976:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800797a:	f023 0303 	bic.w	r3, r3, #3
 800797e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	78fb      	ldrb	r3, [r7, #3]
 800798a:	f003 0303 	and.w	r3, r3, #3
 800798e:	68f9      	ldr	r1, [r7, #12]
 8007990:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007994:	4313      	orrs	r3, r2
 8007996:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007998:	78fb      	ldrb	r3, [r7, #3]
 800799a:	2b01      	cmp	r3, #1
 800799c:	d107      	bne.n	80079ae <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80079a4:	461a      	mov	r2, r3
 80079a6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80079aa:	6053      	str	r3, [r2, #4]
 80079ac:	e00c      	b.n	80079c8 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80079ae:	78fb      	ldrb	r3, [r7, #3]
 80079b0:	2b02      	cmp	r3, #2
 80079b2:	d107      	bne.n	80079c4 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80079ba:	461a      	mov	r2, r3
 80079bc:	f241 7370 	movw	r3, #6000	@ 0x1770
 80079c0:	6053      	str	r3, [r2, #4]
 80079c2:	e001      	b.n	80079c8 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80079c4:	2301      	movs	r3, #1
 80079c6:	e000      	b.n	80079ca <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80079c8:	2300      	movs	r3, #0
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3714      	adds	r7, #20
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr

080079d6 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80079d6:	b580      	push	{r7, lr}
 80079d8:	b084      	sub	sp, #16
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80079e2:	2300      	movs	r3, #0
 80079e4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80079f6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	68fa      	ldr	r2, [r7, #12]
 80079fc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007a00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a04:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007a06:	2064      	movs	r0, #100	@ 0x64
 8007a08:	f7fa fc3c 	bl	8002284 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	68fa      	ldr	r2, [r7, #12]
 8007a10:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007a14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a18:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007a1a:	200a      	movs	r0, #10
 8007a1c:	f7fa fc32 	bl	8002284 <HAL_Delay>

  return HAL_OK;
 8007a20:	2300      	movs	r3, #0
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3710      	adds	r7, #16
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}

08007a2a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007a2a:	b480      	push	{r7}
 8007a2c:	b085      	sub	sp, #20
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	6078      	str	r0, [r7, #4]
 8007a32:	460b      	mov	r3, r1
 8007a34:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007a4e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d109      	bne.n	8007a6e <USB_DriveVbus+0x44>
 8007a5a:	78fb      	ldrb	r3, [r7, #3]
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d106      	bne.n	8007a6e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	68fa      	ldr	r2, [r7, #12]
 8007a64:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007a68:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007a6c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007a74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a78:	d109      	bne.n	8007a8e <USB_DriveVbus+0x64>
 8007a7a:	78fb      	ldrb	r3, [r7, #3]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d106      	bne.n	8007a8e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	68fa      	ldr	r2, [r7, #12]
 8007a84:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007a88:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007a8c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007a8e:	2300      	movs	r3, #0
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3714      	adds	r7, #20
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b085      	sub	sp, #20
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	0c5b      	lsrs	r3, r3, #17
 8007aba:	f003 0303 	and.w	r3, r3, #3
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3714      	adds	r7, #20
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr

08007aca <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8007aca:	b480      	push	{r7}
 8007acc:	b085      	sub	sp, #20
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	b29b      	uxth	r3, r3
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3714      	adds	r7, #20
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr

08007aec <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b088      	sub	sp, #32
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	4608      	mov	r0, r1
 8007af6:	4611      	mov	r1, r2
 8007af8:	461a      	mov	r2, r3
 8007afa:	4603      	mov	r3, r0
 8007afc:	70fb      	strb	r3, [r7, #3]
 8007afe:	460b      	mov	r3, r1
 8007b00:	70bb      	strb	r3, [r7, #2]
 8007b02:	4613      	mov	r3, r2
 8007b04:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007b06:	2300      	movs	r3, #0
 8007b08:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8007b0e:	78fb      	ldrb	r3, [r7, #3]
 8007b10:	015a      	lsls	r2, r3, #5
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	4413      	add	r3, r2
 8007b16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8007b20:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007b22:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007b26:	2b03      	cmp	r3, #3
 8007b28:	d87c      	bhi.n	8007c24 <USB_HC_Init+0x138>
 8007b2a:	a201      	add	r2, pc, #4	@ (adr r2, 8007b30 <USB_HC_Init+0x44>)
 8007b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b30:	08007b41 	.word	0x08007b41
 8007b34:	08007be7 	.word	0x08007be7
 8007b38:	08007b41 	.word	0x08007b41
 8007b3c:	08007ba9 	.word	0x08007ba9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007b40:	78fb      	ldrb	r3, [r7, #3]
 8007b42:	015a      	lsls	r2, r3, #5
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	4413      	add	r3, r2
 8007b48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	f240 439d 	movw	r3, #1181	@ 0x49d
 8007b52:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007b54:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	da10      	bge.n	8007b7e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007b5c:	78fb      	ldrb	r3, [r7, #3]
 8007b5e:	015a      	lsls	r2, r3, #5
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	4413      	add	r3, r2
 8007b64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b68:	68db      	ldr	r3, [r3, #12]
 8007b6a:	78fa      	ldrb	r2, [r7, #3]
 8007b6c:	0151      	lsls	r1, r2, #5
 8007b6e:	693a      	ldr	r2, [r7, #16]
 8007b70:	440a      	add	r2, r1
 8007b72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b7a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8007b7c:	e055      	b.n	8007c2a <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	4a6f      	ldr	r2, [pc, #444]	@ (8007d40 <USB_HC_Init+0x254>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d151      	bne.n	8007c2a <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007b86:	78fb      	ldrb	r3, [r7, #3]
 8007b88:	015a      	lsls	r2, r3, #5
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	4413      	add	r3, r2
 8007b8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	78fa      	ldrb	r2, [r7, #3]
 8007b96:	0151      	lsls	r1, r2, #5
 8007b98:	693a      	ldr	r2, [r7, #16]
 8007b9a:	440a      	add	r2, r1
 8007b9c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ba0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007ba4:	60d3      	str	r3, [r2, #12]
      break;
 8007ba6:	e040      	b.n	8007c2a <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007ba8:	78fb      	ldrb	r3, [r7, #3]
 8007baa:	015a      	lsls	r2, r3, #5
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	4413      	add	r3, r2
 8007bb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	f240 639d 	movw	r3, #1693	@ 0x69d
 8007bba:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007bbc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	da34      	bge.n	8007c2e <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007bc4:	78fb      	ldrb	r3, [r7, #3]
 8007bc6:	015a      	lsls	r2, r3, #5
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	4413      	add	r3, r2
 8007bcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bd0:	68db      	ldr	r3, [r3, #12]
 8007bd2:	78fa      	ldrb	r2, [r7, #3]
 8007bd4:	0151      	lsls	r1, r2, #5
 8007bd6:	693a      	ldr	r2, [r7, #16]
 8007bd8:	440a      	add	r2, r1
 8007bda:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007bde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007be2:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007be4:	e023      	b.n	8007c2e <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007be6:	78fb      	ldrb	r3, [r7, #3]
 8007be8:	015a      	lsls	r2, r3, #5
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	4413      	add	r3, r2
 8007bee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	f240 2325 	movw	r3, #549	@ 0x225
 8007bf8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007bfa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	da17      	bge.n	8007c32 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007c02:	78fb      	ldrb	r3, [r7, #3]
 8007c04:	015a      	lsls	r2, r3, #5
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	4413      	add	r3, r2
 8007c0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c0e:	68db      	ldr	r3, [r3, #12]
 8007c10:	78fa      	ldrb	r2, [r7, #3]
 8007c12:	0151      	lsls	r1, r2, #5
 8007c14:	693a      	ldr	r2, [r7, #16]
 8007c16:	440a      	add	r2, r1
 8007c18:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c1c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8007c20:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007c22:	e006      	b.n	8007c32 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8007c24:	2301      	movs	r3, #1
 8007c26:	77fb      	strb	r3, [r7, #31]
      break;
 8007c28:	e004      	b.n	8007c34 <USB_HC_Init+0x148>
      break;
 8007c2a:	bf00      	nop
 8007c2c:	e002      	b.n	8007c34 <USB_HC_Init+0x148>
      break;
 8007c2e:	bf00      	nop
 8007c30:	e000      	b.n	8007c34 <USB_HC_Init+0x148>
      break;
 8007c32:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007c34:	78fb      	ldrb	r3, [r7, #3]
 8007c36:	015a      	lsls	r2, r3, #5
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	4413      	add	r3, r2
 8007c3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c40:	461a      	mov	r2, r3
 8007c42:	2300      	movs	r3, #0
 8007c44:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007c46:	78fb      	ldrb	r3, [r7, #3]
 8007c48:	015a      	lsls	r2, r3, #5
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	4413      	add	r3, r2
 8007c4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c52:	68db      	ldr	r3, [r3, #12]
 8007c54:	78fa      	ldrb	r2, [r7, #3]
 8007c56:	0151      	lsls	r1, r2, #5
 8007c58:	693a      	ldr	r2, [r7, #16]
 8007c5a:	440a      	add	r2, r1
 8007c5c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c60:	f043 0302 	orr.w	r3, r3, #2
 8007c64:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007c6c:	699a      	ldr	r2, [r3, #24]
 8007c6e:	78fb      	ldrb	r3, [r7, #3]
 8007c70:	f003 030f 	and.w	r3, r3, #15
 8007c74:	2101      	movs	r1, #1
 8007c76:	fa01 f303 	lsl.w	r3, r1, r3
 8007c7a:	6939      	ldr	r1, [r7, #16]
 8007c7c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007c80:	4313      	orrs	r3, r2
 8007c82:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	699b      	ldr	r3, [r3, #24]
 8007c88:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007c90:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	da03      	bge.n	8007ca0 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007c98:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c9c:	61bb      	str	r3, [r7, #24]
 8007c9e:	e001      	b.n	8007ca4 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f7ff fef9 	bl	8007a9c <USB_GetHostSpeed>
 8007caa:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007cac:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007cb0:	2b02      	cmp	r3, #2
 8007cb2:	d106      	bne.n	8007cc2 <USB_HC_Init+0x1d6>
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2b02      	cmp	r3, #2
 8007cb8:	d003      	beq.n	8007cc2 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007cba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007cbe:	617b      	str	r3, [r7, #20]
 8007cc0:	e001      	b.n	8007cc6 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007cc6:	787b      	ldrb	r3, [r7, #1]
 8007cc8:	059b      	lsls	r3, r3, #22
 8007cca:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007cce:	78bb      	ldrb	r3, [r7, #2]
 8007cd0:	02db      	lsls	r3, r3, #11
 8007cd2:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007cd6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007cd8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007cdc:	049b      	lsls	r3, r3, #18
 8007cde:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007ce2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8007ce4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8007ce6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007cea:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007cec:	69bb      	ldr	r3, [r7, #24]
 8007cee:	431a      	orrs	r2, r3
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007cf4:	78fa      	ldrb	r2, [r7, #3]
 8007cf6:	0151      	lsls	r1, r2, #5
 8007cf8:	693a      	ldr	r2, [r7, #16]
 8007cfa:	440a      	add	r2, r1
 8007cfc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007d00:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007d04:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007d06:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007d0a:	2b03      	cmp	r3, #3
 8007d0c:	d003      	beq.n	8007d16 <USB_HC_Init+0x22a>
 8007d0e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d10f      	bne.n	8007d36 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007d16:	78fb      	ldrb	r3, [r7, #3]
 8007d18:	015a      	lsls	r2, r3, #5
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	4413      	add	r3, r2
 8007d1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	78fa      	ldrb	r2, [r7, #3]
 8007d26:	0151      	lsls	r1, r2, #5
 8007d28:	693a      	ldr	r2, [r7, #16]
 8007d2a:	440a      	add	r2, r1
 8007d2c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d30:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007d34:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007d36:	7ffb      	ldrb	r3, [r7, #31]
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3720      	adds	r7, #32
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}
 8007d40:	40040000 	.word	0x40040000

08007d44 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b08c      	sub	sp, #48	@ 0x30
 8007d48:	af02      	add	r7, sp, #8
 8007d4a:	60f8      	str	r0, [r7, #12]
 8007d4c:	60b9      	str	r1, [r7, #8]
 8007d4e:	4613      	mov	r3, r2
 8007d50:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	785b      	ldrb	r3, [r3, #1]
 8007d5a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8007d5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007d60:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	4a5d      	ldr	r2, [pc, #372]	@ (8007edc <USB_HC_StartXfer+0x198>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d12f      	bne.n	8007dca <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8007d6a:	79fb      	ldrb	r3, [r7, #7]
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d11c      	bne.n	8007daa <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	7c9b      	ldrb	r3, [r3, #18]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d003      	beq.n	8007d80 <USB_HC_StartXfer+0x3c>
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	7c9b      	ldrb	r3, [r3, #18]
 8007d7c:	2b02      	cmp	r3, #2
 8007d7e:	d124      	bne.n	8007dca <USB_HC_StartXfer+0x86>
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	799b      	ldrb	r3, [r3, #6]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d120      	bne.n	8007dca <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007d88:	69fb      	ldr	r3, [r7, #28]
 8007d8a:	015a      	lsls	r2, r3, #5
 8007d8c:	6a3b      	ldr	r3, [r7, #32]
 8007d8e:	4413      	add	r3, r2
 8007d90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	69fa      	ldr	r2, [r7, #28]
 8007d98:	0151      	lsls	r1, r2, #5
 8007d9a:	6a3a      	ldr	r2, [r7, #32]
 8007d9c:	440a      	add	r2, r1
 8007d9e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007da2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007da6:	60d3      	str	r3, [r2, #12]
 8007da8:	e00f      	b.n	8007dca <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	791b      	ldrb	r3, [r3, #4]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d10b      	bne.n	8007dca <USB_HC_StartXfer+0x86>
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	795b      	ldrb	r3, [r3, #5]
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d107      	bne.n	8007dca <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	785b      	ldrb	r3, [r3, #1]
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	68f8      	ldr	r0, [r7, #12]
 8007dc2:	f000 fb6b 	bl	800849c <USB_DoPing>
        return HAL_OK;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	e232      	b.n	8008230 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	799b      	ldrb	r3, [r3, #6]
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	d158      	bne.n	8007e84 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	78db      	ldrb	r3, [r3, #3]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d007      	beq.n	8007dee <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007dde:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007de0:	68ba      	ldr	r2, [r7, #8]
 8007de2:	8a92      	ldrh	r2, [r2, #20]
 8007de4:	fb03 f202 	mul.w	r2, r3, r2
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	61da      	str	r2, [r3, #28]
 8007dec:	e07c      	b.n	8007ee8 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	7c9b      	ldrb	r3, [r3, #18]
 8007df2:	2b01      	cmp	r3, #1
 8007df4:	d130      	bne.n	8007e58 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	6a1b      	ldr	r3, [r3, #32]
 8007dfa:	2bbc      	cmp	r3, #188	@ 0xbc
 8007dfc:	d918      	bls.n	8007e30 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	8a9b      	ldrh	r3, [r3, #20]
 8007e02:	461a      	mov	r2, r3
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	69da      	ldr	r2, [r3, #28]
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	68db      	ldr	r3, [r3, #12]
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d003      	beq.n	8007e20 <USB_HC_StartXfer+0xdc>
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	68db      	ldr	r3, [r3, #12]
 8007e1c:	2b02      	cmp	r3, #2
 8007e1e:	d103      	bne.n	8007e28 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	2202      	movs	r2, #2
 8007e24:	60da      	str	r2, [r3, #12]
 8007e26:	e05f      	b.n	8007ee8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	60da      	str	r2, [r3, #12]
 8007e2e:	e05b      	b.n	8007ee8 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	6a1a      	ldr	r2, [r3, #32]
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	68db      	ldr	r3, [r3, #12]
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d007      	beq.n	8007e50 <USB_HC_StartXfer+0x10c>
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	68db      	ldr	r3, [r3, #12]
 8007e44:	2b02      	cmp	r3, #2
 8007e46:	d003      	beq.n	8007e50 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	2204      	movs	r2, #4
 8007e4c:	60da      	str	r2, [r3, #12]
 8007e4e:	e04b      	b.n	8007ee8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	2203      	movs	r2, #3
 8007e54:	60da      	str	r2, [r3, #12]
 8007e56:	e047      	b.n	8007ee8 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8007e58:	79fb      	ldrb	r3, [r7, #7]
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d10d      	bne.n	8007e7a <USB_HC_StartXfer+0x136>
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	6a1b      	ldr	r3, [r3, #32]
 8007e62:	68ba      	ldr	r2, [r7, #8]
 8007e64:	8a92      	ldrh	r2, [r2, #20]
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d907      	bls.n	8007e7a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007e6a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007e6c:	68ba      	ldr	r2, [r7, #8]
 8007e6e:	8a92      	ldrh	r2, [r2, #20]
 8007e70:	fb03 f202 	mul.w	r2, r3, r2
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	61da      	str	r2, [r3, #28]
 8007e78:	e036      	b.n	8007ee8 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	6a1a      	ldr	r2, [r3, #32]
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	61da      	str	r2, [r3, #28]
 8007e82:	e031      	b.n	8007ee8 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	6a1b      	ldr	r3, [r3, #32]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d018      	beq.n	8007ebe <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	6a1b      	ldr	r3, [r3, #32]
 8007e90:	68ba      	ldr	r2, [r7, #8]
 8007e92:	8a92      	ldrh	r2, [r2, #20]
 8007e94:	4413      	add	r3, r2
 8007e96:	3b01      	subs	r3, #1
 8007e98:	68ba      	ldr	r2, [r7, #8]
 8007e9a:	8a92      	ldrh	r2, [r2, #20]
 8007e9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ea0:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8007ea2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8007ea4:	8b7b      	ldrh	r3, [r7, #26]
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d90b      	bls.n	8007ec2 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8007eaa:	8b7b      	ldrh	r3, [r7, #26]
 8007eac:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007eae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007eb0:	68ba      	ldr	r2, [r7, #8]
 8007eb2:	8a92      	ldrh	r2, [r2, #20]
 8007eb4:	fb03 f202 	mul.w	r2, r3, r2
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	61da      	str	r2, [r3, #28]
 8007ebc:	e001      	b.n	8007ec2 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	78db      	ldrb	r3, [r3, #3]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d00a      	beq.n	8007ee0 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007eca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007ecc:	68ba      	ldr	r2, [r7, #8]
 8007ece:	8a92      	ldrh	r2, [r2, #20]
 8007ed0:	fb03 f202 	mul.w	r2, r3, r2
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	61da      	str	r2, [r3, #28]
 8007ed8:	e006      	b.n	8007ee8 <USB_HC_StartXfer+0x1a4>
 8007eda:	bf00      	nop
 8007edc:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	6a1a      	ldr	r2, [r3, #32]
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	69db      	ldr	r3, [r3, #28]
 8007eec:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007ef0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007ef2:	04d9      	lsls	r1, r3, #19
 8007ef4:	4ba3      	ldr	r3, [pc, #652]	@ (8008184 <USB_HC_StartXfer+0x440>)
 8007ef6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007ef8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	7d9b      	ldrb	r3, [r3, #22]
 8007efe:	075b      	lsls	r3, r3, #29
 8007f00:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007f04:	69f9      	ldr	r1, [r7, #28]
 8007f06:	0148      	lsls	r0, r1, #5
 8007f08:	6a39      	ldr	r1, [r7, #32]
 8007f0a:	4401      	add	r1, r0
 8007f0c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007f10:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007f12:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007f14:	79fb      	ldrb	r3, [r7, #7]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d009      	beq.n	8007f2e <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	6999      	ldr	r1, [r3, #24]
 8007f1e:	69fb      	ldr	r3, [r7, #28]
 8007f20:	015a      	lsls	r2, r3, #5
 8007f22:	6a3b      	ldr	r3, [r7, #32]
 8007f24:	4413      	add	r3, r2
 8007f26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f2a:	460a      	mov	r2, r1
 8007f2c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007f2e:	6a3b      	ldr	r3, [r7, #32]
 8007f30:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007f34:	689b      	ldr	r3, [r3, #8]
 8007f36:	f003 0301 	and.w	r3, r3, #1
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	bf0c      	ite	eq
 8007f3e:	2301      	moveq	r3, #1
 8007f40:	2300      	movne	r3, #0
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007f46:	69fb      	ldr	r3, [r7, #28]
 8007f48:	015a      	lsls	r2, r3, #5
 8007f4a:	6a3b      	ldr	r3, [r7, #32]
 8007f4c:	4413      	add	r3, r2
 8007f4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	69fa      	ldr	r2, [r7, #28]
 8007f56:	0151      	lsls	r1, r2, #5
 8007f58:	6a3a      	ldr	r2, [r7, #32]
 8007f5a:	440a      	add	r2, r1
 8007f5c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f60:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007f64:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007f66:	69fb      	ldr	r3, [r7, #28]
 8007f68:	015a      	lsls	r2, r3, #5
 8007f6a:	6a3b      	ldr	r3, [r7, #32]
 8007f6c:	4413      	add	r3, r2
 8007f6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	7e7b      	ldrb	r3, [r7, #25]
 8007f76:	075b      	lsls	r3, r3, #29
 8007f78:	69f9      	ldr	r1, [r7, #28]
 8007f7a:	0148      	lsls	r0, r1, #5
 8007f7c:	6a39      	ldr	r1, [r7, #32]
 8007f7e:	4401      	add	r1, r0
 8007f80:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8007f84:	4313      	orrs	r3, r2
 8007f86:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	799b      	ldrb	r3, [r3, #6]
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	f040 80c3 	bne.w	8008118 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	7c5b      	ldrb	r3, [r3, #17]
 8007f96:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007f98:	68ba      	ldr	r2, [r7, #8]
 8007f9a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	69fa      	ldr	r2, [r7, #28]
 8007fa0:	0151      	lsls	r1, r2, #5
 8007fa2:	6a3a      	ldr	r2, [r7, #32]
 8007fa4:	440a      	add	r2, r1
 8007fa6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007faa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007fae:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8007fb0:	69fb      	ldr	r3, [r7, #28]
 8007fb2:	015a      	lsls	r2, r3, #5
 8007fb4:	6a3b      	ldr	r3, [r7, #32]
 8007fb6:	4413      	add	r3, r2
 8007fb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fbc:	68db      	ldr	r3, [r3, #12]
 8007fbe:	69fa      	ldr	r2, [r7, #28]
 8007fc0:	0151      	lsls	r1, r2, #5
 8007fc2:	6a3a      	ldr	r2, [r7, #32]
 8007fc4:	440a      	add	r2, r1
 8007fc6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007fca:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007fce:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	79db      	ldrb	r3, [r3, #7]
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	d123      	bne.n	8008020 <USB_HC_StartXfer+0x2dc>
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	78db      	ldrb	r3, [r3, #3]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d11f      	bne.n	8008020 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007fe0:	69fb      	ldr	r3, [r7, #28]
 8007fe2:	015a      	lsls	r2, r3, #5
 8007fe4:	6a3b      	ldr	r3, [r7, #32]
 8007fe6:	4413      	add	r3, r2
 8007fe8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	69fa      	ldr	r2, [r7, #28]
 8007ff0:	0151      	lsls	r1, r2, #5
 8007ff2:	6a3a      	ldr	r2, [r7, #32]
 8007ff4:	440a      	add	r2, r1
 8007ff6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ffa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ffe:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8008000:	69fb      	ldr	r3, [r7, #28]
 8008002:	015a      	lsls	r2, r3, #5
 8008004:	6a3b      	ldr	r3, [r7, #32]
 8008006:	4413      	add	r3, r2
 8008008:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800800c:	68db      	ldr	r3, [r3, #12]
 800800e:	69fa      	ldr	r2, [r7, #28]
 8008010:	0151      	lsls	r1, r2, #5
 8008012:	6a3a      	ldr	r2, [r7, #32]
 8008014:	440a      	add	r2, r1
 8008016:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800801a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800801e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	7c9b      	ldrb	r3, [r3, #18]
 8008024:	2b01      	cmp	r3, #1
 8008026:	d003      	beq.n	8008030 <USB_HC_StartXfer+0x2ec>
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	7c9b      	ldrb	r3, [r3, #18]
 800802c:	2b03      	cmp	r3, #3
 800802e:	d117      	bne.n	8008060 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008034:	2b01      	cmp	r3, #1
 8008036:	d113      	bne.n	8008060 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	78db      	ldrb	r3, [r3, #3]
 800803c:	2b01      	cmp	r3, #1
 800803e:	d10f      	bne.n	8008060 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008040:	69fb      	ldr	r3, [r7, #28]
 8008042:	015a      	lsls	r2, r3, #5
 8008044:	6a3b      	ldr	r3, [r7, #32]
 8008046:	4413      	add	r3, r2
 8008048:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	69fa      	ldr	r2, [r7, #28]
 8008050:	0151      	lsls	r1, r2, #5
 8008052:	6a3a      	ldr	r2, [r7, #32]
 8008054:	440a      	add	r2, r1
 8008056:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800805a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800805e:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	7c9b      	ldrb	r3, [r3, #18]
 8008064:	2b01      	cmp	r3, #1
 8008066:	d162      	bne.n	800812e <USB_HC_StartXfer+0x3ea>
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	78db      	ldrb	r3, [r3, #3]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d15e      	bne.n	800812e <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	68db      	ldr	r3, [r3, #12]
 8008074:	3b01      	subs	r3, #1
 8008076:	2b03      	cmp	r3, #3
 8008078:	d858      	bhi.n	800812c <USB_HC_StartXfer+0x3e8>
 800807a:	a201      	add	r2, pc, #4	@ (adr r2, 8008080 <USB_HC_StartXfer+0x33c>)
 800807c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008080:	08008091 	.word	0x08008091
 8008084:	080080b3 	.word	0x080080b3
 8008088:	080080d5 	.word	0x080080d5
 800808c:	080080f7 	.word	0x080080f7
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8008090:	69fb      	ldr	r3, [r7, #28]
 8008092:	015a      	lsls	r2, r3, #5
 8008094:	6a3b      	ldr	r3, [r7, #32]
 8008096:	4413      	add	r3, r2
 8008098:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	69fa      	ldr	r2, [r7, #28]
 80080a0:	0151      	lsls	r1, r2, #5
 80080a2:	6a3a      	ldr	r2, [r7, #32]
 80080a4:	440a      	add	r2, r1
 80080a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80080aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80080ae:	6053      	str	r3, [r2, #4]
          break;
 80080b0:	e03d      	b.n	800812e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80080b2:	69fb      	ldr	r3, [r7, #28]
 80080b4:	015a      	lsls	r2, r3, #5
 80080b6:	6a3b      	ldr	r3, [r7, #32]
 80080b8:	4413      	add	r3, r2
 80080ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	69fa      	ldr	r2, [r7, #28]
 80080c2:	0151      	lsls	r1, r2, #5
 80080c4:	6a3a      	ldr	r2, [r7, #32]
 80080c6:	440a      	add	r2, r1
 80080c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80080cc:	f043 030e 	orr.w	r3, r3, #14
 80080d0:	6053      	str	r3, [r2, #4]
          break;
 80080d2:	e02c      	b.n	800812e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80080d4:	69fb      	ldr	r3, [r7, #28]
 80080d6:	015a      	lsls	r2, r3, #5
 80080d8:	6a3b      	ldr	r3, [r7, #32]
 80080da:	4413      	add	r3, r2
 80080dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	69fa      	ldr	r2, [r7, #28]
 80080e4:	0151      	lsls	r1, r2, #5
 80080e6:	6a3a      	ldr	r2, [r7, #32]
 80080e8:	440a      	add	r2, r1
 80080ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80080ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80080f2:	6053      	str	r3, [r2, #4]
          break;
 80080f4:	e01b      	b.n	800812e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80080f6:	69fb      	ldr	r3, [r7, #28]
 80080f8:	015a      	lsls	r2, r3, #5
 80080fa:	6a3b      	ldr	r3, [r7, #32]
 80080fc:	4413      	add	r3, r2
 80080fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	69fa      	ldr	r2, [r7, #28]
 8008106:	0151      	lsls	r1, r2, #5
 8008108:	6a3a      	ldr	r2, [r7, #32]
 800810a:	440a      	add	r2, r1
 800810c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008110:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008114:	6053      	str	r3, [r2, #4]
          break;
 8008116:	e00a      	b.n	800812e <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008118:	69fb      	ldr	r3, [r7, #28]
 800811a:	015a      	lsls	r2, r3, #5
 800811c:	6a3b      	ldr	r3, [r7, #32]
 800811e:	4413      	add	r3, r2
 8008120:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008124:	461a      	mov	r2, r3
 8008126:	2300      	movs	r3, #0
 8008128:	6053      	str	r3, [r2, #4]
 800812a:	e000      	b.n	800812e <USB_HC_StartXfer+0x3ea>
          break;
 800812c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800812e:	69fb      	ldr	r3, [r7, #28]
 8008130:	015a      	lsls	r2, r3, #5
 8008132:	6a3b      	ldr	r3, [r7, #32]
 8008134:	4413      	add	r3, r2
 8008136:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008144:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	78db      	ldrb	r3, [r3, #3]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d004      	beq.n	8008158 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008154:	613b      	str	r3, [r7, #16]
 8008156:	e003      	b.n	8008160 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800815e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008166:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008168:	69fb      	ldr	r3, [r7, #28]
 800816a:	015a      	lsls	r2, r3, #5
 800816c:	6a3b      	ldr	r3, [r7, #32]
 800816e:	4413      	add	r3, r2
 8008170:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008174:	461a      	mov	r2, r3
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800817a:	79fb      	ldrb	r3, [r7, #7]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d003      	beq.n	8008188 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8008180:	2300      	movs	r3, #0
 8008182:	e055      	b.n	8008230 <USB_HC_StartXfer+0x4ec>
 8008184:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	78db      	ldrb	r3, [r3, #3]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d14e      	bne.n	800822e <USB_HC_StartXfer+0x4ea>
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	6a1b      	ldr	r3, [r3, #32]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d04a      	beq.n	800822e <USB_HC_StartXfer+0x4ea>
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	79db      	ldrb	r3, [r3, #7]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d146      	bne.n	800822e <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	7c9b      	ldrb	r3, [r3, #18]
 80081a4:	2b03      	cmp	r3, #3
 80081a6:	d831      	bhi.n	800820c <USB_HC_StartXfer+0x4c8>
 80081a8:	a201      	add	r2, pc, #4	@ (adr r2, 80081b0 <USB_HC_StartXfer+0x46c>)
 80081aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ae:	bf00      	nop
 80081b0:	080081c1 	.word	0x080081c1
 80081b4:	080081e5 	.word	0x080081e5
 80081b8:	080081c1 	.word	0x080081c1
 80081bc:	080081e5 	.word	0x080081e5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	6a1b      	ldr	r3, [r3, #32]
 80081c4:	3303      	adds	r3, #3
 80081c6:	089b      	lsrs	r3, r3, #2
 80081c8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80081ca:	8afa      	ldrh	r2, [r7, #22]
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d91c      	bls.n	8008210 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	699b      	ldr	r3, [r3, #24]
 80081da:	f043 0220 	orr.w	r2, r3, #32
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	619a      	str	r2, [r3, #24]
        }
        break;
 80081e2:	e015      	b.n	8008210 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	6a1b      	ldr	r3, [r3, #32]
 80081e8:	3303      	adds	r3, #3
 80081ea:	089b      	lsrs	r3, r3, #2
 80081ec:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80081ee:	8afa      	ldrh	r2, [r7, #22]
 80081f0:	6a3b      	ldr	r3, [r7, #32]
 80081f2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80081f6:	691b      	ldr	r3, [r3, #16]
 80081f8:	b29b      	uxth	r3, r3
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d90a      	bls.n	8008214 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	699b      	ldr	r3, [r3, #24]
 8008202:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	619a      	str	r2, [r3, #24]
        }
        break;
 800820a:	e003      	b.n	8008214 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800820c:	bf00      	nop
 800820e:	e002      	b.n	8008216 <USB_HC_StartXfer+0x4d2>
        break;
 8008210:	bf00      	nop
 8008212:	e000      	b.n	8008216 <USB_HC_StartXfer+0x4d2>
        break;
 8008214:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	6999      	ldr	r1, [r3, #24]
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	785a      	ldrb	r2, [r3, #1]
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	6a1b      	ldr	r3, [r3, #32]
 8008222:	b29b      	uxth	r3, r3
 8008224:	2000      	movs	r0, #0
 8008226:	9000      	str	r0, [sp, #0]
 8008228:	68f8      	ldr	r0, [r7, #12]
 800822a:	f7ff f9c9 	bl	80075c0 <USB_WritePacket>
  }

  return HAL_OK;
 800822e:	2300      	movs	r3, #0
}
 8008230:	4618      	mov	r0, r3
 8008232:	3728      	adds	r7, #40	@ 0x28
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008238:	b480      	push	{r7}
 800823a:	b085      	sub	sp, #20
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800824a:	695b      	ldr	r3, [r3, #20]
 800824c:	b29b      	uxth	r3, r3
}
 800824e:	4618      	mov	r0, r3
 8008250:	3714      	adds	r7, #20
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr

0800825a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800825a:	b480      	push	{r7}
 800825c:	b089      	sub	sp, #36	@ 0x24
 800825e:	af00      	add	r7, sp, #0
 8008260:	6078      	str	r0, [r7, #4]
 8008262:	460b      	mov	r3, r1
 8008264:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800826a:	78fb      	ldrb	r3, [r7, #3]
 800826c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800826e:	2300      	movs	r3, #0
 8008270:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008272:	69bb      	ldr	r3, [r7, #24]
 8008274:	015a      	lsls	r2, r3, #5
 8008276:	69fb      	ldr	r3, [r7, #28]
 8008278:	4413      	add	r3, r2
 800827a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	0c9b      	lsrs	r3, r3, #18
 8008282:	f003 0303 	and.w	r3, r3, #3
 8008286:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008288:	69bb      	ldr	r3, [r7, #24]
 800828a:	015a      	lsls	r2, r3, #5
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	4413      	add	r3, r2
 8008290:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	0fdb      	lsrs	r3, r3, #31
 8008298:	f003 0301 	and.w	r3, r3, #1
 800829c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800829e:	69bb      	ldr	r3, [r7, #24]
 80082a0:	015a      	lsls	r2, r3, #5
 80082a2:	69fb      	ldr	r3, [r7, #28]
 80082a4:	4413      	add	r3, r2
 80082a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	0fdb      	lsrs	r3, r3, #31
 80082ae:	f003 0301 	and.w	r3, r3, #1
 80082b2:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	689b      	ldr	r3, [r3, #8]
 80082b8:	f003 0320 	and.w	r3, r3, #32
 80082bc:	2b20      	cmp	r3, #32
 80082be:	d10d      	bne.n	80082dc <USB_HC_Halt+0x82>
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d10a      	bne.n	80082dc <USB_HC_Halt+0x82>
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d005      	beq.n	80082d8 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	2b01      	cmp	r3, #1
 80082d0:	d002      	beq.n	80082d8 <USB_HC_Halt+0x7e>
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	2b03      	cmp	r3, #3
 80082d6:	d101      	bne.n	80082dc <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80082d8:	2300      	movs	r3, #0
 80082da:	e0d8      	b.n	800848e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d002      	beq.n	80082e8 <USB_HC_Halt+0x8e>
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	2b02      	cmp	r3, #2
 80082e6:	d173      	bne.n	80083d0 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80082e8:	69bb      	ldr	r3, [r7, #24]
 80082ea:	015a      	lsls	r2, r3, #5
 80082ec:	69fb      	ldr	r3, [r7, #28]
 80082ee:	4413      	add	r3, r2
 80082f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	69ba      	ldr	r2, [r7, #24]
 80082f8:	0151      	lsls	r1, r2, #5
 80082fa:	69fa      	ldr	r2, [r7, #28]
 80082fc:	440a      	add	r2, r1
 80082fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008302:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008306:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	689b      	ldr	r3, [r3, #8]
 800830c:	f003 0320 	and.w	r3, r3, #32
 8008310:	2b00      	cmp	r3, #0
 8008312:	d14a      	bne.n	80083aa <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008318:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800831c:	2b00      	cmp	r3, #0
 800831e:	d133      	bne.n	8008388 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008320:	69bb      	ldr	r3, [r7, #24]
 8008322:	015a      	lsls	r2, r3, #5
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	4413      	add	r3, r2
 8008328:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	69ba      	ldr	r2, [r7, #24]
 8008330:	0151      	lsls	r1, r2, #5
 8008332:	69fa      	ldr	r2, [r7, #28]
 8008334:	440a      	add	r2, r1
 8008336:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800833a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800833e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008340:	69bb      	ldr	r3, [r7, #24]
 8008342:	015a      	lsls	r2, r3, #5
 8008344:	69fb      	ldr	r3, [r7, #28]
 8008346:	4413      	add	r3, r2
 8008348:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	69ba      	ldr	r2, [r7, #24]
 8008350:	0151      	lsls	r1, r2, #5
 8008352:	69fa      	ldr	r2, [r7, #28]
 8008354:	440a      	add	r2, r1
 8008356:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800835a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800835e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	3301      	adds	r3, #1
 8008364:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800836c:	d82e      	bhi.n	80083cc <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800836e:	69bb      	ldr	r3, [r7, #24]
 8008370:	015a      	lsls	r2, r3, #5
 8008372:	69fb      	ldr	r3, [r7, #28]
 8008374:	4413      	add	r3, r2
 8008376:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008380:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008384:	d0ec      	beq.n	8008360 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008386:	e081      	b.n	800848c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008388:	69bb      	ldr	r3, [r7, #24]
 800838a:	015a      	lsls	r2, r3, #5
 800838c:	69fb      	ldr	r3, [r7, #28]
 800838e:	4413      	add	r3, r2
 8008390:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	69ba      	ldr	r2, [r7, #24]
 8008398:	0151      	lsls	r1, r2, #5
 800839a:	69fa      	ldr	r2, [r7, #28]
 800839c:	440a      	add	r2, r1
 800839e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80083a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80083a6:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80083a8:	e070      	b.n	800848c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	015a      	lsls	r2, r3, #5
 80083ae:	69fb      	ldr	r3, [r7, #28]
 80083b0:	4413      	add	r3, r2
 80083b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	69ba      	ldr	r2, [r7, #24]
 80083ba:	0151      	lsls	r1, r2, #5
 80083bc:	69fa      	ldr	r2, [r7, #28]
 80083be:	440a      	add	r2, r1
 80083c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80083c4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80083c8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80083ca:	e05f      	b.n	800848c <USB_HC_Halt+0x232>
            break;
 80083cc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80083ce:	e05d      	b.n	800848c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80083d0:	69bb      	ldr	r3, [r7, #24]
 80083d2:	015a      	lsls	r2, r3, #5
 80083d4:	69fb      	ldr	r3, [r7, #28]
 80083d6:	4413      	add	r3, r2
 80083d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	69ba      	ldr	r2, [r7, #24]
 80083e0:	0151      	lsls	r1, r2, #5
 80083e2:	69fa      	ldr	r2, [r7, #28]
 80083e4:	440a      	add	r2, r1
 80083e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80083ea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80083ee:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80083f0:	69fb      	ldr	r3, [r7, #28]
 80083f2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80083f6:	691b      	ldr	r3, [r3, #16]
 80083f8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d133      	bne.n	8008468 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008400:	69bb      	ldr	r3, [r7, #24]
 8008402:	015a      	lsls	r2, r3, #5
 8008404:	69fb      	ldr	r3, [r7, #28]
 8008406:	4413      	add	r3, r2
 8008408:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	69ba      	ldr	r2, [r7, #24]
 8008410:	0151      	lsls	r1, r2, #5
 8008412:	69fa      	ldr	r2, [r7, #28]
 8008414:	440a      	add	r2, r1
 8008416:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800841a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800841e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008420:	69bb      	ldr	r3, [r7, #24]
 8008422:	015a      	lsls	r2, r3, #5
 8008424:	69fb      	ldr	r3, [r7, #28]
 8008426:	4413      	add	r3, r2
 8008428:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	69ba      	ldr	r2, [r7, #24]
 8008430:	0151      	lsls	r1, r2, #5
 8008432:	69fa      	ldr	r2, [r7, #28]
 8008434:	440a      	add	r2, r1
 8008436:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800843a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800843e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	3301      	adds	r3, #1
 8008444:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800844c:	d81d      	bhi.n	800848a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800844e:	69bb      	ldr	r3, [r7, #24]
 8008450:	015a      	lsls	r2, r3, #5
 8008452:	69fb      	ldr	r3, [r7, #28]
 8008454:	4413      	add	r3, r2
 8008456:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008460:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008464:	d0ec      	beq.n	8008440 <USB_HC_Halt+0x1e6>
 8008466:	e011      	b.n	800848c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008468:	69bb      	ldr	r3, [r7, #24]
 800846a:	015a      	lsls	r2, r3, #5
 800846c:	69fb      	ldr	r3, [r7, #28]
 800846e:	4413      	add	r3, r2
 8008470:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	69ba      	ldr	r2, [r7, #24]
 8008478:	0151      	lsls	r1, r2, #5
 800847a:	69fa      	ldr	r2, [r7, #28]
 800847c:	440a      	add	r2, r1
 800847e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008482:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008486:	6013      	str	r3, [r2, #0]
 8008488:	e000      	b.n	800848c <USB_HC_Halt+0x232>
          break;
 800848a:	bf00      	nop
    }
  }

  return HAL_OK;
 800848c:	2300      	movs	r3, #0
}
 800848e:	4618      	mov	r0, r3
 8008490:	3724      	adds	r7, #36	@ 0x24
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr
	...

0800849c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800849c:	b480      	push	{r7}
 800849e:	b087      	sub	sp, #28
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	460b      	mov	r3, r1
 80084a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80084ac:	78fb      	ldrb	r3, [r7, #3]
 80084ae:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80084b0:	2301      	movs	r3, #1
 80084b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	04da      	lsls	r2, r3, #19
 80084b8:	4b15      	ldr	r3, [pc, #84]	@ (8008510 <USB_DoPing+0x74>)
 80084ba:	4013      	ands	r3, r2
 80084bc:	693a      	ldr	r2, [r7, #16]
 80084be:	0151      	lsls	r1, r2, #5
 80084c0:	697a      	ldr	r2, [r7, #20]
 80084c2:	440a      	add	r2, r1
 80084c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80084c8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80084cc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	015a      	lsls	r2, r3, #5
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	4413      	add	r3, r2
 80084d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80084e4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80084ec:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	015a      	lsls	r2, r3, #5
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	4413      	add	r3, r2
 80084f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084fa:	461a      	mov	r2, r3
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008500:	2300      	movs	r3, #0
}
 8008502:	4618      	mov	r0, r3
 8008504:	371c      	adds	r7, #28
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr
 800850e:	bf00      	nop
 8008510:	1ff80000 	.word	0x1ff80000

08008514 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b088      	sub	sp, #32
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800851c:	2300      	movs	r3, #0
 800851e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008524:	2300      	movs	r3, #0
 8008526:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f7fe ff8c 	bl	8007446 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800852e:	2110      	movs	r1, #16
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f7fe ffe5 	bl	8007500 <USB_FlushTxFifo>
 8008536:	4603      	mov	r3, r0
 8008538:	2b00      	cmp	r3, #0
 800853a:	d001      	beq.n	8008540 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800853c:	2301      	movs	r3, #1
 800853e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f7ff f80f 	bl	8007564 <USB_FlushRxFifo>
 8008546:	4603      	mov	r3, r0
 8008548:	2b00      	cmp	r3, #0
 800854a:	d001      	beq.n	8008550 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800854c:	2301      	movs	r3, #1
 800854e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008550:	2300      	movs	r3, #0
 8008552:	61bb      	str	r3, [r7, #24]
 8008554:	e01f      	b.n	8008596 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008556:	69bb      	ldr	r3, [r7, #24]
 8008558:	015a      	lsls	r2, r3, #5
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	4413      	add	r3, r2
 800855e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800856c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008574:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800857c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800857e:	69bb      	ldr	r3, [r7, #24]
 8008580:	015a      	lsls	r2, r3, #5
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	4413      	add	r3, r2
 8008586:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800858a:	461a      	mov	r2, r3
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008590:	69bb      	ldr	r3, [r7, #24]
 8008592:	3301      	adds	r3, #1
 8008594:	61bb      	str	r3, [r7, #24]
 8008596:	69bb      	ldr	r3, [r7, #24]
 8008598:	2b0f      	cmp	r3, #15
 800859a:	d9dc      	bls.n	8008556 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800859c:	2300      	movs	r3, #0
 800859e:	61bb      	str	r3, [r7, #24]
 80085a0:	e034      	b.n	800860c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80085a2:	69bb      	ldr	r3, [r7, #24]
 80085a4:	015a      	lsls	r2, r3, #5
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	4413      	add	r3, r2
 80085aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80085b8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80085c0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80085c8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80085ca:	69bb      	ldr	r3, [r7, #24]
 80085cc:	015a      	lsls	r2, r3, #5
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	4413      	add	r3, r2
 80085d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085d6:	461a      	mov	r2, r3
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	3301      	adds	r3, #1
 80085e0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80085e8:	d80c      	bhi.n	8008604 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80085ea:	69bb      	ldr	r3, [r7, #24]
 80085ec:	015a      	lsls	r2, r3, #5
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	4413      	add	r3, r2
 80085f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80085fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008600:	d0ec      	beq.n	80085dc <USB_StopHost+0xc8>
 8008602:	e000      	b.n	8008606 <USB_StopHost+0xf2>
        break;
 8008604:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008606:	69bb      	ldr	r3, [r7, #24]
 8008608:	3301      	adds	r3, #1
 800860a:	61bb      	str	r3, [r7, #24]
 800860c:	69bb      	ldr	r3, [r7, #24]
 800860e:	2b0f      	cmp	r3, #15
 8008610:	d9c7      	bls.n	80085a2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008618:	461a      	mov	r2, r3
 800861a:	f04f 33ff 	mov.w	r3, #4294967295
 800861e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f04f 32ff 	mov.w	r2, #4294967295
 8008626:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f7fe fefb 	bl	8007424 <USB_EnableGlobalInt>

  return ret;
 800862e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008630:	4618      	mov	r0, r3
 8008632:	3720      	adds	r7, #32
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}

08008638 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008638:	b590      	push	{r4, r7, lr}
 800863a:	b089      	sub	sp, #36	@ 0x24
 800863c:	af04      	add	r7, sp, #16
 800863e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008640:	2301      	movs	r3, #1
 8008642:	2202      	movs	r2, #2
 8008644:	2102      	movs	r1, #2
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 fc85 	bl	8008f56 <USBH_FindInterface>
 800864c:	4603      	mov	r3, r0
 800864e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008650:	7bfb      	ldrb	r3, [r7, #15]
 8008652:	2bff      	cmp	r3, #255	@ 0xff
 8008654:	d002      	beq.n	800865c <USBH_CDC_InterfaceInit+0x24>
 8008656:	7bfb      	ldrb	r3, [r7, #15]
 8008658:	2b01      	cmp	r3, #1
 800865a:	d901      	bls.n	8008660 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800865c:	2302      	movs	r3, #2
 800865e:	e13d      	b.n	80088dc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008660:	7bfb      	ldrb	r3, [r7, #15]
 8008662:	4619      	mov	r1, r3
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f000 fc5a 	bl	8008f1e <USBH_SelectInterface>
 800866a:	4603      	mov	r3, r0
 800866c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800866e:	7bbb      	ldrb	r3, [r7, #14]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d001      	beq.n	8008678 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008674:	2302      	movs	r3, #2
 8008676:	e131      	b.n	80088dc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800867e:	2050      	movs	r0, #80	@ 0x50
 8008680:	f002 fb64 	bl	800ad4c <malloc>
 8008684:	4603      	mov	r3, r0
 8008686:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800868e:	69db      	ldr	r3, [r3, #28]
 8008690:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d101      	bne.n	800869c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008698:	2302      	movs	r3, #2
 800869a:	e11f      	b.n	80088dc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800869c:	2250      	movs	r2, #80	@ 0x50
 800869e:	2100      	movs	r1, #0
 80086a0:	68b8      	ldr	r0, [r7, #8]
 80086a2:	f002 fd28 	bl	800b0f6 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80086a6:	7bfb      	ldrb	r3, [r7, #15]
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	211a      	movs	r1, #26
 80086ac:	fb01 f303 	mul.w	r3, r1, r3
 80086b0:	4413      	add	r3, r2
 80086b2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80086b6:	781b      	ldrb	r3, [r3, #0]
 80086b8:	b25b      	sxtb	r3, r3
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	da15      	bge.n	80086ea <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80086be:	7bfb      	ldrb	r3, [r7, #15]
 80086c0:	687a      	ldr	r2, [r7, #4]
 80086c2:	211a      	movs	r1, #26
 80086c4:	fb01 f303 	mul.w	r3, r1, r3
 80086c8:	4413      	add	r3, r2
 80086ca:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80086ce:	781a      	ldrb	r2, [r3, #0]
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80086d4:	7bfb      	ldrb	r3, [r7, #15]
 80086d6:	687a      	ldr	r2, [r7, #4]
 80086d8:	211a      	movs	r1, #26
 80086da:	fb01 f303 	mul.w	r3, r1, r3
 80086de:	4413      	add	r3, r2
 80086e0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80086e4:	881a      	ldrh	r2, [r3, #0]
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	785b      	ldrb	r3, [r3, #1]
 80086ee:	4619      	mov	r1, r3
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f001 ffbe 	bl	800a672 <USBH_AllocPipe>
 80086f6:	4603      	mov	r3, r0
 80086f8:	461a      	mov	r2, r3
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	7819      	ldrb	r1, [r3, #0]
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	7858      	ldrb	r0, [r3, #1]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008712:	68ba      	ldr	r2, [r7, #8]
 8008714:	8952      	ldrh	r2, [r2, #10]
 8008716:	9202      	str	r2, [sp, #8]
 8008718:	2203      	movs	r2, #3
 800871a:	9201      	str	r2, [sp, #4]
 800871c:	9300      	str	r3, [sp, #0]
 800871e:	4623      	mov	r3, r4
 8008720:	4602      	mov	r2, r0
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f001 ff76 	bl	800a614 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	2200      	movs	r2, #0
 800872e:	4619      	mov	r1, r3
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f002 fa85 	bl	800ac40 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008736:	2300      	movs	r3, #0
 8008738:	2200      	movs	r2, #0
 800873a:	210a      	movs	r1, #10
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 fc0a 	bl	8008f56 <USBH_FindInterface>
 8008742:	4603      	mov	r3, r0
 8008744:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008746:	7bfb      	ldrb	r3, [r7, #15]
 8008748:	2bff      	cmp	r3, #255	@ 0xff
 800874a:	d002      	beq.n	8008752 <USBH_CDC_InterfaceInit+0x11a>
 800874c:	7bfb      	ldrb	r3, [r7, #15]
 800874e:	2b01      	cmp	r3, #1
 8008750:	d901      	bls.n	8008756 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008752:	2302      	movs	r3, #2
 8008754:	e0c2      	b.n	80088dc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008756:	7bfb      	ldrb	r3, [r7, #15]
 8008758:	687a      	ldr	r2, [r7, #4]
 800875a:	211a      	movs	r1, #26
 800875c:	fb01 f303 	mul.w	r3, r1, r3
 8008760:	4413      	add	r3, r2
 8008762:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	b25b      	sxtb	r3, r3
 800876a:	2b00      	cmp	r3, #0
 800876c:	da16      	bge.n	800879c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800876e:	7bfb      	ldrb	r3, [r7, #15]
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	211a      	movs	r1, #26
 8008774:	fb01 f303 	mul.w	r3, r1, r3
 8008778:	4413      	add	r3, r2
 800877a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800877e:	781a      	ldrb	r2, [r3, #0]
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008784:	7bfb      	ldrb	r3, [r7, #15]
 8008786:	687a      	ldr	r2, [r7, #4]
 8008788:	211a      	movs	r1, #26
 800878a:	fb01 f303 	mul.w	r3, r1, r3
 800878e:	4413      	add	r3, r2
 8008790:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008794:	881a      	ldrh	r2, [r3, #0]
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	835a      	strh	r2, [r3, #26]
 800879a:	e015      	b.n	80087c8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800879c:	7bfb      	ldrb	r3, [r7, #15]
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	211a      	movs	r1, #26
 80087a2:	fb01 f303 	mul.w	r3, r1, r3
 80087a6:	4413      	add	r3, r2
 80087a8:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80087ac:	781a      	ldrb	r2, [r3, #0]
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80087b2:	7bfb      	ldrb	r3, [r7, #15]
 80087b4:	687a      	ldr	r2, [r7, #4]
 80087b6:	211a      	movs	r1, #26
 80087b8:	fb01 f303 	mul.w	r3, r1, r3
 80087bc:	4413      	add	r3, r2
 80087be:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80087c2:	881a      	ldrh	r2, [r3, #0]
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80087c8:	7bfb      	ldrb	r3, [r7, #15]
 80087ca:	687a      	ldr	r2, [r7, #4]
 80087cc:	211a      	movs	r1, #26
 80087ce:	fb01 f303 	mul.w	r3, r1, r3
 80087d2:	4413      	add	r3, r2
 80087d4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80087d8:	781b      	ldrb	r3, [r3, #0]
 80087da:	b25b      	sxtb	r3, r3
 80087dc:	2b00      	cmp	r3, #0
 80087de:	da16      	bge.n	800880e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80087e0:	7bfb      	ldrb	r3, [r7, #15]
 80087e2:	687a      	ldr	r2, [r7, #4]
 80087e4:	211a      	movs	r1, #26
 80087e6:	fb01 f303 	mul.w	r3, r1, r3
 80087ea:	4413      	add	r3, r2
 80087ec:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80087f0:	781a      	ldrb	r2, [r3, #0]
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80087f6:	7bfb      	ldrb	r3, [r7, #15]
 80087f8:	687a      	ldr	r2, [r7, #4]
 80087fa:	211a      	movs	r1, #26
 80087fc:	fb01 f303 	mul.w	r3, r1, r3
 8008800:	4413      	add	r3, r2
 8008802:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008806:	881a      	ldrh	r2, [r3, #0]
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	835a      	strh	r2, [r3, #26]
 800880c:	e015      	b.n	800883a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800880e:	7bfb      	ldrb	r3, [r7, #15]
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	211a      	movs	r1, #26
 8008814:	fb01 f303 	mul.w	r3, r1, r3
 8008818:	4413      	add	r3, r2
 800881a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800881e:	781a      	ldrb	r2, [r3, #0]
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008824:	7bfb      	ldrb	r3, [r7, #15]
 8008826:	687a      	ldr	r2, [r7, #4]
 8008828:	211a      	movs	r1, #26
 800882a:	fb01 f303 	mul.w	r3, r1, r3
 800882e:	4413      	add	r3, r2
 8008830:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008834:	881a      	ldrh	r2, [r3, #0]
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	7b9b      	ldrb	r3, [r3, #14]
 800883e:	4619      	mov	r1, r3
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f001 ff16 	bl	800a672 <USBH_AllocPipe>
 8008846:	4603      	mov	r3, r0
 8008848:	461a      	mov	r2, r3
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	7bdb      	ldrb	r3, [r3, #15]
 8008852:	4619      	mov	r1, r3
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f001 ff0c 	bl	800a672 <USBH_AllocPipe>
 800885a:	4603      	mov	r3, r0
 800885c:	461a      	mov	r2, r3
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	7b59      	ldrb	r1, [r3, #13]
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	7b98      	ldrb	r0, [r3, #14]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008876:	68ba      	ldr	r2, [r7, #8]
 8008878:	8b12      	ldrh	r2, [r2, #24]
 800887a:	9202      	str	r2, [sp, #8]
 800887c:	2202      	movs	r2, #2
 800887e:	9201      	str	r2, [sp, #4]
 8008880:	9300      	str	r3, [sp, #0]
 8008882:	4623      	mov	r3, r4
 8008884:	4602      	mov	r2, r0
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f001 fec4 	bl	800a614 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	7b19      	ldrb	r1, [r3, #12]
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	7bd8      	ldrb	r0, [r3, #15]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80088a0:	68ba      	ldr	r2, [r7, #8]
 80088a2:	8b52      	ldrh	r2, [r2, #26]
 80088a4:	9202      	str	r2, [sp, #8]
 80088a6:	2202      	movs	r2, #2
 80088a8:	9201      	str	r2, [sp, #4]
 80088aa:	9300      	str	r3, [sp, #0]
 80088ac:	4623      	mov	r3, r4
 80088ae:	4602      	mov	r2, r0
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f001 feaf 	bl	800a614 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	2200      	movs	r2, #0
 80088ba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	7b5b      	ldrb	r3, [r3, #13]
 80088c2:	2200      	movs	r2, #0
 80088c4:	4619      	mov	r1, r3
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f002 f9ba 	bl	800ac40 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	7b1b      	ldrb	r3, [r3, #12]
 80088d0:	2200      	movs	r2, #0
 80088d2:	4619      	mov	r1, r3
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f002 f9b3 	bl	800ac40 <USBH_LL_SetToggle>

  return USBH_OK;
 80088da:	2300      	movs	r3, #0
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3714      	adds	r7, #20
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd90      	pop	{r4, r7, pc}

080088e4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b084      	sub	sp, #16
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80088f2:	69db      	ldr	r3, [r3, #28]
 80088f4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	781b      	ldrb	r3, [r3, #0]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d00e      	beq.n	800891c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	4619      	mov	r1, r3
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f001 fea4 	bl	800a652 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	4619      	mov	r1, r3
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f001 fecf 	bl	800a6b4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2200      	movs	r2, #0
 800891a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	7b1b      	ldrb	r3, [r3, #12]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d00e      	beq.n	8008942 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	7b1b      	ldrb	r3, [r3, #12]
 8008928:	4619      	mov	r1, r3
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f001 fe91 	bl	800a652 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	7b1b      	ldrb	r3, [r3, #12]
 8008934:	4619      	mov	r1, r3
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f001 febc 	bl	800a6b4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2200      	movs	r2, #0
 8008940:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	7b5b      	ldrb	r3, [r3, #13]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d00e      	beq.n	8008968 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	7b5b      	ldrb	r3, [r3, #13]
 800894e:	4619      	mov	r1, r3
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f001 fe7e 	bl	800a652 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	7b5b      	ldrb	r3, [r3, #13]
 800895a:	4619      	mov	r1, r3
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f001 fea9 	bl	800a6b4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2200      	movs	r2, #0
 8008966:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800896e:	69db      	ldr	r3, [r3, #28]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d00b      	beq.n	800898c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800897a:	69db      	ldr	r3, [r3, #28]
 800897c:	4618      	mov	r0, r3
 800897e:	f002 f9ed 	bl	800ad5c <free>
    phost->pActiveClass->pData = 0U;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008988:	2200      	movs	r2, #0
 800898a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800898c:	2300      	movs	r3, #0
}
 800898e:	4618      	mov	r0, r3
 8008990:	3710      	adds	r7, #16
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}

08008996 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008996:	b580      	push	{r7, lr}
 8008998:	b084      	sub	sp, #16
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80089a4:	69db      	ldr	r3, [r3, #28]
 80089a6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	3340      	adds	r3, #64	@ 0x40
 80089ac:	4619      	mov	r1, r3
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f000 f8b1 	bl	8008b16 <GetLineCoding>
 80089b4:	4603      	mov	r3, r0
 80089b6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80089b8:	7afb      	ldrb	r3, [r7, #11]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d105      	bne.n	80089ca <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80089c4:	2102      	movs	r1, #2
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80089ca:	7afb      	ldrb	r3, [r7, #11]
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3710      	adds	r7, #16
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b084      	sub	sp, #16
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80089dc:	2301      	movs	r3, #1
 80089de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80089e0:	2300      	movs	r3, #0
 80089e2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80089ea:	69db      	ldr	r3, [r3, #28]
 80089ec:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80089f4:	2b04      	cmp	r3, #4
 80089f6:	d877      	bhi.n	8008ae8 <USBH_CDC_Process+0x114>
 80089f8:	a201      	add	r2, pc, #4	@ (adr r2, 8008a00 <USBH_CDC_Process+0x2c>)
 80089fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089fe:	bf00      	nop
 8008a00:	08008a15 	.word	0x08008a15
 8008a04:	08008a1b 	.word	0x08008a1b
 8008a08:	08008a4b 	.word	0x08008a4b
 8008a0c:	08008abf 	.word	0x08008abf
 8008a10:	08008acd 	.word	0x08008acd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008a14:	2300      	movs	r3, #0
 8008a16:	73fb      	strb	r3, [r7, #15]
      break;
 8008a18:	e06d      	b.n	8008af6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a1e:	4619      	mov	r1, r3
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f000 f897 	bl	8008b54 <SetLineCoding>
 8008a26:	4603      	mov	r3, r0
 8008a28:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008a2a:	7bbb      	ldrb	r3, [r7, #14]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d104      	bne.n	8008a3a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	2202      	movs	r2, #2
 8008a34:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008a38:	e058      	b.n	8008aec <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008a3a:	7bbb      	ldrb	r3, [r7, #14]
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d055      	beq.n	8008aec <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	2204      	movs	r2, #4
 8008a44:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008a48:	e050      	b.n	8008aec <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	3340      	adds	r3, #64	@ 0x40
 8008a4e:	4619      	mov	r1, r3
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f000 f860 	bl	8008b16 <GetLineCoding>
 8008a56:	4603      	mov	r3, r0
 8008a58:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008a5a:	7bbb      	ldrb	r3, [r7, #14]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d126      	bne.n	8008aae <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	2200      	movs	r2, #0
 8008a64:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a72:	791b      	ldrb	r3, [r3, #4]
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d13b      	bne.n	8008af0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a82:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d133      	bne.n	8008af0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a92:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d12b      	bne.n	8008af0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008aa0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	d124      	bne.n	8008af0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 f958 	bl	8008d5c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008aac:	e020      	b.n	8008af0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008aae:	7bbb      	ldrb	r3, [r7, #14]
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d01d      	beq.n	8008af0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	2204      	movs	r2, #4
 8008ab8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008abc:	e018      	b.n	8008af0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 f867 	bl	8008b92 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 f8da 	bl	8008c7e <CDC_ProcessReception>
      break;
 8008aca:	e014      	b.n	8008af6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008acc:	2100      	movs	r1, #0
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f001 f81a 	bl	8009b08 <USBH_ClrFeature>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008ad8:	7bbb      	ldrb	r3, [r7, #14]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d10a      	bne.n	8008af4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8008ae6:	e005      	b.n	8008af4 <USBH_CDC_Process+0x120>

    default:
      break;
 8008ae8:	bf00      	nop
 8008aea:	e004      	b.n	8008af6 <USBH_CDC_Process+0x122>
      break;
 8008aec:	bf00      	nop
 8008aee:	e002      	b.n	8008af6 <USBH_CDC_Process+0x122>
      break;
 8008af0:	bf00      	nop
 8008af2:	e000      	b.n	8008af6 <USBH_CDC_Process+0x122>
      break;
 8008af4:	bf00      	nop

  }

  return status;
 8008af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3710      	adds	r7, #16
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}

08008b00 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b083      	sub	sp, #12
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008b08:	2300      	movs	r3, #0
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	370c      	adds	r7, #12
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b14:	4770      	bx	lr

08008b16 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008b16:	b580      	push	{r7, lr}
 8008b18:	b082      	sub	sp, #8
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	6078      	str	r0, [r7, #4]
 8008b1e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	22a1      	movs	r2, #161	@ 0xa1
 8008b24:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2221      	movs	r2, #33	@ 0x21
 8008b2a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2200      	movs	r2, #0
 8008b36:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2207      	movs	r2, #7
 8008b3c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	2207      	movs	r2, #7
 8008b42:	4619      	mov	r1, r3
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f001 fb14 	bl	800a172 <USBH_CtlReq>
 8008b4a:	4603      	mov	r3, r0
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3708      	adds	r7, #8
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b082      	sub	sp, #8
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2221      	movs	r2, #33	@ 0x21
 8008b62:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2220      	movs	r2, #32
 8008b68:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2200      	movs	r2, #0
 8008b74:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2207      	movs	r2, #7
 8008b7a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	2207      	movs	r2, #7
 8008b80:	4619      	mov	r1, r3
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f001 faf5 	bl	800a172 <USBH_CtlReq>
 8008b88:	4603      	mov	r3, r0
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3708      	adds	r7, #8
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}

08008b92 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008b92:	b580      	push	{r7, lr}
 8008b94:	b086      	sub	sp, #24
 8008b96:	af02      	add	r7, sp, #8
 8008b98:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008ba0:	69db      	ldr	r3, [r3, #28]
 8008ba2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8008bae:	2b01      	cmp	r3, #1
 8008bb0:	d002      	beq.n	8008bb8 <CDC_ProcessTransmission+0x26>
 8008bb2:	2b02      	cmp	r3, #2
 8008bb4:	d023      	beq.n	8008bfe <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008bb6:	e05e      	b.n	8008c76 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bbc:	68fa      	ldr	r2, [r7, #12]
 8008bbe:	8b12      	ldrh	r2, [r2, #24]
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d90b      	bls.n	8008bdc <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	69d9      	ldr	r1, [r3, #28]
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	8b1a      	ldrh	r2, [r3, #24]
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	7b5b      	ldrb	r3, [r3, #13]
 8008bd0:	2001      	movs	r0, #1
 8008bd2:	9000      	str	r0, [sp, #0]
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f001 fcda 	bl	800a58e <USBH_BulkSendData>
 8008bda:	e00b      	b.n	8008bf4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8008be4:	b29a      	uxth	r2, r3
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	7b5b      	ldrb	r3, [r3, #13]
 8008bea:	2001      	movs	r0, #1
 8008bec:	9000      	str	r0, [sp, #0]
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f001 fccd 	bl	800a58e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2202      	movs	r2, #2
 8008bf8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008bfc:	e03b      	b.n	8008c76 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	7b5b      	ldrb	r3, [r3, #13]
 8008c02:	4619      	mov	r1, r3
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f001 fff1 	bl	800abec <USBH_LL_GetURBState>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008c0e:	7afb      	ldrb	r3, [r7, #11]
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	d128      	bne.n	8008c66 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c18:	68fa      	ldr	r2, [r7, #12]
 8008c1a:	8b12      	ldrh	r2, [r2, #24]
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d90e      	bls.n	8008c3e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c24:	68fa      	ldr	r2, [r7, #12]
 8008c26:	8b12      	ldrh	r2, [r2, #24]
 8008c28:	1a9a      	subs	r2, r3, r2
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	69db      	ldr	r3, [r3, #28]
 8008c32:	68fa      	ldr	r2, [r7, #12]
 8008c34:	8b12      	ldrh	r2, [r2, #24]
 8008c36:	441a      	add	r2, r3
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	61da      	str	r2, [r3, #28]
 8008c3c:	e002      	b.n	8008c44 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2200      	movs	r2, #0
 8008c42:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d004      	beq.n	8008c56 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2201      	movs	r2, #1
 8008c50:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008c54:	e00e      	b.n	8008c74 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f000 f868 	bl	8008d34 <USBH_CDC_TransmitCallback>
      break;
 8008c64:	e006      	b.n	8008c74 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008c66:	7afb      	ldrb	r3, [r7, #11]
 8008c68:	2b02      	cmp	r3, #2
 8008c6a:	d103      	bne.n	8008c74 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	2201      	movs	r2, #1
 8008c70:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008c74:	bf00      	nop
  }
}
 8008c76:	bf00      	nop
 8008c78:	3710      	adds	r7, #16
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b086      	sub	sp, #24
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008c8c:	69db      	ldr	r3, [r3, #28]
 8008c8e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008c90:	2300      	movs	r3, #0
 8008c92:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008c94:	697b      	ldr	r3, [r7, #20]
 8008c96:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8008c9a:	2b03      	cmp	r3, #3
 8008c9c:	d002      	beq.n	8008ca4 <CDC_ProcessReception+0x26>
 8008c9e:	2b04      	cmp	r3, #4
 8008ca0:	d00e      	beq.n	8008cc0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008ca2:	e043      	b.n	8008d2c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	6a19      	ldr	r1, [r3, #32]
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	8b5a      	ldrh	r2, [r3, #26]
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	7b1b      	ldrb	r3, [r3, #12]
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f001 fc91 	bl	800a5d8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	2204      	movs	r2, #4
 8008cba:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8008cbe:	e035      	b.n	8008d2c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	7b1b      	ldrb	r3, [r3, #12]
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f001 ff90 	bl	800abec <USBH_LL_GetURBState>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008cd0:	7cfb      	ldrb	r3, [r7, #19]
 8008cd2:	2b01      	cmp	r3, #1
 8008cd4:	d129      	bne.n	8008d2a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	7b1b      	ldrb	r3, [r3, #12]
 8008cda:	4619      	mov	r1, r3
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f001 fef3 	bl	800aac8 <USBH_LL_GetLastXferSize>
 8008ce2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ce8:	68fa      	ldr	r2, [r7, #12]
 8008cea:	429a      	cmp	r2, r3
 8008cec:	d016      	beq.n	8008d1c <CDC_ProcessReception+0x9e>
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	8b5b      	ldrh	r3, [r3, #26]
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d110      	bne.n	8008d1c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	1ad2      	subs	r2, r2, r3
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	6a1a      	ldr	r2, [r3, #32]
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	441a      	add	r2, r3
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	2203      	movs	r2, #3
 8008d16:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8008d1a:	e006      	b.n	8008d2a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f000 f80f 	bl	8008d48 <USBH_CDC_ReceiveCallback>
      break;
 8008d2a:	bf00      	nop
  }
}
 8008d2c:	bf00      	nop
 8008d2e:	3718      	adds	r7, #24
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}

08008d34 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b083      	sub	sp, #12
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008d3c:	bf00      	nop
 8008d3e:	370c      	adds	r7, #12
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr

08008d48 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b083      	sub	sp, #12
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008d50:	bf00      	nop
 8008d52:	370c      	adds	r7, #12
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr

08008d5c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b083      	sub	sp, #12
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008d64:	bf00      	nop
 8008d66:	370c      	adds	r7, #12
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr

08008d70 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b084      	sub	sp, #16
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	60f8      	str	r0, [r7, #12]
 8008d78:	60b9      	str	r1, [r7, #8]
 8008d7a:	4613      	mov	r3, r2
 8008d7c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d101      	bne.n	8008d88 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008d84:	2302      	movs	r3, #2
 8008d86:	e029      	b.n	8008ddc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	79fa      	ldrb	r2, [r7, #7]
 8008d8c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2200      	movs	r2, #0
 8008d94:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008da0:	68f8      	ldr	r0, [r7, #12]
 8008da2:	f000 f81f 	bl	8008de4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2200      	movs	r2, #0
 8008daa:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2200      	movs	r2, #0
 8008db2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2200      	movs	r2, #0
 8008dba:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d003      	beq.n	8008dd4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	68ba      	ldr	r2, [r7, #8]
 8008dd0:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008dd4:	68f8      	ldr	r0, [r7, #12]
 8008dd6:	f001 fdc3 	bl	800a960 <USBH_LL_Init>

  return USBH_OK;
 8008dda:	2300      	movs	r3, #0
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3710      	adds	r7, #16
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b084      	sub	sp, #16
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008dec:	2300      	movs	r3, #0
 8008dee:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008df0:	2300      	movs	r3, #0
 8008df2:	60fb      	str	r3, [r7, #12]
 8008df4:	e009      	b.n	8008e0a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008df6:	687a      	ldr	r2, [r7, #4]
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	33e0      	adds	r3, #224	@ 0xe0
 8008dfc:	009b      	lsls	r3, r3, #2
 8008dfe:	4413      	add	r3, r2
 8008e00:	2200      	movs	r2, #0
 8008e02:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	3301      	adds	r3, #1
 8008e08:	60fb      	str	r3, [r7, #12]
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	2b0f      	cmp	r3, #15
 8008e0e:	d9f2      	bls.n	8008df6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008e10:	2300      	movs	r3, #0
 8008e12:	60fb      	str	r3, [r7, #12]
 8008e14:	e009      	b.n	8008e2a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	4413      	add	r3, r2
 8008e1c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008e20:	2200      	movs	r2, #0
 8008e22:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	3301      	adds	r3, #1
 8008e28:	60fb      	str	r3, [r7, #12]
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e30:	d3f1      	bcc.n	8008e16 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2200      	movs	r2, #0
 8008e36:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2201      	movs	r2, #1
 8008e42:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2200      	movs	r2, #0
 8008e48:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2240      	movs	r2, #64	@ 0x40
 8008e56:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2200      	movs	r2, #0
 8008e62:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2201      	movs	r2, #1
 8008e6a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2200      	movs	r2, #0
 8008e72:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	331c      	adds	r3, #28
 8008e82:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008e86:	2100      	movs	r1, #0
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f002 f934 	bl	800b0f6 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008e94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008e98:	2100      	movs	r1, #0
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f002 f92b 	bl	800b0f6 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008ea6:	2212      	movs	r2, #18
 8008ea8:	2100      	movs	r1, #0
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f002 f923 	bl	800b0f6 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008eb6:	223e      	movs	r2, #62	@ 0x3e
 8008eb8:	2100      	movs	r1, #0
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f002 f91b 	bl	800b0f6 <memset>

  return USBH_OK;
 8008ec0:	2300      	movs	r3, #0
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3710      	adds	r7, #16
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}

08008eca <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008eca:	b480      	push	{r7}
 8008ecc:	b085      	sub	sp, #20
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	6078      	str	r0, [r7, #4]
 8008ed2:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d016      	beq.n	8008f0c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d10e      	bne.n	8008f06 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008eee:	1c59      	adds	r1, r3, #1
 8008ef0:	687a      	ldr	r2, [r7, #4]
 8008ef2:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8008ef6:	687a      	ldr	r2, [r7, #4]
 8008ef8:	33de      	adds	r3, #222	@ 0xde
 8008efa:	6839      	ldr	r1, [r7, #0]
 8008efc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008f00:	2300      	movs	r3, #0
 8008f02:	73fb      	strb	r3, [r7, #15]
 8008f04:	e004      	b.n	8008f10 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008f06:	2302      	movs	r3, #2
 8008f08:	73fb      	strb	r3, [r7, #15]
 8008f0a:	e001      	b.n	8008f10 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008f0c:	2302      	movs	r3, #2
 8008f0e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3714      	adds	r7, #20
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr

08008f1e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008f1e:	b480      	push	{r7}
 8008f20:	b085      	sub	sp, #20
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	6078      	str	r0, [r7, #4]
 8008f26:	460b      	mov	r3, r1
 8008f28:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8008f34:	78fa      	ldrb	r2, [r7, #3]
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d204      	bcs.n	8008f44 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	78fa      	ldrb	r2, [r7, #3]
 8008f3e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8008f42:	e001      	b.n	8008f48 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008f44:	2302      	movs	r3, #2
 8008f46:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3714      	adds	r7, #20
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr

08008f56 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008f56:	b480      	push	{r7}
 8008f58:	b087      	sub	sp, #28
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
 8008f5e:	4608      	mov	r0, r1
 8008f60:	4611      	mov	r1, r2
 8008f62:	461a      	mov	r2, r3
 8008f64:	4603      	mov	r3, r0
 8008f66:	70fb      	strb	r3, [r7, #3]
 8008f68:	460b      	mov	r3, r1
 8008f6a:	70bb      	strb	r3, [r7, #2]
 8008f6c:	4613      	mov	r3, r2
 8008f6e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008f70:	2300      	movs	r3, #0
 8008f72:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008f74:	2300      	movs	r3, #0
 8008f76:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008f7e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008f80:	e025      	b.n	8008fce <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008f82:	7dfb      	ldrb	r3, [r7, #23]
 8008f84:	221a      	movs	r2, #26
 8008f86:	fb02 f303 	mul.w	r3, r2, r3
 8008f8a:	3308      	adds	r3, #8
 8008f8c:	68fa      	ldr	r2, [r7, #12]
 8008f8e:	4413      	add	r3, r2
 8008f90:	3302      	adds	r3, #2
 8008f92:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	795b      	ldrb	r3, [r3, #5]
 8008f98:	78fa      	ldrb	r2, [r7, #3]
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	d002      	beq.n	8008fa4 <USBH_FindInterface+0x4e>
 8008f9e:	78fb      	ldrb	r3, [r7, #3]
 8008fa0:	2bff      	cmp	r3, #255	@ 0xff
 8008fa2:	d111      	bne.n	8008fc8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008fa8:	78ba      	ldrb	r2, [r7, #2]
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d002      	beq.n	8008fb4 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008fae:	78bb      	ldrb	r3, [r7, #2]
 8008fb0:	2bff      	cmp	r3, #255	@ 0xff
 8008fb2:	d109      	bne.n	8008fc8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008fb8:	787a      	ldrb	r2, [r7, #1]
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d002      	beq.n	8008fc4 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008fbe:	787b      	ldrb	r3, [r7, #1]
 8008fc0:	2bff      	cmp	r3, #255	@ 0xff
 8008fc2:	d101      	bne.n	8008fc8 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008fc4:	7dfb      	ldrb	r3, [r7, #23]
 8008fc6:	e006      	b.n	8008fd6 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008fc8:	7dfb      	ldrb	r3, [r7, #23]
 8008fca:	3301      	adds	r3, #1
 8008fcc:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008fce:	7dfb      	ldrb	r3, [r7, #23]
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d9d6      	bls.n	8008f82 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008fd4:	23ff      	movs	r3, #255	@ 0xff
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	371c      	adds	r7, #28
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr

08008fe2 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8008fe2:	b580      	push	{r7, lr}
 8008fe4:	b082      	sub	sp, #8
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f001 fcf4 	bl	800a9d8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008ff0:	2101      	movs	r1, #1
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f001 fe0d 	bl	800ac12 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008ff8:	2300      	movs	r3, #0
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3708      	adds	r7, #8
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
	...

08009004 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b088      	sub	sp, #32
 8009008:	af04      	add	r7, sp, #16
 800900a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800900c:	2302      	movs	r3, #2
 800900e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009010:	2300      	movs	r3, #0
 8009012:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800901a:	b2db      	uxtb	r3, r3
 800901c:	2b01      	cmp	r3, #1
 800901e:	d102      	bne.n	8009026 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2203      	movs	r2, #3
 8009024:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	781b      	ldrb	r3, [r3, #0]
 800902a:	b2db      	uxtb	r3, r3
 800902c:	2b0b      	cmp	r3, #11
 800902e:	f200 81bb 	bhi.w	80093a8 <USBH_Process+0x3a4>
 8009032:	a201      	add	r2, pc, #4	@ (adr r2, 8009038 <USBH_Process+0x34>)
 8009034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009038:	08009069 	.word	0x08009069
 800903c:	0800909b 	.word	0x0800909b
 8009040:	08009103 	.word	0x08009103
 8009044:	08009343 	.word	0x08009343
 8009048:	080093a9 	.word	0x080093a9
 800904c:	080091a3 	.word	0x080091a3
 8009050:	080092e9 	.word	0x080092e9
 8009054:	080091d9 	.word	0x080091d9
 8009058:	080091f9 	.word	0x080091f9
 800905c:	08009217 	.word	0x08009217
 8009060:	0800925b 	.word	0x0800925b
 8009064:	0800932b 	.word	0x0800932b
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800906e:	b2db      	uxtb	r3, r3
 8009070:	2b00      	cmp	r3, #0
 8009072:	f000 819b 	beq.w	80093ac <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2201      	movs	r2, #1
 800907a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800907c:	20c8      	movs	r0, #200	@ 0xc8
 800907e:	f001 fe12 	bl	800aca6 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f001 fd05 	bl	800aa92 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2200      	movs	r2, #0
 800908c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2200      	movs	r2, #0
 8009094:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009098:	e188      	b.n	80093ac <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	d107      	bne.n	80090b4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2200      	movs	r2, #0
 80090a8:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2202      	movs	r2, #2
 80090b0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80090b2:	e18a      	b.n	80093ca <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80090ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80090be:	d914      	bls.n	80090ea <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80090c6:	3301      	adds	r3, #1
 80090c8:	b2da      	uxtb	r2, r3
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80090d6:	2b03      	cmp	r3, #3
 80090d8:	d903      	bls.n	80090e2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	220d      	movs	r2, #13
 80090de:	701a      	strb	r2, [r3, #0]
      break;
 80090e0:	e173      	b.n	80093ca <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2200      	movs	r2, #0
 80090e6:	701a      	strb	r2, [r3, #0]
      break;
 80090e8:	e16f      	b.n	80093ca <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80090f0:	f103 020a 	add.w	r2, r3, #10
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 80090fa:	200a      	movs	r0, #10
 80090fc:	f001 fdd3 	bl	800aca6 <USBH_Delay>
      break;
 8009100:	e163      	b.n	80093ca <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009108:	2b00      	cmp	r3, #0
 800910a:	d005      	beq.n	8009118 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009112:	2104      	movs	r1, #4
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009118:	2064      	movs	r0, #100	@ 0x64
 800911a:	f001 fdc4 	bl	800aca6 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f001 fc90 	bl	800aa44 <USBH_LL_GetSpeed>
 8009124:	4603      	mov	r3, r0
 8009126:	461a      	mov	r2, r3
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2205      	movs	r2, #5
 8009132:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009134:	2100      	movs	r1, #0
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f001 fa9b 	bl	800a672 <USBH_AllocPipe>
 800913c:	4603      	mov	r3, r0
 800913e:	461a      	mov	r2, r3
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009144:	2180      	movs	r1, #128	@ 0x80
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f001 fa93 	bl	800a672 <USBH_AllocPipe>
 800914c:	4603      	mov	r3, r0
 800914e:	461a      	mov	r2, r3
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	7919      	ldrb	r1, [r3, #4]
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009164:	687a      	ldr	r2, [r7, #4]
 8009166:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009168:	9202      	str	r2, [sp, #8]
 800916a:	2200      	movs	r2, #0
 800916c:	9201      	str	r2, [sp, #4]
 800916e:	9300      	str	r3, [sp, #0]
 8009170:	4603      	mov	r3, r0
 8009172:	2280      	movs	r2, #128	@ 0x80
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f001 fa4d 	bl	800a614 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	7959      	ldrb	r1, [r3, #5]
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800918a:	687a      	ldr	r2, [r7, #4]
 800918c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800918e:	9202      	str	r2, [sp, #8]
 8009190:	2200      	movs	r2, #0
 8009192:	9201      	str	r2, [sp, #4]
 8009194:	9300      	str	r3, [sp, #0]
 8009196:	4603      	mov	r3, r0
 8009198:	2200      	movs	r2, #0
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f001 fa3a 	bl	800a614 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80091a0:	e113      	b.n	80093ca <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f000 f916 	bl	80093d4 <USBH_HandleEnum>
 80091a8:	4603      	mov	r3, r0
 80091aa:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80091ac:	7bbb      	ldrb	r3, [r7, #14]
 80091ae:	b2db      	uxtb	r3, r3
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	f040 80fd 	bne.w	80093b0 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2200      	movs	r2, #0
 80091ba:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	d103      	bne.n	80091d0 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2208      	movs	r2, #8
 80091cc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80091ce:	e0ef      	b.n	80093b0 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2207      	movs	r2, #7
 80091d4:	701a      	strb	r2, [r3, #0]
      break;
 80091d6:	e0eb      	b.n	80093b0 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80091de:	2b00      	cmp	r3, #0
 80091e0:	f000 80e8 	beq.w	80093b4 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80091ea:	2101      	movs	r1, #1
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2208      	movs	r2, #8
 80091f4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80091f6:	e0dd      	b.n	80093b4 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 80091fe:	4619      	mov	r1, r3
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f000 fc3a 	bl	8009a7a <USBH_SetCfg>
 8009206:	4603      	mov	r3, r0
 8009208:	2b00      	cmp	r3, #0
 800920a:	f040 80d5 	bne.w	80093b8 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2209      	movs	r2, #9
 8009212:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009214:	e0d0      	b.n	80093b8 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800921c:	f003 0320 	and.w	r3, r3, #32
 8009220:	2b00      	cmp	r3, #0
 8009222:	d016      	beq.n	8009252 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009224:	2101      	movs	r1, #1
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 fc4a 	bl	8009ac0 <USBH_SetFeature>
 800922c:	4603      	mov	r3, r0
 800922e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009230:	7bbb      	ldrb	r3, [r7, #14]
 8009232:	b2db      	uxtb	r3, r3
 8009234:	2b00      	cmp	r3, #0
 8009236:	d103      	bne.n	8009240 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	220a      	movs	r2, #10
 800923c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800923e:	e0bd      	b.n	80093bc <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8009240:	7bbb      	ldrb	r3, [r7, #14]
 8009242:	b2db      	uxtb	r3, r3
 8009244:	2b03      	cmp	r3, #3
 8009246:	f040 80b9 	bne.w	80093bc <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	220a      	movs	r2, #10
 800924e:	701a      	strb	r2, [r3, #0]
      break;
 8009250:	e0b4      	b.n	80093bc <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	220a      	movs	r2, #10
 8009256:	701a      	strb	r2, [r3, #0]
      break;
 8009258:	e0b0      	b.n	80093bc <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009260:	2b00      	cmp	r3, #0
 8009262:	f000 80ad 	beq.w	80093c0 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2200      	movs	r2, #0
 800926a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800926e:	2300      	movs	r3, #0
 8009270:	73fb      	strb	r3, [r7, #15]
 8009272:	e016      	b.n	80092a2 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009274:	7bfa      	ldrb	r2, [r7, #15]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	32de      	adds	r2, #222	@ 0xde
 800927a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800927e:	791a      	ldrb	r2, [r3, #4]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8009286:	429a      	cmp	r2, r3
 8009288:	d108      	bne.n	800929c <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800928a:	7bfa      	ldrb	r2, [r7, #15]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	32de      	adds	r2, #222	@ 0xde
 8009290:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800929a:	e005      	b.n	80092a8 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800929c:	7bfb      	ldrb	r3, [r7, #15]
 800929e:	3301      	adds	r3, #1
 80092a0:	73fb      	strb	r3, [r7, #15]
 80092a2:	7bfb      	ldrb	r3, [r7, #15]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d0e5      	beq.n	8009274 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d016      	beq.n	80092e0 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80092b8:	689b      	ldr	r3, [r3, #8]
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	4798      	blx	r3
 80092be:	4603      	mov	r3, r0
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d109      	bne.n	80092d8 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2206      	movs	r2, #6
 80092c8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80092d0:	2103      	movs	r1, #3
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80092d6:	e073      	b.n	80093c0 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	220d      	movs	r2, #13
 80092dc:	701a      	strb	r2, [r3, #0]
      break;
 80092de:	e06f      	b.n	80093c0 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	220d      	movs	r2, #13
 80092e4:	701a      	strb	r2, [r3, #0]
      break;
 80092e6:	e06b      	b.n	80093c0 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d017      	beq.n	8009322 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80092f8:	691b      	ldr	r3, [r3, #16]
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	4798      	blx	r3
 80092fe:	4603      	mov	r3, r0
 8009300:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009302:	7bbb      	ldrb	r3, [r7, #14]
 8009304:	b2db      	uxtb	r3, r3
 8009306:	2b00      	cmp	r3, #0
 8009308:	d103      	bne.n	8009312 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	220b      	movs	r2, #11
 800930e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009310:	e058      	b.n	80093c4 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8009312:	7bbb      	ldrb	r3, [r7, #14]
 8009314:	b2db      	uxtb	r3, r3
 8009316:	2b02      	cmp	r3, #2
 8009318:	d154      	bne.n	80093c4 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	220d      	movs	r2, #13
 800931e:	701a      	strb	r2, [r3, #0]
      break;
 8009320:	e050      	b.n	80093c4 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	220d      	movs	r2, #13
 8009326:	701a      	strb	r2, [r3, #0]
      break;
 8009328:	e04c      	b.n	80093c4 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009330:	2b00      	cmp	r3, #0
 8009332:	d049      	beq.n	80093c8 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800933a:	695b      	ldr	r3, [r3, #20]
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	4798      	blx	r3
      }
      break;
 8009340:	e042      	b.n	80093c8 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2200      	movs	r2, #0
 8009346:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f7ff fd4a 	bl	8008de4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009356:	2b00      	cmp	r3, #0
 8009358:	d009      	beq.n	800936e <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009360:	68db      	ldr	r3, [r3, #12]
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2200      	movs	r2, #0
 800936a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009374:	2b00      	cmp	r3, #0
 8009376:	d005      	beq.n	8009384 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800937e:	2105      	movs	r1, #5
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800938a:	b2db      	uxtb	r3, r3
 800938c:	2b01      	cmp	r3, #1
 800938e:	d107      	bne.n	80093a0 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2200      	movs	r2, #0
 8009394:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f7ff fe22 	bl	8008fe2 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800939e:	e014      	b.n	80093ca <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f001 fb19 	bl	800a9d8 <USBH_LL_Start>
      break;
 80093a6:	e010      	b.n	80093ca <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 80093a8:	bf00      	nop
 80093aa:	e00e      	b.n	80093ca <USBH_Process+0x3c6>
      break;
 80093ac:	bf00      	nop
 80093ae:	e00c      	b.n	80093ca <USBH_Process+0x3c6>
      break;
 80093b0:	bf00      	nop
 80093b2:	e00a      	b.n	80093ca <USBH_Process+0x3c6>
    break;
 80093b4:	bf00      	nop
 80093b6:	e008      	b.n	80093ca <USBH_Process+0x3c6>
      break;
 80093b8:	bf00      	nop
 80093ba:	e006      	b.n	80093ca <USBH_Process+0x3c6>
      break;
 80093bc:	bf00      	nop
 80093be:	e004      	b.n	80093ca <USBH_Process+0x3c6>
      break;
 80093c0:	bf00      	nop
 80093c2:	e002      	b.n	80093ca <USBH_Process+0x3c6>
      break;
 80093c4:	bf00      	nop
 80093c6:	e000      	b.n	80093ca <USBH_Process+0x3c6>
      break;
 80093c8:	bf00      	nop
  }
  return USBH_OK;
 80093ca:	2300      	movs	r3, #0
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3710      	adds	r7, #16
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}

080093d4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b088      	sub	sp, #32
 80093d8:	af04      	add	r7, sp, #16
 80093da:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80093dc:	2301      	movs	r3, #1
 80093de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80093e0:	2301      	movs	r3, #1
 80093e2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	785b      	ldrb	r3, [r3, #1]
 80093e8:	2b07      	cmp	r3, #7
 80093ea:	f200 81bd 	bhi.w	8009768 <USBH_HandleEnum+0x394>
 80093ee:	a201      	add	r2, pc, #4	@ (adr r2, 80093f4 <USBH_HandleEnum+0x20>)
 80093f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093f4:	08009415 	.word	0x08009415
 80093f8:	080094cf 	.word	0x080094cf
 80093fc:	08009539 	.word	0x08009539
 8009400:	080095c3 	.word	0x080095c3
 8009404:	0800962d 	.word	0x0800962d
 8009408:	0800969d 	.word	0x0800969d
 800940c:	080096e3 	.word	0x080096e3
 8009410:	08009729 	.word	0x08009729
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009414:	2108      	movs	r1, #8
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f000 fa4c 	bl	80098b4 <USBH_Get_DevDesc>
 800941c:	4603      	mov	r3, r0
 800941e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009420:	7bbb      	ldrb	r3, [r7, #14]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d12e      	bne.n	8009484 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2201      	movs	r2, #1
 8009434:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	7919      	ldrb	r1, [r3, #4]
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009446:	687a      	ldr	r2, [r7, #4]
 8009448:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800944a:	9202      	str	r2, [sp, #8]
 800944c:	2200      	movs	r2, #0
 800944e:	9201      	str	r2, [sp, #4]
 8009450:	9300      	str	r3, [sp, #0]
 8009452:	4603      	mov	r3, r0
 8009454:	2280      	movs	r2, #128	@ 0x80
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f001 f8dc 	bl	800a614 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	7959      	ldrb	r1, [r3, #5]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800946c:	687a      	ldr	r2, [r7, #4]
 800946e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009470:	9202      	str	r2, [sp, #8]
 8009472:	2200      	movs	r2, #0
 8009474:	9201      	str	r2, [sp, #4]
 8009476:	9300      	str	r3, [sp, #0]
 8009478:	4603      	mov	r3, r0
 800947a:	2200      	movs	r2, #0
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f001 f8c9 	bl	800a614 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009482:	e173      	b.n	800976c <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009484:	7bbb      	ldrb	r3, [r7, #14]
 8009486:	2b03      	cmp	r3, #3
 8009488:	f040 8170 	bne.w	800976c <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009492:	3301      	adds	r3, #1
 8009494:	b2da      	uxtb	r2, r3
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80094a2:	2b03      	cmp	r3, #3
 80094a4:	d903      	bls.n	80094ae <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	220d      	movs	r2, #13
 80094aa:	701a      	strb	r2, [r3, #0]
      break;
 80094ac:	e15e      	b.n	800976c <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	795b      	ldrb	r3, [r3, #5]
 80094b2:	4619      	mov	r1, r3
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f001 f8fd 	bl	800a6b4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	791b      	ldrb	r3, [r3, #4]
 80094be:	4619      	mov	r1, r3
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f001 f8f7 	bl	800a6b4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2200      	movs	r2, #0
 80094ca:	701a      	strb	r2, [r3, #0]
      break;
 80094cc:	e14e      	b.n	800976c <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80094ce:	2112      	movs	r1, #18
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f000 f9ef 	bl	80098b4 <USBH_Get_DevDesc>
 80094d6:	4603      	mov	r3, r0
 80094d8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80094da:	7bbb      	ldrb	r3, [r7, #14]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d103      	bne.n	80094e8 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2202      	movs	r2, #2
 80094e4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80094e6:	e143      	b.n	8009770 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80094e8:	7bbb      	ldrb	r3, [r7, #14]
 80094ea:	2b03      	cmp	r3, #3
 80094ec:	f040 8140 	bne.w	8009770 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80094f6:	3301      	adds	r3, #1
 80094f8:	b2da      	uxtb	r2, r3
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009506:	2b03      	cmp	r3, #3
 8009508:	d903      	bls.n	8009512 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	220d      	movs	r2, #13
 800950e:	701a      	strb	r2, [r3, #0]
      break;
 8009510:	e12e      	b.n	8009770 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	795b      	ldrb	r3, [r3, #5]
 8009516:	4619      	mov	r1, r3
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f001 f8cb 	bl	800a6b4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	791b      	ldrb	r3, [r3, #4]
 8009522:	4619      	mov	r1, r3
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f001 f8c5 	bl	800a6b4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2200      	movs	r2, #0
 800952e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2200      	movs	r2, #0
 8009534:	701a      	strb	r2, [r3, #0]
      break;
 8009536:	e11b      	b.n	8009770 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009538:	2101      	movs	r1, #1
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f000 fa79 	bl	8009a32 <USBH_SetAddress>
 8009540:	4603      	mov	r3, r0
 8009542:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009544:	7bbb      	ldrb	r3, [r7, #14]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d130      	bne.n	80095ac <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800954a:	2002      	movs	r0, #2
 800954c:	f001 fbab 	bl	800aca6 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2201      	movs	r2, #1
 8009554:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2203      	movs	r2, #3
 800955c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	7919      	ldrb	r1, [r3, #4]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800956e:	687a      	ldr	r2, [r7, #4]
 8009570:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009572:	9202      	str	r2, [sp, #8]
 8009574:	2200      	movs	r2, #0
 8009576:	9201      	str	r2, [sp, #4]
 8009578:	9300      	str	r3, [sp, #0]
 800957a:	4603      	mov	r3, r0
 800957c:	2280      	movs	r2, #128	@ 0x80
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f001 f848 	bl	800a614 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	7959      	ldrb	r1, [r3, #5]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009598:	9202      	str	r2, [sp, #8]
 800959a:	2200      	movs	r2, #0
 800959c:	9201      	str	r2, [sp, #4]
 800959e:	9300      	str	r3, [sp, #0]
 80095a0:	4603      	mov	r3, r0
 80095a2:	2200      	movs	r2, #0
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f001 f835 	bl	800a614 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80095aa:	e0e3      	b.n	8009774 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80095ac:	7bbb      	ldrb	r3, [r7, #14]
 80095ae:	2b03      	cmp	r3, #3
 80095b0:	f040 80e0 	bne.w	8009774 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	220d      	movs	r2, #13
 80095b8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2200      	movs	r2, #0
 80095be:	705a      	strb	r2, [r3, #1]
      break;
 80095c0:	e0d8      	b.n	8009774 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80095c2:	2109      	movs	r1, #9
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f000 f9a1 	bl	800990c <USBH_Get_CfgDesc>
 80095ca:	4603      	mov	r3, r0
 80095cc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80095ce:	7bbb      	ldrb	r3, [r7, #14]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d103      	bne.n	80095dc <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2204      	movs	r2, #4
 80095d8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80095da:	e0cd      	b.n	8009778 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80095dc:	7bbb      	ldrb	r3, [r7, #14]
 80095de:	2b03      	cmp	r3, #3
 80095e0:	f040 80ca 	bne.w	8009778 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80095ea:	3301      	adds	r3, #1
 80095ec:	b2da      	uxtb	r2, r3
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80095fa:	2b03      	cmp	r3, #3
 80095fc:	d903      	bls.n	8009606 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	220d      	movs	r2, #13
 8009602:	701a      	strb	r2, [r3, #0]
      break;
 8009604:	e0b8      	b.n	8009778 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	795b      	ldrb	r3, [r3, #5]
 800960a:	4619      	mov	r1, r3
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f001 f851 	bl	800a6b4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	791b      	ldrb	r3, [r3, #4]
 8009616:	4619      	mov	r1, r3
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f001 f84b 	bl	800a6b4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2200      	movs	r2, #0
 8009622:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2200      	movs	r2, #0
 8009628:	701a      	strb	r2, [r3, #0]
      break;
 800962a:	e0a5      	b.n	8009778 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8009632:	4619      	mov	r1, r3
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f000 f969 	bl	800990c <USBH_Get_CfgDesc>
 800963a:	4603      	mov	r3, r0
 800963c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800963e:	7bbb      	ldrb	r3, [r7, #14]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d103      	bne.n	800964c <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2205      	movs	r2, #5
 8009648:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800964a:	e097      	b.n	800977c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800964c:	7bbb      	ldrb	r3, [r7, #14]
 800964e:	2b03      	cmp	r3, #3
 8009650:	f040 8094 	bne.w	800977c <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800965a:	3301      	adds	r3, #1
 800965c:	b2da      	uxtb	r2, r3
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800966a:	2b03      	cmp	r3, #3
 800966c:	d903      	bls.n	8009676 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	220d      	movs	r2, #13
 8009672:	701a      	strb	r2, [r3, #0]
      break;
 8009674:	e082      	b.n	800977c <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	795b      	ldrb	r3, [r3, #5]
 800967a:	4619      	mov	r1, r3
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f001 f819 	bl	800a6b4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	791b      	ldrb	r3, [r3, #4]
 8009686:	4619      	mov	r1, r3
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f001 f813 	bl	800a6b4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2200      	movs	r2, #0
 8009692:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2200      	movs	r2, #0
 8009698:	701a      	strb	r2, [r3, #0]
      break;
 800969a:	e06f      	b.n	800977c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d019      	beq.n	80096da <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80096b2:	23ff      	movs	r3, #255	@ 0xff
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f000 f953 	bl	8009960 <USBH_Get_StringDesc>
 80096ba:	4603      	mov	r3, r0
 80096bc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80096be:	7bbb      	ldrb	r3, [r7, #14]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d103      	bne.n	80096cc <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2206      	movs	r2, #6
 80096c8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80096ca:	e059      	b.n	8009780 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80096cc:	7bbb      	ldrb	r3, [r7, #14]
 80096ce:	2b03      	cmp	r3, #3
 80096d0:	d156      	bne.n	8009780 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2206      	movs	r2, #6
 80096d6:	705a      	strb	r2, [r3, #1]
      break;
 80096d8:	e052      	b.n	8009780 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2206      	movs	r2, #6
 80096de:	705a      	strb	r2, [r3, #1]
      break;
 80096e0:	e04e      	b.n	8009780 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d019      	beq.n	8009720 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80096f8:	23ff      	movs	r3, #255	@ 0xff
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 f930 	bl	8009960 <USBH_Get_StringDesc>
 8009700:	4603      	mov	r3, r0
 8009702:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009704:	7bbb      	ldrb	r3, [r7, #14]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d103      	bne.n	8009712 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2207      	movs	r2, #7
 800970e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009710:	e038      	b.n	8009784 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009712:	7bbb      	ldrb	r3, [r7, #14]
 8009714:	2b03      	cmp	r3, #3
 8009716:	d135      	bne.n	8009784 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2207      	movs	r2, #7
 800971c:	705a      	strb	r2, [r3, #1]
      break;
 800971e:	e031      	b.n	8009784 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2207      	movs	r2, #7
 8009724:	705a      	strb	r2, [r3, #1]
      break;
 8009726:	e02d      	b.n	8009784 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800972e:	2b00      	cmp	r3, #0
 8009730:	d017      	beq.n	8009762 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800973e:	23ff      	movs	r3, #255	@ 0xff
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f000 f90d 	bl	8009960 <USBH_Get_StringDesc>
 8009746:	4603      	mov	r3, r0
 8009748:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800974a:	7bbb      	ldrb	r3, [r7, #14]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d102      	bne.n	8009756 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009750:	2300      	movs	r3, #0
 8009752:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009754:	e018      	b.n	8009788 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009756:	7bbb      	ldrb	r3, [r7, #14]
 8009758:	2b03      	cmp	r3, #3
 800975a:	d115      	bne.n	8009788 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800975c:	2300      	movs	r3, #0
 800975e:	73fb      	strb	r3, [r7, #15]
      break;
 8009760:	e012      	b.n	8009788 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8009762:	2300      	movs	r3, #0
 8009764:	73fb      	strb	r3, [r7, #15]
      break;
 8009766:	e00f      	b.n	8009788 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8009768:	bf00      	nop
 800976a:	e00e      	b.n	800978a <USBH_HandleEnum+0x3b6>
      break;
 800976c:	bf00      	nop
 800976e:	e00c      	b.n	800978a <USBH_HandleEnum+0x3b6>
      break;
 8009770:	bf00      	nop
 8009772:	e00a      	b.n	800978a <USBH_HandleEnum+0x3b6>
      break;
 8009774:	bf00      	nop
 8009776:	e008      	b.n	800978a <USBH_HandleEnum+0x3b6>
      break;
 8009778:	bf00      	nop
 800977a:	e006      	b.n	800978a <USBH_HandleEnum+0x3b6>
      break;
 800977c:	bf00      	nop
 800977e:	e004      	b.n	800978a <USBH_HandleEnum+0x3b6>
      break;
 8009780:	bf00      	nop
 8009782:	e002      	b.n	800978a <USBH_HandleEnum+0x3b6>
      break;
 8009784:	bf00      	nop
 8009786:	e000      	b.n	800978a <USBH_HandleEnum+0x3b6>
      break;
 8009788:	bf00      	nop
  }
  return Status;
 800978a:	7bfb      	ldrb	r3, [r7, #15]
}
 800978c:	4618      	mov	r0, r3
 800978e:	3710      	adds	r7, #16
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}

08009794 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009794:	b480      	push	{r7}
 8009796:	b083      	sub	sp, #12
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	683a      	ldr	r2, [r7, #0]
 80097a2:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 80097a6:	bf00      	nop
 80097a8:	370c      	adds	r7, #12
 80097aa:	46bd      	mov	sp, r7
 80097ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b0:	4770      	bx	lr

080097b2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80097b2:	b580      	push	{r7, lr}
 80097b4:	b082      	sub	sp, #8
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80097c0:	1c5a      	adds	r2, r3, #1
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f000 f804 	bl	80097d6 <USBH_HandleSof>
}
 80097ce:	bf00      	nop
 80097d0:	3708      	adds	r7, #8
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}

080097d6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80097d6:	b580      	push	{r7, lr}
 80097d8:	b082      	sub	sp, #8
 80097da:	af00      	add	r7, sp, #0
 80097dc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	781b      	ldrb	r3, [r3, #0]
 80097e2:	b2db      	uxtb	r3, r3
 80097e4:	2b0b      	cmp	r3, #11
 80097e6:	d10a      	bne.n	80097fe <USBH_HandleSof+0x28>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d005      	beq.n	80097fe <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80097f8:	699b      	ldr	r3, [r3, #24]
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	4798      	blx	r3
  }
}
 80097fe:	bf00      	nop
 8009800:	3708      	adds	r7, #8
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}

08009806 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009806:	b480      	push	{r7}
 8009808:	b083      	sub	sp, #12
 800980a:	af00      	add	r7, sp, #0
 800980c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2201      	movs	r2, #1
 8009812:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009816:	bf00      	nop
}
 8009818:	370c      	adds	r7, #12
 800981a:	46bd      	mov	sp, r7
 800981c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009820:	4770      	bx	lr

08009822 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009822:	b480      	push	{r7}
 8009824:	b083      	sub	sp, #12
 8009826:	af00      	add	r7, sp, #0
 8009828:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2200      	movs	r2, #0
 800982e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8009832:	bf00      	nop
}
 8009834:	370c      	adds	r7, #12
 8009836:	46bd      	mov	sp, r7
 8009838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983c:	4770      	bx	lr

0800983e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800983e:	b480      	push	{r7}
 8009840:	b083      	sub	sp, #12
 8009842:	af00      	add	r7, sp, #0
 8009844:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2201      	movs	r2, #1
 800984a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2200      	movs	r2, #0
 8009852:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2200      	movs	r2, #0
 800985a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800985e:	2300      	movs	r3, #0
}
 8009860:	4618      	mov	r0, r3
 8009862:	370c      	adds	r7, #12
 8009864:	46bd      	mov	sp, r7
 8009866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986a:	4770      	bx	lr

0800986c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b082      	sub	sp, #8
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2201      	movs	r2, #1
 8009878:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2200      	movs	r2, #0
 8009880:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2200      	movs	r2, #0
 8009888:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f001 f8be 	bl	800aa0e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	791b      	ldrb	r3, [r3, #4]
 8009896:	4619      	mov	r1, r3
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f000 ff0b 	bl	800a6b4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	795b      	ldrb	r3, [r3, #5]
 80098a2:	4619      	mov	r1, r3
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f000 ff05 	bl	800a6b4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80098aa:	2300      	movs	r3, #0
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3708      	adds	r7, #8
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}

080098b4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b086      	sub	sp, #24
 80098b8:	af02      	add	r7, sp, #8
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	460b      	mov	r3, r1
 80098be:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80098c0:	887b      	ldrh	r3, [r7, #2]
 80098c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098c6:	d901      	bls.n	80098cc <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80098c8:	2303      	movs	r3, #3
 80098ca:	e01b      	b.n	8009904 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80098d2:	887b      	ldrh	r3, [r7, #2]
 80098d4:	9300      	str	r3, [sp, #0]
 80098d6:	4613      	mov	r3, r2
 80098d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80098dc:	2100      	movs	r1, #0
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f000 f872 	bl	80099c8 <USBH_GetDescriptor>
 80098e4:	4603      	mov	r3, r0
 80098e6:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80098e8:	7bfb      	ldrb	r3, [r7, #15]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d109      	bne.n	8009902 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80098f4:	887a      	ldrh	r2, [r7, #2]
 80098f6:	4619      	mov	r1, r3
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f000 f929 	bl	8009b50 <USBH_ParseDevDesc>
 80098fe:	4603      	mov	r3, r0
 8009900:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009902:	7bfb      	ldrb	r3, [r7, #15]
}
 8009904:	4618      	mov	r0, r3
 8009906:	3710      	adds	r7, #16
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}

0800990c <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b086      	sub	sp, #24
 8009910:	af02      	add	r7, sp, #8
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	460b      	mov	r3, r1
 8009916:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	331c      	adds	r3, #28
 800991c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800991e:	887b      	ldrh	r3, [r7, #2]
 8009920:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009924:	d901      	bls.n	800992a <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009926:	2303      	movs	r3, #3
 8009928:	e016      	b.n	8009958 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800992a:	887b      	ldrh	r3, [r7, #2]
 800992c:	9300      	str	r3, [sp, #0]
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009934:	2100      	movs	r1, #0
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f000 f846 	bl	80099c8 <USBH_GetDescriptor>
 800993c:	4603      	mov	r3, r0
 800993e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009940:	7bfb      	ldrb	r3, [r7, #15]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d107      	bne.n	8009956 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8009946:	887b      	ldrh	r3, [r7, #2]
 8009948:	461a      	mov	r2, r3
 800994a:	68b9      	ldr	r1, [r7, #8]
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f000 f9af 	bl	8009cb0 <USBH_ParseCfgDesc>
 8009952:	4603      	mov	r3, r0
 8009954:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009956:	7bfb      	ldrb	r3, [r7, #15]
}
 8009958:	4618      	mov	r0, r3
 800995a:	3710      	adds	r7, #16
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}

08009960 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b088      	sub	sp, #32
 8009964:	af02      	add	r7, sp, #8
 8009966:	60f8      	str	r0, [r7, #12]
 8009968:	607a      	str	r2, [r7, #4]
 800996a:	461a      	mov	r2, r3
 800996c:	460b      	mov	r3, r1
 800996e:	72fb      	strb	r3, [r7, #11]
 8009970:	4613      	mov	r3, r2
 8009972:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8009974:	893b      	ldrh	r3, [r7, #8]
 8009976:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800997a:	d802      	bhi.n	8009982 <USBH_Get_StringDesc+0x22>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d101      	bne.n	8009986 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009982:	2303      	movs	r3, #3
 8009984:	e01c      	b.n	80099c0 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8009986:	7afb      	ldrb	r3, [r7, #11]
 8009988:	b29b      	uxth	r3, r3
 800998a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800998e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009996:	893b      	ldrh	r3, [r7, #8]
 8009998:	9300      	str	r3, [sp, #0]
 800999a:	460b      	mov	r3, r1
 800999c:	2100      	movs	r1, #0
 800999e:	68f8      	ldr	r0, [r7, #12]
 80099a0:	f000 f812 	bl	80099c8 <USBH_GetDescriptor>
 80099a4:	4603      	mov	r3, r0
 80099a6:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80099a8:	7dfb      	ldrb	r3, [r7, #23]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d107      	bne.n	80099be <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80099b4:	893a      	ldrh	r2, [r7, #8]
 80099b6:	6879      	ldr	r1, [r7, #4]
 80099b8:	4618      	mov	r0, r3
 80099ba:	f000 fb8d 	bl	800a0d8 <USBH_ParseStringDesc>
  }

  return status;
 80099be:	7dfb      	ldrb	r3, [r7, #23]
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3718      	adds	r7, #24
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}

080099c8 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b084      	sub	sp, #16
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	60f8      	str	r0, [r7, #12]
 80099d0:	607b      	str	r3, [r7, #4]
 80099d2:	460b      	mov	r3, r1
 80099d4:	72fb      	strb	r3, [r7, #11]
 80099d6:	4613      	mov	r3, r2
 80099d8:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	789b      	ldrb	r3, [r3, #2]
 80099de:	2b01      	cmp	r3, #1
 80099e0:	d11c      	bne.n	8009a1c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80099e2:	7afb      	ldrb	r3, [r7, #11]
 80099e4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80099e8:	b2da      	uxtb	r2, r3
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	2206      	movs	r2, #6
 80099f2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	893a      	ldrh	r2, [r7, #8]
 80099f8:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80099fa:	893b      	ldrh	r3, [r7, #8]
 80099fc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009a00:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009a04:	d104      	bne.n	8009a10 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	f240 4209 	movw	r2, #1033	@ 0x409
 8009a0c:	829a      	strh	r2, [r3, #20]
 8009a0e:	e002      	b.n	8009a16 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2200      	movs	r2, #0
 8009a14:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	8b3a      	ldrh	r2, [r7, #24]
 8009a1a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009a1c:	8b3b      	ldrh	r3, [r7, #24]
 8009a1e:	461a      	mov	r2, r3
 8009a20:	6879      	ldr	r1, [r7, #4]
 8009a22:	68f8      	ldr	r0, [r7, #12]
 8009a24:	f000 fba5 	bl	800a172 <USBH_CtlReq>
 8009a28:	4603      	mov	r3, r0
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3710      	adds	r7, #16
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}

08009a32 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009a32:	b580      	push	{r7, lr}
 8009a34:	b082      	sub	sp, #8
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	6078      	str	r0, [r7, #4]
 8009a3a:	460b      	mov	r3, r1
 8009a3c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	789b      	ldrb	r3, [r3, #2]
 8009a42:	2b01      	cmp	r3, #1
 8009a44:	d10f      	bne.n	8009a66 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2205      	movs	r2, #5
 8009a50:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009a52:	78fb      	ldrb	r3, [r7, #3]
 8009a54:	b29a      	uxth	r2, r3
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2200      	movs	r2, #0
 8009a64:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009a66:	2200      	movs	r2, #0
 8009a68:	2100      	movs	r1, #0
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f000 fb81 	bl	800a172 <USBH_CtlReq>
 8009a70:	4603      	mov	r3, r0
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3708      	adds	r7, #8
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}

08009a7a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009a7a:	b580      	push	{r7, lr}
 8009a7c:	b082      	sub	sp, #8
 8009a7e:	af00      	add	r7, sp, #0
 8009a80:	6078      	str	r0, [r7, #4]
 8009a82:	460b      	mov	r3, r1
 8009a84:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	789b      	ldrb	r3, [r3, #2]
 8009a8a:	2b01      	cmp	r3, #1
 8009a8c:	d10e      	bne.n	8009aac <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2200      	movs	r2, #0
 8009a92:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2209      	movs	r2, #9
 8009a98:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	887a      	ldrh	r2, [r7, #2]
 8009a9e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009aac:	2200      	movs	r2, #0
 8009aae:	2100      	movs	r1, #0
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f000 fb5e 	bl	800a172 <USBH_CtlReq>
 8009ab6:	4603      	mov	r3, r0
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	3708      	adds	r7, #8
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}

08009ac0 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b082      	sub	sp, #8
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
 8009ac8:	460b      	mov	r3, r1
 8009aca:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	789b      	ldrb	r3, [r3, #2]
 8009ad0:	2b01      	cmp	r3, #1
 8009ad2:	d10f      	bne.n	8009af4 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2203      	movs	r2, #3
 8009ade:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009ae0:	78fb      	ldrb	r3, [r7, #3]
 8009ae2:	b29a      	uxth	r2, r3
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2200      	movs	r2, #0
 8009aec:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2200      	movs	r2, #0
 8009af2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009af4:	2200      	movs	r2, #0
 8009af6:	2100      	movs	r1, #0
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f000 fb3a 	bl	800a172 <USBH_CtlReq>
 8009afe:	4603      	mov	r3, r0
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3708      	adds	r7, #8
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}

08009b08 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b082      	sub	sp, #8
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	460b      	mov	r3, r1
 8009b12:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	789b      	ldrb	r3, [r3, #2]
 8009b18:	2b01      	cmp	r3, #1
 8009b1a:	d10f      	bne.n	8009b3c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2202      	movs	r2, #2
 8009b20:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2201      	movs	r2, #1
 8009b26:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009b2e:	78fb      	ldrb	r3, [r7, #3]
 8009b30:	b29a      	uxth	r2, r3
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	2100      	movs	r1, #0
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f000 fb16 	bl	800a172 <USBH_CtlReq>
 8009b46:	4603      	mov	r3, r0
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	3708      	adds	r7, #8
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}

08009b50 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b087      	sub	sp, #28
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	60f8      	str	r0, [r7, #12]
 8009b58:	60b9      	str	r1, [r7, #8]
 8009b5a:	4613      	mov	r3, r2
 8009b5c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009b64:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8009b66:	2300      	movs	r3, #0
 8009b68:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d101      	bne.n	8009b74 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8009b70:	2302      	movs	r3, #2
 8009b72:	e094      	b.n	8009c9e <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	781a      	ldrb	r2, [r3, #0]
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	785a      	ldrb	r2, [r3, #1]
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	3302      	adds	r3, #2
 8009b88:	781b      	ldrb	r3, [r3, #0]
 8009b8a:	461a      	mov	r2, r3
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	3303      	adds	r3, #3
 8009b90:	781b      	ldrb	r3, [r3, #0]
 8009b92:	021b      	lsls	r3, r3, #8
 8009b94:	b29b      	uxth	r3, r3
 8009b96:	4313      	orrs	r3, r2
 8009b98:	b29a      	uxth	r2, r3
 8009b9a:	693b      	ldr	r3, [r7, #16]
 8009b9c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	791a      	ldrb	r2, [r3, #4]
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	795a      	ldrb	r2, [r3, #5]
 8009baa:	693b      	ldr	r3, [r7, #16]
 8009bac:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	799a      	ldrb	r2, [r3, #6]
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	79da      	ldrb	r2, [r3, #7]
 8009bba:	693b      	ldr	r3, [r7, #16]
 8009bbc:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d004      	beq.n	8009bd2 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	d11b      	bne.n	8009c0a <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	79db      	ldrb	r3, [r3, #7]
 8009bd6:	2b20      	cmp	r3, #32
 8009bd8:	dc0f      	bgt.n	8009bfa <USBH_ParseDevDesc+0xaa>
 8009bda:	2b08      	cmp	r3, #8
 8009bdc:	db0f      	blt.n	8009bfe <USBH_ParseDevDesc+0xae>
 8009bde:	3b08      	subs	r3, #8
 8009be0:	4a32      	ldr	r2, [pc, #200]	@ (8009cac <USBH_ParseDevDesc+0x15c>)
 8009be2:	fa22 f303 	lsr.w	r3, r2, r3
 8009be6:	f003 0301 	and.w	r3, r3, #1
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	bf14      	ite	ne
 8009bee:	2301      	movne	r3, #1
 8009bf0:	2300      	moveq	r3, #0
 8009bf2:	b2db      	uxtb	r3, r3
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d106      	bne.n	8009c06 <USBH_ParseDevDesc+0xb6>
 8009bf8:	e001      	b.n	8009bfe <USBH_ParseDevDesc+0xae>
 8009bfa:	2b40      	cmp	r3, #64	@ 0x40
 8009bfc:	d003      	beq.n	8009c06 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	2208      	movs	r2, #8
 8009c02:	71da      	strb	r2, [r3, #7]
        break;
 8009c04:	e000      	b.n	8009c08 <USBH_ParseDevDesc+0xb8>
        break;
 8009c06:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8009c08:	e00e      	b.n	8009c28 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009c10:	2b02      	cmp	r3, #2
 8009c12:	d107      	bne.n	8009c24 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	79db      	ldrb	r3, [r3, #7]
 8009c18:	2b08      	cmp	r3, #8
 8009c1a:	d005      	beq.n	8009c28 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	2208      	movs	r2, #8
 8009c20:	71da      	strb	r2, [r3, #7]
 8009c22:	e001      	b.n	8009c28 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009c24:	2303      	movs	r3, #3
 8009c26:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8009c28:	88fb      	ldrh	r3, [r7, #6]
 8009c2a:	2b08      	cmp	r3, #8
 8009c2c:	d936      	bls.n	8009c9c <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	3308      	adds	r3, #8
 8009c32:	781b      	ldrb	r3, [r3, #0]
 8009c34:	461a      	mov	r2, r3
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	3309      	adds	r3, #9
 8009c3a:	781b      	ldrb	r3, [r3, #0]
 8009c3c:	021b      	lsls	r3, r3, #8
 8009c3e:	b29b      	uxth	r3, r3
 8009c40:	4313      	orrs	r3, r2
 8009c42:	b29a      	uxth	r2, r3
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	330a      	adds	r3, #10
 8009c4c:	781b      	ldrb	r3, [r3, #0]
 8009c4e:	461a      	mov	r2, r3
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	330b      	adds	r3, #11
 8009c54:	781b      	ldrb	r3, [r3, #0]
 8009c56:	021b      	lsls	r3, r3, #8
 8009c58:	b29b      	uxth	r3, r3
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	b29a      	uxth	r2, r3
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	330c      	adds	r3, #12
 8009c66:	781b      	ldrb	r3, [r3, #0]
 8009c68:	461a      	mov	r2, r3
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	330d      	adds	r3, #13
 8009c6e:	781b      	ldrb	r3, [r3, #0]
 8009c70:	021b      	lsls	r3, r3, #8
 8009c72:	b29b      	uxth	r3, r3
 8009c74:	4313      	orrs	r3, r2
 8009c76:	b29a      	uxth	r2, r3
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	7b9a      	ldrb	r2, [r3, #14]
 8009c80:	693b      	ldr	r3, [r7, #16]
 8009c82:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	7bda      	ldrb	r2, [r3, #15]
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	7c1a      	ldrb	r2, [r3, #16]
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	7c5a      	ldrb	r2, [r3, #17]
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8009c9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	371c      	adds	r7, #28
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca8:	4770      	bx	lr
 8009caa:	bf00      	nop
 8009cac:	01000101 	.word	0x01000101

08009cb0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b08c      	sub	sp, #48	@ 0x30
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	60f8      	str	r0, [r7, #12]
 8009cb8:	60b9      	str	r1, [r7, #8]
 8009cba:	4613      	mov	r3, r2
 8009cbc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009cc4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009ccc:	2300      	movs	r3, #0
 8009cce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d101      	bne.n	8009ce2 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8009cde:	2302      	movs	r3, #2
 8009ce0:	e0da      	b.n	8009e98 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8009ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ce8:	781b      	ldrb	r3, [r3, #0]
 8009cea:	2b09      	cmp	r3, #9
 8009cec:	d002      	beq.n	8009cf4 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cf0:	2209      	movs	r2, #9
 8009cf2:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	781a      	ldrb	r2, [r3, #0]
 8009cf8:	6a3b      	ldr	r3, [r7, #32]
 8009cfa:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	785a      	ldrb	r2, [r3, #1]
 8009d00:	6a3b      	ldr	r3, [r7, #32]
 8009d02:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	3302      	adds	r3, #2
 8009d08:	781b      	ldrb	r3, [r3, #0]
 8009d0a:	461a      	mov	r2, r3
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	3303      	adds	r3, #3
 8009d10:	781b      	ldrb	r3, [r3, #0]
 8009d12:	021b      	lsls	r3, r3, #8
 8009d14:	b29b      	uxth	r3, r3
 8009d16:	4313      	orrs	r3, r2
 8009d18:	b29b      	uxth	r3, r3
 8009d1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d1e:	bf28      	it	cs
 8009d20:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8009d24:	b29a      	uxth	r2, r3
 8009d26:	6a3b      	ldr	r3, [r7, #32]
 8009d28:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	791a      	ldrb	r2, [r3, #4]
 8009d2e:	6a3b      	ldr	r3, [r7, #32]
 8009d30:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	795a      	ldrb	r2, [r3, #5]
 8009d36:	6a3b      	ldr	r3, [r7, #32]
 8009d38:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	799a      	ldrb	r2, [r3, #6]
 8009d3e:	6a3b      	ldr	r3, [r7, #32]
 8009d40:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	79da      	ldrb	r2, [r3, #7]
 8009d46:	6a3b      	ldr	r3, [r7, #32]
 8009d48:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	7a1a      	ldrb	r2, [r3, #8]
 8009d4e:	6a3b      	ldr	r3, [r7, #32]
 8009d50:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009d52:	88fb      	ldrh	r3, [r7, #6]
 8009d54:	2b09      	cmp	r3, #9
 8009d56:	f240 809d 	bls.w	8009e94 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8009d5a:	2309      	movs	r3, #9
 8009d5c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009d62:	e081      	b.n	8009e68 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009d64:	f107 0316 	add.w	r3, r7, #22
 8009d68:	4619      	mov	r1, r3
 8009d6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d6c:	f000 f9e7 	bl	800a13e <USBH_GetNextDesc>
 8009d70:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8009d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d74:	785b      	ldrb	r3, [r3, #1]
 8009d76:	2b04      	cmp	r3, #4
 8009d78:	d176      	bne.n	8009e68 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8009d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d7c:	781b      	ldrb	r3, [r3, #0]
 8009d7e:	2b09      	cmp	r3, #9
 8009d80:	d002      	beq.n	8009d88 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d84:	2209      	movs	r2, #9
 8009d86:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009d88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009d8c:	221a      	movs	r2, #26
 8009d8e:	fb02 f303 	mul.w	r3, r2, r3
 8009d92:	3308      	adds	r3, #8
 8009d94:	6a3a      	ldr	r2, [r7, #32]
 8009d96:	4413      	add	r3, r2
 8009d98:	3302      	adds	r3, #2
 8009d9a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009d9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009d9e:	69f8      	ldr	r0, [r7, #28]
 8009da0:	f000 f87e 	bl	8009ea0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009da4:	2300      	movs	r3, #0
 8009da6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8009daa:	2300      	movs	r3, #0
 8009dac:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009dae:	e043      	b.n	8009e38 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009db0:	f107 0316 	add.w	r3, r7, #22
 8009db4:	4619      	mov	r1, r3
 8009db6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009db8:	f000 f9c1 	bl	800a13e <USBH_GetNextDesc>
 8009dbc:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dc0:	785b      	ldrb	r3, [r3, #1]
 8009dc2:	2b05      	cmp	r3, #5
 8009dc4:	d138      	bne.n	8009e38 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8009dc6:	69fb      	ldr	r3, [r7, #28]
 8009dc8:	795b      	ldrb	r3, [r3, #5]
 8009dca:	2b01      	cmp	r3, #1
 8009dcc:	d113      	bne.n	8009df6 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009dce:	69fb      	ldr	r3, [r7, #28]
 8009dd0:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8009dd2:	2b02      	cmp	r3, #2
 8009dd4:	d003      	beq.n	8009dde <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009dd6:	69fb      	ldr	r3, [r7, #28]
 8009dd8:	799b      	ldrb	r3, [r3, #6]
 8009dda:	2b03      	cmp	r3, #3
 8009ddc:	d10b      	bne.n	8009df6 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009dde:	69fb      	ldr	r3, [r7, #28]
 8009de0:	79db      	ldrb	r3, [r3, #7]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d10b      	bne.n	8009dfe <USBH_ParseCfgDesc+0x14e>
 8009de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009de8:	781b      	ldrb	r3, [r3, #0]
 8009dea:	2b09      	cmp	r3, #9
 8009dec:	d007      	beq.n	8009dfe <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8009dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009df0:	2209      	movs	r2, #9
 8009df2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009df4:	e003      	b.n	8009dfe <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8009df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009df8:	2207      	movs	r2, #7
 8009dfa:	701a      	strb	r2, [r3, #0]
 8009dfc:	e000      	b.n	8009e00 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009dfe:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009e00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e04:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009e08:	3201      	adds	r2, #1
 8009e0a:	00d2      	lsls	r2, r2, #3
 8009e0c:	211a      	movs	r1, #26
 8009e0e:	fb01 f303 	mul.w	r3, r1, r3
 8009e12:	4413      	add	r3, r2
 8009e14:	3308      	adds	r3, #8
 8009e16:	6a3a      	ldr	r2, [r7, #32]
 8009e18:	4413      	add	r3, r2
 8009e1a:	3304      	adds	r3, #4
 8009e1c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8009e1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009e20:	69b9      	ldr	r1, [r7, #24]
 8009e22:	68f8      	ldr	r0, [r7, #12]
 8009e24:	f000 f870 	bl	8009f08 <USBH_ParseEPDesc>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8009e2e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009e32:	3301      	adds	r3, #1
 8009e34:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009e38:	69fb      	ldr	r3, [r7, #28]
 8009e3a:	791b      	ldrb	r3, [r3, #4]
 8009e3c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009e40:	429a      	cmp	r2, r3
 8009e42:	d204      	bcs.n	8009e4e <USBH_ParseCfgDesc+0x19e>
 8009e44:	6a3b      	ldr	r3, [r7, #32]
 8009e46:	885a      	ldrh	r2, [r3, #2]
 8009e48:	8afb      	ldrh	r3, [r7, #22]
 8009e4a:	429a      	cmp	r2, r3
 8009e4c:	d8b0      	bhi.n	8009db0 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009e4e:	69fb      	ldr	r3, [r7, #28]
 8009e50:	791b      	ldrb	r3, [r3, #4]
 8009e52:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009e56:	429a      	cmp	r2, r3
 8009e58:	d201      	bcs.n	8009e5e <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8009e5a:	2303      	movs	r3, #3
 8009e5c:	e01c      	b.n	8009e98 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8009e5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e62:	3301      	adds	r3, #1
 8009e64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009e68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e6c:	2b01      	cmp	r3, #1
 8009e6e:	d805      	bhi.n	8009e7c <USBH_ParseCfgDesc+0x1cc>
 8009e70:	6a3b      	ldr	r3, [r7, #32]
 8009e72:	885a      	ldrh	r2, [r3, #2]
 8009e74:	8afb      	ldrh	r3, [r7, #22]
 8009e76:	429a      	cmp	r2, r3
 8009e78:	f63f af74 	bhi.w	8009d64 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009e7c:	6a3b      	ldr	r3, [r7, #32]
 8009e7e:	791b      	ldrb	r3, [r3, #4]
 8009e80:	2b02      	cmp	r3, #2
 8009e82:	bf28      	it	cs
 8009e84:	2302      	movcs	r3, #2
 8009e86:	b2db      	uxtb	r3, r3
 8009e88:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	d201      	bcs.n	8009e94 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8009e90:	2303      	movs	r3, #3
 8009e92:	e001      	b.n	8009e98 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8009e94:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3730      	adds	r7, #48	@ 0x30
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}

08009ea0 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b083      	sub	sp, #12
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
 8009ea8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	781a      	ldrb	r2, [r3, #0]
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	785a      	ldrb	r2, [r3, #1]
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	789a      	ldrb	r2, [r3, #2]
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	78da      	ldrb	r2, [r3, #3]
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	3304      	adds	r3, #4
 8009ece:	781b      	ldrb	r3, [r3, #0]
 8009ed0:	2b02      	cmp	r3, #2
 8009ed2:	bf28      	it	cs
 8009ed4:	2302      	movcs	r3, #2
 8009ed6:	b2da      	uxtb	r2, r3
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	795a      	ldrb	r2, [r3, #5]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	799a      	ldrb	r2, [r3, #6]
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	79da      	ldrb	r2, [r3, #7]
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	7a1a      	ldrb	r2, [r3, #8]
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	721a      	strb	r2, [r3, #8]
}
 8009efc:	bf00      	nop
 8009efe:	370c      	adds	r7, #12
 8009f00:	46bd      	mov	sp, r7
 8009f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f06:	4770      	bx	lr

08009f08 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b087      	sub	sp, #28
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	60f8      	str	r0, [r7, #12]
 8009f10:	60b9      	str	r1, [r7, #8]
 8009f12:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009f14:	2300      	movs	r3, #0
 8009f16:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	781a      	ldrb	r2, [r3, #0]
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	785a      	ldrb	r2, [r3, #1]
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	789a      	ldrb	r2, [r3, #2]
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	78da      	ldrb	r2, [r3, #3]
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	3304      	adds	r3, #4
 8009f3c:	781b      	ldrb	r3, [r3, #0]
 8009f3e:	461a      	mov	r2, r3
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	3305      	adds	r3, #5
 8009f44:	781b      	ldrb	r3, [r3, #0]
 8009f46:	021b      	lsls	r3, r3, #8
 8009f48:	b29b      	uxth	r3, r3
 8009f4a:	4313      	orrs	r3, r2
 8009f4c:	b29a      	uxth	r2, r3
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	799a      	ldrb	r2, [r3, #6]
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	889b      	ldrh	r3, [r3, #4]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d009      	beq.n	8009f76 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009f66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f6a:	d804      	bhi.n	8009f76 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009f70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f74:	d901      	bls.n	8009f7a <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8009f76:	2303      	movs	r3, #3
 8009f78:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d136      	bne.n	8009ff2 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	78db      	ldrb	r3, [r3, #3]
 8009f88:	f003 0303 	and.w	r3, r3, #3
 8009f8c:	2b02      	cmp	r3, #2
 8009f8e:	d108      	bne.n	8009fa2 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	889b      	ldrh	r3, [r3, #4]
 8009f94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f98:	f240 8097 	bls.w	800a0ca <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009f9c:	2303      	movs	r3, #3
 8009f9e:	75fb      	strb	r3, [r7, #23]
 8009fa0:	e093      	b.n	800a0ca <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	78db      	ldrb	r3, [r3, #3]
 8009fa6:	f003 0303 	and.w	r3, r3, #3
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d107      	bne.n	8009fbe <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	889b      	ldrh	r3, [r3, #4]
 8009fb2:	2b40      	cmp	r3, #64	@ 0x40
 8009fb4:	f240 8089 	bls.w	800a0ca <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009fb8:	2303      	movs	r3, #3
 8009fba:	75fb      	strb	r3, [r7, #23]
 8009fbc:	e085      	b.n	800a0ca <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	78db      	ldrb	r3, [r3, #3]
 8009fc2:	f003 0303 	and.w	r3, r3, #3
 8009fc6:	2b01      	cmp	r3, #1
 8009fc8:	d005      	beq.n	8009fd6 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	78db      	ldrb	r3, [r3, #3]
 8009fce:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009fd2:	2b03      	cmp	r3, #3
 8009fd4:	d10a      	bne.n	8009fec <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	799b      	ldrb	r3, [r3, #6]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d003      	beq.n	8009fe6 <USBH_ParseEPDesc+0xde>
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	799b      	ldrb	r3, [r3, #6]
 8009fe2:	2b10      	cmp	r3, #16
 8009fe4:	d970      	bls.n	800a0c8 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8009fe6:	2303      	movs	r3, #3
 8009fe8:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009fea:	e06d      	b.n	800a0c8 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009fec:	2303      	movs	r3, #3
 8009fee:	75fb      	strb	r3, [r7, #23]
 8009ff0:	e06b      	b.n	800a0ca <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009ff8:	2b01      	cmp	r3, #1
 8009ffa:	d13c      	bne.n	800a076 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	78db      	ldrb	r3, [r3, #3]
 800a000:	f003 0303 	and.w	r3, r3, #3
 800a004:	2b02      	cmp	r3, #2
 800a006:	d005      	beq.n	800a014 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	78db      	ldrb	r3, [r3, #3]
 800a00c:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a010:	2b00      	cmp	r3, #0
 800a012:	d106      	bne.n	800a022 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	889b      	ldrh	r3, [r3, #4]
 800a018:	2b40      	cmp	r3, #64	@ 0x40
 800a01a:	d956      	bls.n	800a0ca <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a01c:	2303      	movs	r3, #3
 800a01e:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a020:	e053      	b.n	800a0ca <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	78db      	ldrb	r3, [r3, #3]
 800a026:	f003 0303 	and.w	r3, r3, #3
 800a02a:	2b01      	cmp	r3, #1
 800a02c:	d10e      	bne.n	800a04c <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	799b      	ldrb	r3, [r3, #6]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d007      	beq.n	800a046 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800a03a:	2b10      	cmp	r3, #16
 800a03c:	d803      	bhi.n	800a046 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800a042:	2b40      	cmp	r3, #64	@ 0x40
 800a044:	d941      	bls.n	800a0ca <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a046:	2303      	movs	r3, #3
 800a048:	75fb      	strb	r3, [r7, #23]
 800a04a:	e03e      	b.n	800a0ca <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	78db      	ldrb	r3, [r3, #3]
 800a050:	f003 0303 	and.w	r3, r3, #3
 800a054:	2b03      	cmp	r3, #3
 800a056:	d10b      	bne.n	800a070 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	799b      	ldrb	r3, [r3, #6]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d004      	beq.n	800a06a <USBH_ParseEPDesc+0x162>
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	889b      	ldrh	r3, [r3, #4]
 800a064:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a068:	d32f      	bcc.n	800a0ca <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a06a:	2303      	movs	r3, #3
 800a06c:	75fb      	strb	r3, [r7, #23]
 800a06e:	e02c      	b.n	800a0ca <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a070:	2303      	movs	r3, #3
 800a072:	75fb      	strb	r3, [r7, #23]
 800a074:	e029      	b.n	800a0ca <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a07c:	2b02      	cmp	r3, #2
 800a07e:	d120      	bne.n	800a0c2 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	78db      	ldrb	r3, [r3, #3]
 800a084:	f003 0303 	and.w	r3, r3, #3
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d106      	bne.n	800a09a <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	889b      	ldrh	r3, [r3, #4]
 800a090:	2b08      	cmp	r3, #8
 800a092:	d01a      	beq.n	800a0ca <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a094:	2303      	movs	r3, #3
 800a096:	75fb      	strb	r3, [r7, #23]
 800a098:	e017      	b.n	800a0ca <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	78db      	ldrb	r3, [r3, #3]
 800a09e:	f003 0303 	and.w	r3, r3, #3
 800a0a2:	2b03      	cmp	r3, #3
 800a0a4:	d10a      	bne.n	800a0bc <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	799b      	ldrb	r3, [r3, #6]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d003      	beq.n	800a0b6 <USBH_ParseEPDesc+0x1ae>
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	889b      	ldrh	r3, [r3, #4]
 800a0b2:	2b08      	cmp	r3, #8
 800a0b4:	d909      	bls.n	800a0ca <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a0b6:	2303      	movs	r3, #3
 800a0b8:	75fb      	strb	r3, [r7, #23]
 800a0ba:	e006      	b.n	800a0ca <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a0bc:	2303      	movs	r3, #3
 800a0be:	75fb      	strb	r3, [r7, #23]
 800a0c0:	e003      	b.n	800a0ca <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a0c2:	2303      	movs	r3, #3
 800a0c4:	75fb      	strb	r3, [r7, #23]
 800a0c6:	e000      	b.n	800a0ca <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a0c8:	bf00      	nop
  }

  return status;
 800a0ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	371c      	adds	r7, #28
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d6:	4770      	bx	lr

0800a0d8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b087      	sub	sp, #28
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	60f8      	str	r0, [r7, #12]
 800a0e0:	60b9      	str	r1, [r7, #8]
 800a0e2:	4613      	mov	r3, r2
 800a0e4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	3301      	adds	r3, #1
 800a0ea:	781b      	ldrb	r3, [r3, #0]
 800a0ec:	2b03      	cmp	r3, #3
 800a0ee:	d120      	bne.n	800a132 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	781b      	ldrb	r3, [r3, #0]
 800a0f4:	1e9a      	subs	r2, r3, #2
 800a0f6:	88fb      	ldrh	r3, [r7, #6]
 800a0f8:	4293      	cmp	r3, r2
 800a0fa:	bf28      	it	cs
 800a0fc:	4613      	movcs	r3, r2
 800a0fe:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	3302      	adds	r3, #2
 800a104:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a106:	2300      	movs	r3, #0
 800a108:	82fb      	strh	r3, [r7, #22]
 800a10a:	e00b      	b.n	800a124 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a10c:	8afb      	ldrh	r3, [r7, #22]
 800a10e:	68fa      	ldr	r2, [r7, #12]
 800a110:	4413      	add	r3, r2
 800a112:	781a      	ldrb	r2, [r3, #0]
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	3301      	adds	r3, #1
 800a11c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a11e:	8afb      	ldrh	r3, [r7, #22]
 800a120:	3302      	adds	r3, #2
 800a122:	82fb      	strh	r3, [r7, #22]
 800a124:	8afa      	ldrh	r2, [r7, #22]
 800a126:	8abb      	ldrh	r3, [r7, #20]
 800a128:	429a      	cmp	r2, r3
 800a12a:	d3ef      	bcc.n	800a10c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	2200      	movs	r2, #0
 800a130:	701a      	strb	r2, [r3, #0]
  }
}
 800a132:	bf00      	nop
 800a134:	371c      	adds	r7, #28
 800a136:	46bd      	mov	sp, r7
 800a138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13c:	4770      	bx	lr

0800a13e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a13e:	b480      	push	{r7}
 800a140:	b085      	sub	sp, #20
 800a142:	af00      	add	r7, sp, #0
 800a144:	6078      	str	r0, [r7, #4]
 800a146:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	881b      	ldrh	r3, [r3, #0]
 800a14c:	687a      	ldr	r2, [r7, #4]
 800a14e:	7812      	ldrb	r2, [r2, #0]
 800a150:	4413      	add	r3, r2
 800a152:	b29a      	uxth	r2, r3
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	4413      	add	r3, r2
 800a162:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a164:	68fb      	ldr	r3, [r7, #12]
}
 800a166:	4618      	mov	r0, r3
 800a168:	3714      	adds	r7, #20
 800a16a:	46bd      	mov	sp, r7
 800a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a170:	4770      	bx	lr

0800a172 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a172:	b580      	push	{r7, lr}
 800a174:	b086      	sub	sp, #24
 800a176:	af00      	add	r7, sp, #0
 800a178:	60f8      	str	r0, [r7, #12]
 800a17a:	60b9      	str	r1, [r7, #8]
 800a17c:	4613      	mov	r3, r2
 800a17e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a180:	2301      	movs	r3, #1
 800a182:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	789b      	ldrb	r3, [r3, #2]
 800a188:	2b01      	cmp	r3, #1
 800a18a:	d002      	beq.n	800a192 <USBH_CtlReq+0x20>
 800a18c:	2b02      	cmp	r3, #2
 800a18e:	d00f      	beq.n	800a1b0 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a190:	e027      	b.n	800a1e2 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	68ba      	ldr	r2, [r7, #8]
 800a196:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	88fa      	ldrh	r2, [r7, #6]
 800a19c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	2201      	movs	r2, #1
 800a1a2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	2202      	movs	r2, #2
 800a1a8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	75fb      	strb	r3, [r7, #23]
      break;
 800a1ae:	e018      	b.n	800a1e2 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a1b0:	68f8      	ldr	r0, [r7, #12]
 800a1b2:	f000 f81b 	bl	800a1ec <USBH_HandleControl>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a1ba:	7dfb      	ldrb	r3, [r7, #23]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d002      	beq.n	800a1c6 <USBH_CtlReq+0x54>
 800a1c0:	7dfb      	ldrb	r3, [r7, #23]
 800a1c2:	2b03      	cmp	r3, #3
 800a1c4:	d106      	bne.n	800a1d4 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	2201      	movs	r2, #1
 800a1ca:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	761a      	strb	r2, [r3, #24]
      break;
 800a1d2:	e005      	b.n	800a1e0 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a1d4:	7dfb      	ldrb	r3, [r7, #23]
 800a1d6:	2b02      	cmp	r3, #2
 800a1d8:	d102      	bne.n	800a1e0 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2201      	movs	r2, #1
 800a1de:	709a      	strb	r2, [r3, #2]
      break;
 800a1e0:	bf00      	nop
  }
  return status;
 800a1e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3718      	adds	r7, #24
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}

0800a1ec <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b086      	sub	sp, #24
 800a1f0:	af02      	add	r7, sp, #8
 800a1f2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	7e1b      	ldrb	r3, [r3, #24]
 800a200:	3b01      	subs	r3, #1
 800a202:	2b0a      	cmp	r3, #10
 800a204:	f200 8156 	bhi.w	800a4b4 <USBH_HandleControl+0x2c8>
 800a208:	a201      	add	r2, pc, #4	@ (adr r2, 800a210 <USBH_HandleControl+0x24>)
 800a20a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a20e:	bf00      	nop
 800a210:	0800a23d 	.word	0x0800a23d
 800a214:	0800a257 	.word	0x0800a257
 800a218:	0800a2c1 	.word	0x0800a2c1
 800a21c:	0800a2e7 	.word	0x0800a2e7
 800a220:	0800a31f 	.word	0x0800a31f
 800a224:	0800a349 	.word	0x0800a349
 800a228:	0800a39b 	.word	0x0800a39b
 800a22c:	0800a3bd 	.word	0x0800a3bd
 800a230:	0800a3f9 	.word	0x0800a3f9
 800a234:	0800a41f 	.word	0x0800a41f
 800a238:	0800a45d 	.word	0x0800a45d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f103 0110 	add.w	r1, r3, #16
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	795b      	ldrb	r3, [r3, #5]
 800a246:	461a      	mov	r2, r3
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	f000 f943 	bl	800a4d4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2202      	movs	r2, #2
 800a252:	761a      	strb	r2, [r3, #24]
      break;
 800a254:	e139      	b.n	800a4ca <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	795b      	ldrb	r3, [r3, #5]
 800a25a:	4619      	mov	r1, r3
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f000 fcc5 	bl	800abec <USBH_LL_GetURBState>
 800a262:	4603      	mov	r3, r0
 800a264:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a266:	7bbb      	ldrb	r3, [r7, #14]
 800a268:	2b01      	cmp	r3, #1
 800a26a:	d11e      	bne.n	800a2aa <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	7c1b      	ldrb	r3, [r3, #16]
 800a270:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a274:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	8adb      	ldrh	r3, [r3, #22]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d00a      	beq.n	800a294 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a27e:	7b7b      	ldrb	r3, [r7, #13]
 800a280:	2b80      	cmp	r3, #128	@ 0x80
 800a282:	d103      	bne.n	800a28c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2203      	movs	r2, #3
 800a288:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a28a:	e115      	b.n	800a4b8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2205      	movs	r2, #5
 800a290:	761a      	strb	r2, [r3, #24]
      break;
 800a292:	e111      	b.n	800a4b8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a294:	7b7b      	ldrb	r3, [r7, #13]
 800a296:	2b80      	cmp	r3, #128	@ 0x80
 800a298:	d103      	bne.n	800a2a2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2209      	movs	r2, #9
 800a29e:	761a      	strb	r2, [r3, #24]
      break;
 800a2a0:	e10a      	b.n	800a4b8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2207      	movs	r2, #7
 800a2a6:	761a      	strb	r2, [r3, #24]
      break;
 800a2a8:	e106      	b.n	800a4b8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a2aa:	7bbb      	ldrb	r3, [r7, #14]
 800a2ac:	2b04      	cmp	r3, #4
 800a2ae:	d003      	beq.n	800a2b8 <USBH_HandleControl+0xcc>
 800a2b0:	7bbb      	ldrb	r3, [r7, #14]
 800a2b2:	2b02      	cmp	r3, #2
 800a2b4:	f040 8100 	bne.w	800a4b8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	220b      	movs	r2, #11
 800a2bc:	761a      	strb	r2, [r3, #24]
      break;
 800a2be:	e0fb      	b.n	800a4b8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a2c6:	b29a      	uxth	r2, r3
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6899      	ldr	r1, [r3, #8]
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	899a      	ldrh	r2, [r3, #12]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	791b      	ldrb	r3, [r3, #4]
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f000 f93a 	bl	800a552 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2204      	movs	r2, #4
 800a2e2:	761a      	strb	r2, [r3, #24]
      break;
 800a2e4:	e0f1      	b.n	800a4ca <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	791b      	ldrb	r3, [r3, #4]
 800a2ea:	4619      	mov	r1, r3
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f000 fc7d 	bl	800abec <USBH_LL_GetURBState>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a2f6:	7bbb      	ldrb	r3, [r7, #14]
 800a2f8:	2b01      	cmp	r3, #1
 800a2fa:	d102      	bne.n	800a302 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2209      	movs	r2, #9
 800a300:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a302:	7bbb      	ldrb	r3, [r7, #14]
 800a304:	2b05      	cmp	r3, #5
 800a306:	d102      	bne.n	800a30e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a308:	2303      	movs	r3, #3
 800a30a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a30c:	e0d6      	b.n	800a4bc <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a30e:	7bbb      	ldrb	r3, [r7, #14]
 800a310:	2b04      	cmp	r3, #4
 800a312:	f040 80d3 	bne.w	800a4bc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	220b      	movs	r2, #11
 800a31a:	761a      	strb	r2, [r3, #24]
      break;
 800a31c:	e0ce      	b.n	800a4bc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6899      	ldr	r1, [r3, #8]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	899a      	ldrh	r2, [r3, #12]
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	795b      	ldrb	r3, [r3, #5]
 800a32a:	2001      	movs	r0, #1
 800a32c:	9000      	str	r0, [sp, #0]
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f000 f8ea 	bl	800a508 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a33a:	b29a      	uxth	r2, r3
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2206      	movs	r2, #6
 800a344:	761a      	strb	r2, [r3, #24]
      break;
 800a346:	e0c0      	b.n	800a4ca <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	795b      	ldrb	r3, [r3, #5]
 800a34c:	4619      	mov	r1, r3
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f000 fc4c 	bl	800abec <USBH_LL_GetURBState>
 800a354:	4603      	mov	r3, r0
 800a356:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a358:	7bbb      	ldrb	r3, [r7, #14]
 800a35a:	2b01      	cmp	r3, #1
 800a35c:	d103      	bne.n	800a366 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2207      	movs	r2, #7
 800a362:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a364:	e0ac      	b.n	800a4c0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a366:	7bbb      	ldrb	r3, [r7, #14]
 800a368:	2b05      	cmp	r3, #5
 800a36a:	d105      	bne.n	800a378 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	220c      	movs	r2, #12
 800a370:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a372:	2303      	movs	r3, #3
 800a374:	73fb      	strb	r3, [r7, #15]
      break;
 800a376:	e0a3      	b.n	800a4c0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a378:	7bbb      	ldrb	r3, [r7, #14]
 800a37a:	2b02      	cmp	r3, #2
 800a37c:	d103      	bne.n	800a386 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2205      	movs	r2, #5
 800a382:	761a      	strb	r2, [r3, #24]
      break;
 800a384:	e09c      	b.n	800a4c0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a386:	7bbb      	ldrb	r3, [r7, #14]
 800a388:	2b04      	cmp	r3, #4
 800a38a:	f040 8099 	bne.w	800a4c0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	220b      	movs	r2, #11
 800a392:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a394:	2302      	movs	r3, #2
 800a396:	73fb      	strb	r3, [r7, #15]
      break;
 800a398:	e092      	b.n	800a4c0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	791b      	ldrb	r3, [r3, #4]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	2100      	movs	r1, #0
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f000 f8d5 	bl	800a552 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a3ae:	b29a      	uxth	r2, r3
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2208      	movs	r2, #8
 800a3b8:	761a      	strb	r2, [r3, #24]

      break;
 800a3ba:	e086      	b.n	800a4ca <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	791b      	ldrb	r3, [r3, #4]
 800a3c0:	4619      	mov	r1, r3
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f000 fc12 	bl	800abec <USBH_LL_GetURBState>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a3cc:	7bbb      	ldrb	r3, [r7, #14]
 800a3ce:	2b01      	cmp	r3, #1
 800a3d0:	d105      	bne.n	800a3de <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	220d      	movs	r2, #13
 800a3d6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a3d8:	2300      	movs	r3, #0
 800a3da:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a3dc:	e072      	b.n	800a4c4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a3de:	7bbb      	ldrb	r3, [r7, #14]
 800a3e0:	2b04      	cmp	r3, #4
 800a3e2:	d103      	bne.n	800a3ec <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	220b      	movs	r2, #11
 800a3e8:	761a      	strb	r2, [r3, #24]
      break;
 800a3ea:	e06b      	b.n	800a4c4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a3ec:	7bbb      	ldrb	r3, [r7, #14]
 800a3ee:	2b05      	cmp	r3, #5
 800a3f0:	d168      	bne.n	800a4c4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a3f2:	2303      	movs	r3, #3
 800a3f4:	73fb      	strb	r3, [r7, #15]
      break;
 800a3f6:	e065      	b.n	800a4c4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	795b      	ldrb	r3, [r3, #5]
 800a3fc:	2201      	movs	r2, #1
 800a3fe:	9200      	str	r2, [sp, #0]
 800a400:	2200      	movs	r2, #0
 800a402:	2100      	movs	r1, #0
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f000 f87f 	bl	800a508 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a410:	b29a      	uxth	r2, r3
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	220a      	movs	r2, #10
 800a41a:	761a      	strb	r2, [r3, #24]
      break;
 800a41c:	e055      	b.n	800a4ca <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	795b      	ldrb	r3, [r3, #5]
 800a422:	4619      	mov	r1, r3
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f000 fbe1 	bl	800abec <USBH_LL_GetURBState>
 800a42a:	4603      	mov	r3, r0
 800a42c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a42e:	7bbb      	ldrb	r3, [r7, #14]
 800a430:	2b01      	cmp	r3, #1
 800a432:	d105      	bne.n	800a440 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a434:	2300      	movs	r3, #0
 800a436:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	220d      	movs	r2, #13
 800a43c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a43e:	e043      	b.n	800a4c8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a440:	7bbb      	ldrb	r3, [r7, #14]
 800a442:	2b02      	cmp	r3, #2
 800a444:	d103      	bne.n	800a44e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2209      	movs	r2, #9
 800a44a:	761a      	strb	r2, [r3, #24]
      break;
 800a44c:	e03c      	b.n	800a4c8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a44e:	7bbb      	ldrb	r3, [r7, #14]
 800a450:	2b04      	cmp	r3, #4
 800a452:	d139      	bne.n	800a4c8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	220b      	movs	r2, #11
 800a458:	761a      	strb	r2, [r3, #24]
      break;
 800a45a:	e035      	b.n	800a4c8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	7e5b      	ldrb	r3, [r3, #25]
 800a460:	3301      	adds	r3, #1
 800a462:	b2da      	uxtb	r2, r3
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	765a      	strb	r2, [r3, #25]
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	7e5b      	ldrb	r3, [r3, #25]
 800a46c:	2b02      	cmp	r3, #2
 800a46e:	d806      	bhi.n	800a47e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2201      	movs	r2, #1
 800a474:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2201      	movs	r2, #1
 800a47a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a47c:	e025      	b.n	800a4ca <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a484:	2106      	movs	r1, #6
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2200      	movs	r2, #0
 800a48e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	795b      	ldrb	r3, [r3, #5]
 800a494:	4619      	mov	r1, r3
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f000 f90c 	bl	800a6b4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	791b      	ldrb	r3, [r3, #4]
 800a4a0:	4619      	mov	r1, r3
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f000 f906 	bl	800a6b4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a4ae:	2302      	movs	r3, #2
 800a4b0:	73fb      	strb	r3, [r7, #15]
      break;
 800a4b2:	e00a      	b.n	800a4ca <USBH_HandleControl+0x2de>

    default:
      break;
 800a4b4:	bf00      	nop
 800a4b6:	e008      	b.n	800a4ca <USBH_HandleControl+0x2de>
      break;
 800a4b8:	bf00      	nop
 800a4ba:	e006      	b.n	800a4ca <USBH_HandleControl+0x2de>
      break;
 800a4bc:	bf00      	nop
 800a4be:	e004      	b.n	800a4ca <USBH_HandleControl+0x2de>
      break;
 800a4c0:	bf00      	nop
 800a4c2:	e002      	b.n	800a4ca <USBH_HandleControl+0x2de>
      break;
 800a4c4:	bf00      	nop
 800a4c6:	e000      	b.n	800a4ca <USBH_HandleControl+0x2de>
      break;
 800a4c8:	bf00      	nop
  }

  return status;
 800a4ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3710      	adds	r7, #16
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}

0800a4d4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b088      	sub	sp, #32
 800a4d8:	af04      	add	r7, sp, #16
 800a4da:	60f8      	str	r0, [r7, #12]
 800a4dc:	60b9      	str	r1, [r7, #8]
 800a4de:	4613      	mov	r3, r2
 800a4e0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a4e2:	79f9      	ldrb	r1, [r7, #7]
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	9303      	str	r3, [sp, #12]
 800a4e8:	2308      	movs	r3, #8
 800a4ea:	9302      	str	r3, [sp, #8]
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	9301      	str	r3, [sp, #4]
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	9300      	str	r3, [sp, #0]
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	68f8      	ldr	r0, [r7, #12]
 800a4fa:	f000 fb46 	bl	800ab8a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a4fe:	2300      	movs	r3, #0
}
 800a500:	4618      	mov	r0, r3
 800a502:	3710      	adds	r7, #16
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}

0800a508 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b088      	sub	sp, #32
 800a50c:	af04      	add	r7, sp, #16
 800a50e:	60f8      	str	r0, [r7, #12]
 800a510:	60b9      	str	r1, [r7, #8]
 800a512:	4611      	mov	r1, r2
 800a514:	461a      	mov	r2, r3
 800a516:	460b      	mov	r3, r1
 800a518:	80fb      	strh	r3, [r7, #6]
 800a51a:	4613      	mov	r3, r2
 800a51c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a524:	2b00      	cmp	r3, #0
 800a526:	d001      	beq.n	800a52c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a528:	2300      	movs	r3, #0
 800a52a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a52c:	7979      	ldrb	r1, [r7, #5]
 800a52e:	7e3b      	ldrb	r3, [r7, #24]
 800a530:	9303      	str	r3, [sp, #12]
 800a532:	88fb      	ldrh	r3, [r7, #6]
 800a534:	9302      	str	r3, [sp, #8]
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	9301      	str	r3, [sp, #4]
 800a53a:	2301      	movs	r3, #1
 800a53c:	9300      	str	r3, [sp, #0]
 800a53e:	2300      	movs	r3, #0
 800a540:	2200      	movs	r2, #0
 800a542:	68f8      	ldr	r0, [r7, #12]
 800a544:	f000 fb21 	bl	800ab8a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a548:	2300      	movs	r3, #0
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3710      	adds	r7, #16
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}

0800a552 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a552:	b580      	push	{r7, lr}
 800a554:	b088      	sub	sp, #32
 800a556:	af04      	add	r7, sp, #16
 800a558:	60f8      	str	r0, [r7, #12]
 800a55a:	60b9      	str	r1, [r7, #8]
 800a55c:	4611      	mov	r1, r2
 800a55e:	461a      	mov	r2, r3
 800a560:	460b      	mov	r3, r1
 800a562:	80fb      	strh	r3, [r7, #6]
 800a564:	4613      	mov	r3, r2
 800a566:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a568:	7979      	ldrb	r1, [r7, #5]
 800a56a:	2300      	movs	r3, #0
 800a56c:	9303      	str	r3, [sp, #12]
 800a56e:	88fb      	ldrh	r3, [r7, #6]
 800a570:	9302      	str	r3, [sp, #8]
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	9301      	str	r3, [sp, #4]
 800a576:	2301      	movs	r3, #1
 800a578:	9300      	str	r3, [sp, #0]
 800a57a:	2300      	movs	r3, #0
 800a57c:	2201      	movs	r2, #1
 800a57e:	68f8      	ldr	r0, [r7, #12]
 800a580:	f000 fb03 	bl	800ab8a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a584:	2300      	movs	r3, #0

}
 800a586:	4618      	mov	r0, r3
 800a588:	3710      	adds	r7, #16
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}

0800a58e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a58e:	b580      	push	{r7, lr}
 800a590:	b088      	sub	sp, #32
 800a592:	af04      	add	r7, sp, #16
 800a594:	60f8      	str	r0, [r7, #12]
 800a596:	60b9      	str	r1, [r7, #8]
 800a598:	4611      	mov	r1, r2
 800a59a:	461a      	mov	r2, r3
 800a59c:	460b      	mov	r3, r1
 800a59e:	80fb      	strh	r3, [r7, #6]
 800a5a0:	4613      	mov	r3, r2
 800a5a2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d001      	beq.n	800a5b2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a5b2:	7979      	ldrb	r1, [r7, #5]
 800a5b4:	7e3b      	ldrb	r3, [r7, #24]
 800a5b6:	9303      	str	r3, [sp, #12]
 800a5b8:	88fb      	ldrh	r3, [r7, #6]
 800a5ba:	9302      	str	r3, [sp, #8]
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	9301      	str	r3, [sp, #4]
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	9300      	str	r3, [sp, #0]
 800a5c4:	2302      	movs	r3, #2
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	68f8      	ldr	r0, [r7, #12]
 800a5ca:	f000 fade 	bl	800ab8a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a5ce:	2300      	movs	r3, #0
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	3710      	adds	r7, #16
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}

0800a5d8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b088      	sub	sp, #32
 800a5dc:	af04      	add	r7, sp, #16
 800a5de:	60f8      	str	r0, [r7, #12]
 800a5e0:	60b9      	str	r1, [r7, #8]
 800a5e2:	4611      	mov	r1, r2
 800a5e4:	461a      	mov	r2, r3
 800a5e6:	460b      	mov	r3, r1
 800a5e8:	80fb      	strh	r3, [r7, #6]
 800a5ea:	4613      	mov	r3, r2
 800a5ec:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a5ee:	7979      	ldrb	r1, [r7, #5]
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	9303      	str	r3, [sp, #12]
 800a5f4:	88fb      	ldrh	r3, [r7, #6]
 800a5f6:	9302      	str	r3, [sp, #8]
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	9301      	str	r3, [sp, #4]
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	9300      	str	r3, [sp, #0]
 800a600:	2302      	movs	r3, #2
 800a602:	2201      	movs	r2, #1
 800a604:	68f8      	ldr	r0, [r7, #12]
 800a606:	f000 fac0 	bl	800ab8a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a60a:	2300      	movs	r3, #0
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3710      	adds	r7, #16
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}

0800a614 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b086      	sub	sp, #24
 800a618:	af04      	add	r7, sp, #16
 800a61a:	6078      	str	r0, [r7, #4]
 800a61c:	4608      	mov	r0, r1
 800a61e:	4611      	mov	r1, r2
 800a620:	461a      	mov	r2, r3
 800a622:	4603      	mov	r3, r0
 800a624:	70fb      	strb	r3, [r7, #3]
 800a626:	460b      	mov	r3, r1
 800a628:	70bb      	strb	r3, [r7, #2]
 800a62a:	4613      	mov	r3, r2
 800a62c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a62e:	7878      	ldrb	r0, [r7, #1]
 800a630:	78ba      	ldrb	r2, [r7, #2]
 800a632:	78f9      	ldrb	r1, [r7, #3]
 800a634:	8b3b      	ldrh	r3, [r7, #24]
 800a636:	9302      	str	r3, [sp, #8]
 800a638:	7d3b      	ldrb	r3, [r7, #20]
 800a63a:	9301      	str	r3, [sp, #4]
 800a63c:	7c3b      	ldrb	r3, [r7, #16]
 800a63e:	9300      	str	r3, [sp, #0]
 800a640:	4603      	mov	r3, r0
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f000 fa53 	bl	800aaee <USBH_LL_OpenPipe>

  return USBH_OK;
 800a648:	2300      	movs	r3, #0
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3708      	adds	r7, #8
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}

0800a652 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a652:	b580      	push	{r7, lr}
 800a654:	b082      	sub	sp, #8
 800a656:	af00      	add	r7, sp, #0
 800a658:	6078      	str	r0, [r7, #4]
 800a65a:	460b      	mov	r3, r1
 800a65c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a65e:	78fb      	ldrb	r3, [r7, #3]
 800a660:	4619      	mov	r1, r3
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f000 fa72 	bl	800ab4c <USBH_LL_ClosePipe>

  return USBH_OK;
 800a668:	2300      	movs	r3, #0
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3708      	adds	r7, #8
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}

0800a672 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a672:	b580      	push	{r7, lr}
 800a674:	b084      	sub	sp, #16
 800a676:	af00      	add	r7, sp, #0
 800a678:	6078      	str	r0, [r7, #4]
 800a67a:	460b      	mov	r3, r1
 800a67c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f000 f836 	bl	800a6f0 <USBH_GetFreePipe>
 800a684:	4603      	mov	r3, r0
 800a686:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a688:	89fb      	ldrh	r3, [r7, #14]
 800a68a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a68e:	4293      	cmp	r3, r2
 800a690:	d00a      	beq.n	800a6a8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a692:	78fa      	ldrb	r2, [r7, #3]
 800a694:	89fb      	ldrh	r3, [r7, #14]
 800a696:	f003 030f 	and.w	r3, r3, #15
 800a69a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a69e:	6879      	ldr	r1, [r7, #4]
 800a6a0:	33e0      	adds	r3, #224	@ 0xe0
 800a6a2:	009b      	lsls	r3, r3, #2
 800a6a4:	440b      	add	r3, r1
 800a6a6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a6a8:	89fb      	ldrh	r3, [r7, #14]
 800a6aa:	b2db      	uxtb	r3, r3
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	3710      	adds	r7, #16
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd80      	pop	{r7, pc}

0800a6b4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b083      	sub	sp, #12
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
 800a6bc:	460b      	mov	r3, r1
 800a6be:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a6c0:	78fb      	ldrb	r3, [r7, #3]
 800a6c2:	2b0f      	cmp	r3, #15
 800a6c4:	d80d      	bhi.n	800a6e2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a6c6:	78fb      	ldrb	r3, [r7, #3]
 800a6c8:	687a      	ldr	r2, [r7, #4]
 800a6ca:	33e0      	adds	r3, #224	@ 0xe0
 800a6cc:	009b      	lsls	r3, r3, #2
 800a6ce:	4413      	add	r3, r2
 800a6d0:	685a      	ldr	r2, [r3, #4]
 800a6d2:	78fb      	ldrb	r3, [r7, #3]
 800a6d4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a6d8:	6879      	ldr	r1, [r7, #4]
 800a6da:	33e0      	adds	r3, #224	@ 0xe0
 800a6dc:	009b      	lsls	r3, r3, #2
 800a6de:	440b      	add	r3, r1
 800a6e0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a6e2:	2300      	movs	r3, #0
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	370c      	adds	r7, #12
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ee:	4770      	bx	lr

0800a6f0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b085      	sub	sp, #20
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	73fb      	strb	r3, [r7, #15]
 800a700:	e00f      	b.n	800a722 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a702:	7bfb      	ldrb	r3, [r7, #15]
 800a704:	687a      	ldr	r2, [r7, #4]
 800a706:	33e0      	adds	r3, #224	@ 0xe0
 800a708:	009b      	lsls	r3, r3, #2
 800a70a:	4413      	add	r3, r2
 800a70c:	685b      	ldr	r3, [r3, #4]
 800a70e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a712:	2b00      	cmp	r3, #0
 800a714:	d102      	bne.n	800a71c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a716:	7bfb      	ldrb	r3, [r7, #15]
 800a718:	b29b      	uxth	r3, r3
 800a71a:	e007      	b.n	800a72c <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a71c:	7bfb      	ldrb	r3, [r7, #15]
 800a71e:	3301      	adds	r3, #1
 800a720:	73fb      	strb	r3, [r7, #15]
 800a722:	7bfb      	ldrb	r3, [r7, #15]
 800a724:	2b0f      	cmp	r3, #15
 800a726:	d9ec      	bls.n	800a702 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a728:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3714      	adds	r7, #20
 800a730:	46bd      	mov	sp, r7
 800a732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a736:	4770      	bx	lr

0800a738 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a73c:	2201      	movs	r2, #1
 800a73e:	490e      	ldr	r1, [pc, #56]	@ (800a778 <MX_USB_HOST_Init+0x40>)
 800a740:	480e      	ldr	r0, [pc, #56]	@ (800a77c <MX_USB_HOST_Init+0x44>)
 800a742:	f7fe fb15 	bl	8008d70 <USBH_Init>
 800a746:	4603      	mov	r3, r0
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d001      	beq.n	800a750 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a74c:	f7f7 fa6c 	bl	8001c28 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a750:	490b      	ldr	r1, [pc, #44]	@ (800a780 <MX_USB_HOST_Init+0x48>)
 800a752:	480a      	ldr	r0, [pc, #40]	@ (800a77c <MX_USB_HOST_Init+0x44>)
 800a754:	f7fe fbb9 	bl	8008eca <USBH_RegisterClass>
 800a758:	4603      	mov	r3, r0
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d001      	beq.n	800a762 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a75e:	f7f7 fa63 	bl	8001c28 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a762:	4806      	ldr	r0, [pc, #24]	@ (800a77c <MX_USB_HOST_Init+0x44>)
 800a764:	f7fe fc3d 	bl	8008fe2 <USBH_Start>
 800a768:	4603      	mov	r3, r0
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d001      	beq.n	800a772 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a76e:	f7f7 fa5b 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a772:	bf00      	nop
 800a774:	bd80      	pop	{r7, pc}
 800a776:	bf00      	nop
 800a778:	0800a799 	.word	0x0800a799
 800a77c:	20000374 	.word	0x20000374
 800a780:	2000000c 	.word	0x2000000c

0800a784 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a788:	4802      	ldr	r0, [pc, #8]	@ (800a794 <MX_USB_HOST_Process+0x10>)
 800a78a:	f7fe fc3b 	bl	8009004 <USBH_Process>
}
 800a78e:	bf00      	nop
 800a790:	bd80      	pop	{r7, pc}
 800a792:	bf00      	nop
 800a794:	20000374 	.word	0x20000374

0800a798 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a798:	b480      	push	{r7}
 800a79a:	b083      	sub	sp, #12
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
 800a7a0:	460b      	mov	r3, r1
 800a7a2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a7a4:	78fb      	ldrb	r3, [r7, #3]
 800a7a6:	3b01      	subs	r3, #1
 800a7a8:	2b04      	cmp	r3, #4
 800a7aa:	d819      	bhi.n	800a7e0 <USBH_UserProcess+0x48>
 800a7ac:	a201      	add	r2, pc, #4	@ (adr r2, 800a7b4 <USBH_UserProcess+0x1c>)
 800a7ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7b2:	bf00      	nop
 800a7b4:	0800a7e1 	.word	0x0800a7e1
 800a7b8:	0800a7d1 	.word	0x0800a7d1
 800a7bc:	0800a7e1 	.word	0x0800a7e1
 800a7c0:	0800a7d9 	.word	0x0800a7d9
 800a7c4:	0800a7c9 	.word	0x0800a7c9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a7c8:	4b09      	ldr	r3, [pc, #36]	@ (800a7f0 <USBH_UserProcess+0x58>)
 800a7ca:	2203      	movs	r2, #3
 800a7cc:	701a      	strb	r2, [r3, #0]
  break;
 800a7ce:	e008      	b.n	800a7e2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a7d0:	4b07      	ldr	r3, [pc, #28]	@ (800a7f0 <USBH_UserProcess+0x58>)
 800a7d2:	2202      	movs	r2, #2
 800a7d4:	701a      	strb	r2, [r3, #0]
  break;
 800a7d6:	e004      	b.n	800a7e2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a7d8:	4b05      	ldr	r3, [pc, #20]	@ (800a7f0 <USBH_UserProcess+0x58>)
 800a7da:	2201      	movs	r2, #1
 800a7dc:	701a      	strb	r2, [r3, #0]
  break;
 800a7de:	e000      	b.n	800a7e2 <USBH_UserProcess+0x4a>

  default:
  break;
 800a7e0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a7e2:	bf00      	nop
 800a7e4:	370c      	adds	r7, #12
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ec:	4770      	bx	lr
 800a7ee:	bf00      	nop
 800a7f0:	2000074c 	.word	0x2000074c

0800a7f4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b08a      	sub	sp, #40	@ 0x28
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a7fc:	f107 0314 	add.w	r3, r7, #20
 800a800:	2200      	movs	r2, #0
 800a802:	601a      	str	r2, [r3, #0]
 800a804:	605a      	str	r2, [r3, #4]
 800a806:	609a      	str	r2, [r3, #8]
 800a808:	60da      	str	r2, [r3, #12]
 800a80a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a814:	d147      	bne.n	800a8a6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a816:	2300      	movs	r3, #0
 800a818:	613b      	str	r3, [r7, #16]
 800a81a:	4b25      	ldr	r3, [pc, #148]	@ (800a8b0 <HAL_HCD_MspInit+0xbc>)
 800a81c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a81e:	4a24      	ldr	r2, [pc, #144]	@ (800a8b0 <HAL_HCD_MspInit+0xbc>)
 800a820:	f043 0301 	orr.w	r3, r3, #1
 800a824:	6313      	str	r3, [r2, #48]	@ 0x30
 800a826:	4b22      	ldr	r3, [pc, #136]	@ (800a8b0 <HAL_HCD_MspInit+0xbc>)
 800a828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a82a:	f003 0301 	and.w	r3, r3, #1
 800a82e:	613b      	str	r3, [r7, #16]
 800a830:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a832:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a836:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a838:	2300      	movs	r3, #0
 800a83a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a83c:	2300      	movs	r3, #0
 800a83e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a840:	f107 0314 	add.w	r3, r7, #20
 800a844:	4619      	mov	r1, r3
 800a846:	481b      	ldr	r0, [pc, #108]	@ (800a8b4 <HAL_HCD_MspInit+0xc0>)
 800a848:	f7f8 fdf2 	bl	8003430 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a84c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800a850:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a852:	2302      	movs	r3, #2
 800a854:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a856:	2300      	movs	r3, #0
 800a858:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a85a:	2300      	movs	r3, #0
 800a85c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a85e:	230a      	movs	r3, #10
 800a860:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a862:	f107 0314 	add.w	r3, r7, #20
 800a866:	4619      	mov	r1, r3
 800a868:	4812      	ldr	r0, [pc, #72]	@ (800a8b4 <HAL_HCD_MspInit+0xc0>)
 800a86a:	f7f8 fde1 	bl	8003430 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a86e:	4b10      	ldr	r3, [pc, #64]	@ (800a8b0 <HAL_HCD_MspInit+0xbc>)
 800a870:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a872:	4a0f      	ldr	r2, [pc, #60]	@ (800a8b0 <HAL_HCD_MspInit+0xbc>)
 800a874:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a878:	6353      	str	r3, [r2, #52]	@ 0x34
 800a87a:	2300      	movs	r3, #0
 800a87c:	60fb      	str	r3, [r7, #12]
 800a87e:	4b0c      	ldr	r3, [pc, #48]	@ (800a8b0 <HAL_HCD_MspInit+0xbc>)
 800a880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a882:	4a0b      	ldr	r2, [pc, #44]	@ (800a8b0 <HAL_HCD_MspInit+0xbc>)
 800a884:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a888:	6453      	str	r3, [r2, #68]	@ 0x44
 800a88a:	4b09      	ldr	r3, [pc, #36]	@ (800a8b0 <HAL_HCD_MspInit+0xbc>)
 800a88c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a88e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a892:	60fb      	str	r3, [r7, #12]
 800a894:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a896:	2200      	movs	r2, #0
 800a898:	2100      	movs	r1, #0
 800a89a:	2043      	movs	r0, #67	@ 0x43
 800a89c:	f7f8 f925 	bl	8002aea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a8a0:	2043      	movs	r0, #67	@ 0x43
 800a8a2:	f7f8 f93e 	bl	8002b22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a8a6:	bf00      	nop
 800a8a8:	3728      	adds	r7, #40	@ 0x28
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}
 800a8ae:	bf00      	nop
 800a8b0:	40023800 	.word	0x40023800
 800a8b4:	40020000 	.word	0x40020000

0800a8b8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b082      	sub	sp, #8
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f7fe ff73 	bl	80097b2 <USBH_LL_IncTimer>
}
 800a8cc:	bf00      	nop
 800a8ce:	3708      	adds	r7, #8
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}

0800a8d4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b082      	sub	sp, #8
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f7fe ffab 	bl	800983e <USBH_LL_Connect>
}
 800a8e8:	bf00      	nop
 800a8ea:	3708      	adds	r7, #8
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}

0800a8f0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b082      	sub	sp, #8
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a8fe:	4618      	mov	r0, r3
 800a900:	f7fe ffb4 	bl	800986c <USBH_LL_Disconnect>
}
 800a904:	bf00      	nop
 800a906:	3708      	adds	r7, #8
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}

0800a90c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a90c:	b480      	push	{r7}
 800a90e:	b083      	sub	sp, #12
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
 800a914:	460b      	mov	r3, r1
 800a916:	70fb      	strb	r3, [r7, #3]
 800a918:	4613      	mov	r3, r2
 800a91a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a91c:	bf00      	nop
 800a91e:	370c      	adds	r7, #12
 800a920:	46bd      	mov	sp, r7
 800a922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a926:	4770      	bx	lr

0800a928 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b082      	sub	sp, #8
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a936:	4618      	mov	r0, r3
 800a938:	f7fe ff65 	bl	8009806 <USBH_LL_PortEnabled>
}
 800a93c:	bf00      	nop
 800a93e:	3708      	adds	r7, #8
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}

0800a944 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b082      	sub	sp, #8
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a952:	4618      	mov	r0, r3
 800a954:	f7fe ff65 	bl	8009822 <USBH_LL_PortDisabled>
}
 800a958:	bf00      	nop
 800a95a:	3708      	adds	r7, #8
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}

0800a960 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b082      	sub	sp, #8
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a96e:	2b01      	cmp	r3, #1
 800a970:	d12a      	bne.n	800a9c8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a972:	4a18      	ldr	r2, [pc, #96]	@ (800a9d4 <USBH_LL_Init+0x74>)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	4a15      	ldr	r2, [pc, #84]	@ (800a9d4 <USBH_LL_Init+0x74>)
 800a97e:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a982:	4b14      	ldr	r3, [pc, #80]	@ (800a9d4 <USBH_LL_Init+0x74>)
 800a984:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a988:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a98a:	4b12      	ldr	r3, [pc, #72]	@ (800a9d4 <USBH_LL_Init+0x74>)
 800a98c:	2208      	movs	r2, #8
 800a98e:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a990:	4b10      	ldr	r3, [pc, #64]	@ (800a9d4 <USBH_LL_Init+0x74>)
 800a992:	2201      	movs	r2, #1
 800a994:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a996:	4b0f      	ldr	r3, [pc, #60]	@ (800a9d4 <USBH_LL_Init+0x74>)
 800a998:	2200      	movs	r2, #0
 800a99a:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a99c:	4b0d      	ldr	r3, [pc, #52]	@ (800a9d4 <USBH_LL_Init+0x74>)
 800a99e:	2202      	movs	r2, #2
 800a9a0:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a9a2:	4b0c      	ldr	r3, [pc, #48]	@ (800a9d4 <USBH_LL_Init+0x74>)
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a9a8:	480a      	ldr	r0, [pc, #40]	@ (800a9d4 <USBH_LL_Init+0x74>)
 800a9aa:	f7f8 fef6 	bl	800379a <HAL_HCD_Init>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d001      	beq.n	800a9b8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a9b4:	f7f7 f938 	bl	8001c28 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a9b8:	4806      	ldr	r0, [pc, #24]	@ (800a9d4 <USBH_LL_Init+0x74>)
 800a9ba:	f7f9 fb57 	bl	800406c <HAL_HCD_GetCurrentFrame>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	4619      	mov	r1, r3
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f7fe fee6 	bl	8009794 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a9c8:	2300      	movs	r3, #0
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3708      	adds	r7, #8
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}
 800a9d2:	bf00      	nop
 800a9d4:	20000750 	.word	0x20000750

0800a9d8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b084      	sub	sp, #16
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f7f9 fac4 	bl	8003f7c <HAL_HCD_Start>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a9f8:	7bfb      	ldrb	r3, [r7, #15]
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f000 f95e 	bl	800acbc <USBH_Get_USB_Status>
 800aa00:	4603      	mov	r3, r0
 800aa02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa04:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	3710      	adds	r7, #16
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}

0800aa0e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800aa0e:	b580      	push	{r7, lr}
 800aa10:	b084      	sub	sp, #16
 800aa12:	af00      	add	r7, sp, #0
 800aa14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa16:	2300      	movs	r3, #0
 800aa18:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800aa24:	4618      	mov	r0, r3
 800aa26:	f7f9 facc 	bl	8003fc2 <HAL_HCD_Stop>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800aa2e:	7bfb      	ldrb	r3, [r7, #15]
 800aa30:	4618      	mov	r0, r3
 800aa32:	f000 f943 	bl	800acbc <USBH_Get_USB_Status>
 800aa36:	4603      	mov	r3, r0
 800aa38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa3a:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3710      	adds	r7, #16
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}

0800aa44 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b084      	sub	sp, #16
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800aa56:	4618      	mov	r0, r3
 800aa58:	f7f9 fb16 	bl	8004088 <HAL_HCD_GetCurrentSpeed>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	2b02      	cmp	r3, #2
 800aa60:	d00c      	beq.n	800aa7c <USBH_LL_GetSpeed+0x38>
 800aa62:	2b02      	cmp	r3, #2
 800aa64:	d80d      	bhi.n	800aa82 <USBH_LL_GetSpeed+0x3e>
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d002      	beq.n	800aa70 <USBH_LL_GetSpeed+0x2c>
 800aa6a:	2b01      	cmp	r3, #1
 800aa6c:	d003      	beq.n	800aa76 <USBH_LL_GetSpeed+0x32>
 800aa6e:	e008      	b.n	800aa82 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800aa70:	2300      	movs	r3, #0
 800aa72:	73fb      	strb	r3, [r7, #15]
    break;
 800aa74:	e008      	b.n	800aa88 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800aa76:	2301      	movs	r3, #1
 800aa78:	73fb      	strb	r3, [r7, #15]
    break;
 800aa7a:	e005      	b.n	800aa88 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800aa7c:	2302      	movs	r3, #2
 800aa7e:	73fb      	strb	r3, [r7, #15]
    break;
 800aa80:	e002      	b.n	800aa88 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800aa82:	2301      	movs	r3, #1
 800aa84:	73fb      	strb	r3, [r7, #15]
    break;
 800aa86:	bf00      	nop
  }
  return  speed;
 800aa88:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	3710      	adds	r7, #16
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}

0800aa92 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800aa92:	b580      	push	{r7, lr}
 800aa94:	b084      	sub	sp, #16
 800aa96:	af00      	add	r7, sp, #0
 800aa98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f7f9 faa7 	bl	8003ffc <HAL_HCD_ResetPort>
 800aaae:	4603      	mov	r3, r0
 800aab0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800aab2:	7bfb      	ldrb	r3, [r7, #15]
 800aab4:	4618      	mov	r0, r3
 800aab6:	f000 f901 	bl	800acbc <USBH_Get_USB_Status>
 800aaba:	4603      	mov	r3, r0
 800aabc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aabe:	7bbb      	ldrb	r3, [r7, #14]
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3710      	adds	r7, #16
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd80      	pop	{r7, pc}

0800aac8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b082      	sub	sp, #8
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
 800aad0:	460b      	mov	r3, r1
 800aad2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800aada:	78fa      	ldrb	r2, [r7, #3]
 800aadc:	4611      	mov	r1, r2
 800aade:	4618      	mov	r0, r3
 800aae0:	f7f9 faaf 	bl	8004042 <HAL_HCD_HC_GetXferCount>
 800aae4:	4603      	mov	r3, r0
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	3708      	adds	r7, #8
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}

0800aaee <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800aaee:	b590      	push	{r4, r7, lr}
 800aaf0:	b089      	sub	sp, #36	@ 0x24
 800aaf2:	af04      	add	r7, sp, #16
 800aaf4:	6078      	str	r0, [r7, #4]
 800aaf6:	4608      	mov	r0, r1
 800aaf8:	4611      	mov	r1, r2
 800aafa:	461a      	mov	r2, r3
 800aafc:	4603      	mov	r3, r0
 800aafe:	70fb      	strb	r3, [r7, #3]
 800ab00:	460b      	mov	r3, r1
 800ab02:	70bb      	strb	r3, [r7, #2]
 800ab04:	4613      	mov	r3, r2
 800ab06:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800ab16:	787c      	ldrb	r4, [r7, #1]
 800ab18:	78ba      	ldrb	r2, [r7, #2]
 800ab1a:	78f9      	ldrb	r1, [r7, #3]
 800ab1c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ab1e:	9302      	str	r3, [sp, #8]
 800ab20:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ab24:	9301      	str	r3, [sp, #4]
 800ab26:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ab2a:	9300      	str	r3, [sp, #0]
 800ab2c:	4623      	mov	r3, r4
 800ab2e:	f7f8 fe9b 	bl	8003868 <HAL_HCD_HC_Init>
 800ab32:	4603      	mov	r3, r0
 800ab34:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ab36:	7bfb      	ldrb	r3, [r7, #15]
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f000 f8bf 	bl	800acbc <USBH_Get_USB_Status>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab42:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3714      	adds	r7, #20
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd90      	pop	{r4, r7, pc}

0800ab4c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b084      	sub	sp, #16
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	460b      	mov	r3, r1
 800ab56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ab66:	78fa      	ldrb	r2, [r7, #3]
 800ab68:	4611      	mov	r1, r2
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f7f8 ff34 	bl	80039d8 <HAL_HCD_HC_Halt>
 800ab70:	4603      	mov	r3, r0
 800ab72:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ab74:	7bfb      	ldrb	r3, [r7, #15]
 800ab76:	4618      	mov	r0, r3
 800ab78:	f000 f8a0 	bl	800acbc <USBH_Get_USB_Status>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab80:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3710      	adds	r7, #16
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}

0800ab8a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ab8a:	b590      	push	{r4, r7, lr}
 800ab8c:	b089      	sub	sp, #36	@ 0x24
 800ab8e:	af04      	add	r7, sp, #16
 800ab90:	6078      	str	r0, [r7, #4]
 800ab92:	4608      	mov	r0, r1
 800ab94:	4611      	mov	r1, r2
 800ab96:	461a      	mov	r2, r3
 800ab98:	4603      	mov	r3, r0
 800ab9a:	70fb      	strb	r3, [r7, #3]
 800ab9c:	460b      	mov	r3, r1
 800ab9e:	70bb      	strb	r3, [r7, #2]
 800aba0:	4613      	mov	r3, r2
 800aba2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aba4:	2300      	movs	r3, #0
 800aba6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aba8:	2300      	movs	r3, #0
 800abaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800abb2:	787c      	ldrb	r4, [r7, #1]
 800abb4:	78ba      	ldrb	r2, [r7, #2]
 800abb6:	78f9      	ldrb	r1, [r7, #3]
 800abb8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800abbc:	9303      	str	r3, [sp, #12]
 800abbe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800abc0:	9302      	str	r3, [sp, #8]
 800abc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abc4:	9301      	str	r3, [sp, #4]
 800abc6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800abca:	9300      	str	r3, [sp, #0]
 800abcc:	4623      	mov	r3, r4
 800abce:	f7f8 ff27 	bl	8003a20 <HAL_HCD_HC_SubmitRequest>
 800abd2:	4603      	mov	r3, r0
 800abd4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800abd6:	7bfb      	ldrb	r3, [r7, #15]
 800abd8:	4618      	mov	r0, r3
 800abda:	f000 f86f 	bl	800acbc <USBH_Get_USB_Status>
 800abde:	4603      	mov	r3, r0
 800abe0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abe2:	7bbb      	ldrb	r3, [r7, #14]
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	3714      	adds	r7, #20
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd90      	pop	{r4, r7, pc}

0800abec <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b082      	sub	sp, #8
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
 800abf4:	460b      	mov	r3, r1
 800abf6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800abfe:	78fa      	ldrb	r2, [r7, #3]
 800ac00:	4611      	mov	r1, r2
 800ac02:	4618      	mov	r0, r3
 800ac04:	f7f9 fa08 	bl	8004018 <HAL_HCD_HC_GetURBState>
 800ac08:	4603      	mov	r3, r0
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	3708      	adds	r7, #8
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}

0800ac12 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ac12:	b580      	push	{r7, lr}
 800ac14:	b082      	sub	sp, #8
 800ac16:	af00      	add	r7, sp, #0
 800ac18:	6078      	str	r0, [r7, #4]
 800ac1a:	460b      	mov	r3, r1
 800ac1c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800ac24:	2b01      	cmp	r3, #1
 800ac26:	d103      	bne.n	800ac30 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800ac28:	78fb      	ldrb	r3, [r7, #3]
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f000 f872 	bl	800ad14 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ac30:	20c8      	movs	r0, #200	@ 0xc8
 800ac32:	f7f7 fb27 	bl	8002284 <HAL_Delay>
  return USBH_OK;
 800ac36:	2300      	movs	r3, #0
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3708      	adds	r7, #8
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}

0800ac40 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ac40:	b480      	push	{r7}
 800ac42:	b085      	sub	sp, #20
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
 800ac48:	460b      	mov	r3, r1
 800ac4a:	70fb      	strb	r3, [r7, #3]
 800ac4c:	4613      	mov	r3, r2
 800ac4e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ac56:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800ac58:	78fa      	ldrb	r2, [r7, #3]
 800ac5a:	68f9      	ldr	r1, [r7, #12]
 800ac5c:	4613      	mov	r3, r2
 800ac5e:	011b      	lsls	r3, r3, #4
 800ac60:	1a9b      	subs	r3, r3, r2
 800ac62:	009b      	lsls	r3, r3, #2
 800ac64:	440b      	add	r3, r1
 800ac66:	3317      	adds	r3, #23
 800ac68:	781b      	ldrb	r3, [r3, #0]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d00a      	beq.n	800ac84 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800ac6e:	78fa      	ldrb	r2, [r7, #3]
 800ac70:	68f9      	ldr	r1, [r7, #12]
 800ac72:	4613      	mov	r3, r2
 800ac74:	011b      	lsls	r3, r3, #4
 800ac76:	1a9b      	subs	r3, r3, r2
 800ac78:	009b      	lsls	r3, r3, #2
 800ac7a:	440b      	add	r3, r1
 800ac7c:	333c      	adds	r3, #60	@ 0x3c
 800ac7e:	78ba      	ldrb	r2, [r7, #2]
 800ac80:	701a      	strb	r2, [r3, #0]
 800ac82:	e009      	b.n	800ac98 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800ac84:	78fa      	ldrb	r2, [r7, #3]
 800ac86:	68f9      	ldr	r1, [r7, #12]
 800ac88:	4613      	mov	r3, r2
 800ac8a:	011b      	lsls	r3, r3, #4
 800ac8c:	1a9b      	subs	r3, r3, r2
 800ac8e:	009b      	lsls	r3, r3, #2
 800ac90:	440b      	add	r3, r1
 800ac92:	333d      	adds	r3, #61	@ 0x3d
 800ac94:	78ba      	ldrb	r2, [r7, #2]
 800ac96:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800ac98:	2300      	movs	r3, #0
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3714      	adds	r7, #20
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca4:	4770      	bx	lr

0800aca6 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800aca6:	b580      	push	{r7, lr}
 800aca8:	b082      	sub	sp, #8
 800acaa:	af00      	add	r7, sp, #0
 800acac:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f7f7 fae8 	bl	8002284 <HAL_Delay>
}
 800acb4:	bf00      	nop
 800acb6:	3708      	adds	r7, #8
 800acb8:	46bd      	mov	sp, r7
 800acba:	bd80      	pop	{r7, pc}

0800acbc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800acbc:	b480      	push	{r7}
 800acbe:	b085      	sub	sp, #20
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	4603      	mov	r3, r0
 800acc4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800acc6:	2300      	movs	r3, #0
 800acc8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800acca:	79fb      	ldrb	r3, [r7, #7]
 800accc:	2b03      	cmp	r3, #3
 800acce:	d817      	bhi.n	800ad00 <USBH_Get_USB_Status+0x44>
 800acd0:	a201      	add	r2, pc, #4	@ (adr r2, 800acd8 <USBH_Get_USB_Status+0x1c>)
 800acd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acd6:	bf00      	nop
 800acd8:	0800ace9 	.word	0x0800ace9
 800acdc:	0800acef 	.word	0x0800acef
 800ace0:	0800acf5 	.word	0x0800acf5
 800ace4:	0800acfb 	.word	0x0800acfb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ace8:	2300      	movs	r3, #0
 800acea:	73fb      	strb	r3, [r7, #15]
    break;
 800acec:	e00b      	b.n	800ad06 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800acee:	2302      	movs	r3, #2
 800acf0:	73fb      	strb	r3, [r7, #15]
    break;
 800acf2:	e008      	b.n	800ad06 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800acf4:	2301      	movs	r3, #1
 800acf6:	73fb      	strb	r3, [r7, #15]
    break;
 800acf8:	e005      	b.n	800ad06 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800acfa:	2302      	movs	r3, #2
 800acfc:	73fb      	strb	r3, [r7, #15]
    break;
 800acfe:	e002      	b.n	800ad06 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ad00:	2302      	movs	r3, #2
 800ad02:	73fb      	strb	r3, [r7, #15]
    break;
 800ad04:	bf00      	nop
  }
  return usb_status;
 800ad06:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3714      	adds	r7, #20
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad12:	4770      	bx	lr

0800ad14 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b084      	sub	sp, #16
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800ad1e:	79fb      	ldrb	r3, [r7, #7]
 800ad20:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800ad22:	79fb      	ldrb	r3, [r7, #7]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d102      	bne.n	800ad2e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800ad28:	2300      	movs	r3, #0
 800ad2a:	73fb      	strb	r3, [r7, #15]
 800ad2c:	e001      	b.n	800ad32 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800ad2e:	2301      	movs	r3, #1
 800ad30:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800ad32:	7bfb      	ldrb	r3, [r7, #15]
 800ad34:	461a      	mov	r2, r3
 800ad36:	2101      	movs	r1, #1
 800ad38:	4803      	ldr	r0, [pc, #12]	@ (800ad48 <MX_DriverVbusFS+0x34>)
 800ad3a:	f7f8 fd15 	bl	8003768 <HAL_GPIO_WritePin>
}
 800ad3e:	bf00      	nop
 800ad40:	3710      	adds	r7, #16
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}
 800ad46:	bf00      	nop
 800ad48:	40020800 	.word	0x40020800

0800ad4c <malloc>:
 800ad4c:	4b02      	ldr	r3, [pc, #8]	@ (800ad58 <malloc+0xc>)
 800ad4e:	4601      	mov	r1, r0
 800ad50:	6818      	ldr	r0, [r3, #0]
 800ad52:	f000 b82d 	b.w	800adb0 <_malloc_r>
 800ad56:	bf00      	nop
 800ad58:	20000038 	.word	0x20000038

0800ad5c <free>:
 800ad5c:	4b02      	ldr	r3, [pc, #8]	@ (800ad68 <free+0xc>)
 800ad5e:	4601      	mov	r1, r0
 800ad60:	6818      	ldr	r0, [r3, #0]
 800ad62:	f000 ba55 	b.w	800b210 <_free_r>
 800ad66:	bf00      	nop
 800ad68:	20000038 	.word	0x20000038

0800ad6c <sbrk_aligned>:
 800ad6c:	b570      	push	{r4, r5, r6, lr}
 800ad6e:	4e0f      	ldr	r6, [pc, #60]	@ (800adac <sbrk_aligned+0x40>)
 800ad70:	460c      	mov	r4, r1
 800ad72:	6831      	ldr	r1, [r6, #0]
 800ad74:	4605      	mov	r5, r0
 800ad76:	b911      	cbnz	r1, 800ad7e <sbrk_aligned+0x12>
 800ad78:	f000 f9fa 	bl	800b170 <_sbrk_r>
 800ad7c:	6030      	str	r0, [r6, #0]
 800ad7e:	4621      	mov	r1, r4
 800ad80:	4628      	mov	r0, r5
 800ad82:	f000 f9f5 	bl	800b170 <_sbrk_r>
 800ad86:	1c43      	adds	r3, r0, #1
 800ad88:	d103      	bne.n	800ad92 <sbrk_aligned+0x26>
 800ad8a:	f04f 34ff 	mov.w	r4, #4294967295
 800ad8e:	4620      	mov	r0, r4
 800ad90:	bd70      	pop	{r4, r5, r6, pc}
 800ad92:	1cc4      	adds	r4, r0, #3
 800ad94:	f024 0403 	bic.w	r4, r4, #3
 800ad98:	42a0      	cmp	r0, r4
 800ad9a:	d0f8      	beq.n	800ad8e <sbrk_aligned+0x22>
 800ad9c:	1a21      	subs	r1, r4, r0
 800ad9e:	4628      	mov	r0, r5
 800ada0:	f000 f9e6 	bl	800b170 <_sbrk_r>
 800ada4:	3001      	adds	r0, #1
 800ada6:	d1f2      	bne.n	800ad8e <sbrk_aligned+0x22>
 800ada8:	e7ef      	b.n	800ad8a <sbrk_aligned+0x1e>
 800adaa:	bf00      	nop
 800adac:	20000b30 	.word	0x20000b30

0800adb0 <_malloc_r>:
 800adb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adb4:	1ccd      	adds	r5, r1, #3
 800adb6:	f025 0503 	bic.w	r5, r5, #3
 800adba:	3508      	adds	r5, #8
 800adbc:	2d0c      	cmp	r5, #12
 800adbe:	bf38      	it	cc
 800adc0:	250c      	movcc	r5, #12
 800adc2:	2d00      	cmp	r5, #0
 800adc4:	4606      	mov	r6, r0
 800adc6:	db01      	blt.n	800adcc <_malloc_r+0x1c>
 800adc8:	42a9      	cmp	r1, r5
 800adca:	d904      	bls.n	800add6 <_malloc_r+0x26>
 800adcc:	230c      	movs	r3, #12
 800adce:	6033      	str	r3, [r6, #0]
 800add0:	2000      	movs	r0, #0
 800add2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800add6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aeac <_malloc_r+0xfc>
 800adda:	f000 f869 	bl	800aeb0 <__malloc_lock>
 800adde:	f8d8 3000 	ldr.w	r3, [r8]
 800ade2:	461c      	mov	r4, r3
 800ade4:	bb44      	cbnz	r4, 800ae38 <_malloc_r+0x88>
 800ade6:	4629      	mov	r1, r5
 800ade8:	4630      	mov	r0, r6
 800adea:	f7ff ffbf 	bl	800ad6c <sbrk_aligned>
 800adee:	1c43      	adds	r3, r0, #1
 800adf0:	4604      	mov	r4, r0
 800adf2:	d158      	bne.n	800aea6 <_malloc_r+0xf6>
 800adf4:	f8d8 4000 	ldr.w	r4, [r8]
 800adf8:	4627      	mov	r7, r4
 800adfa:	2f00      	cmp	r7, #0
 800adfc:	d143      	bne.n	800ae86 <_malloc_r+0xd6>
 800adfe:	2c00      	cmp	r4, #0
 800ae00:	d04b      	beq.n	800ae9a <_malloc_r+0xea>
 800ae02:	6823      	ldr	r3, [r4, #0]
 800ae04:	4639      	mov	r1, r7
 800ae06:	4630      	mov	r0, r6
 800ae08:	eb04 0903 	add.w	r9, r4, r3
 800ae0c:	f000 f9b0 	bl	800b170 <_sbrk_r>
 800ae10:	4581      	cmp	r9, r0
 800ae12:	d142      	bne.n	800ae9a <_malloc_r+0xea>
 800ae14:	6821      	ldr	r1, [r4, #0]
 800ae16:	1a6d      	subs	r5, r5, r1
 800ae18:	4629      	mov	r1, r5
 800ae1a:	4630      	mov	r0, r6
 800ae1c:	f7ff ffa6 	bl	800ad6c <sbrk_aligned>
 800ae20:	3001      	adds	r0, #1
 800ae22:	d03a      	beq.n	800ae9a <_malloc_r+0xea>
 800ae24:	6823      	ldr	r3, [r4, #0]
 800ae26:	442b      	add	r3, r5
 800ae28:	6023      	str	r3, [r4, #0]
 800ae2a:	f8d8 3000 	ldr.w	r3, [r8]
 800ae2e:	685a      	ldr	r2, [r3, #4]
 800ae30:	bb62      	cbnz	r2, 800ae8c <_malloc_r+0xdc>
 800ae32:	f8c8 7000 	str.w	r7, [r8]
 800ae36:	e00f      	b.n	800ae58 <_malloc_r+0xa8>
 800ae38:	6822      	ldr	r2, [r4, #0]
 800ae3a:	1b52      	subs	r2, r2, r5
 800ae3c:	d420      	bmi.n	800ae80 <_malloc_r+0xd0>
 800ae3e:	2a0b      	cmp	r2, #11
 800ae40:	d917      	bls.n	800ae72 <_malloc_r+0xc2>
 800ae42:	1961      	adds	r1, r4, r5
 800ae44:	42a3      	cmp	r3, r4
 800ae46:	6025      	str	r5, [r4, #0]
 800ae48:	bf18      	it	ne
 800ae4a:	6059      	strne	r1, [r3, #4]
 800ae4c:	6863      	ldr	r3, [r4, #4]
 800ae4e:	bf08      	it	eq
 800ae50:	f8c8 1000 	streq.w	r1, [r8]
 800ae54:	5162      	str	r2, [r4, r5]
 800ae56:	604b      	str	r3, [r1, #4]
 800ae58:	4630      	mov	r0, r6
 800ae5a:	f000 f82f 	bl	800aebc <__malloc_unlock>
 800ae5e:	f104 000b 	add.w	r0, r4, #11
 800ae62:	1d23      	adds	r3, r4, #4
 800ae64:	f020 0007 	bic.w	r0, r0, #7
 800ae68:	1ac2      	subs	r2, r0, r3
 800ae6a:	bf1c      	itt	ne
 800ae6c:	1a1b      	subne	r3, r3, r0
 800ae6e:	50a3      	strne	r3, [r4, r2]
 800ae70:	e7af      	b.n	800add2 <_malloc_r+0x22>
 800ae72:	6862      	ldr	r2, [r4, #4]
 800ae74:	42a3      	cmp	r3, r4
 800ae76:	bf0c      	ite	eq
 800ae78:	f8c8 2000 	streq.w	r2, [r8]
 800ae7c:	605a      	strne	r2, [r3, #4]
 800ae7e:	e7eb      	b.n	800ae58 <_malloc_r+0xa8>
 800ae80:	4623      	mov	r3, r4
 800ae82:	6864      	ldr	r4, [r4, #4]
 800ae84:	e7ae      	b.n	800ade4 <_malloc_r+0x34>
 800ae86:	463c      	mov	r4, r7
 800ae88:	687f      	ldr	r7, [r7, #4]
 800ae8a:	e7b6      	b.n	800adfa <_malloc_r+0x4a>
 800ae8c:	461a      	mov	r2, r3
 800ae8e:	685b      	ldr	r3, [r3, #4]
 800ae90:	42a3      	cmp	r3, r4
 800ae92:	d1fb      	bne.n	800ae8c <_malloc_r+0xdc>
 800ae94:	2300      	movs	r3, #0
 800ae96:	6053      	str	r3, [r2, #4]
 800ae98:	e7de      	b.n	800ae58 <_malloc_r+0xa8>
 800ae9a:	230c      	movs	r3, #12
 800ae9c:	6033      	str	r3, [r6, #0]
 800ae9e:	4630      	mov	r0, r6
 800aea0:	f000 f80c 	bl	800aebc <__malloc_unlock>
 800aea4:	e794      	b.n	800add0 <_malloc_r+0x20>
 800aea6:	6005      	str	r5, [r0, #0]
 800aea8:	e7d6      	b.n	800ae58 <_malloc_r+0xa8>
 800aeaa:	bf00      	nop
 800aeac:	20000b34 	.word	0x20000b34

0800aeb0 <__malloc_lock>:
 800aeb0:	4801      	ldr	r0, [pc, #4]	@ (800aeb8 <__malloc_lock+0x8>)
 800aeb2:	f000 b9aa 	b.w	800b20a <__retarget_lock_acquire_recursive>
 800aeb6:	bf00      	nop
 800aeb8:	20000c78 	.word	0x20000c78

0800aebc <__malloc_unlock>:
 800aebc:	4801      	ldr	r0, [pc, #4]	@ (800aec4 <__malloc_unlock+0x8>)
 800aebe:	f000 b9a5 	b.w	800b20c <__retarget_lock_release_recursive>
 800aec2:	bf00      	nop
 800aec4:	20000c78 	.word	0x20000c78

0800aec8 <std>:
 800aec8:	2300      	movs	r3, #0
 800aeca:	b510      	push	{r4, lr}
 800aecc:	4604      	mov	r4, r0
 800aece:	e9c0 3300 	strd	r3, r3, [r0]
 800aed2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aed6:	6083      	str	r3, [r0, #8]
 800aed8:	8181      	strh	r1, [r0, #12]
 800aeda:	6643      	str	r3, [r0, #100]	@ 0x64
 800aedc:	81c2      	strh	r2, [r0, #14]
 800aede:	6183      	str	r3, [r0, #24]
 800aee0:	4619      	mov	r1, r3
 800aee2:	2208      	movs	r2, #8
 800aee4:	305c      	adds	r0, #92	@ 0x5c
 800aee6:	f000 f906 	bl	800b0f6 <memset>
 800aeea:	4b0d      	ldr	r3, [pc, #52]	@ (800af20 <std+0x58>)
 800aeec:	6263      	str	r3, [r4, #36]	@ 0x24
 800aeee:	4b0d      	ldr	r3, [pc, #52]	@ (800af24 <std+0x5c>)
 800aef0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800aef2:	4b0d      	ldr	r3, [pc, #52]	@ (800af28 <std+0x60>)
 800aef4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800aef6:	4b0d      	ldr	r3, [pc, #52]	@ (800af2c <std+0x64>)
 800aef8:	6323      	str	r3, [r4, #48]	@ 0x30
 800aefa:	4b0d      	ldr	r3, [pc, #52]	@ (800af30 <std+0x68>)
 800aefc:	6224      	str	r4, [r4, #32]
 800aefe:	429c      	cmp	r4, r3
 800af00:	d006      	beq.n	800af10 <std+0x48>
 800af02:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800af06:	4294      	cmp	r4, r2
 800af08:	d002      	beq.n	800af10 <std+0x48>
 800af0a:	33d0      	adds	r3, #208	@ 0xd0
 800af0c:	429c      	cmp	r4, r3
 800af0e:	d105      	bne.n	800af1c <std+0x54>
 800af10:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800af14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af18:	f000 b976 	b.w	800b208 <__retarget_lock_init_recursive>
 800af1c:	bd10      	pop	{r4, pc}
 800af1e:	bf00      	nop
 800af20:	0800b071 	.word	0x0800b071
 800af24:	0800b093 	.word	0x0800b093
 800af28:	0800b0cb 	.word	0x0800b0cb
 800af2c:	0800b0ef 	.word	0x0800b0ef
 800af30:	20000b38 	.word	0x20000b38

0800af34 <stdio_exit_handler>:
 800af34:	4a02      	ldr	r2, [pc, #8]	@ (800af40 <stdio_exit_handler+0xc>)
 800af36:	4903      	ldr	r1, [pc, #12]	@ (800af44 <stdio_exit_handler+0x10>)
 800af38:	4803      	ldr	r0, [pc, #12]	@ (800af48 <stdio_exit_handler+0x14>)
 800af3a:	f000 b869 	b.w	800b010 <_fwalk_sglue>
 800af3e:	bf00      	nop
 800af40:	2000002c 	.word	0x2000002c
 800af44:	0800b94d 	.word	0x0800b94d
 800af48:	2000003c 	.word	0x2000003c

0800af4c <cleanup_stdio>:
 800af4c:	6841      	ldr	r1, [r0, #4]
 800af4e:	4b0c      	ldr	r3, [pc, #48]	@ (800af80 <cleanup_stdio+0x34>)
 800af50:	4299      	cmp	r1, r3
 800af52:	b510      	push	{r4, lr}
 800af54:	4604      	mov	r4, r0
 800af56:	d001      	beq.n	800af5c <cleanup_stdio+0x10>
 800af58:	f000 fcf8 	bl	800b94c <_fflush_r>
 800af5c:	68a1      	ldr	r1, [r4, #8]
 800af5e:	4b09      	ldr	r3, [pc, #36]	@ (800af84 <cleanup_stdio+0x38>)
 800af60:	4299      	cmp	r1, r3
 800af62:	d002      	beq.n	800af6a <cleanup_stdio+0x1e>
 800af64:	4620      	mov	r0, r4
 800af66:	f000 fcf1 	bl	800b94c <_fflush_r>
 800af6a:	68e1      	ldr	r1, [r4, #12]
 800af6c:	4b06      	ldr	r3, [pc, #24]	@ (800af88 <cleanup_stdio+0x3c>)
 800af6e:	4299      	cmp	r1, r3
 800af70:	d004      	beq.n	800af7c <cleanup_stdio+0x30>
 800af72:	4620      	mov	r0, r4
 800af74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af78:	f000 bce8 	b.w	800b94c <_fflush_r>
 800af7c:	bd10      	pop	{r4, pc}
 800af7e:	bf00      	nop
 800af80:	20000b38 	.word	0x20000b38
 800af84:	20000ba0 	.word	0x20000ba0
 800af88:	20000c08 	.word	0x20000c08

0800af8c <global_stdio_init.part.0>:
 800af8c:	b510      	push	{r4, lr}
 800af8e:	4b0b      	ldr	r3, [pc, #44]	@ (800afbc <global_stdio_init.part.0+0x30>)
 800af90:	4c0b      	ldr	r4, [pc, #44]	@ (800afc0 <global_stdio_init.part.0+0x34>)
 800af92:	4a0c      	ldr	r2, [pc, #48]	@ (800afc4 <global_stdio_init.part.0+0x38>)
 800af94:	601a      	str	r2, [r3, #0]
 800af96:	4620      	mov	r0, r4
 800af98:	2200      	movs	r2, #0
 800af9a:	2104      	movs	r1, #4
 800af9c:	f7ff ff94 	bl	800aec8 <std>
 800afa0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800afa4:	2201      	movs	r2, #1
 800afa6:	2109      	movs	r1, #9
 800afa8:	f7ff ff8e 	bl	800aec8 <std>
 800afac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800afb0:	2202      	movs	r2, #2
 800afb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afb6:	2112      	movs	r1, #18
 800afb8:	f7ff bf86 	b.w	800aec8 <std>
 800afbc:	20000c70 	.word	0x20000c70
 800afc0:	20000b38 	.word	0x20000b38
 800afc4:	0800af35 	.word	0x0800af35

0800afc8 <__sfp_lock_acquire>:
 800afc8:	4801      	ldr	r0, [pc, #4]	@ (800afd0 <__sfp_lock_acquire+0x8>)
 800afca:	f000 b91e 	b.w	800b20a <__retarget_lock_acquire_recursive>
 800afce:	bf00      	nop
 800afd0:	20000c79 	.word	0x20000c79

0800afd4 <__sfp_lock_release>:
 800afd4:	4801      	ldr	r0, [pc, #4]	@ (800afdc <__sfp_lock_release+0x8>)
 800afd6:	f000 b919 	b.w	800b20c <__retarget_lock_release_recursive>
 800afda:	bf00      	nop
 800afdc:	20000c79 	.word	0x20000c79

0800afe0 <__sinit>:
 800afe0:	b510      	push	{r4, lr}
 800afe2:	4604      	mov	r4, r0
 800afe4:	f7ff fff0 	bl	800afc8 <__sfp_lock_acquire>
 800afe8:	6a23      	ldr	r3, [r4, #32]
 800afea:	b11b      	cbz	r3, 800aff4 <__sinit+0x14>
 800afec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aff0:	f7ff bff0 	b.w	800afd4 <__sfp_lock_release>
 800aff4:	4b04      	ldr	r3, [pc, #16]	@ (800b008 <__sinit+0x28>)
 800aff6:	6223      	str	r3, [r4, #32]
 800aff8:	4b04      	ldr	r3, [pc, #16]	@ (800b00c <__sinit+0x2c>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d1f5      	bne.n	800afec <__sinit+0xc>
 800b000:	f7ff ffc4 	bl	800af8c <global_stdio_init.part.0>
 800b004:	e7f2      	b.n	800afec <__sinit+0xc>
 800b006:	bf00      	nop
 800b008:	0800af4d 	.word	0x0800af4d
 800b00c:	20000c70 	.word	0x20000c70

0800b010 <_fwalk_sglue>:
 800b010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b014:	4607      	mov	r7, r0
 800b016:	4688      	mov	r8, r1
 800b018:	4614      	mov	r4, r2
 800b01a:	2600      	movs	r6, #0
 800b01c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b020:	f1b9 0901 	subs.w	r9, r9, #1
 800b024:	d505      	bpl.n	800b032 <_fwalk_sglue+0x22>
 800b026:	6824      	ldr	r4, [r4, #0]
 800b028:	2c00      	cmp	r4, #0
 800b02a:	d1f7      	bne.n	800b01c <_fwalk_sglue+0xc>
 800b02c:	4630      	mov	r0, r6
 800b02e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b032:	89ab      	ldrh	r3, [r5, #12]
 800b034:	2b01      	cmp	r3, #1
 800b036:	d907      	bls.n	800b048 <_fwalk_sglue+0x38>
 800b038:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b03c:	3301      	adds	r3, #1
 800b03e:	d003      	beq.n	800b048 <_fwalk_sglue+0x38>
 800b040:	4629      	mov	r1, r5
 800b042:	4638      	mov	r0, r7
 800b044:	47c0      	blx	r8
 800b046:	4306      	orrs	r6, r0
 800b048:	3568      	adds	r5, #104	@ 0x68
 800b04a:	e7e9      	b.n	800b020 <_fwalk_sglue+0x10>

0800b04c <iprintf>:
 800b04c:	b40f      	push	{r0, r1, r2, r3}
 800b04e:	b507      	push	{r0, r1, r2, lr}
 800b050:	4906      	ldr	r1, [pc, #24]	@ (800b06c <iprintf+0x20>)
 800b052:	ab04      	add	r3, sp, #16
 800b054:	6808      	ldr	r0, [r1, #0]
 800b056:	f853 2b04 	ldr.w	r2, [r3], #4
 800b05a:	6881      	ldr	r1, [r0, #8]
 800b05c:	9301      	str	r3, [sp, #4]
 800b05e:	f000 f94b 	bl	800b2f8 <_vfiprintf_r>
 800b062:	b003      	add	sp, #12
 800b064:	f85d eb04 	ldr.w	lr, [sp], #4
 800b068:	b004      	add	sp, #16
 800b06a:	4770      	bx	lr
 800b06c:	20000038 	.word	0x20000038

0800b070 <__sread>:
 800b070:	b510      	push	{r4, lr}
 800b072:	460c      	mov	r4, r1
 800b074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b078:	f000 f868 	bl	800b14c <_read_r>
 800b07c:	2800      	cmp	r0, #0
 800b07e:	bfab      	itete	ge
 800b080:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b082:	89a3      	ldrhlt	r3, [r4, #12]
 800b084:	181b      	addge	r3, r3, r0
 800b086:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b08a:	bfac      	ite	ge
 800b08c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b08e:	81a3      	strhlt	r3, [r4, #12]
 800b090:	bd10      	pop	{r4, pc}

0800b092 <__swrite>:
 800b092:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b096:	461f      	mov	r7, r3
 800b098:	898b      	ldrh	r3, [r1, #12]
 800b09a:	05db      	lsls	r3, r3, #23
 800b09c:	4605      	mov	r5, r0
 800b09e:	460c      	mov	r4, r1
 800b0a0:	4616      	mov	r6, r2
 800b0a2:	d505      	bpl.n	800b0b0 <__swrite+0x1e>
 800b0a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0a8:	2302      	movs	r3, #2
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	f000 f83c 	bl	800b128 <_lseek_r>
 800b0b0:	89a3      	ldrh	r3, [r4, #12]
 800b0b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b0b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b0ba:	81a3      	strh	r3, [r4, #12]
 800b0bc:	4632      	mov	r2, r6
 800b0be:	463b      	mov	r3, r7
 800b0c0:	4628      	mov	r0, r5
 800b0c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b0c6:	f000 b863 	b.w	800b190 <_write_r>

0800b0ca <__sseek>:
 800b0ca:	b510      	push	{r4, lr}
 800b0cc:	460c      	mov	r4, r1
 800b0ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0d2:	f000 f829 	bl	800b128 <_lseek_r>
 800b0d6:	1c43      	adds	r3, r0, #1
 800b0d8:	89a3      	ldrh	r3, [r4, #12]
 800b0da:	bf15      	itete	ne
 800b0dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b0de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b0e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b0e6:	81a3      	strheq	r3, [r4, #12]
 800b0e8:	bf18      	it	ne
 800b0ea:	81a3      	strhne	r3, [r4, #12]
 800b0ec:	bd10      	pop	{r4, pc}

0800b0ee <__sclose>:
 800b0ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0f2:	f000 b809 	b.w	800b108 <_close_r>

0800b0f6 <memset>:
 800b0f6:	4402      	add	r2, r0
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	4293      	cmp	r3, r2
 800b0fc:	d100      	bne.n	800b100 <memset+0xa>
 800b0fe:	4770      	bx	lr
 800b100:	f803 1b01 	strb.w	r1, [r3], #1
 800b104:	e7f9      	b.n	800b0fa <memset+0x4>
	...

0800b108 <_close_r>:
 800b108:	b538      	push	{r3, r4, r5, lr}
 800b10a:	4d06      	ldr	r5, [pc, #24]	@ (800b124 <_close_r+0x1c>)
 800b10c:	2300      	movs	r3, #0
 800b10e:	4604      	mov	r4, r0
 800b110:	4608      	mov	r0, r1
 800b112:	602b      	str	r3, [r5, #0]
 800b114:	f7f6 ff9d 	bl	8002052 <_close>
 800b118:	1c43      	adds	r3, r0, #1
 800b11a:	d102      	bne.n	800b122 <_close_r+0x1a>
 800b11c:	682b      	ldr	r3, [r5, #0]
 800b11e:	b103      	cbz	r3, 800b122 <_close_r+0x1a>
 800b120:	6023      	str	r3, [r4, #0]
 800b122:	bd38      	pop	{r3, r4, r5, pc}
 800b124:	20000c74 	.word	0x20000c74

0800b128 <_lseek_r>:
 800b128:	b538      	push	{r3, r4, r5, lr}
 800b12a:	4d07      	ldr	r5, [pc, #28]	@ (800b148 <_lseek_r+0x20>)
 800b12c:	4604      	mov	r4, r0
 800b12e:	4608      	mov	r0, r1
 800b130:	4611      	mov	r1, r2
 800b132:	2200      	movs	r2, #0
 800b134:	602a      	str	r2, [r5, #0]
 800b136:	461a      	mov	r2, r3
 800b138:	f7f6 ffb2 	bl	80020a0 <_lseek>
 800b13c:	1c43      	adds	r3, r0, #1
 800b13e:	d102      	bne.n	800b146 <_lseek_r+0x1e>
 800b140:	682b      	ldr	r3, [r5, #0]
 800b142:	b103      	cbz	r3, 800b146 <_lseek_r+0x1e>
 800b144:	6023      	str	r3, [r4, #0]
 800b146:	bd38      	pop	{r3, r4, r5, pc}
 800b148:	20000c74 	.word	0x20000c74

0800b14c <_read_r>:
 800b14c:	b538      	push	{r3, r4, r5, lr}
 800b14e:	4d07      	ldr	r5, [pc, #28]	@ (800b16c <_read_r+0x20>)
 800b150:	4604      	mov	r4, r0
 800b152:	4608      	mov	r0, r1
 800b154:	4611      	mov	r1, r2
 800b156:	2200      	movs	r2, #0
 800b158:	602a      	str	r2, [r5, #0]
 800b15a:	461a      	mov	r2, r3
 800b15c:	f7f6 ff5c 	bl	8002018 <_read>
 800b160:	1c43      	adds	r3, r0, #1
 800b162:	d102      	bne.n	800b16a <_read_r+0x1e>
 800b164:	682b      	ldr	r3, [r5, #0]
 800b166:	b103      	cbz	r3, 800b16a <_read_r+0x1e>
 800b168:	6023      	str	r3, [r4, #0]
 800b16a:	bd38      	pop	{r3, r4, r5, pc}
 800b16c:	20000c74 	.word	0x20000c74

0800b170 <_sbrk_r>:
 800b170:	b538      	push	{r3, r4, r5, lr}
 800b172:	4d06      	ldr	r5, [pc, #24]	@ (800b18c <_sbrk_r+0x1c>)
 800b174:	2300      	movs	r3, #0
 800b176:	4604      	mov	r4, r0
 800b178:	4608      	mov	r0, r1
 800b17a:	602b      	str	r3, [r5, #0]
 800b17c:	f7f6 ff9e 	bl	80020bc <_sbrk>
 800b180:	1c43      	adds	r3, r0, #1
 800b182:	d102      	bne.n	800b18a <_sbrk_r+0x1a>
 800b184:	682b      	ldr	r3, [r5, #0]
 800b186:	b103      	cbz	r3, 800b18a <_sbrk_r+0x1a>
 800b188:	6023      	str	r3, [r4, #0]
 800b18a:	bd38      	pop	{r3, r4, r5, pc}
 800b18c:	20000c74 	.word	0x20000c74

0800b190 <_write_r>:
 800b190:	b538      	push	{r3, r4, r5, lr}
 800b192:	4d07      	ldr	r5, [pc, #28]	@ (800b1b0 <_write_r+0x20>)
 800b194:	4604      	mov	r4, r0
 800b196:	4608      	mov	r0, r1
 800b198:	4611      	mov	r1, r2
 800b19a:	2200      	movs	r2, #0
 800b19c:	602a      	str	r2, [r5, #0]
 800b19e:	461a      	mov	r2, r3
 800b1a0:	f7f6 fd26 	bl	8001bf0 <_write>
 800b1a4:	1c43      	adds	r3, r0, #1
 800b1a6:	d102      	bne.n	800b1ae <_write_r+0x1e>
 800b1a8:	682b      	ldr	r3, [r5, #0]
 800b1aa:	b103      	cbz	r3, 800b1ae <_write_r+0x1e>
 800b1ac:	6023      	str	r3, [r4, #0]
 800b1ae:	bd38      	pop	{r3, r4, r5, pc}
 800b1b0:	20000c74 	.word	0x20000c74

0800b1b4 <__errno>:
 800b1b4:	4b01      	ldr	r3, [pc, #4]	@ (800b1bc <__errno+0x8>)
 800b1b6:	6818      	ldr	r0, [r3, #0]
 800b1b8:	4770      	bx	lr
 800b1ba:	bf00      	nop
 800b1bc:	20000038 	.word	0x20000038

0800b1c0 <__libc_init_array>:
 800b1c0:	b570      	push	{r4, r5, r6, lr}
 800b1c2:	4d0d      	ldr	r5, [pc, #52]	@ (800b1f8 <__libc_init_array+0x38>)
 800b1c4:	4c0d      	ldr	r4, [pc, #52]	@ (800b1fc <__libc_init_array+0x3c>)
 800b1c6:	1b64      	subs	r4, r4, r5
 800b1c8:	10a4      	asrs	r4, r4, #2
 800b1ca:	2600      	movs	r6, #0
 800b1cc:	42a6      	cmp	r6, r4
 800b1ce:	d109      	bne.n	800b1e4 <__libc_init_array+0x24>
 800b1d0:	4d0b      	ldr	r5, [pc, #44]	@ (800b200 <__libc_init_array+0x40>)
 800b1d2:	4c0c      	ldr	r4, [pc, #48]	@ (800b204 <__libc_init_array+0x44>)
 800b1d4:	f001 fa5a 	bl	800c68c <_init>
 800b1d8:	1b64      	subs	r4, r4, r5
 800b1da:	10a4      	asrs	r4, r4, #2
 800b1dc:	2600      	movs	r6, #0
 800b1de:	42a6      	cmp	r6, r4
 800b1e0:	d105      	bne.n	800b1ee <__libc_init_array+0x2e>
 800b1e2:	bd70      	pop	{r4, r5, r6, pc}
 800b1e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1e8:	4798      	blx	r3
 800b1ea:	3601      	adds	r6, #1
 800b1ec:	e7ee      	b.n	800b1cc <__libc_init_array+0xc>
 800b1ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1f2:	4798      	blx	r3
 800b1f4:	3601      	adds	r6, #1
 800b1f6:	e7f2      	b.n	800b1de <__libc_init_array+0x1e>
 800b1f8:	0800cb04 	.word	0x0800cb04
 800b1fc:	0800cb04 	.word	0x0800cb04
 800b200:	0800cb04 	.word	0x0800cb04
 800b204:	0800cb08 	.word	0x0800cb08

0800b208 <__retarget_lock_init_recursive>:
 800b208:	4770      	bx	lr

0800b20a <__retarget_lock_acquire_recursive>:
 800b20a:	4770      	bx	lr

0800b20c <__retarget_lock_release_recursive>:
 800b20c:	4770      	bx	lr
	...

0800b210 <_free_r>:
 800b210:	b538      	push	{r3, r4, r5, lr}
 800b212:	4605      	mov	r5, r0
 800b214:	2900      	cmp	r1, #0
 800b216:	d041      	beq.n	800b29c <_free_r+0x8c>
 800b218:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b21c:	1f0c      	subs	r4, r1, #4
 800b21e:	2b00      	cmp	r3, #0
 800b220:	bfb8      	it	lt
 800b222:	18e4      	addlt	r4, r4, r3
 800b224:	f7ff fe44 	bl	800aeb0 <__malloc_lock>
 800b228:	4a1d      	ldr	r2, [pc, #116]	@ (800b2a0 <_free_r+0x90>)
 800b22a:	6813      	ldr	r3, [r2, #0]
 800b22c:	b933      	cbnz	r3, 800b23c <_free_r+0x2c>
 800b22e:	6063      	str	r3, [r4, #4]
 800b230:	6014      	str	r4, [r2, #0]
 800b232:	4628      	mov	r0, r5
 800b234:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b238:	f7ff be40 	b.w	800aebc <__malloc_unlock>
 800b23c:	42a3      	cmp	r3, r4
 800b23e:	d908      	bls.n	800b252 <_free_r+0x42>
 800b240:	6820      	ldr	r0, [r4, #0]
 800b242:	1821      	adds	r1, r4, r0
 800b244:	428b      	cmp	r3, r1
 800b246:	bf01      	itttt	eq
 800b248:	6819      	ldreq	r1, [r3, #0]
 800b24a:	685b      	ldreq	r3, [r3, #4]
 800b24c:	1809      	addeq	r1, r1, r0
 800b24e:	6021      	streq	r1, [r4, #0]
 800b250:	e7ed      	b.n	800b22e <_free_r+0x1e>
 800b252:	461a      	mov	r2, r3
 800b254:	685b      	ldr	r3, [r3, #4]
 800b256:	b10b      	cbz	r3, 800b25c <_free_r+0x4c>
 800b258:	42a3      	cmp	r3, r4
 800b25a:	d9fa      	bls.n	800b252 <_free_r+0x42>
 800b25c:	6811      	ldr	r1, [r2, #0]
 800b25e:	1850      	adds	r0, r2, r1
 800b260:	42a0      	cmp	r0, r4
 800b262:	d10b      	bne.n	800b27c <_free_r+0x6c>
 800b264:	6820      	ldr	r0, [r4, #0]
 800b266:	4401      	add	r1, r0
 800b268:	1850      	adds	r0, r2, r1
 800b26a:	4283      	cmp	r3, r0
 800b26c:	6011      	str	r1, [r2, #0]
 800b26e:	d1e0      	bne.n	800b232 <_free_r+0x22>
 800b270:	6818      	ldr	r0, [r3, #0]
 800b272:	685b      	ldr	r3, [r3, #4]
 800b274:	6053      	str	r3, [r2, #4]
 800b276:	4408      	add	r0, r1
 800b278:	6010      	str	r0, [r2, #0]
 800b27a:	e7da      	b.n	800b232 <_free_r+0x22>
 800b27c:	d902      	bls.n	800b284 <_free_r+0x74>
 800b27e:	230c      	movs	r3, #12
 800b280:	602b      	str	r3, [r5, #0]
 800b282:	e7d6      	b.n	800b232 <_free_r+0x22>
 800b284:	6820      	ldr	r0, [r4, #0]
 800b286:	1821      	adds	r1, r4, r0
 800b288:	428b      	cmp	r3, r1
 800b28a:	bf04      	itt	eq
 800b28c:	6819      	ldreq	r1, [r3, #0]
 800b28e:	685b      	ldreq	r3, [r3, #4]
 800b290:	6063      	str	r3, [r4, #4]
 800b292:	bf04      	itt	eq
 800b294:	1809      	addeq	r1, r1, r0
 800b296:	6021      	streq	r1, [r4, #0]
 800b298:	6054      	str	r4, [r2, #4]
 800b29a:	e7ca      	b.n	800b232 <_free_r+0x22>
 800b29c:	bd38      	pop	{r3, r4, r5, pc}
 800b29e:	bf00      	nop
 800b2a0:	20000b34 	.word	0x20000b34

0800b2a4 <__sfputc_r>:
 800b2a4:	6893      	ldr	r3, [r2, #8]
 800b2a6:	3b01      	subs	r3, #1
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	b410      	push	{r4}
 800b2ac:	6093      	str	r3, [r2, #8]
 800b2ae:	da08      	bge.n	800b2c2 <__sfputc_r+0x1e>
 800b2b0:	6994      	ldr	r4, [r2, #24]
 800b2b2:	42a3      	cmp	r3, r4
 800b2b4:	db01      	blt.n	800b2ba <__sfputc_r+0x16>
 800b2b6:	290a      	cmp	r1, #10
 800b2b8:	d103      	bne.n	800b2c2 <__sfputc_r+0x1e>
 800b2ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2be:	f000 bb6d 	b.w	800b99c <__swbuf_r>
 800b2c2:	6813      	ldr	r3, [r2, #0]
 800b2c4:	1c58      	adds	r0, r3, #1
 800b2c6:	6010      	str	r0, [r2, #0]
 800b2c8:	7019      	strb	r1, [r3, #0]
 800b2ca:	4608      	mov	r0, r1
 800b2cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2d0:	4770      	bx	lr

0800b2d2 <__sfputs_r>:
 800b2d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2d4:	4606      	mov	r6, r0
 800b2d6:	460f      	mov	r7, r1
 800b2d8:	4614      	mov	r4, r2
 800b2da:	18d5      	adds	r5, r2, r3
 800b2dc:	42ac      	cmp	r4, r5
 800b2de:	d101      	bne.n	800b2e4 <__sfputs_r+0x12>
 800b2e0:	2000      	movs	r0, #0
 800b2e2:	e007      	b.n	800b2f4 <__sfputs_r+0x22>
 800b2e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2e8:	463a      	mov	r2, r7
 800b2ea:	4630      	mov	r0, r6
 800b2ec:	f7ff ffda 	bl	800b2a4 <__sfputc_r>
 800b2f0:	1c43      	adds	r3, r0, #1
 800b2f2:	d1f3      	bne.n	800b2dc <__sfputs_r+0xa>
 800b2f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b2f8 <_vfiprintf_r>:
 800b2f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2fc:	460d      	mov	r5, r1
 800b2fe:	b09d      	sub	sp, #116	@ 0x74
 800b300:	4614      	mov	r4, r2
 800b302:	4698      	mov	r8, r3
 800b304:	4606      	mov	r6, r0
 800b306:	b118      	cbz	r0, 800b310 <_vfiprintf_r+0x18>
 800b308:	6a03      	ldr	r3, [r0, #32]
 800b30a:	b90b      	cbnz	r3, 800b310 <_vfiprintf_r+0x18>
 800b30c:	f7ff fe68 	bl	800afe0 <__sinit>
 800b310:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b312:	07d9      	lsls	r1, r3, #31
 800b314:	d405      	bmi.n	800b322 <_vfiprintf_r+0x2a>
 800b316:	89ab      	ldrh	r3, [r5, #12]
 800b318:	059a      	lsls	r2, r3, #22
 800b31a:	d402      	bmi.n	800b322 <_vfiprintf_r+0x2a>
 800b31c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b31e:	f7ff ff74 	bl	800b20a <__retarget_lock_acquire_recursive>
 800b322:	89ab      	ldrh	r3, [r5, #12]
 800b324:	071b      	lsls	r3, r3, #28
 800b326:	d501      	bpl.n	800b32c <_vfiprintf_r+0x34>
 800b328:	692b      	ldr	r3, [r5, #16]
 800b32a:	b99b      	cbnz	r3, 800b354 <_vfiprintf_r+0x5c>
 800b32c:	4629      	mov	r1, r5
 800b32e:	4630      	mov	r0, r6
 800b330:	f000 fb72 	bl	800ba18 <__swsetup_r>
 800b334:	b170      	cbz	r0, 800b354 <_vfiprintf_r+0x5c>
 800b336:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b338:	07dc      	lsls	r4, r3, #31
 800b33a:	d504      	bpl.n	800b346 <_vfiprintf_r+0x4e>
 800b33c:	f04f 30ff 	mov.w	r0, #4294967295
 800b340:	b01d      	add	sp, #116	@ 0x74
 800b342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b346:	89ab      	ldrh	r3, [r5, #12]
 800b348:	0598      	lsls	r0, r3, #22
 800b34a:	d4f7      	bmi.n	800b33c <_vfiprintf_r+0x44>
 800b34c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b34e:	f7ff ff5d 	bl	800b20c <__retarget_lock_release_recursive>
 800b352:	e7f3      	b.n	800b33c <_vfiprintf_r+0x44>
 800b354:	2300      	movs	r3, #0
 800b356:	9309      	str	r3, [sp, #36]	@ 0x24
 800b358:	2320      	movs	r3, #32
 800b35a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b35e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b362:	2330      	movs	r3, #48	@ 0x30
 800b364:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b514 <_vfiprintf_r+0x21c>
 800b368:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b36c:	f04f 0901 	mov.w	r9, #1
 800b370:	4623      	mov	r3, r4
 800b372:	469a      	mov	sl, r3
 800b374:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b378:	b10a      	cbz	r2, 800b37e <_vfiprintf_r+0x86>
 800b37a:	2a25      	cmp	r2, #37	@ 0x25
 800b37c:	d1f9      	bne.n	800b372 <_vfiprintf_r+0x7a>
 800b37e:	ebba 0b04 	subs.w	fp, sl, r4
 800b382:	d00b      	beq.n	800b39c <_vfiprintf_r+0xa4>
 800b384:	465b      	mov	r3, fp
 800b386:	4622      	mov	r2, r4
 800b388:	4629      	mov	r1, r5
 800b38a:	4630      	mov	r0, r6
 800b38c:	f7ff ffa1 	bl	800b2d2 <__sfputs_r>
 800b390:	3001      	adds	r0, #1
 800b392:	f000 80a7 	beq.w	800b4e4 <_vfiprintf_r+0x1ec>
 800b396:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b398:	445a      	add	r2, fp
 800b39a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b39c:	f89a 3000 	ldrb.w	r3, [sl]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	f000 809f 	beq.w	800b4e4 <_vfiprintf_r+0x1ec>
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	f04f 32ff 	mov.w	r2, #4294967295
 800b3ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3b0:	f10a 0a01 	add.w	sl, sl, #1
 800b3b4:	9304      	str	r3, [sp, #16]
 800b3b6:	9307      	str	r3, [sp, #28]
 800b3b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b3bc:	931a      	str	r3, [sp, #104]	@ 0x68
 800b3be:	4654      	mov	r4, sl
 800b3c0:	2205      	movs	r2, #5
 800b3c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3c6:	4853      	ldr	r0, [pc, #332]	@ (800b514 <_vfiprintf_r+0x21c>)
 800b3c8:	f7f4 ff02 	bl	80001d0 <memchr>
 800b3cc:	9a04      	ldr	r2, [sp, #16]
 800b3ce:	b9d8      	cbnz	r0, 800b408 <_vfiprintf_r+0x110>
 800b3d0:	06d1      	lsls	r1, r2, #27
 800b3d2:	bf44      	itt	mi
 800b3d4:	2320      	movmi	r3, #32
 800b3d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b3da:	0713      	lsls	r3, r2, #28
 800b3dc:	bf44      	itt	mi
 800b3de:	232b      	movmi	r3, #43	@ 0x2b
 800b3e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b3e4:	f89a 3000 	ldrb.w	r3, [sl]
 800b3e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b3ea:	d015      	beq.n	800b418 <_vfiprintf_r+0x120>
 800b3ec:	9a07      	ldr	r2, [sp, #28]
 800b3ee:	4654      	mov	r4, sl
 800b3f0:	2000      	movs	r0, #0
 800b3f2:	f04f 0c0a 	mov.w	ip, #10
 800b3f6:	4621      	mov	r1, r4
 800b3f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b3fc:	3b30      	subs	r3, #48	@ 0x30
 800b3fe:	2b09      	cmp	r3, #9
 800b400:	d94b      	bls.n	800b49a <_vfiprintf_r+0x1a2>
 800b402:	b1b0      	cbz	r0, 800b432 <_vfiprintf_r+0x13a>
 800b404:	9207      	str	r2, [sp, #28]
 800b406:	e014      	b.n	800b432 <_vfiprintf_r+0x13a>
 800b408:	eba0 0308 	sub.w	r3, r0, r8
 800b40c:	fa09 f303 	lsl.w	r3, r9, r3
 800b410:	4313      	orrs	r3, r2
 800b412:	9304      	str	r3, [sp, #16]
 800b414:	46a2      	mov	sl, r4
 800b416:	e7d2      	b.n	800b3be <_vfiprintf_r+0xc6>
 800b418:	9b03      	ldr	r3, [sp, #12]
 800b41a:	1d19      	adds	r1, r3, #4
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	9103      	str	r1, [sp, #12]
 800b420:	2b00      	cmp	r3, #0
 800b422:	bfbb      	ittet	lt
 800b424:	425b      	neglt	r3, r3
 800b426:	f042 0202 	orrlt.w	r2, r2, #2
 800b42a:	9307      	strge	r3, [sp, #28]
 800b42c:	9307      	strlt	r3, [sp, #28]
 800b42e:	bfb8      	it	lt
 800b430:	9204      	strlt	r2, [sp, #16]
 800b432:	7823      	ldrb	r3, [r4, #0]
 800b434:	2b2e      	cmp	r3, #46	@ 0x2e
 800b436:	d10a      	bne.n	800b44e <_vfiprintf_r+0x156>
 800b438:	7863      	ldrb	r3, [r4, #1]
 800b43a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b43c:	d132      	bne.n	800b4a4 <_vfiprintf_r+0x1ac>
 800b43e:	9b03      	ldr	r3, [sp, #12]
 800b440:	1d1a      	adds	r2, r3, #4
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	9203      	str	r2, [sp, #12]
 800b446:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b44a:	3402      	adds	r4, #2
 800b44c:	9305      	str	r3, [sp, #20]
 800b44e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b524 <_vfiprintf_r+0x22c>
 800b452:	7821      	ldrb	r1, [r4, #0]
 800b454:	2203      	movs	r2, #3
 800b456:	4650      	mov	r0, sl
 800b458:	f7f4 feba 	bl	80001d0 <memchr>
 800b45c:	b138      	cbz	r0, 800b46e <_vfiprintf_r+0x176>
 800b45e:	9b04      	ldr	r3, [sp, #16]
 800b460:	eba0 000a 	sub.w	r0, r0, sl
 800b464:	2240      	movs	r2, #64	@ 0x40
 800b466:	4082      	lsls	r2, r0
 800b468:	4313      	orrs	r3, r2
 800b46a:	3401      	adds	r4, #1
 800b46c:	9304      	str	r3, [sp, #16]
 800b46e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b472:	4829      	ldr	r0, [pc, #164]	@ (800b518 <_vfiprintf_r+0x220>)
 800b474:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b478:	2206      	movs	r2, #6
 800b47a:	f7f4 fea9 	bl	80001d0 <memchr>
 800b47e:	2800      	cmp	r0, #0
 800b480:	d03f      	beq.n	800b502 <_vfiprintf_r+0x20a>
 800b482:	4b26      	ldr	r3, [pc, #152]	@ (800b51c <_vfiprintf_r+0x224>)
 800b484:	bb1b      	cbnz	r3, 800b4ce <_vfiprintf_r+0x1d6>
 800b486:	9b03      	ldr	r3, [sp, #12]
 800b488:	3307      	adds	r3, #7
 800b48a:	f023 0307 	bic.w	r3, r3, #7
 800b48e:	3308      	adds	r3, #8
 800b490:	9303      	str	r3, [sp, #12]
 800b492:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b494:	443b      	add	r3, r7
 800b496:	9309      	str	r3, [sp, #36]	@ 0x24
 800b498:	e76a      	b.n	800b370 <_vfiprintf_r+0x78>
 800b49a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b49e:	460c      	mov	r4, r1
 800b4a0:	2001      	movs	r0, #1
 800b4a2:	e7a8      	b.n	800b3f6 <_vfiprintf_r+0xfe>
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	3401      	adds	r4, #1
 800b4a8:	9305      	str	r3, [sp, #20]
 800b4aa:	4619      	mov	r1, r3
 800b4ac:	f04f 0c0a 	mov.w	ip, #10
 800b4b0:	4620      	mov	r0, r4
 800b4b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4b6:	3a30      	subs	r2, #48	@ 0x30
 800b4b8:	2a09      	cmp	r2, #9
 800b4ba:	d903      	bls.n	800b4c4 <_vfiprintf_r+0x1cc>
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d0c6      	beq.n	800b44e <_vfiprintf_r+0x156>
 800b4c0:	9105      	str	r1, [sp, #20]
 800b4c2:	e7c4      	b.n	800b44e <_vfiprintf_r+0x156>
 800b4c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b4c8:	4604      	mov	r4, r0
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	e7f0      	b.n	800b4b0 <_vfiprintf_r+0x1b8>
 800b4ce:	ab03      	add	r3, sp, #12
 800b4d0:	9300      	str	r3, [sp, #0]
 800b4d2:	462a      	mov	r2, r5
 800b4d4:	4b12      	ldr	r3, [pc, #72]	@ (800b520 <_vfiprintf_r+0x228>)
 800b4d6:	a904      	add	r1, sp, #16
 800b4d8:	4630      	mov	r0, r6
 800b4da:	f3af 8000 	nop.w
 800b4de:	4607      	mov	r7, r0
 800b4e0:	1c78      	adds	r0, r7, #1
 800b4e2:	d1d6      	bne.n	800b492 <_vfiprintf_r+0x19a>
 800b4e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b4e6:	07d9      	lsls	r1, r3, #31
 800b4e8:	d405      	bmi.n	800b4f6 <_vfiprintf_r+0x1fe>
 800b4ea:	89ab      	ldrh	r3, [r5, #12]
 800b4ec:	059a      	lsls	r2, r3, #22
 800b4ee:	d402      	bmi.n	800b4f6 <_vfiprintf_r+0x1fe>
 800b4f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b4f2:	f7ff fe8b 	bl	800b20c <__retarget_lock_release_recursive>
 800b4f6:	89ab      	ldrh	r3, [r5, #12]
 800b4f8:	065b      	lsls	r3, r3, #25
 800b4fa:	f53f af1f 	bmi.w	800b33c <_vfiprintf_r+0x44>
 800b4fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b500:	e71e      	b.n	800b340 <_vfiprintf_r+0x48>
 800b502:	ab03      	add	r3, sp, #12
 800b504:	9300      	str	r3, [sp, #0]
 800b506:	462a      	mov	r2, r5
 800b508:	4b05      	ldr	r3, [pc, #20]	@ (800b520 <_vfiprintf_r+0x228>)
 800b50a:	a904      	add	r1, sp, #16
 800b50c:	4630      	mov	r0, r6
 800b50e:	f000 f879 	bl	800b604 <_printf_i>
 800b512:	e7e4      	b.n	800b4de <_vfiprintf_r+0x1e6>
 800b514:	0800c6f8 	.word	0x0800c6f8
 800b518:	0800c702 	.word	0x0800c702
 800b51c:	00000000 	.word	0x00000000
 800b520:	0800b2d3 	.word	0x0800b2d3
 800b524:	0800c6fe 	.word	0x0800c6fe

0800b528 <_printf_common>:
 800b528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b52c:	4616      	mov	r6, r2
 800b52e:	4698      	mov	r8, r3
 800b530:	688a      	ldr	r2, [r1, #8]
 800b532:	690b      	ldr	r3, [r1, #16]
 800b534:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b538:	4293      	cmp	r3, r2
 800b53a:	bfb8      	it	lt
 800b53c:	4613      	movlt	r3, r2
 800b53e:	6033      	str	r3, [r6, #0]
 800b540:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b544:	4607      	mov	r7, r0
 800b546:	460c      	mov	r4, r1
 800b548:	b10a      	cbz	r2, 800b54e <_printf_common+0x26>
 800b54a:	3301      	adds	r3, #1
 800b54c:	6033      	str	r3, [r6, #0]
 800b54e:	6823      	ldr	r3, [r4, #0]
 800b550:	0699      	lsls	r1, r3, #26
 800b552:	bf42      	ittt	mi
 800b554:	6833      	ldrmi	r3, [r6, #0]
 800b556:	3302      	addmi	r3, #2
 800b558:	6033      	strmi	r3, [r6, #0]
 800b55a:	6825      	ldr	r5, [r4, #0]
 800b55c:	f015 0506 	ands.w	r5, r5, #6
 800b560:	d106      	bne.n	800b570 <_printf_common+0x48>
 800b562:	f104 0a19 	add.w	sl, r4, #25
 800b566:	68e3      	ldr	r3, [r4, #12]
 800b568:	6832      	ldr	r2, [r6, #0]
 800b56a:	1a9b      	subs	r3, r3, r2
 800b56c:	42ab      	cmp	r3, r5
 800b56e:	dc26      	bgt.n	800b5be <_printf_common+0x96>
 800b570:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b574:	6822      	ldr	r2, [r4, #0]
 800b576:	3b00      	subs	r3, #0
 800b578:	bf18      	it	ne
 800b57a:	2301      	movne	r3, #1
 800b57c:	0692      	lsls	r2, r2, #26
 800b57e:	d42b      	bmi.n	800b5d8 <_printf_common+0xb0>
 800b580:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b584:	4641      	mov	r1, r8
 800b586:	4638      	mov	r0, r7
 800b588:	47c8      	blx	r9
 800b58a:	3001      	adds	r0, #1
 800b58c:	d01e      	beq.n	800b5cc <_printf_common+0xa4>
 800b58e:	6823      	ldr	r3, [r4, #0]
 800b590:	6922      	ldr	r2, [r4, #16]
 800b592:	f003 0306 	and.w	r3, r3, #6
 800b596:	2b04      	cmp	r3, #4
 800b598:	bf02      	ittt	eq
 800b59a:	68e5      	ldreq	r5, [r4, #12]
 800b59c:	6833      	ldreq	r3, [r6, #0]
 800b59e:	1aed      	subeq	r5, r5, r3
 800b5a0:	68a3      	ldr	r3, [r4, #8]
 800b5a2:	bf0c      	ite	eq
 800b5a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b5a8:	2500      	movne	r5, #0
 800b5aa:	4293      	cmp	r3, r2
 800b5ac:	bfc4      	itt	gt
 800b5ae:	1a9b      	subgt	r3, r3, r2
 800b5b0:	18ed      	addgt	r5, r5, r3
 800b5b2:	2600      	movs	r6, #0
 800b5b4:	341a      	adds	r4, #26
 800b5b6:	42b5      	cmp	r5, r6
 800b5b8:	d11a      	bne.n	800b5f0 <_printf_common+0xc8>
 800b5ba:	2000      	movs	r0, #0
 800b5bc:	e008      	b.n	800b5d0 <_printf_common+0xa8>
 800b5be:	2301      	movs	r3, #1
 800b5c0:	4652      	mov	r2, sl
 800b5c2:	4641      	mov	r1, r8
 800b5c4:	4638      	mov	r0, r7
 800b5c6:	47c8      	blx	r9
 800b5c8:	3001      	adds	r0, #1
 800b5ca:	d103      	bne.n	800b5d4 <_printf_common+0xac>
 800b5cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b5d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5d4:	3501      	adds	r5, #1
 800b5d6:	e7c6      	b.n	800b566 <_printf_common+0x3e>
 800b5d8:	18e1      	adds	r1, r4, r3
 800b5da:	1c5a      	adds	r2, r3, #1
 800b5dc:	2030      	movs	r0, #48	@ 0x30
 800b5de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b5e2:	4422      	add	r2, r4
 800b5e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b5e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b5ec:	3302      	adds	r3, #2
 800b5ee:	e7c7      	b.n	800b580 <_printf_common+0x58>
 800b5f0:	2301      	movs	r3, #1
 800b5f2:	4622      	mov	r2, r4
 800b5f4:	4641      	mov	r1, r8
 800b5f6:	4638      	mov	r0, r7
 800b5f8:	47c8      	blx	r9
 800b5fa:	3001      	adds	r0, #1
 800b5fc:	d0e6      	beq.n	800b5cc <_printf_common+0xa4>
 800b5fe:	3601      	adds	r6, #1
 800b600:	e7d9      	b.n	800b5b6 <_printf_common+0x8e>
	...

0800b604 <_printf_i>:
 800b604:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b608:	7e0f      	ldrb	r7, [r1, #24]
 800b60a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b60c:	2f78      	cmp	r7, #120	@ 0x78
 800b60e:	4691      	mov	r9, r2
 800b610:	4680      	mov	r8, r0
 800b612:	460c      	mov	r4, r1
 800b614:	469a      	mov	sl, r3
 800b616:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b61a:	d807      	bhi.n	800b62c <_printf_i+0x28>
 800b61c:	2f62      	cmp	r7, #98	@ 0x62
 800b61e:	d80a      	bhi.n	800b636 <_printf_i+0x32>
 800b620:	2f00      	cmp	r7, #0
 800b622:	f000 80d2 	beq.w	800b7ca <_printf_i+0x1c6>
 800b626:	2f58      	cmp	r7, #88	@ 0x58
 800b628:	f000 80b9 	beq.w	800b79e <_printf_i+0x19a>
 800b62c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b630:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b634:	e03a      	b.n	800b6ac <_printf_i+0xa8>
 800b636:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b63a:	2b15      	cmp	r3, #21
 800b63c:	d8f6      	bhi.n	800b62c <_printf_i+0x28>
 800b63e:	a101      	add	r1, pc, #4	@ (adr r1, 800b644 <_printf_i+0x40>)
 800b640:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b644:	0800b69d 	.word	0x0800b69d
 800b648:	0800b6b1 	.word	0x0800b6b1
 800b64c:	0800b62d 	.word	0x0800b62d
 800b650:	0800b62d 	.word	0x0800b62d
 800b654:	0800b62d 	.word	0x0800b62d
 800b658:	0800b62d 	.word	0x0800b62d
 800b65c:	0800b6b1 	.word	0x0800b6b1
 800b660:	0800b62d 	.word	0x0800b62d
 800b664:	0800b62d 	.word	0x0800b62d
 800b668:	0800b62d 	.word	0x0800b62d
 800b66c:	0800b62d 	.word	0x0800b62d
 800b670:	0800b7b1 	.word	0x0800b7b1
 800b674:	0800b6db 	.word	0x0800b6db
 800b678:	0800b76b 	.word	0x0800b76b
 800b67c:	0800b62d 	.word	0x0800b62d
 800b680:	0800b62d 	.word	0x0800b62d
 800b684:	0800b7d3 	.word	0x0800b7d3
 800b688:	0800b62d 	.word	0x0800b62d
 800b68c:	0800b6db 	.word	0x0800b6db
 800b690:	0800b62d 	.word	0x0800b62d
 800b694:	0800b62d 	.word	0x0800b62d
 800b698:	0800b773 	.word	0x0800b773
 800b69c:	6833      	ldr	r3, [r6, #0]
 800b69e:	1d1a      	adds	r2, r3, #4
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	6032      	str	r2, [r6, #0]
 800b6a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b6a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	e09d      	b.n	800b7ec <_printf_i+0x1e8>
 800b6b0:	6833      	ldr	r3, [r6, #0]
 800b6b2:	6820      	ldr	r0, [r4, #0]
 800b6b4:	1d19      	adds	r1, r3, #4
 800b6b6:	6031      	str	r1, [r6, #0]
 800b6b8:	0606      	lsls	r6, r0, #24
 800b6ba:	d501      	bpl.n	800b6c0 <_printf_i+0xbc>
 800b6bc:	681d      	ldr	r5, [r3, #0]
 800b6be:	e003      	b.n	800b6c8 <_printf_i+0xc4>
 800b6c0:	0645      	lsls	r5, r0, #25
 800b6c2:	d5fb      	bpl.n	800b6bc <_printf_i+0xb8>
 800b6c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b6c8:	2d00      	cmp	r5, #0
 800b6ca:	da03      	bge.n	800b6d4 <_printf_i+0xd0>
 800b6cc:	232d      	movs	r3, #45	@ 0x2d
 800b6ce:	426d      	negs	r5, r5
 800b6d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b6d4:	4859      	ldr	r0, [pc, #356]	@ (800b83c <_printf_i+0x238>)
 800b6d6:	230a      	movs	r3, #10
 800b6d8:	e011      	b.n	800b6fe <_printf_i+0xfa>
 800b6da:	6821      	ldr	r1, [r4, #0]
 800b6dc:	6833      	ldr	r3, [r6, #0]
 800b6de:	0608      	lsls	r0, r1, #24
 800b6e0:	f853 5b04 	ldr.w	r5, [r3], #4
 800b6e4:	d402      	bmi.n	800b6ec <_printf_i+0xe8>
 800b6e6:	0649      	lsls	r1, r1, #25
 800b6e8:	bf48      	it	mi
 800b6ea:	b2ad      	uxthmi	r5, r5
 800b6ec:	2f6f      	cmp	r7, #111	@ 0x6f
 800b6ee:	4853      	ldr	r0, [pc, #332]	@ (800b83c <_printf_i+0x238>)
 800b6f0:	6033      	str	r3, [r6, #0]
 800b6f2:	bf14      	ite	ne
 800b6f4:	230a      	movne	r3, #10
 800b6f6:	2308      	moveq	r3, #8
 800b6f8:	2100      	movs	r1, #0
 800b6fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b6fe:	6866      	ldr	r6, [r4, #4]
 800b700:	60a6      	str	r6, [r4, #8]
 800b702:	2e00      	cmp	r6, #0
 800b704:	bfa2      	ittt	ge
 800b706:	6821      	ldrge	r1, [r4, #0]
 800b708:	f021 0104 	bicge.w	r1, r1, #4
 800b70c:	6021      	strge	r1, [r4, #0]
 800b70e:	b90d      	cbnz	r5, 800b714 <_printf_i+0x110>
 800b710:	2e00      	cmp	r6, #0
 800b712:	d04b      	beq.n	800b7ac <_printf_i+0x1a8>
 800b714:	4616      	mov	r6, r2
 800b716:	fbb5 f1f3 	udiv	r1, r5, r3
 800b71a:	fb03 5711 	mls	r7, r3, r1, r5
 800b71e:	5dc7      	ldrb	r7, [r0, r7]
 800b720:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b724:	462f      	mov	r7, r5
 800b726:	42bb      	cmp	r3, r7
 800b728:	460d      	mov	r5, r1
 800b72a:	d9f4      	bls.n	800b716 <_printf_i+0x112>
 800b72c:	2b08      	cmp	r3, #8
 800b72e:	d10b      	bne.n	800b748 <_printf_i+0x144>
 800b730:	6823      	ldr	r3, [r4, #0]
 800b732:	07df      	lsls	r7, r3, #31
 800b734:	d508      	bpl.n	800b748 <_printf_i+0x144>
 800b736:	6923      	ldr	r3, [r4, #16]
 800b738:	6861      	ldr	r1, [r4, #4]
 800b73a:	4299      	cmp	r1, r3
 800b73c:	bfde      	ittt	le
 800b73e:	2330      	movle	r3, #48	@ 0x30
 800b740:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b744:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b748:	1b92      	subs	r2, r2, r6
 800b74a:	6122      	str	r2, [r4, #16]
 800b74c:	f8cd a000 	str.w	sl, [sp]
 800b750:	464b      	mov	r3, r9
 800b752:	aa03      	add	r2, sp, #12
 800b754:	4621      	mov	r1, r4
 800b756:	4640      	mov	r0, r8
 800b758:	f7ff fee6 	bl	800b528 <_printf_common>
 800b75c:	3001      	adds	r0, #1
 800b75e:	d14a      	bne.n	800b7f6 <_printf_i+0x1f2>
 800b760:	f04f 30ff 	mov.w	r0, #4294967295
 800b764:	b004      	add	sp, #16
 800b766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b76a:	6823      	ldr	r3, [r4, #0]
 800b76c:	f043 0320 	orr.w	r3, r3, #32
 800b770:	6023      	str	r3, [r4, #0]
 800b772:	4833      	ldr	r0, [pc, #204]	@ (800b840 <_printf_i+0x23c>)
 800b774:	2778      	movs	r7, #120	@ 0x78
 800b776:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b77a:	6823      	ldr	r3, [r4, #0]
 800b77c:	6831      	ldr	r1, [r6, #0]
 800b77e:	061f      	lsls	r7, r3, #24
 800b780:	f851 5b04 	ldr.w	r5, [r1], #4
 800b784:	d402      	bmi.n	800b78c <_printf_i+0x188>
 800b786:	065f      	lsls	r7, r3, #25
 800b788:	bf48      	it	mi
 800b78a:	b2ad      	uxthmi	r5, r5
 800b78c:	6031      	str	r1, [r6, #0]
 800b78e:	07d9      	lsls	r1, r3, #31
 800b790:	bf44      	itt	mi
 800b792:	f043 0320 	orrmi.w	r3, r3, #32
 800b796:	6023      	strmi	r3, [r4, #0]
 800b798:	b11d      	cbz	r5, 800b7a2 <_printf_i+0x19e>
 800b79a:	2310      	movs	r3, #16
 800b79c:	e7ac      	b.n	800b6f8 <_printf_i+0xf4>
 800b79e:	4827      	ldr	r0, [pc, #156]	@ (800b83c <_printf_i+0x238>)
 800b7a0:	e7e9      	b.n	800b776 <_printf_i+0x172>
 800b7a2:	6823      	ldr	r3, [r4, #0]
 800b7a4:	f023 0320 	bic.w	r3, r3, #32
 800b7a8:	6023      	str	r3, [r4, #0]
 800b7aa:	e7f6      	b.n	800b79a <_printf_i+0x196>
 800b7ac:	4616      	mov	r6, r2
 800b7ae:	e7bd      	b.n	800b72c <_printf_i+0x128>
 800b7b0:	6833      	ldr	r3, [r6, #0]
 800b7b2:	6825      	ldr	r5, [r4, #0]
 800b7b4:	6961      	ldr	r1, [r4, #20]
 800b7b6:	1d18      	adds	r0, r3, #4
 800b7b8:	6030      	str	r0, [r6, #0]
 800b7ba:	062e      	lsls	r6, r5, #24
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	d501      	bpl.n	800b7c4 <_printf_i+0x1c0>
 800b7c0:	6019      	str	r1, [r3, #0]
 800b7c2:	e002      	b.n	800b7ca <_printf_i+0x1c6>
 800b7c4:	0668      	lsls	r0, r5, #25
 800b7c6:	d5fb      	bpl.n	800b7c0 <_printf_i+0x1bc>
 800b7c8:	8019      	strh	r1, [r3, #0]
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	6123      	str	r3, [r4, #16]
 800b7ce:	4616      	mov	r6, r2
 800b7d0:	e7bc      	b.n	800b74c <_printf_i+0x148>
 800b7d2:	6833      	ldr	r3, [r6, #0]
 800b7d4:	1d1a      	adds	r2, r3, #4
 800b7d6:	6032      	str	r2, [r6, #0]
 800b7d8:	681e      	ldr	r6, [r3, #0]
 800b7da:	6862      	ldr	r2, [r4, #4]
 800b7dc:	2100      	movs	r1, #0
 800b7de:	4630      	mov	r0, r6
 800b7e0:	f7f4 fcf6 	bl	80001d0 <memchr>
 800b7e4:	b108      	cbz	r0, 800b7ea <_printf_i+0x1e6>
 800b7e6:	1b80      	subs	r0, r0, r6
 800b7e8:	6060      	str	r0, [r4, #4]
 800b7ea:	6863      	ldr	r3, [r4, #4]
 800b7ec:	6123      	str	r3, [r4, #16]
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b7f4:	e7aa      	b.n	800b74c <_printf_i+0x148>
 800b7f6:	6923      	ldr	r3, [r4, #16]
 800b7f8:	4632      	mov	r2, r6
 800b7fa:	4649      	mov	r1, r9
 800b7fc:	4640      	mov	r0, r8
 800b7fe:	47d0      	blx	sl
 800b800:	3001      	adds	r0, #1
 800b802:	d0ad      	beq.n	800b760 <_printf_i+0x15c>
 800b804:	6823      	ldr	r3, [r4, #0]
 800b806:	079b      	lsls	r3, r3, #30
 800b808:	d413      	bmi.n	800b832 <_printf_i+0x22e>
 800b80a:	68e0      	ldr	r0, [r4, #12]
 800b80c:	9b03      	ldr	r3, [sp, #12]
 800b80e:	4298      	cmp	r0, r3
 800b810:	bfb8      	it	lt
 800b812:	4618      	movlt	r0, r3
 800b814:	e7a6      	b.n	800b764 <_printf_i+0x160>
 800b816:	2301      	movs	r3, #1
 800b818:	4632      	mov	r2, r6
 800b81a:	4649      	mov	r1, r9
 800b81c:	4640      	mov	r0, r8
 800b81e:	47d0      	blx	sl
 800b820:	3001      	adds	r0, #1
 800b822:	d09d      	beq.n	800b760 <_printf_i+0x15c>
 800b824:	3501      	adds	r5, #1
 800b826:	68e3      	ldr	r3, [r4, #12]
 800b828:	9903      	ldr	r1, [sp, #12]
 800b82a:	1a5b      	subs	r3, r3, r1
 800b82c:	42ab      	cmp	r3, r5
 800b82e:	dcf2      	bgt.n	800b816 <_printf_i+0x212>
 800b830:	e7eb      	b.n	800b80a <_printf_i+0x206>
 800b832:	2500      	movs	r5, #0
 800b834:	f104 0619 	add.w	r6, r4, #25
 800b838:	e7f5      	b.n	800b826 <_printf_i+0x222>
 800b83a:	bf00      	nop
 800b83c:	0800c709 	.word	0x0800c709
 800b840:	0800c71a 	.word	0x0800c71a

0800b844 <__sflush_r>:
 800b844:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b84c:	0716      	lsls	r6, r2, #28
 800b84e:	4605      	mov	r5, r0
 800b850:	460c      	mov	r4, r1
 800b852:	d454      	bmi.n	800b8fe <__sflush_r+0xba>
 800b854:	684b      	ldr	r3, [r1, #4]
 800b856:	2b00      	cmp	r3, #0
 800b858:	dc02      	bgt.n	800b860 <__sflush_r+0x1c>
 800b85a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	dd48      	ble.n	800b8f2 <__sflush_r+0xae>
 800b860:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b862:	2e00      	cmp	r6, #0
 800b864:	d045      	beq.n	800b8f2 <__sflush_r+0xae>
 800b866:	2300      	movs	r3, #0
 800b868:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b86c:	682f      	ldr	r7, [r5, #0]
 800b86e:	6a21      	ldr	r1, [r4, #32]
 800b870:	602b      	str	r3, [r5, #0]
 800b872:	d030      	beq.n	800b8d6 <__sflush_r+0x92>
 800b874:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b876:	89a3      	ldrh	r3, [r4, #12]
 800b878:	0759      	lsls	r1, r3, #29
 800b87a:	d505      	bpl.n	800b888 <__sflush_r+0x44>
 800b87c:	6863      	ldr	r3, [r4, #4]
 800b87e:	1ad2      	subs	r2, r2, r3
 800b880:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b882:	b10b      	cbz	r3, 800b888 <__sflush_r+0x44>
 800b884:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b886:	1ad2      	subs	r2, r2, r3
 800b888:	2300      	movs	r3, #0
 800b88a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b88c:	6a21      	ldr	r1, [r4, #32]
 800b88e:	4628      	mov	r0, r5
 800b890:	47b0      	blx	r6
 800b892:	1c43      	adds	r3, r0, #1
 800b894:	89a3      	ldrh	r3, [r4, #12]
 800b896:	d106      	bne.n	800b8a6 <__sflush_r+0x62>
 800b898:	6829      	ldr	r1, [r5, #0]
 800b89a:	291d      	cmp	r1, #29
 800b89c:	d82b      	bhi.n	800b8f6 <__sflush_r+0xb2>
 800b89e:	4a2a      	ldr	r2, [pc, #168]	@ (800b948 <__sflush_r+0x104>)
 800b8a0:	410a      	asrs	r2, r1
 800b8a2:	07d6      	lsls	r6, r2, #31
 800b8a4:	d427      	bmi.n	800b8f6 <__sflush_r+0xb2>
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	6062      	str	r2, [r4, #4]
 800b8aa:	04d9      	lsls	r1, r3, #19
 800b8ac:	6922      	ldr	r2, [r4, #16]
 800b8ae:	6022      	str	r2, [r4, #0]
 800b8b0:	d504      	bpl.n	800b8bc <__sflush_r+0x78>
 800b8b2:	1c42      	adds	r2, r0, #1
 800b8b4:	d101      	bne.n	800b8ba <__sflush_r+0x76>
 800b8b6:	682b      	ldr	r3, [r5, #0]
 800b8b8:	b903      	cbnz	r3, 800b8bc <__sflush_r+0x78>
 800b8ba:	6560      	str	r0, [r4, #84]	@ 0x54
 800b8bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b8be:	602f      	str	r7, [r5, #0]
 800b8c0:	b1b9      	cbz	r1, 800b8f2 <__sflush_r+0xae>
 800b8c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b8c6:	4299      	cmp	r1, r3
 800b8c8:	d002      	beq.n	800b8d0 <__sflush_r+0x8c>
 800b8ca:	4628      	mov	r0, r5
 800b8cc:	f7ff fca0 	bl	800b210 <_free_r>
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	6363      	str	r3, [r4, #52]	@ 0x34
 800b8d4:	e00d      	b.n	800b8f2 <__sflush_r+0xae>
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	4628      	mov	r0, r5
 800b8da:	47b0      	blx	r6
 800b8dc:	4602      	mov	r2, r0
 800b8de:	1c50      	adds	r0, r2, #1
 800b8e0:	d1c9      	bne.n	800b876 <__sflush_r+0x32>
 800b8e2:	682b      	ldr	r3, [r5, #0]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d0c6      	beq.n	800b876 <__sflush_r+0x32>
 800b8e8:	2b1d      	cmp	r3, #29
 800b8ea:	d001      	beq.n	800b8f0 <__sflush_r+0xac>
 800b8ec:	2b16      	cmp	r3, #22
 800b8ee:	d11e      	bne.n	800b92e <__sflush_r+0xea>
 800b8f0:	602f      	str	r7, [r5, #0]
 800b8f2:	2000      	movs	r0, #0
 800b8f4:	e022      	b.n	800b93c <__sflush_r+0xf8>
 800b8f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8fa:	b21b      	sxth	r3, r3
 800b8fc:	e01b      	b.n	800b936 <__sflush_r+0xf2>
 800b8fe:	690f      	ldr	r7, [r1, #16]
 800b900:	2f00      	cmp	r7, #0
 800b902:	d0f6      	beq.n	800b8f2 <__sflush_r+0xae>
 800b904:	0793      	lsls	r3, r2, #30
 800b906:	680e      	ldr	r6, [r1, #0]
 800b908:	bf08      	it	eq
 800b90a:	694b      	ldreq	r3, [r1, #20]
 800b90c:	600f      	str	r7, [r1, #0]
 800b90e:	bf18      	it	ne
 800b910:	2300      	movne	r3, #0
 800b912:	eba6 0807 	sub.w	r8, r6, r7
 800b916:	608b      	str	r3, [r1, #8]
 800b918:	f1b8 0f00 	cmp.w	r8, #0
 800b91c:	dde9      	ble.n	800b8f2 <__sflush_r+0xae>
 800b91e:	6a21      	ldr	r1, [r4, #32]
 800b920:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b922:	4643      	mov	r3, r8
 800b924:	463a      	mov	r2, r7
 800b926:	4628      	mov	r0, r5
 800b928:	47b0      	blx	r6
 800b92a:	2800      	cmp	r0, #0
 800b92c:	dc08      	bgt.n	800b940 <__sflush_r+0xfc>
 800b92e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b932:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b936:	81a3      	strh	r3, [r4, #12]
 800b938:	f04f 30ff 	mov.w	r0, #4294967295
 800b93c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b940:	4407      	add	r7, r0
 800b942:	eba8 0800 	sub.w	r8, r8, r0
 800b946:	e7e7      	b.n	800b918 <__sflush_r+0xd4>
 800b948:	dfbffffe 	.word	0xdfbffffe

0800b94c <_fflush_r>:
 800b94c:	b538      	push	{r3, r4, r5, lr}
 800b94e:	690b      	ldr	r3, [r1, #16]
 800b950:	4605      	mov	r5, r0
 800b952:	460c      	mov	r4, r1
 800b954:	b913      	cbnz	r3, 800b95c <_fflush_r+0x10>
 800b956:	2500      	movs	r5, #0
 800b958:	4628      	mov	r0, r5
 800b95a:	bd38      	pop	{r3, r4, r5, pc}
 800b95c:	b118      	cbz	r0, 800b966 <_fflush_r+0x1a>
 800b95e:	6a03      	ldr	r3, [r0, #32]
 800b960:	b90b      	cbnz	r3, 800b966 <_fflush_r+0x1a>
 800b962:	f7ff fb3d 	bl	800afe0 <__sinit>
 800b966:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d0f3      	beq.n	800b956 <_fflush_r+0xa>
 800b96e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b970:	07d0      	lsls	r0, r2, #31
 800b972:	d404      	bmi.n	800b97e <_fflush_r+0x32>
 800b974:	0599      	lsls	r1, r3, #22
 800b976:	d402      	bmi.n	800b97e <_fflush_r+0x32>
 800b978:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b97a:	f7ff fc46 	bl	800b20a <__retarget_lock_acquire_recursive>
 800b97e:	4628      	mov	r0, r5
 800b980:	4621      	mov	r1, r4
 800b982:	f7ff ff5f 	bl	800b844 <__sflush_r>
 800b986:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b988:	07da      	lsls	r2, r3, #31
 800b98a:	4605      	mov	r5, r0
 800b98c:	d4e4      	bmi.n	800b958 <_fflush_r+0xc>
 800b98e:	89a3      	ldrh	r3, [r4, #12]
 800b990:	059b      	lsls	r3, r3, #22
 800b992:	d4e1      	bmi.n	800b958 <_fflush_r+0xc>
 800b994:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b996:	f7ff fc39 	bl	800b20c <__retarget_lock_release_recursive>
 800b99a:	e7dd      	b.n	800b958 <_fflush_r+0xc>

0800b99c <__swbuf_r>:
 800b99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b99e:	460e      	mov	r6, r1
 800b9a0:	4614      	mov	r4, r2
 800b9a2:	4605      	mov	r5, r0
 800b9a4:	b118      	cbz	r0, 800b9ae <__swbuf_r+0x12>
 800b9a6:	6a03      	ldr	r3, [r0, #32]
 800b9a8:	b90b      	cbnz	r3, 800b9ae <__swbuf_r+0x12>
 800b9aa:	f7ff fb19 	bl	800afe0 <__sinit>
 800b9ae:	69a3      	ldr	r3, [r4, #24]
 800b9b0:	60a3      	str	r3, [r4, #8]
 800b9b2:	89a3      	ldrh	r3, [r4, #12]
 800b9b4:	071a      	lsls	r2, r3, #28
 800b9b6:	d501      	bpl.n	800b9bc <__swbuf_r+0x20>
 800b9b8:	6923      	ldr	r3, [r4, #16]
 800b9ba:	b943      	cbnz	r3, 800b9ce <__swbuf_r+0x32>
 800b9bc:	4621      	mov	r1, r4
 800b9be:	4628      	mov	r0, r5
 800b9c0:	f000 f82a 	bl	800ba18 <__swsetup_r>
 800b9c4:	b118      	cbz	r0, 800b9ce <__swbuf_r+0x32>
 800b9c6:	f04f 37ff 	mov.w	r7, #4294967295
 800b9ca:	4638      	mov	r0, r7
 800b9cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9ce:	6823      	ldr	r3, [r4, #0]
 800b9d0:	6922      	ldr	r2, [r4, #16]
 800b9d2:	1a98      	subs	r0, r3, r2
 800b9d4:	6963      	ldr	r3, [r4, #20]
 800b9d6:	b2f6      	uxtb	r6, r6
 800b9d8:	4283      	cmp	r3, r0
 800b9da:	4637      	mov	r7, r6
 800b9dc:	dc05      	bgt.n	800b9ea <__swbuf_r+0x4e>
 800b9de:	4621      	mov	r1, r4
 800b9e0:	4628      	mov	r0, r5
 800b9e2:	f7ff ffb3 	bl	800b94c <_fflush_r>
 800b9e6:	2800      	cmp	r0, #0
 800b9e8:	d1ed      	bne.n	800b9c6 <__swbuf_r+0x2a>
 800b9ea:	68a3      	ldr	r3, [r4, #8]
 800b9ec:	3b01      	subs	r3, #1
 800b9ee:	60a3      	str	r3, [r4, #8]
 800b9f0:	6823      	ldr	r3, [r4, #0]
 800b9f2:	1c5a      	adds	r2, r3, #1
 800b9f4:	6022      	str	r2, [r4, #0]
 800b9f6:	701e      	strb	r6, [r3, #0]
 800b9f8:	6962      	ldr	r2, [r4, #20]
 800b9fa:	1c43      	adds	r3, r0, #1
 800b9fc:	429a      	cmp	r2, r3
 800b9fe:	d004      	beq.n	800ba0a <__swbuf_r+0x6e>
 800ba00:	89a3      	ldrh	r3, [r4, #12]
 800ba02:	07db      	lsls	r3, r3, #31
 800ba04:	d5e1      	bpl.n	800b9ca <__swbuf_r+0x2e>
 800ba06:	2e0a      	cmp	r6, #10
 800ba08:	d1df      	bne.n	800b9ca <__swbuf_r+0x2e>
 800ba0a:	4621      	mov	r1, r4
 800ba0c:	4628      	mov	r0, r5
 800ba0e:	f7ff ff9d 	bl	800b94c <_fflush_r>
 800ba12:	2800      	cmp	r0, #0
 800ba14:	d0d9      	beq.n	800b9ca <__swbuf_r+0x2e>
 800ba16:	e7d6      	b.n	800b9c6 <__swbuf_r+0x2a>

0800ba18 <__swsetup_r>:
 800ba18:	b538      	push	{r3, r4, r5, lr}
 800ba1a:	4b29      	ldr	r3, [pc, #164]	@ (800bac0 <__swsetup_r+0xa8>)
 800ba1c:	4605      	mov	r5, r0
 800ba1e:	6818      	ldr	r0, [r3, #0]
 800ba20:	460c      	mov	r4, r1
 800ba22:	b118      	cbz	r0, 800ba2c <__swsetup_r+0x14>
 800ba24:	6a03      	ldr	r3, [r0, #32]
 800ba26:	b90b      	cbnz	r3, 800ba2c <__swsetup_r+0x14>
 800ba28:	f7ff fada 	bl	800afe0 <__sinit>
 800ba2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba30:	0719      	lsls	r1, r3, #28
 800ba32:	d422      	bmi.n	800ba7a <__swsetup_r+0x62>
 800ba34:	06da      	lsls	r2, r3, #27
 800ba36:	d407      	bmi.n	800ba48 <__swsetup_r+0x30>
 800ba38:	2209      	movs	r2, #9
 800ba3a:	602a      	str	r2, [r5, #0]
 800ba3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba40:	81a3      	strh	r3, [r4, #12]
 800ba42:	f04f 30ff 	mov.w	r0, #4294967295
 800ba46:	e033      	b.n	800bab0 <__swsetup_r+0x98>
 800ba48:	0758      	lsls	r0, r3, #29
 800ba4a:	d512      	bpl.n	800ba72 <__swsetup_r+0x5a>
 800ba4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ba4e:	b141      	cbz	r1, 800ba62 <__swsetup_r+0x4a>
 800ba50:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ba54:	4299      	cmp	r1, r3
 800ba56:	d002      	beq.n	800ba5e <__swsetup_r+0x46>
 800ba58:	4628      	mov	r0, r5
 800ba5a:	f7ff fbd9 	bl	800b210 <_free_r>
 800ba5e:	2300      	movs	r3, #0
 800ba60:	6363      	str	r3, [r4, #52]	@ 0x34
 800ba62:	89a3      	ldrh	r3, [r4, #12]
 800ba64:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ba68:	81a3      	strh	r3, [r4, #12]
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	6063      	str	r3, [r4, #4]
 800ba6e:	6923      	ldr	r3, [r4, #16]
 800ba70:	6023      	str	r3, [r4, #0]
 800ba72:	89a3      	ldrh	r3, [r4, #12]
 800ba74:	f043 0308 	orr.w	r3, r3, #8
 800ba78:	81a3      	strh	r3, [r4, #12]
 800ba7a:	6923      	ldr	r3, [r4, #16]
 800ba7c:	b94b      	cbnz	r3, 800ba92 <__swsetup_r+0x7a>
 800ba7e:	89a3      	ldrh	r3, [r4, #12]
 800ba80:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ba84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ba88:	d003      	beq.n	800ba92 <__swsetup_r+0x7a>
 800ba8a:	4621      	mov	r1, r4
 800ba8c:	4628      	mov	r0, r5
 800ba8e:	f000 f83f 	bl	800bb10 <__smakebuf_r>
 800ba92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba96:	f013 0201 	ands.w	r2, r3, #1
 800ba9a:	d00a      	beq.n	800bab2 <__swsetup_r+0x9a>
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	60a2      	str	r2, [r4, #8]
 800baa0:	6962      	ldr	r2, [r4, #20]
 800baa2:	4252      	negs	r2, r2
 800baa4:	61a2      	str	r2, [r4, #24]
 800baa6:	6922      	ldr	r2, [r4, #16]
 800baa8:	b942      	cbnz	r2, 800babc <__swsetup_r+0xa4>
 800baaa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800baae:	d1c5      	bne.n	800ba3c <__swsetup_r+0x24>
 800bab0:	bd38      	pop	{r3, r4, r5, pc}
 800bab2:	0799      	lsls	r1, r3, #30
 800bab4:	bf58      	it	pl
 800bab6:	6962      	ldrpl	r2, [r4, #20]
 800bab8:	60a2      	str	r2, [r4, #8]
 800baba:	e7f4      	b.n	800baa6 <__swsetup_r+0x8e>
 800babc:	2000      	movs	r0, #0
 800babe:	e7f7      	b.n	800bab0 <__swsetup_r+0x98>
 800bac0:	20000038 	.word	0x20000038

0800bac4 <__swhatbuf_r>:
 800bac4:	b570      	push	{r4, r5, r6, lr}
 800bac6:	460c      	mov	r4, r1
 800bac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bacc:	2900      	cmp	r1, #0
 800bace:	b096      	sub	sp, #88	@ 0x58
 800bad0:	4615      	mov	r5, r2
 800bad2:	461e      	mov	r6, r3
 800bad4:	da0d      	bge.n	800baf2 <__swhatbuf_r+0x2e>
 800bad6:	89a3      	ldrh	r3, [r4, #12]
 800bad8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800badc:	f04f 0100 	mov.w	r1, #0
 800bae0:	bf14      	ite	ne
 800bae2:	2340      	movne	r3, #64	@ 0x40
 800bae4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bae8:	2000      	movs	r0, #0
 800baea:	6031      	str	r1, [r6, #0]
 800baec:	602b      	str	r3, [r5, #0]
 800baee:	b016      	add	sp, #88	@ 0x58
 800baf0:	bd70      	pop	{r4, r5, r6, pc}
 800baf2:	466a      	mov	r2, sp
 800baf4:	f000 f848 	bl	800bb88 <_fstat_r>
 800baf8:	2800      	cmp	r0, #0
 800bafa:	dbec      	blt.n	800bad6 <__swhatbuf_r+0x12>
 800bafc:	9901      	ldr	r1, [sp, #4]
 800bafe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bb02:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bb06:	4259      	negs	r1, r3
 800bb08:	4159      	adcs	r1, r3
 800bb0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bb0e:	e7eb      	b.n	800bae8 <__swhatbuf_r+0x24>

0800bb10 <__smakebuf_r>:
 800bb10:	898b      	ldrh	r3, [r1, #12]
 800bb12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb14:	079d      	lsls	r5, r3, #30
 800bb16:	4606      	mov	r6, r0
 800bb18:	460c      	mov	r4, r1
 800bb1a:	d507      	bpl.n	800bb2c <__smakebuf_r+0x1c>
 800bb1c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bb20:	6023      	str	r3, [r4, #0]
 800bb22:	6123      	str	r3, [r4, #16]
 800bb24:	2301      	movs	r3, #1
 800bb26:	6163      	str	r3, [r4, #20]
 800bb28:	b003      	add	sp, #12
 800bb2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb2c:	ab01      	add	r3, sp, #4
 800bb2e:	466a      	mov	r2, sp
 800bb30:	f7ff ffc8 	bl	800bac4 <__swhatbuf_r>
 800bb34:	9f00      	ldr	r7, [sp, #0]
 800bb36:	4605      	mov	r5, r0
 800bb38:	4639      	mov	r1, r7
 800bb3a:	4630      	mov	r0, r6
 800bb3c:	f7ff f938 	bl	800adb0 <_malloc_r>
 800bb40:	b948      	cbnz	r0, 800bb56 <__smakebuf_r+0x46>
 800bb42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb46:	059a      	lsls	r2, r3, #22
 800bb48:	d4ee      	bmi.n	800bb28 <__smakebuf_r+0x18>
 800bb4a:	f023 0303 	bic.w	r3, r3, #3
 800bb4e:	f043 0302 	orr.w	r3, r3, #2
 800bb52:	81a3      	strh	r3, [r4, #12]
 800bb54:	e7e2      	b.n	800bb1c <__smakebuf_r+0xc>
 800bb56:	89a3      	ldrh	r3, [r4, #12]
 800bb58:	6020      	str	r0, [r4, #0]
 800bb5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb5e:	81a3      	strh	r3, [r4, #12]
 800bb60:	9b01      	ldr	r3, [sp, #4]
 800bb62:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bb66:	b15b      	cbz	r3, 800bb80 <__smakebuf_r+0x70>
 800bb68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb6c:	4630      	mov	r0, r6
 800bb6e:	f000 f81d 	bl	800bbac <_isatty_r>
 800bb72:	b128      	cbz	r0, 800bb80 <__smakebuf_r+0x70>
 800bb74:	89a3      	ldrh	r3, [r4, #12]
 800bb76:	f023 0303 	bic.w	r3, r3, #3
 800bb7a:	f043 0301 	orr.w	r3, r3, #1
 800bb7e:	81a3      	strh	r3, [r4, #12]
 800bb80:	89a3      	ldrh	r3, [r4, #12]
 800bb82:	431d      	orrs	r5, r3
 800bb84:	81a5      	strh	r5, [r4, #12]
 800bb86:	e7cf      	b.n	800bb28 <__smakebuf_r+0x18>

0800bb88 <_fstat_r>:
 800bb88:	b538      	push	{r3, r4, r5, lr}
 800bb8a:	4d07      	ldr	r5, [pc, #28]	@ (800bba8 <_fstat_r+0x20>)
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	4604      	mov	r4, r0
 800bb90:	4608      	mov	r0, r1
 800bb92:	4611      	mov	r1, r2
 800bb94:	602b      	str	r3, [r5, #0]
 800bb96:	f7f6 fa68 	bl	800206a <_fstat>
 800bb9a:	1c43      	adds	r3, r0, #1
 800bb9c:	d102      	bne.n	800bba4 <_fstat_r+0x1c>
 800bb9e:	682b      	ldr	r3, [r5, #0]
 800bba0:	b103      	cbz	r3, 800bba4 <_fstat_r+0x1c>
 800bba2:	6023      	str	r3, [r4, #0]
 800bba4:	bd38      	pop	{r3, r4, r5, pc}
 800bba6:	bf00      	nop
 800bba8:	20000c74 	.word	0x20000c74

0800bbac <_isatty_r>:
 800bbac:	b538      	push	{r3, r4, r5, lr}
 800bbae:	4d06      	ldr	r5, [pc, #24]	@ (800bbc8 <_isatty_r+0x1c>)
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	4604      	mov	r4, r0
 800bbb4:	4608      	mov	r0, r1
 800bbb6:	602b      	str	r3, [r5, #0]
 800bbb8:	f7f6 fa67 	bl	800208a <_isatty>
 800bbbc:	1c43      	adds	r3, r0, #1
 800bbbe:	d102      	bne.n	800bbc6 <_isatty_r+0x1a>
 800bbc0:	682b      	ldr	r3, [r5, #0]
 800bbc2:	b103      	cbz	r3, 800bbc6 <_isatty_r+0x1a>
 800bbc4:	6023      	str	r3, [r4, #0]
 800bbc6:	bd38      	pop	{r3, r4, r5, pc}
 800bbc8:	20000c74 	.word	0x20000c74

0800bbcc <tanf>:
 800bbcc:	ee10 3a10 	vmov	r3, s0
 800bbd0:	b507      	push	{r0, r1, r2, lr}
 800bbd2:	4a12      	ldr	r2, [pc, #72]	@ (800bc1c <tanf+0x50>)
 800bbd4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bbd8:	4293      	cmp	r3, r2
 800bbda:	d807      	bhi.n	800bbec <tanf+0x20>
 800bbdc:	eddf 0a10 	vldr	s1, [pc, #64]	@ 800bc20 <tanf+0x54>
 800bbe0:	2001      	movs	r0, #1
 800bbe2:	b003      	add	sp, #12
 800bbe4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bbe8:	f000 b81c 	b.w	800bc24 <__kernel_tanf>
 800bbec:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800bbf0:	d304      	bcc.n	800bbfc <tanf+0x30>
 800bbf2:	ee30 0a40 	vsub.f32	s0, s0, s0
 800bbf6:	b003      	add	sp, #12
 800bbf8:	f85d fb04 	ldr.w	pc, [sp], #4
 800bbfc:	4668      	mov	r0, sp
 800bbfe:	f000 f8f1 	bl	800bde4 <__ieee754_rem_pio2f>
 800bc02:	0040      	lsls	r0, r0, #1
 800bc04:	f000 0002 	and.w	r0, r0, #2
 800bc08:	eddd 0a01 	vldr	s1, [sp, #4]
 800bc0c:	ed9d 0a00 	vldr	s0, [sp]
 800bc10:	f1c0 0001 	rsb	r0, r0, #1
 800bc14:	f000 f806 	bl	800bc24 <__kernel_tanf>
 800bc18:	e7ed      	b.n	800bbf6 <tanf+0x2a>
 800bc1a:	bf00      	nop
 800bc1c:	3f490fda 	.word	0x3f490fda
 800bc20:	00000000 	.word	0x00000000

0800bc24 <__kernel_tanf>:
 800bc24:	b508      	push	{r3, lr}
 800bc26:	ee10 3a10 	vmov	r3, s0
 800bc2a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800bc2e:	f1b2 5f46 	cmp.w	r2, #830472192	@ 0x31800000
 800bc32:	eef0 7a40 	vmov.f32	s15, s0
 800bc36:	d217      	bcs.n	800bc68 <__kernel_tanf+0x44>
 800bc38:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 800bc3c:	ee17 1a10 	vmov	r1, s14
 800bc40:	bb41      	cbnz	r1, 800bc94 <__kernel_tanf+0x70>
 800bc42:	1c43      	adds	r3, r0, #1
 800bc44:	4313      	orrs	r3, r2
 800bc46:	d108      	bne.n	800bc5a <__kernel_tanf+0x36>
 800bc48:	f000 f9fc 	bl	800c044 <fabsf>
 800bc4c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bc50:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800bc54:	eeb0 0a67 	vmov.f32	s0, s15
 800bc58:	bd08      	pop	{r3, pc}
 800bc5a:	2801      	cmp	r0, #1
 800bc5c:	d0fa      	beq.n	800bc54 <__kernel_tanf+0x30>
 800bc5e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800bc62:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800bc66:	e7f5      	b.n	800bc54 <__kernel_tanf+0x30>
 800bc68:	494c      	ldr	r1, [pc, #304]	@ (800bd9c <__kernel_tanf+0x178>)
 800bc6a:	428a      	cmp	r2, r1
 800bc6c:	d312      	bcc.n	800bc94 <__kernel_tanf+0x70>
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 800bda0 <__kernel_tanf+0x17c>
 800bc74:	bfb8      	it	lt
 800bc76:	eef1 7a40 	vneglt.f32	s15, s0
 800bc7a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bc7e:	eddf 7a49 	vldr	s15, [pc, #292]	@ 800bda4 <__kernel_tanf+0x180>
 800bc82:	bfb8      	it	lt
 800bc84:	eef1 0a60 	vneglt.f32	s1, s1
 800bc88:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800bc8c:	eddf 0a46 	vldr	s1, [pc, #280]	@ 800bda8 <__kernel_tanf+0x184>
 800bc90:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bc94:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800bc98:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800bdac <__kernel_tanf+0x188>
 800bc9c:	ed9f 6a44 	vldr	s12, [pc, #272]	@ 800bdb0 <__kernel_tanf+0x18c>
 800bca0:	ed9f 5a44 	vldr	s10, [pc, #272]	@ 800bdb4 <__kernel_tanf+0x190>
 800bca4:	493d      	ldr	r1, [pc, #244]	@ (800bd9c <__kernel_tanf+0x178>)
 800bca6:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800bcaa:	428a      	cmp	r2, r1
 800bcac:	eea7 6a25 	vfma.f32	s12, s14, s11
 800bcb0:	eddf 5a41 	vldr	s11, [pc, #260]	@ 800bdb8 <__kernel_tanf+0x194>
 800bcb4:	eee6 5a07 	vfma.f32	s11, s12, s14
 800bcb8:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 800bdbc <__kernel_tanf+0x198>
 800bcbc:	eea5 6a87 	vfma.f32	s12, s11, s14
 800bcc0:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800bdc0 <__kernel_tanf+0x19c>
 800bcc4:	eee6 5a07 	vfma.f32	s11, s12, s14
 800bcc8:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 800bdc4 <__kernel_tanf+0x1a0>
 800bccc:	eea5 6a87 	vfma.f32	s12, s11, s14
 800bcd0:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 800bdc8 <__kernel_tanf+0x1a4>
 800bcd4:	eee7 5a05 	vfma.f32	s11, s14, s10
 800bcd8:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 800bdcc <__kernel_tanf+0x1a8>
 800bcdc:	eea5 5a87 	vfma.f32	s10, s11, s14
 800bce0:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800bdd0 <__kernel_tanf+0x1ac>
 800bce4:	eee5 5a07 	vfma.f32	s11, s10, s14
 800bce8:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 800bdd4 <__kernel_tanf+0x1b0>
 800bcec:	eea5 5a87 	vfma.f32	s10, s11, s14
 800bcf0:	eddf 5a39 	vldr	s11, [pc, #228]	@ 800bdd8 <__kernel_tanf+0x1b4>
 800bcf4:	eee5 5a07 	vfma.f32	s11, s10, s14
 800bcf8:	eeb0 7a46 	vmov.f32	s14, s12
 800bcfc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800bd00:	ee27 5aa6 	vmul.f32	s10, s15, s13
 800bd04:	eeb0 6a60 	vmov.f32	s12, s1
 800bd08:	eea7 6a05 	vfma.f32	s12, s14, s10
 800bd0c:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800bddc <__kernel_tanf+0x1b8>
 800bd10:	eee6 0a26 	vfma.f32	s1, s12, s13
 800bd14:	eee5 0a07 	vfma.f32	s1, s10, s14
 800bd18:	ee37 6aa0 	vadd.f32	s12, s15, s1
 800bd1c:	d31d      	bcc.n	800bd5a <__kernel_tanf+0x136>
 800bd1e:	ee07 0a10 	vmov	s14, r0
 800bd22:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bd26:	ee26 5a06 	vmul.f32	s10, s12, s12
 800bd2a:	ee36 6a07 	vadd.f32	s12, s12, s14
 800bd2e:	179b      	asrs	r3, r3, #30
 800bd30:	eec5 5a06 	vdiv.f32	s11, s10, s12
 800bd34:	f003 0302 	and.w	r3, r3, #2
 800bd38:	f1c3 0301 	rsb	r3, r3, #1
 800bd3c:	ee06 3a90 	vmov	s13, r3
 800bd40:	ee35 6ae0 	vsub.f32	s12, s11, s1
 800bd44:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800bd48:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800bd4c:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800bd50:	eea7 7ac6 	vfms.f32	s14, s15, s12
 800bd54:	ee66 7a87 	vmul.f32	s15, s13, s14
 800bd58:	e77c      	b.n	800bc54 <__kernel_tanf+0x30>
 800bd5a:	2801      	cmp	r0, #1
 800bd5c:	d01b      	beq.n	800bd96 <__kernel_tanf+0x172>
 800bd5e:	4b20      	ldr	r3, [pc, #128]	@ (800bde0 <__kernel_tanf+0x1bc>)
 800bd60:	ee16 2a10 	vmov	r2, s12
 800bd64:	401a      	ands	r2, r3
 800bd66:	ee05 2a90 	vmov	s11, r2
 800bd6a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800bd6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bd72:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800bd76:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 800bd7a:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800bd7e:	ee16 2a90 	vmov	r2, s13
 800bd82:	4013      	ands	r3, r2
 800bd84:	ee07 3a90 	vmov	s15, r3
 800bd88:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800bd8c:	eea0 7aa7 	vfma.f32	s14, s1, s15
 800bd90:	eee7 7a26 	vfma.f32	s15, s14, s13
 800bd94:	e75e      	b.n	800bc54 <__kernel_tanf+0x30>
 800bd96:	eef0 7a46 	vmov.f32	s15, s12
 800bd9a:	e75b      	b.n	800bc54 <__kernel_tanf+0x30>
 800bd9c:	3f2ca140 	.word	0x3f2ca140
 800bda0:	3f490fda 	.word	0x3f490fda
 800bda4:	33222168 	.word	0x33222168
 800bda8:	00000000 	.word	0x00000000
 800bdac:	b79bae5f 	.word	0xb79bae5f
 800bdb0:	38a3f445 	.word	0x38a3f445
 800bdb4:	37d95384 	.word	0x37d95384
 800bdb8:	3a1a26c8 	.word	0x3a1a26c8
 800bdbc:	3b6b6916 	.word	0x3b6b6916
 800bdc0:	3cb327a4 	.word	0x3cb327a4
 800bdc4:	3e088889 	.word	0x3e088889
 800bdc8:	3895c07a 	.word	0x3895c07a
 800bdcc:	398137b9 	.word	0x398137b9
 800bdd0:	3abede48 	.word	0x3abede48
 800bdd4:	3c11371f 	.word	0x3c11371f
 800bdd8:	3d5d0dd1 	.word	0x3d5d0dd1
 800bddc:	3eaaaaab 	.word	0x3eaaaaab
 800bde0:	fffff000 	.word	0xfffff000

0800bde4 <__ieee754_rem_pio2f>:
 800bde4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bde6:	ee10 6a10 	vmov	r6, s0
 800bdea:	4b88      	ldr	r3, [pc, #544]	@ (800c00c <__ieee754_rem_pio2f+0x228>)
 800bdec:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800bdf0:	429d      	cmp	r5, r3
 800bdf2:	b087      	sub	sp, #28
 800bdf4:	4604      	mov	r4, r0
 800bdf6:	d805      	bhi.n	800be04 <__ieee754_rem_pio2f+0x20>
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	ed80 0a00 	vstr	s0, [r0]
 800bdfe:	6043      	str	r3, [r0, #4]
 800be00:	2000      	movs	r0, #0
 800be02:	e022      	b.n	800be4a <__ieee754_rem_pio2f+0x66>
 800be04:	4b82      	ldr	r3, [pc, #520]	@ (800c010 <__ieee754_rem_pio2f+0x22c>)
 800be06:	429d      	cmp	r5, r3
 800be08:	d83a      	bhi.n	800be80 <__ieee754_rem_pio2f+0x9c>
 800be0a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800be0e:	2e00      	cmp	r6, #0
 800be10:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800c014 <__ieee754_rem_pio2f+0x230>
 800be14:	4a80      	ldr	r2, [pc, #512]	@ (800c018 <__ieee754_rem_pio2f+0x234>)
 800be16:	f023 030f 	bic.w	r3, r3, #15
 800be1a:	dd18      	ble.n	800be4e <__ieee754_rem_pio2f+0x6a>
 800be1c:	4293      	cmp	r3, r2
 800be1e:	ee70 7a47 	vsub.f32	s15, s0, s14
 800be22:	bf09      	itett	eq
 800be24:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800c01c <__ieee754_rem_pio2f+0x238>
 800be28:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800c020 <__ieee754_rem_pio2f+0x23c>
 800be2c:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800c024 <__ieee754_rem_pio2f+0x240>
 800be30:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800be34:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800be38:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800be3c:	ed80 7a00 	vstr	s14, [r0]
 800be40:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800be44:	edc0 7a01 	vstr	s15, [r0, #4]
 800be48:	2001      	movs	r0, #1
 800be4a:	b007      	add	sp, #28
 800be4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be4e:	4293      	cmp	r3, r2
 800be50:	ee70 7a07 	vadd.f32	s15, s0, s14
 800be54:	bf09      	itett	eq
 800be56:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800c01c <__ieee754_rem_pio2f+0x238>
 800be5a:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800c020 <__ieee754_rem_pio2f+0x23c>
 800be5e:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800c024 <__ieee754_rem_pio2f+0x240>
 800be62:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800be66:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800be6a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800be6e:	ed80 7a00 	vstr	s14, [r0]
 800be72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be76:	edc0 7a01 	vstr	s15, [r0, #4]
 800be7a:	f04f 30ff 	mov.w	r0, #4294967295
 800be7e:	e7e4      	b.n	800be4a <__ieee754_rem_pio2f+0x66>
 800be80:	4b69      	ldr	r3, [pc, #420]	@ (800c028 <__ieee754_rem_pio2f+0x244>)
 800be82:	429d      	cmp	r5, r3
 800be84:	d873      	bhi.n	800bf6e <__ieee754_rem_pio2f+0x18a>
 800be86:	f000 f8dd 	bl	800c044 <fabsf>
 800be8a:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800c02c <__ieee754_rem_pio2f+0x248>
 800be8e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800be92:	eee0 7a07 	vfma.f32	s15, s0, s14
 800be96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800be9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800be9e:	ee17 0a90 	vmov	r0, s15
 800bea2:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800c014 <__ieee754_rem_pio2f+0x230>
 800bea6:	eea7 0a67 	vfms.f32	s0, s14, s15
 800beaa:	281f      	cmp	r0, #31
 800beac:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800c020 <__ieee754_rem_pio2f+0x23c>
 800beb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800beb4:	eeb1 6a47 	vneg.f32	s12, s14
 800beb8:	ee70 6a67 	vsub.f32	s13, s0, s15
 800bebc:	ee16 1a90 	vmov	r1, s13
 800bec0:	dc09      	bgt.n	800bed6 <__ieee754_rem_pio2f+0xf2>
 800bec2:	4a5b      	ldr	r2, [pc, #364]	@ (800c030 <__ieee754_rem_pio2f+0x24c>)
 800bec4:	1e47      	subs	r7, r0, #1
 800bec6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800beca:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800bece:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800bed2:	4293      	cmp	r3, r2
 800bed4:	d107      	bne.n	800bee6 <__ieee754_rem_pio2f+0x102>
 800bed6:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800beda:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800bede:	2a08      	cmp	r2, #8
 800bee0:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800bee4:	dc14      	bgt.n	800bf10 <__ieee754_rem_pio2f+0x12c>
 800bee6:	6021      	str	r1, [r4, #0]
 800bee8:	ed94 7a00 	vldr	s14, [r4]
 800beec:	ee30 0a47 	vsub.f32	s0, s0, s14
 800bef0:	2e00      	cmp	r6, #0
 800bef2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bef6:	ed84 0a01 	vstr	s0, [r4, #4]
 800befa:	daa6      	bge.n	800be4a <__ieee754_rem_pio2f+0x66>
 800befc:	eeb1 7a47 	vneg.f32	s14, s14
 800bf00:	eeb1 0a40 	vneg.f32	s0, s0
 800bf04:	ed84 7a00 	vstr	s14, [r4]
 800bf08:	ed84 0a01 	vstr	s0, [r4, #4]
 800bf0c:	4240      	negs	r0, r0
 800bf0e:	e79c      	b.n	800be4a <__ieee754_rem_pio2f+0x66>
 800bf10:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800c01c <__ieee754_rem_pio2f+0x238>
 800bf14:	eef0 6a40 	vmov.f32	s13, s0
 800bf18:	eee6 6a25 	vfma.f32	s13, s12, s11
 800bf1c:	ee70 7a66 	vsub.f32	s15, s0, s13
 800bf20:	eee6 7a25 	vfma.f32	s15, s12, s11
 800bf24:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800c024 <__ieee754_rem_pio2f+0x240>
 800bf28:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800bf2c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800bf30:	ee15 2a90 	vmov	r2, s11
 800bf34:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800bf38:	1a5b      	subs	r3, r3, r1
 800bf3a:	2b19      	cmp	r3, #25
 800bf3c:	dc04      	bgt.n	800bf48 <__ieee754_rem_pio2f+0x164>
 800bf3e:	edc4 5a00 	vstr	s11, [r4]
 800bf42:	eeb0 0a66 	vmov.f32	s0, s13
 800bf46:	e7cf      	b.n	800bee8 <__ieee754_rem_pio2f+0x104>
 800bf48:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800c034 <__ieee754_rem_pio2f+0x250>
 800bf4c:	eeb0 0a66 	vmov.f32	s0, s13
 800bf50:	eea6 0a25 	vfma.f32	s0, s12, s11
 800bf54:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800bf58:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800c038 <__ieee754_rem_pio2f+0x254>
 800bf5c:	eee6 7a25 	vfma.f32	s15, s12, s11
 800bf60:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800bf64:	ee30 7a67 	vsub.f32	s14, s0, s15
 800bf68:	ed84 7a00 	vstr	s14, [r4]
 800bf6c:	e7bc      	b.n	800bee8 <__ieee754_rem_pio2f+0x104>
 800bf6e:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800bf72:	d306      	bcc.n	800bf82 <__ieee754_rem_pio2f+0x19e>
 800bf74:	ee70 7a40 	vsub.f32	s15, s0, s0
 800bf78:	edc0 7a01 	vstr	s15, [r0, #4]
 800bf7c:	edc0 7a00 	vstr	s15, [r0]
 800bf80:	e73e      	b.n	800be00 <__ieee754_rem_pio2f+0x1c>
 800bf82:	15ea      	asrs	r2, r5, #23
 800bf84:	3a86      	subs	r2, #134	@ 0x86
 800bf86:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800bf8a:	ee07 3a90 	vmov	s15, r3
 800bf8e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800bf92:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800c03c <__ieee754_rem_pio2f+0x258>
 800bf96:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bf9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bf9e:	ed8d 7a03 	vstr	s14, [sp, #12]
 800bfa2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bfa6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800bfaa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bfae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bfb2:	ed8d 7a04 	vstr	s14, [sp, #16]
 800bfb6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bfba:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bfbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfc2:	edcd 7a05 	vstr	s15, [sp, #20]
 800bfc6:	d11e      	bne.n	800c006 <__ieee754_rem_pio2f+0x222>
 800bfc8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800bfcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfd0:	bf0c      	ite	eq
 800bfd2:	2301      	moveq	r3, #1
 800bfd4:	2302      	movne	r3, #2
 800bfd6:	491a      	ldr	r1, [pc, #104]	@ (800c040 <__ieee754_rem_pio2f+0x25c>)
 800bfd8:	9101      	str	r1, [sp, #4]
 800bfda:	2102      	movs	r1, #2
 800bfdc:	9100      	str	r1, [sp, #0]
 800bfde:	a803      	add	r0, sp, #12
 800bfe0:	4621      	mov	r1, r4
 800bfe2:	f000 f837 	bl	800c054 <__kernel_rem_pio2f>
 800bfe6:	2e00      	cmp	r6, #0
 800bfe8:	f6bf af2f 	bge.w	800be4a <__ieee754_rem_pio2f+0x66>
 800bfec:	edd4 7a00 	vldr	s15, [r4]
 800bff0:	eef1 7a67 	vneg.f32	s15, s15
 800bff4:	edc4 7a00 	vstr	s15, [r4]
 800bff8:	edd4 7a01 	vldr	s15, [r4, #4]
 800bffc:	eef1 7a67 	vneg.f32	s15, s15
 800c000:	edc4 7a01 	vstr	s15, [r4, #4]
 800c004:	e782      	b.n	800bf0c <__ieee754_rem_pio2f+0x128>
 800c006:	2303      	movs	r3, #3
 800c008:	e7e5      	b.n	800bfd6 <__ieee754_rem_pio2f+0x1f2>
 800c00a:	bf00      	nop
 800c00c:	3f490fd8 	.word	0x3f490fd8
 800c010:	4016cbe3 	.word	0x4016cbe3
 800c014:	3fc90f80 	.word	0x3fc90f80
 800c018:	3fc90fd0 	.word	0x3fc90fd0
 800c01c:	37354400 	.word	0x37354400
 800c020:	37354443 	.word	0x37354443
 800c024:	2e85a308 	.word	0x2e85a308
 800c028:	43490f80 	.word	0x43490f80
 800c02c:	3f22f984 	.word	0x3f22f984
 800c030:	0800c72c 	.word	0x0800c72c
 800c034:	2e85a300 	.word	0x2e85a300
 800c038:	248d3132 	.word	0x248d3132
 800c03c:	43800000 	.word	0x43800000
 800c040:	0800c7ac 	.word	0x0800c7ac

0800c044 <fabsf>:
 800c044:	ee10 3a10 	vmov	r3, s0
 800c048:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c04c:	ee00 3a10 	vmov	s0, r3
 800c050:	4770      	bx	lr
	...

0800c054 <__kernel_rem_pio2f>:
 800c054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c058:	ed2d 8b04 	vpush	{d8-d9}
 800c05c:	b0d9      	sub	sp, #356	@ 0x164
 800c05e:	4690      	mov	r8, r2
 800c060:	9001      	str	r0, [sp, #4]
 800c062:	4ab9      	ldr	r2, [pc, #740]	@ (800c348 <__kernel_rem_pio2f+0x2f4>)
 800c064:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800c066:	f118 0f04 	cmn.w	r8, #4
 800c06a:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800c06e:	460f      	mov	r7, r1
 800c070:	f103 3bff 	add.w	fp, r3, #4294967295
 800c074:	db27      	blt.n	800c0c6 <__kernel_rem_pio2f+0x72>
 800c076:	f1b8 0203 	subs.w	r2, r8, #3
 800c07a:	bf48      	it	mi
 800c07c:	f108 0204 	addmi.w	r2, r8, #4
 800c080:	10d2      	asrs	r2, r2, #3
 800c082:	1c55      	adds	r5, r2, #1
 800c084:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800c086:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800c358 <__kernel_rem_pio2f+0x304>
 800c08a:	00e8      	lsls	r0, r5, #3
 800c08c:	eba2 060b 	sub.w	r6, r2, fp
 800c090:	9002      	str	r0, [sp, #8]
 800c092:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800c096:	eb0a 0c0b 	add.w	ip, sl, fp
 800c09a:	ac1c      	add	r4, sp, #112	@ 0x70
 800c09c:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800c0a0:	2000      	movs	r0, #0
 800c0a2:	4560      	cmp	r0, ip
 800c0a4:	dd11      	ble.n	800c0ca <__kernel_rem_pio2f+0x76>
 800c0a6:	a91c      	add	r1, sp, #112	@ 0x70
 800c0a8:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800c0ac:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800c0b0:	f04f 0c00 	mov.w	ip, #0
 800c0b4:	45d4      	cmp	ip, sl
 800c0b6:	dc27      	bgt.n	800c108 <__kernel_rem_pio2f+0xb4>
 800c0b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c0bc:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 800c358 <__kernel_rem_pio2f+0x304>
 800c0c0:	4606      	mov	r6, r0
 800c0c2:	2400      	movs	r4, #0
 800c0c4:	e016      	b.n	800c0f4 <__kernel_rem_pio2f+0xa0>
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	e7db      	b.n	800c082 <__kernel_rem_pio2f+0x2e>
 800c0ca:	42c6      	cmn	r6, r0
 800c0cc:	bf5d      	ittte	pl
 800c0ce:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800c0d2:	ee07 1a90 	vmovpl	s15, r1
 800c0d6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800c0da:	eef0 7a47 	vmovmi.f32	s15, s14
 800c0de:	ece4 7a01 	vstmia	r4!, {s15}
 800c0e2:	3001      	adds	r0, #1
 800c0e4:	e7dd      	b.n	800c0a2 <__kernel_rem_pio2f+0x4e>
 800c0e6:	ecfe 6a01 	vldmia	lr!, {s13}
 800c0ea:	ed96 7a00 	vldr	s14, [r6]
 800c0ee:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c0f2:	3401      	adds	r4, #1
 800c0f4:	455c      	cmp	r4, fp
 800c0f6:	f1a6 0604 	sub.w	r6, r6, #4
 800c0fa:	ddf4      	ble.n	800c0e6 <__kernel_rem_pio2f+0x92>
 800c0fc:	ece9 7a01 	vstmia	r9!, {s15}
 800c100:	f10c 0c01 	add.w	ip, ip, #1
 800c104:	3004      	adds	r0, #4
 800c106:	e7d5      	b.n	800c0b4 <__kernel_rem_pio2f+0x60>
 800c108:	a908      	add	r1, sp, #32
 800c10a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c10e:	9104      	str	r1, [sp, #16]
 800c110:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800c112:	eddf 8a90 	vldr	s17, [pc, #576]	@ 800c354 <__kernel_rem_pio2f+0x300>
 800c116:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 800c350 <__kernel_rem_pio2f+0x2fc>
 800c11a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800c11e:	9203      	str	r2, [sp, #12]
 800c120:	4654      	mov	r4, sl
 800c122:	00a2      	lsls	r2, r4, #2
 800c124:	9205      	str	r2, [sp, #20]
 800c126:	aa58      	add	r2, sp, #352	@ 0x160
 800c128:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800c12c:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800c130:	a944      	add	r1, sp, #272	@ 0x110
 800c132:	aa08      	add	r2, sp, #32
 800c134:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800c138:	4694      	mov	ip, r2
 800c13a:	4626      	mov	r6, r4
 800c13c:	2e00      	cmp	r6, #0
 800c13e:	f1a0 0004 	sub.w	r0, r0, #4
 800c142:	dc4c      	bgt.n	800c1de <__kernel_rem_pio2f+0x18a>
 800c144:	4628      	mov	r0, r5
 800c146:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c14a:	f000 f9f5 	bl	800c538 <scalbnf>
 800c14e:	eeb0 8a40 	vmov.f32	s16, s0
 800c152:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800c156:	ee28 0a00 	vmul.f32	s0, s16, s0
 800c15a:	f000 fa53 	bl	800c604 <floorf>
 800c15e:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800c162:	eea0 8a67 	vfms.f32	s16, s0, s15
 800c166:	2d00      	cmp	r5, #0
 800c168:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c16c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800c170:	ee17 9a90 	vmov	r9, s15
 800c174:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c178:	ee38 8a67 	vsub.f32	s16, s16, s15
 800c17c:	dd41      	ble.n	800c202 <__kernel_rem_pio2f+0x1ae>
 800c17e:	f104 3cff 	add.w	ip, r4, #4294967295
 800c182:	a908      	add	r1, sp, #32
 800c184:	f1c5 0e08 	rsb	lr, r5, #8
 800c188:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800c18c:	fa46 f00e 	asr.w	r0, r6, lr
 800c190:	4481      	add	r9, r0
 800c192:	fa00 f00e 	lsl.w	r0, r0, lr
 800c196:	1a36      	subs	r6, r6, r0
 800c198:	f1c5 0007 	rsb	r0, r5, #7
 800c19c:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800c1a0:	4106      	asrs	r6, r0
 800c1a2:	2e00      	cmp	r6, #0
 800c1a4:	dd3c      	ble.n	800c220 <__kernel_rem_pio2f+0x1cc>
 800c1a6:	f04f 0e00 	mov.w	lr, #0
 800c1aa:	f109 0901 	add.w	r9, r9, #1
 800c1ae:	4670      	mov	r0, lr
 800c1b0:	4574      	cmp	r4, lr
 800c1b2:	dc68      	bgt.n	800c286 <__kernel_rem_pio2f+0x232>
 800c1b4:	2d00      	cmp	r5, #0
 800c1b6:	dd03      	ble.n	800c1c0 <__kernel_rem_pio2f+0x16c>
 800c1b8:	2d01      	cmp	r5, #1
 800c1ba:	d074      	beq.n	800c2a6 <__kernel_rem_pio2f+0x252>
 800c1bc:	2d02      	cmp	r5, #2
 800c1be:	d07d      	beq.n	800c2bc <__kernel_rem_pio2f+0x268>
 800c1c0:	2e02      	cmp	r6, #2
 800c1c2:	d12d      	bne.n	800c220 <__kernel_rem_pio2f+0x1cc>
 800c1c4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c1c8:	ee30 8a48 	vsub.f32	s16, s0, s16
 800c1cc:	b340      	cbz	r0, 800c220 <__kernel_rem_pio2f+0x1cc>
 800c1ce:	4628      	mov	r0, r5
 800c1d0:	9306      	str	r3, [sp, #24]
 800c1d2:	f000 f9b1 	bl	800c538 <scalbnf>
 800c1d6:	9b06      	ldr	r3, [sp, #24]
 800c1d8:	ee38 8a40 	vsub.f32	s16, s16, s0
 800c1dc:	e020      	b.n	800c220 <__kernel_rem_pio2f+0x1cc>
 800c1de:	ee60 7a28 	vmul.f32	s15, s0, s17
 800c1e2:	3e01      	subs	r6, #1
 800c1e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c1e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c1ec:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800c1f0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c1f4:	ecac 0a01 	vstmia	ip!, {s0}
 800c1f8:	ed90 0a00 	vldr	s0, [r0]
 800c1fc:	ee37 0a80 	vadd.f32	s0, s15, s0
 800c200:	e79c      	b.n	800c13c <__kernel_rem_pio2f+0xe8>
 800c202:	d105      	bne.n	800c210 <__kernel_rem_pio2f+0x1bc>
 800c204:	1e60      	subs	r0, r4, #1
 800c206:	a908      	add	r1, sp, #32
 800c208:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800c20c:	11f6      	asrs	r6, r6, #7
 800c20e:	e7c8      	b.n	800c1a2 <__kernel_rem_pio2f+0x14e>
 800c210:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800c214:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800c218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c21c:	da31      	bge.n	800c282 <__kernel_rem_pio2f+0x22e>
 800c21e:	2600      	movs	r6, #0
 800c220:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c228:	f040 8098 	bne.w	800c35c <__kernel_rem_pio2f+0x308>
 800c22c:	1e60      	subs	r0, r4, #1
 800c22e:	2200      	movs	r2, #0
 800c230:	4550      	cmp	r0, sl
 800c232:	da4b      	bge.n	800c2cc <__kernel_rem_pio2f+0x278>
 800c234:	2a00      	cmp	r2, #0
 800c236:	d065      	beq.n	800c304 <__kernel_rem_pio2f+0x2b0>
 800c238:	3c01      	subs	r4, #1
 800c23a:	ab08      	add	r3, sp, #32
 800c23c:	3d08      	subs	r5, #8
 800c23e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d0f8      	beq.n	800c238 <__kernel_rem_pio2f+0x1e4>
 800c246:	4628      	mov	r0, r5
 800c248:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c24c:	f000 f974 	bl	800c538 <scalbnf>
 800c250:	1c63      	adds	r3, r4, #1
 800c252:	aa44      	add	r2, sp, #272	@ 0x110
 800c254:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800c354 <__kernel_rem_pio2f+0x300>
 800c258:	0099      	lsls	r1, r3, #2
 800c25a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c25e:	4623      	mov	r3, r4
 800c260:	2b00      	cmp	r3, #0
 800c262:	f280 80a9 	bge.w	800c3b8 <__kernel_rem_pio2f+0x364>
 800c266:	4623      	mov	r3, r4
 800c268:	2b00      	cmp	r3, #0
 800c26a:	f2c0 80c7 	blt.w	800c3fc <__kernel_rem_pio2f+0x3a8>
 800c26e:	aa44      	add	r2, sp, #272	@ 0x110
 800c270:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800c274:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800c34c <__kernel_rem_pio2f+0x2f8>
 800c278:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800c358 <__kernel_rem_pio2f+0x304>
 800c27c:	2000      	movs	r0, #0
 800c27e:	1ae2      	subs	r2, r4, r3
 800c280:	e0b1      	b.n	800c3e6 <__kernel_rem_pio2f+0x392>
 800c282:	2602      	movs	r6, #2
 800c284:	e78f      	b.n	800c1a6 <__kernel_rem_pio2f+0x152>
 800c286:	f852 1b04 	ldr.w	r1, [r2], #4
 800c28a:	b948      	cbnz	r0, 800c2a0 <__kernel_rem_pio2f+0x24c>
 800c28c:	b121      	cbz	r1, 800c298 <__kernel_rem_pio2f+0x244>
 800c28e:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800c292:	f842 1c04 	str.w	r1, [r2, #-4]
 800c296:	2101      	movs	r1, #1
 800c298:	f10e 0e01 	add.w	lr, lr, #1
 800c29c:	4608      	mov	r0, r1
 800c29e:	e787      	b.n	800c1b0 <__kernel_rem_pio2f+0x15c>
 800c2a0:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800c2a4:	e7f5      	b.n	800c292 <__kernel_rem_pio2f+0x23e>
 800c2a6:	f104 3cff 	add.w	ip, r4, #4294967295
 800c2aa:	aa08      	add	r2, sp, #32
 800c2ac:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800c2b0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800c2b4:	a908      	add	r1, sp, #32
 800c2b6:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800c2ba:	e781      	b.n	800c1c0 <__kernel_rem_pio2f+0x16c>
 800c2bc:	f104 3cff 	add.w	ip, r4, #4294967295
 800c2c0:	aa08      	add	r2, sp, #32
 800c2c2:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800c2c6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800c2ca:	e7f3      	b.n	800c2b4 <__kernel_rem_pio2f+0x260>
 800c2cc:	a908      	add	r1, sp, #32
 800c2ce:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800c2d2:	3801      	subs	r0, #1
 800c2d4:	430a      	orrs	r2, r1
 800c2d6:	e7ab      	b.n	800c230 <__kernel_rem_pio2f+0x1dc>
 800c2d8:	3201      	adds	r2, #1
 800c2da:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800c2de:	2e00      	cmp	r6, #0
 800c2e0:	d0fa      	beq.n	800c2d8 <__kernel_rem_pio2f+0x284>
 800c2e2:	9905      	ldr	r1, [sp, #20]
 800c2e4:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800c2e8:	eb0d 0001 	add.w	r0, sp, r1
 800c2ec:	18e6      	adds	r6, r4, r3
 800c2ee:	a91c      	add	r1, sp, #112	@ 0x70
 800c2f0:	f104 0c01 	add.w	ip, r4, #1
 800c2f4:	384c      	subs	r0, #76	@ 0x4c
 800c2f6:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800c2fa:	4422      	add	r2, r4
 800c2fc:	4562      	cmp	r2, ip
 800c2fe:	da04      	bge.n	800c30a <__kernel_rem_pio2f+0x2b6>
 800c300:	4614      	mov	r4, r2
 800c302:	e70e      	b.n	800c122 <__kernel_rem_pio2f+0xce>
 800c304:	9804      	ldr	r0, [sp, #16]
 800c306:	2201      	movs	r2, #1
 800c308:	e7e7      	b.n	800c2da <__kernel_rem_pio2f+0x286>
 800c30a:	9903      	ldr	r1, [sp, #12]
 800c30c:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c310:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800c314:	9105      	str	r1, [sp, #20]
 800c316:	ee07 1a90 	vmov	s15, r1
 800c31a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c31e:	2400      	movs	r4, #0
 800c320:	ece6 7a01 	vstmia	r6!, {s15}
 800c324:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800c358 <__kernel_rem_pio2f+0x304>
 800c328:	46b1      	mov	r9, r6
 800c32a:	455c      	cmp	r4, fp
 800c32c:	dd04      	ble.n	800c338 <__kernel_rem_pio2f+0x2e4>
 800c32e:	ece0 7a01 	vstmia	r0!, {s15}
 800c332:	f10c 0c01 	add.w	ip, ip, #1
 800c336:	e7e1      	b.n	800c2fc <__kernel_rem_pio2f+0x2a8>
 800c338:	ecfe 6a01 	vldmia	lr!, {s13}
 800c33c:	ed39 7a01 	vldmdb	r9!, {s14}
 800c340:	3401      	adds	r4, #1
 800c342:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c346:	e7f0      	b.n	800c32a <__kernel_rem_pio2f+0x2d6>
 800c348:	0800caf0 	.word	0x0800caf0
 800c34c:	0800cac4 	.word	0x0800cac4
 800c350:	43800000 	.word	0x43800000
 800c354:	3b800000 	.word	0x3b800000
 800c358:	00000000 	.word	0x00000000
 800c35c:	9b02      	ldr	r3, [sp, #8]
 800c35e:	eeb0 0a48 	vmov.f32	s0, s16
 800c362:	eba3 0008 	sub.w	r0, r3, r8
 800c366:	f000 f8e7 	bl	800c538 <scalbnf>
 800c36a:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800c350 <__kernel_rem_pio2f+0x2fc>
 800c36e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800c372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c376:	db19      	blt.n	800c3ac <__kernel_rem_pio2f+0x358>
 800c378:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800c354 <__kernel_rem_pio2f+0x300>
 800c37c:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c380:	aa08      	add	r2, sp, #32
 800c382:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c386:	3508      	adds	r5, #8
 800c388:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c38c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800c390:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c394:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c398:	ee10 3a10 	vmov	r3, s0
 800c39c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800c3a0:	ee17 3a90 	vmov	r3, s15
 800c3a4:	3401      	adds	r4, #1
 800c3a6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800c3aa:	e74c      	b.n	800c246 <__kernel_rem_pio2f+0x1f2>
 800c3ac:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c3b0:	aa08      	add	r2, sp, #32
 800c3b2:	ee10 3a10 	vmov	r3, s0
 800c3b6:	e7f6      	b.n	800c3a6 <__kernel_rem_pio2f+0x352>
 800c3b8:	a808      	add	r0, sp, #32
 800c3ba:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800c3be:	9001      	str	r0, [sp, #4]
 800c3c0:	ee07 0a90 	vmov	s15, r0
 800c3c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c3c8:	3b01      	subs	r3, #1
 800c3ca:	ee67 7a80 	vmul.f32	s15, s15, s0
 800c3ce:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c3d2:	ed62 7a01 	vstmdb	r2!, {s15}
 800c3d6:	e743      	b.n	800c260 <__kernel_rem_pio2f+0x20c>
 800c3d8:	ecfc 6a01 	vldmia	ip!, {s13}
 800c3dc:	ecb5 7a01 	vldmia	r5!, {s14}
 800c3e0:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c3e4:	3001      	adds	r0, #1
 800c3e6:	4550      	cmp	r0, sl
 800c3e8:	dc01      	bgt.n	800c3ee <__kernel_rem_pio2f+0x39a>
 800c3ea:	4282      	cmp	r2, r0
 800c3ec:	daf4      	bge.n	800c3d8 <__kernel_rem_pio2f+0x384>
 800c3ee:	a858      	add	r0, sp, #352	@ 0x160
 800c3f0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800c3f4:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800c3f8:	3b01      	subs	r3, #1
 800c3fa:	e735      	b.n	800c268 <__kernel_rem_pio2f+0x214>
 800c3fc:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800c3fe:	2b02      	cmp	r3, #2
 800c400:	dc09      	bgt.n	800c416 <__kernel_rem_pio2f+0x3c2>
 800c402:	2b00      	cmp	r3, #0
 800c404:	dc2b      	bgt.n	800c45e <__kernel_rem_pio2f+0x40a>
 800c406:	d044      	beq.n	800c492 <__kernel_rem_pio2f+0x43e>
 800c408:	f009 0007 	and.w	r0, r9, #7
 800c40c:	b059      	add	sp, #356	@ 0x164
 800c40e:	ecbd 8b04 	vpop	{d8-d9}
 800c412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c416:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800c418:	2b03      	cmp	r3, #3
 800c41a:	d1f5      	bne.n	800c408 <__kernel_rem_pio2f+0x3b4>
 800c41c:	aa30      	add	r2, sp, #192	@ 0xc0
 800c41e:	1f0b      	subs	r3, r1, #4
 800c420:	4413      	add	r3, r2
 800c422:	461a      	mov	r2, r3
 800c424:	4620      	mov	r0, r4
 800c426:	2800      	cmp	r0, #0
 800c428:	f1a2 0204 	sub.w	r2, r2, #4
 800c42c:	dc52      	bgt.n	800c4d4 <__kernel_rem_pio2f+0x480>
 800c42e:	4622      	mov	r2, r4
 800c430:	2a01      	cmp	r2, #1
 800c432:	f1a3 0304 	sub.w	r3, r3, #4
 800c436:	dc5d      	bgt.n	800c4f4 <__kernel_rem_pio2f+0x4a0>
 800c438:	ab30      	add	r3, sp, #192	@ 0xc0
 800c43a:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 800c358 <__kernel_rem_pio2f+0x304>
 800c43e:	440b      	add	r3, r1
 800c440:	2c01      	cmp	r4, #1
 800c442:	dc67      	bgt.n	800c514 <__kernel_rem_pio2f+0x4c0>
 800c444:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800c448:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800c44c:	2e00      	cmp	r6, #0
 800c44e:	d167      	bne.n	800c520 <__kernel_rem_pio2f+0x4cc>
 800c450:	edc7 6a00 	vstr	s13, [r7]
 800c454:	ed87 7a01 	vstr	s14, [r7, #4]
 800c458:	edc7 7a02 	vstr	s15, [r7, #8]
 800c45c:	e7d4      	b.n	800c408 <__kernel_rem_pio2f+0x3b4>
 800c45e:	ab30      	add	r3, sp, #192	@ 0xc0
 800c460:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 800c358 <__kernel_rem_pio2f+0x304>
 800c464:	440b      	add	r3, r1
 800c466:	4622      	mov	r2, r4
 800c468:	2a00      	cmp	r2, #0
 800c46a:	da24      	bge.n	800c4b6 <__kernel_rem_pio2f+0x462>
 800c46c:	b34e      	cbz	r6, 800c4c2 <__kernel_rem_pio2f+0x46e>
 800c46e:	eef1 7a47 	vneg.f32	s15, s14
 800c472:	edc7 7a00 	vstr	s15, [r7]
 800c476:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800c47a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c47e:	aa31      	add	r2, sp, #196	@ 0xc4
 800c480:	2301      	movs	r3, #1
 800c482:	429c      	cmp	r4, r3
 800c484:	da20      	bge.n	800c4c8 <__kernel_rem_pio2f+0x474>
 800c486:	b10e      	cbz	r6, 800c48c <__kernel_rem_pio2f+0x438>
 800c488:	eef1 7a67 	vneg.f32	s15, s15
 800c48c:	edc7 7a01 	vstr	s15, [r7, #4]
 800c490:	e7ba      	b.n	800c408 <__kernel_rem_pio2f+0x3b4>
 800c492:	ab30      	add	r3, sp, #192	@ 0xc0
 800c494:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 800c358 <__kernel_rem_pio2f+0x304>
 800c498:	440b      	add	r3, r1
 800c49a:	2c00      	cmp	r4, #0
 800c49c:	da05      	bge.n	800c4aa <__kernel_rem_pio2f+0x456>
 800c49e:	b10e      	cbz	r6, 800c4a4 <__kernel_rem_pio2f+0x450>
 800c4a0:	eef1 7a67 	vneg.f32	s15, s15
 800c4a4:	edc7 7a00 	vstr	s15, [r7]
 800c4a8:	e7ae      	b.n	800c408 <__kernel_rem_pio2f+0x3b4>
 800c4aa:	ed33 7a01 	vldmdb	r3!, {s14}
 800c4ae:	3c01      	subs	r4, #1
 800c4b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c4b4:	e7f1      	b.n	800c49a <__kernel_rem_pio2f+0x446>
 800c4b6:	ed73 7a01 	vldmdb	r3!, {s15}
 800c4ba:	3a01      	subs	r2, #1
 800c4bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c4c0:	e7d2      	b.n	800c468 <__kernel_rem_pio2f+0x414>
 800c4c2:	eef0 7a47 	vmov.f32	s15, s14
 800c4c6:	e7d4      	b.n	800c472 <__kernel_rem_pio2f+0x41e>
 800c4c8:	ecb2 7a01 	vldmia	r2!, {s14}
 800c4cc:	3301      	adds	r3, #1
 800c4ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c4d2:	e7d6      	b.n	800c482 <__kernel_rem_pio2f+0x42e>
 800c4d4:	edd2 7a00 	vldr	s15, [r2]
 800c4d8:	edd2 6a01 	vldr	s13, [r2, #4]
 800c4dc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c4e0:	3801      	subs	r0, #1
 800c4e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c4e6:	ed82 7a00 	vstr	s14, [r2]
 800c4ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c4ee:	edc2 7a01 	vstr	s15, [r2, #4]
 800c4f2:	e798      	b.n	800c426 <__kernel_rem_pio2f+0x3d2>
 800c4f4:	edd3 7a00 	vldr	s15, [r3]
 800c4f8:	edd3 6a01 	vldr	s13, [r3, #4]
 800c4fc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c500:	3a01      	subs	r2, #1
 800c502:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c506:	ed83 7a00 	vstr	s14, [r3]
 800c50a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c50e:	edc3 7a01 	vstr	s15, [r3, #4]
 800c512:	e78d      	b.n	800c430 <__kernel_rem_pio2f+0x3dc>
 800c514:	ed33 7a01 	vldmdb	r3!, {s14}
 800c518:	3c01      	subs	r4, #1
 800c51a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c51e:	e78f      	b.n	800c440 <__kernel_rem_pio2f+0x3ec>
 800c520:	eef1 6a66 	vneg.f32	s13, s13
 800c524:	eeb1 7a47 	vneg.f32	s14, s14
 800c528:	edc7 6a00 	vstr	s13, [r7]
 800c52c:	ed87 7a01 	vstr	s14, [r7, #4]
 800c530:	eef1 7a67 	vneg.f32	s15, s15
 800c534:	e790      	b.n	800c458 <__kernel_rem_pio2f+0x404>
 800c536:	bf00      	nop

0800c538 <scalbnf>:
 800c538:	ee10 3a10 	vmov	r3, s0
 800c53c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800c540:	d02b      	beq.n	800c59a <scalbnf+0x62>
 800c542:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800c546:	d302      	bcc.n	800c54e <scalbnf+0x16>
 800c548:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c54c:	4770      	bx	lr
 800c54e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800c552:	d123      	bne.n	800c59c <scalbnf+0x64>
 800c554:	4b24      	ldr	r3, [pc, #144]	@ (800c5e8 <scalbnf+0xb0>)
 800c556:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800c5ec <scalbnf+0xb4>
 800c55a:	4298      	cmp	r0, r3
 800c55c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c560:	db17      	blt.n	800c592 <scalbnf+0x5a>
 800c562:	ee10 3a10 	vmov	r3, s0
 800c566:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c56a:	3a19      	subs	r2, #25
 800c56c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800c570:	4288      	cmp	r0, r1
 800c572:	dd15      	ble.n	800c5a0 <scalbnf+0x68>
 800c574:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800c5f0 <scalbnf+0xb8>
 800c578:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800c5f4 <scalbnf+0xbc>
 800c57c:	ee10 3a10 	vmov	r3, s0
 800c580:	eeb0 7a67 	vmov.f32	s14, s15
 800c584:	2b00      	cmp	r3, #0
 800c586:	bfb8      	it	lt
 800c588:	eef0 7a66 	vmovlt.f32	s15, s13
 800c58c:	ee27 0a87 	vmul.f32	s0, s15, s14
 800c590:	4770      	bx	lr
 800c592:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800c5f8 <scalbnf+0xc0>
 800c596:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c59a:	4770      	bx	lr
 800c59c:	0dd2      	lsrs	r2, r2, #23
 800c59e:	e7e5      	b.n	800c56c <scalbnf+0x34>
 800c5a0:	4410      	add	r0, r2
 800c5a2:	28fe      	cmp	r0, #254	@ 0xfe
 800c5a4:	dce6      	bgt.n	800c574 <scalbnf+0x3c>
 800c5a6:	2800      	cmp	r0, #0
 800c5a8:	dd06      	ble.n	800c5b8 <scalbnf+0x80>
 800c5aa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c5ae:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c5b2:	ee00 3a10 	vmov	s0, r3
 800c5b6:	4770      	bx	lr
 800c5b8:	f110 0f16 	cmn.w	r0, #22
 800c5bc:	da09      	bge.n	800c5d2 <scalbnf+0x9a>
 800c5be:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800c5f8 <scalbnf+0xc0>
 800c5c2:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800c5fc <scalbnf+0xc4>
 800c5c6:	ee10 3a10 	vmov	r3, s0
 800c5ca:	eeb0 7a67 	vmov.f32	s14, s15
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	e7d9      	b.n	800c586 <scalbnf+0x4e>
 800c5d2:	3019      	adds	r0, #25
 800c5d4:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c5d8:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c5dc:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800c600 <scalbnf+0xc8>
 800c5e0:	ee07 3a90 	vmov	s15, r3
 800c5e4:	e7d7      	b.n	800c596 <scalbnf+0x5e>
 800c5e6:	bf00      	nop
 800c5e8:	ffff3cb0 	.word	0xffff3cb0
 800c5ec:	4c000000 	.word	0x4c000000
 800c5f0:	7149f2ca 	.word	0x7149f2ca
 800c5f4:	f149f2ca 	.word	0xf149f2ca
 800c5f8:	0da24260 	.word	0x0da24260
 800c5fc:	8da24260 	.word	0x8da24260
 800c600:	33000000 	.word	0x33000000

0800c604 <floorf>:
 800c604:	ee10 3a10 	vmov	r3, s0
 800c608:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c60c:	3a7f      	subs	r2, #127	@ 0x7f
 800c60e:	2a16      	cmp	r2, #22
 800c610:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c614:	dc2b      	bgt.n	800c66e <floorf+0x6a>
 800c616:	2a00      	cmp	r2, #0
 800c618:	da12      	bge.n	800c640 <floorf+0x3c>
 800c61a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800c680 <floorf+0x7c>
 800c61e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c622:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c62a:	dd06      	ble.n	800c63a <floorf+0x36>
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	da24      	bge.n	800c67a <floorf+0x76>
 800c630:	2900      	cmp	r1, #0
 800c632:	4b14      	ldr	r3, [pc, #80]	@ (800c684 <floorf+0x80>)
 800c634:	bf08      	it	eq
 800c636:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800c63a:	ee00 3a10 	vmov	s0, r3
 800c63e:	4770      	bx	lr
 800c640:	4911      	ldr	r1, [pc, #68]	@ (800c688 <floorf+0x84>)
 800c642:	4111      	asrs	r1, r2
 800c644:	420b      	tst	r3, r1
 800c646:	d0fa      	beq.n	800c63e <floorf+0x3a>
 800c648:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800c680 <floorf+0x7c>
 800c64c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c650:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c658:	ddef      	ble.n	800c63a <floorf+0x36>
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	bfbe      	ittt	lt
 800c65e:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800c662:	fa40 f202 	asrlt.w	r2, r0, r2
 800c666:	189b      	addlt	r3, r3, r2
 800c668:	ea23 0301 	bic.w	r3, r3, r1
 800c66c:	e7e5      	b.n	800c63a <floorf+0x36>
 800c66e:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800c672:	d3e4      	bcc.n	800c63e <floorf+0x3a>
 800c674:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c678:	4770      	bx	lr
 800c67a:	2300      	movs	r3, #0
 800c67c:	e7dd      	b.n	800c63a <floorf+0x36>
 800c67e:	bf00      	nop
 800c680:	7149f2ca 	.word	0x7149f2ca
 800c684:	bf800000 	.word	0xbf800000
 800c688:	007fffff 	.word	0x007fffff

0800c68c <_init>:
 800c68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c68e:	bf00      	nop
 800c690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c692:	bc08      	pop	{r3}
 800c694:	469e      	mov	lr, r3
 800c696:	4770      	bx	lr

0800c698 <_fini>:
 800c698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c69a:	bf00      	nop
 800c69c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c69e:	bc08      	pop	{r3}
 800c6a0:	469e      	mov	lr, r3
 800c6a2:	4770      	bx	lr
