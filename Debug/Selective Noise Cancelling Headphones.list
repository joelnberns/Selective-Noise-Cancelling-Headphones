
Selective Noise Cancelling Headphones.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a24  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  08006bf4  08006bf4  00007bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007048  08007048  00009468  2**0
                  CONTENTS
  4 .ARM          00000008  08007048  08007048  00008048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007050  08007050  00009468  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007050  08007050  00008050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007054  08007054  00008054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000468  20000000  08007058  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e4  20000468  080074c0  00009468  2**2
                  ALLOC
 10 ._user_heap_stack 0000fa04  2000084c  080074c0  0000984c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009468  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010926  00000000  00000000  00009498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c1d  00000000  00000000  00019dbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001100  00000000  00000000  0001c9e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d29  00000000  00000000  0001dae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000391b  00000000  00000000  0001e809  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014f6e  00000000  00000000  00022124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d670e  00000000  00000000  00037092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010d7a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050dc  00000000  00000000  0010d7e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  001128c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000468 	.word	0x20000468
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006bdc 	.word	0x08006bdc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000046c 	.word	0x2000046c
 800020c:	08006bdc 	.word	0x08006bdc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_dmul>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002be:	bf1d      	ittte	ne
 80002c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002c4:	ea94 0f0c 	teqne	r4, ip
 80002c8:	ea95 0f0c 	teqne	r5, ip
 80002cc:	f000 f8de 	bleq	800048c <__aeabi_dmul+0x1dc>
 80002d0:	442c      	add	r4, r5
 80002d2:	ea81 0603 	eor.w	r6, r1, r3
 80002d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002e2:	bf18      	it	ne
 80002e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002f0:	d038      	beq.n	8000364 <__aeabi_dmul+0xb4>
 80002f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002f6:	f04f 0500 	mov.w	r5, #0
 80002fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002fe:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000302:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000306:	f04f 0600 	mov.w	r6, #0
 800030a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800030e:	f09c 0f00 	teq	ip, #0
 8000312:	bf18      	it	ne
 8000314:	f04e 0e01 	orrne.w	lr, lr, #1
 8000318:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800031c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000320:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000324:	d204      	bcs.n	8000330 <__aeabi_dmul+0x80>
 8000326:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800032a:	416d      	adcs	r5, r5
 800032c:	eb46 0606 	adc.w	r6, r6, r6
 8000330:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000334:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000338:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800033c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000340:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000344:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000348:	bf88      	it	hi
 800034a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800034e:	d81e      	bhi.n	800038e <__aeabi_dmul+0xde>
 8000350:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000368:	ea46 0101 	orr.w	r1, r6, r1
 800036c:	ea40 0002 	orr.w	r0, r0, r2
 8000370:	ea81 0103 	eor.w	r1, r1, r3
 8000374:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000378:	bfc2      	ittt	gt
 800037a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800037e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000382:	bd70      	popgt	{r4, r5, r6, pc}
 8000384:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000388:	f04f 0e00 	mov.w	lr, #0
 800038c:	3c01      	subs	r4, #1
 800038e:	f300 80ab 	bgt.w	80004e8 <__aeabi_dmul+0x238>
 8000392:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000396:	bfde      	ittt	le
 8000398:	2000      	movle	r0, #0
 800039a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800039e:	bd70      	pople	{r4, r5, r6, pc}
 80003a0:	f1c4 0400 	rsb	r4, r4, #0
 80003a4:	3c20      	subs	r4, #32
 80003a6:	da35      	bge.n	8000414 <__aeabi_dmul+0x164>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc1b      	bgt.n	80003e4 <__aeabi_dmul+0x134>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0520 	rsb	r5, r4, #32
 80003b4:	fa00 f305 	lsl.w	r3, r0, r5
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f205 	lsl.w	r2, r1, r5
 80003c0:	ea40 0002 	orr.w	r0, r0, r2
 80003c4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d0:	fa21 f604 	lsr.w	r6, r1, r4
 80003d4:	eb42 0106 	adc.w	r1, r2, r6
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 040c 	rsb	r4, r4, #12
 80003e8:	f1c4 0520 	rsb	r5, r4, #32
 80003ec:	fa00 f304 	lsl.w	r3, r0, r4
 80003f0:	fa20 f005 	lsr.w	r0, r0, r5
 80003f4:	fa01 f204 	lsl.w	r2, r1, r4
 80003f8:	ea40 0002 	orr.w	r0, r0, r2
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000400:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000404:	f141 0100 	adc.w	r1, r1, #0
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 0520 	rsb	r5, r4, #32
 8000418:	fa00 f205 	lsl.w	r2, r0, r5
 800041c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000420:	fa20 f304 	lsr.w	r3, r0, r4
 8000424:	fa01 f205 	lsl.w	r2, r1, r5
 8000428:	ea43 0302 	orr.w	r3, r3, r2
 800042c:	fa21 f004 	lsr.w	r0, r1, r4
 8000430:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000434:	fa21 f204 	lsr.w	r2, r1, r4
 8000438:	ea20 0002 	bic.w	r0, r0, r2
 800043c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000440:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000444:	bf08      	it	eq
 8000446:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f094 0f00 	teq	r4, #0
 8000450:	d10f      	bne.n	8000472 <__aeabi_dmul+0x1c2>
 8000452:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000456:	0040      	lsls	r0, r0, #1
 8000458:	eb41 0101 	adc.w	r1, r1, r1
 800045c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000460:	bf08      	it	eq
 8000462:	3c01      	subeq	r4, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1a6>
 8000466:	ea41 0106 	orr.w	r1, r1, r6
 800046a:	f095 0f00 	teq	r5, #0
 800046e:	bf18      	it	ne
 8000470:	4770      	bxne	lr
 8000472:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	eb43 0303 	adc.w	r3, r3, r3
 800047c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000480:	bf08      	it	eq
 8000482:	3d01      	subeq	r5, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1c6>
 8000486:	ea43 0306 	orr.w	r3, r3, r6
 800048a:	4770      	bx	lr
 800048c:	ea94 0f0c 	teq	r4, ip
 8000490:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000494:	bf18      	it	ne
 8000496:	ea95 0f0c 	teqne	r5, ip
 800049a:	d00c      	beq.n	80004b6 <__aeabi_dmul+0x206>
 800049c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004a0:	bf18      	it	ne
 80004a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a6:	d1d1      	bne.n	800044c <__aeabi_dmul+0x19c>
 80004a8:	ea81 0103 	eor.w	r1, r1, r3
 80004ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004b0:	f04f 0000 	mov.w	r0, #0
 80004b4:	bd70      	pop	{r4, r5, r6, pc}
 80004b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ba:	bf06      	itte	eq
 80004bc:	4610      	moveq	r0, r2
 80004be:	4619      	moveq	r1, r3
 80004c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c4:	d019      	beq.n	80004fa <__aeabi_dmul+0x24a>
 80004c6:	ea94 0f0c 	teq	r4, ip
 80004ca:	d102      	bne.n	80004d2 <__aeabi_dmul+0x222>
 80004cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004d0:	d113      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004d2:	ea95 0f0c 	teq	r5, ip
 80004d6:	d105      	bne.n	80004e4 <__aeabi_dmul+0x234>
 80004d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004dc:	bf1c      	itt	ne
 80004de:	4610      	movne	r0, r2
 80004e0:	4619      	movne	r1, r3
 80004e2:	d10a      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004e4:	ea81 0103 	eor.w	r1, r1, r3
 80004e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ec:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
 80004fa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004fe:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000502:	bd70      	pop	{r4, r5, r6, pc}

08000504 <__aeabi_drsub>:
 8000504:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000508:	e002      	b.n	8000510 <__adddf3>
 800050a:	bf00      	nop

0800050c <__aeabi_dsub>:
 800050c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000510 <__adddf3>:
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000516:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800051a:	ea94 0f05 	teq	r4, r5
 800051e:	bf08      	it	eq
 8000520:	ea90 0f02 	teqeq	r0, r2
 8000524:	bf1f      	itttt	ne
 8000526:	ea54 0c00 	orrsne.w	ip, r4, r0
 800052a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000536:	f000 80e2 	beq.w	80006fe <__adddf3+0x1ee>
 800053a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000542:	bfb8      	it	lt
 8000544:	426d      	neglt	r5, r5
 8000546:	dd0c      	ble.n	8000562 <__adddf3+0x52>
 8000548:	442c      	add	r4, r5
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	ea82 0000 	eor.w	r0, r2, r0
 8000556:	ea83 0101 	eor.w	r1, r3, r1
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	2d36      	cmp	r5, #54	@ 0x36
 8000564:	bf88      	it	hi
 8000566:	bd30      	pophi	{r4, r5, pc}
 8000568:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800056c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000570:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000578:	d002      	beq.n	8000580 <__adddf3+0x70>
 800057a:	4240      	negs	r0, r0
 800057c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000580:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000584:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800058c:	d002      	beq.n	8000594 <__adddf3+0x84>
 800058e:	4252      	negs	r2, r2
 8000590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000594:	ea94 0f05 	teq	r4, r5
 8000598:	f000 80a7 	beq.w	80006ea <__adddf3+0x1da>
 800059c:	f1a4 0401 	sub.w	r4, r4, #1
 80005a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a4:	db0d      	blt.n	80005c2 <__adddf3+0xb2>
 80005a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005aa:	fa22 f205 	lsr.w	r2, r2, r5
 80005ae:	1880      	adds	r0, r0, r2
 80005b0:	f141 0100 	adc.w	r1, r1, #0
 80005b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b8:	1880      	adds	r0, r0, r2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	4159      	adcs	r1, r3
 80005c0:	e00e      	b.n	80005e0 <__adddf3+0xd0>
 80005c2:	f1a5 0520 	sub.w	r5, r5, #32
 80005c6:	f10e 0e20 	add.w	lr, lr, #32
 80005ca:	2a01      	cmp	r2, #1
 80005cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d0:	bf28      	it	cs
 80005d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d6:	fa43 f305 	asr.w	r3, r3, r5
 80005da:	18c0      	adds	r0, r0, r3
 80005dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	d507      	bpl.n	80005f6 <__adddf3+0xe6>
 80005e6:	f04f 0e00 	mov.w	lr, #0
 80005ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005fa:	d31b      	bcc.n	8000634 <__adddf3+0x124>
 80005fc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000600:	d30c      	bcc.n	800061c <__adddf3+0x10c>
 8000602:	0849      	lsrs	r1, r1, #1
 8000604:	ea5f 0030 	movs.w	r0, r0, rrx
 8000608:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800060c:	f104 0401 	add.w	r4, r4, #1
 8000610:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000614:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000618:	f080 809a 	bcs.w	8000750 <__adddf3+0x240>
 800061c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	ea41 0105 	orr.w	r1, r1, r5
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000638:	4140      	adcs	r0, r0
 800063a:	eb41 0101 	adc.w	r1, r1, r1
 800063e:	3c01      	subs	r4, #1
 8000640:	bf28      	it	cs
 8000642:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000646:	d2e9      	bcs.n	800061c <__adddf3+0x10c>
 8000648:	f091 0f00 	teq	r1, #0
 800064c:	bf04      	itt	eq
 800064e:	4601      	moveq	r1, r0
 8000650:	2000      	moveq	r0, #0
 8000652:	fab1 f381 	clz	r3, r1
 8000656:	bf08      	it	eq
 8000658:	3320      	addeq	r3, #32
 800065a:	f1a3 030b 	sub.w	r3, r3, #11
 800065e:	f1b3 0220 	subs.w	r2, r3, #32
 8000662:	da0c      	bge.n	800067e <__adddf3+0x16e>
 8000664:	320c      	adds	r2, #12
 8000666:	dd08      	ble.n	800067a <__adddf3+0x16a>
 8000668:	f102 0c14 	add.w	ip, r2, #20
 800066c:	f1c2 020c 	rsb	r2, r2, #12
 8000670:	fa01 f00c 	lsl.w	r0, r1, ip
 8000674:	fa21 f102 	lsr.w	r1, r1, r2
 8000678:	e00c      	b.n	8000694 <__adddf3+0x184>
 800067a:	f102 0214 	add.w	r2, r2, #20
 800067e:	bfd8      	it	le
 8000680:	f1c2 0c20 	rsble	ip, r2, #32
 8000684:	fa01 f102 	lsl.w	r1, r1, r2
 8000688:	fa20 fc0c 	lsr.w	ip, r0, ip
 800068c:	bfdc      	itt	le
 800068e:	ea41 010c 	orrle.w	r1, r1, ip
 8000692:	4090      	lslle	r0, r2
 8000694:	1ae4      	subs	r4, r4, r3
 8000696:	bfa2      	ittt	ge
 8000698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800069c:	4329      	orrge	r1, r5
 800069e:	bd30      	popge	{r4, r5, pc}
 80006a0:	ea6f 0404 	mvn.w	r4, r4
 80006a4:	3c1f      	subs	r4, #31
 80006a6:	da1c      	bge.n	80006e2 <__adddf3+0x1d2>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc0e      	bgt.n	80006ca <__adddf3+0x1ba>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0220 	rsb	r2, r4, #32
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f302 	lsl.w	r3, r1, r2
 80006bc:	ea40 0003 	orr.w	r0, r0, r3
 80006c0:	fa21 f304 	lsr.w	r3, r1, r4
 80006c4:	ea45 0103 	orr.w	r1, r5, r3
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f1c4 040c 	rsb	r4, r4, #12
 80006ce:	f1c4 0220 	rsb	r2, r4, #32
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 f304 	lsl.w	r3, r1, r4
 80006da:	ea40 0003 	orr.w	r0, r0, r3
 80006de:	4629      	mov	r1, r5
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	fa21 f004 	lsr.w	r0, r1, r4
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f094 0f00 	teq	r4, #0
 80006ee:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006f2:	bf06      	itte	eq
 80006f4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006f8:	3401      	addeq	r4, #1
 80006fa:	3d01      	subne	r5, #1
 80006fc:	e74e      	b.n	800059c <__adddf3+0x8c>
 80006fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000702:	bf18      	it	ne
 8000704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000708:	d029      	beq.n	800075e <__adddf3+0x24e>
 800070a:	ea94 0f05 	teq	r4, r5
 800070e:	bf08      	it	eq
 8000710:	ea90 0f02 	teqeq	r0, r2
 8000714:	d005      	beq.n	8000722 <__adddf3+0x212>
 8000716:	ea54 0c00 	orrs.w	ip, r4, r0
 800071a:	bf04      	itt	eq
 800071c:	4619      	moveq	r1, r3
 800071e:	4610      	moveq	r0, r2
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	ea91 0f03 	teq	r1, r3
 8000726:	bf1e      	ittt	ne
 8000728:	2100      	movne	r1, #0
 800072a:	2000      	movne	r0, #0
 800072c:	bd30      	popne	{r4, r5, pc}
 800072e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000732:	d105      	bne.n	8000740 <__adddf3+0x230>
 8000734:	0040      	lsls	r0, r0, #1
 8000736:	4149      	adcs	r1, r1
 8000738:	bf28      	it	cs
 800073a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000744:	bf3c      	itt	cc
 8000746:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800074a:	bd30      	popcc	{r4, r5, pc}
 800074c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000750:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000754:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000762:	bf1a      	itte	ne
 8000764:	4619      	movne	r1, r3
 8000766:	4610      	movne	r0, r2
 8000768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800076c:	bf1c      	itt	ne
 800076e:	460b      	movne	r3, r1
 8000770:	4602      	movne	r2, r0
 8000772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000776:	bf06      	itte	eq
 8000778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800077c:	ea91 0f03 	teqeq	r1, r3
 8000780:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	bf00      	nop

08000788 <__aeabi_ui2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800079c:	f04f 0500 	mov.w	r5, #0
 80007a0:	f04f 0100 	mov.w	r1, #0
 80007a4:	e750      	b.n	8000648 <__adddf3+0x138>
 80007a6:	bf00      	nop

080007a8 <__aeabi_i2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007bc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007c0:	bf48      	it	mi
 80007c2:	4240      	negmi	r0, r0
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	e73e      	b.n	8000648 <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_f2d>:
 80007cc:	0042      	lsls	r2, r0, #1
 80007ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007da:	bf1f      	itttt	ne
 80007dc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007e0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007e4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007e8:	4770      	bxne	lr
 80007ea:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ee:	bf08      	it	eq
 80007f0:	4770      	bxeq	lr
 80007f2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007f6:	bf04      	itt	eq
 80007f8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007fc:	4770      	bxeq	lr
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000804:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000808:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800080c:	e71c      	b.n	8000648 <__adddf3+0x138>
 800080e:	bf00      	nop

08000810 <__aeabi_ul2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f04f 0500 	mov.w	r5, #0
 800081e:	e00a      	b.n	8000836 <__aeabi_l2d+0x16>

08000820 <__aeabi_l2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800082e:	d502      	bpl.n	8000836 <__aeabi_l2d+0x16>
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800083a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800083e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000842:	f43f aed8 	beq.w	80005f6 <__adddf3+0xe6>
 8000846:	f04f 0203 	mov.w	r2, #3
 800084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084e:	bf18      	it	ne
 8000850:	3203      	addne	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	fa00 fc03 	lsl.w	ip, r0, r3
 8000866:	fa20 f002 	lsr.w	r0, r0, r2
 800086a:	fa01 fe03 	lsl.w	lr, r1, r3
 800086e:	ea40 000e 	orr.w	r0, r0, lr
 8000872:	fa21 f102 	lsr.w	r1, r1, r2
 8000876:	4414      	add	r4, r2
 8000878:	e6bd      	b.n	80005f6 <__adddf3+0xe6>
 800087a:	bf00      	nop

0800087c <__aeabi_d2f>:
 800087c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000880:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000884:	bf24      	itt	cs
 8000886:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800088a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800088e:	d90d      	bls.n	80008ac <__aeabi_d2f+0x30>
 8000890:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000894:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000898:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800089c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80008a0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008a4:	bf08      	it	eq
 80008a6:	f020 0001 	biceq.w	r0, r0, #1
 80008aa:	4770      	bx	lr
 80008ac:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80008b0:	d121      	bne.n	80008f6 <__aeabi_d2f+0x7a>
 80008b2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80008b6:	bfbc      	itt	lt
 80008b8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80008bc:	4770      	bxlt	lr
 80008be:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008c2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008c6:	f1c2 0218 	rsb	r2, r2, #24
 80008ca:	f1c2 0c20 	rsb	ip, r2, #32
 80008ce:	fa10 f30c 	lsls.w	r3, r0, ip
 80008d2:	fa20 f002 	lsr.w	r0, r0, r2
 80008d6:	bf18      	it	ne
 80008d8:	f040 0001 	orrne.w	r0, r0, #1
 80008dc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008e0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008e4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008e8:	ea40 000c 	orr.w	r0, r0, ip
 80008ec:	fa23 f302 	lsr.w	r3, r3, r2
 80008f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008f4:	e7cc      	b.n	8000890 <__aeabi_d2f+0x14>
 80008f6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008fa:	d107      	bne.n	800090c <__aeabi_d2f+0x90>
 80008fc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000900:	bf1e      	ittt	ne
 8000902:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000906:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800090a:	4770      	bxne	lr
 800090c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000910:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000914:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop

0800091c <__aeabi_uldivmod>:
 800091c:	b953      	cbnz	r3, 8000934 <__aeabi_uldivmod+0x18>
 800091e:	b94a      	cbnz	r2, 8000934 <__aeabi_uldivmod+0x18>
 8000920:	2900      	cmp	r1, #0
 8000922:	bf08      	it	eq
 8000924:	2800      	cmpeq	r0, #0
 8000926:	bf1c      	itt	ne
 8000928:	f04f 31ff 	movne.w	r1, #4294967295
 800092c:	f04f 30ff 	movne.w	r0, #4294967295
 8000930:	f000 b96a 	b.w	8000c08 <__aeabi_idiv0>
 8000934:	f1ad 0c08 	sub.w	ip, sp, #8
 8000938:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800093c:	f000 f806 	bl	800094c <__udivmoddi4>
 8000940:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000944:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000948:	b004      	add	sp, #16
 800094a:	4770      	bx	lr

0800094c <__udivmoddi4>:
 800094c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000950:	9d08      	ldr	r5, [sp, #32]
 8000952:	460c      	mov	r4, r1
 8000954:	2b00      	cmp	r3, #0
 8000956:	d14e      	bne.n	80009f6 <__udivmoddi4+0xaa>
 8000958:	4694      	mov	ip, r2
 800095a:	458c      	cmp	ip, r1
 800095c:	4686      	mov	lr, r0
 800095e:	fab2 f282 	clz	r2, r2
 8000962:	d962      	bls.n	8000a2a <__udivmoddi4+0xde>
 8000964:	b14a      	cbz	r2, 800097a <__udivmoddi4+0x2e>
 8000966:	f1c2 0320 	rsb	r3, r2, #32
 800096a:	4091      	lsls	r1, r2
 800096c:	fa20 f303 	lsr.w	r3, r0, r3
 8000970:	fa0c fc02 	lsl.w	ip, ip, r2
 8000974:	4319      	orrs	r1, r3
 8000976:	fa00 fe02 	lsl.w	lr, r0, r2
 800097a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800097e:	fa1f f68c 	uxth.w	r6, ip
 8000982:	fbb1 f4f7 	udiv	r4, r1, r7
 8000986:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800098a:	fb07 1114 	mls	r1, r7, r4, r1
 800098e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000992:	fb04 f106 	mul.w	r1, r4, r6
 8000996:	4299      	cmp	r1, r3
 8000998:	d90a      	bls.n	80009b0 <__udivmoddi4+0x64>
 800099a:	eb1c 0303 	adds.w	r3, ip, r3
 800099e:	f104 30ff 	add.w	r0, r4, #4294967295
 80009a2:	f080 8112 	bcs.w	8000bca <__udivmoddi4+0x27e>
 80009a6:	4299      	cmp	r1, r3
 80009a8:	f240 810f 	bls.w	8000bca <__udivmoddi4+0x27e>
 80009ac:	3c02      	subs	r4, #2
 80009ae:	4463      	add	r3, ip
 80009b0:	1a59      	subs	r1, r3, r1
 80009b2:	fa1f f38e 	uxth.w	r3, lr
 80009b6:	fbb1 f0f7 	udiv	r0, r1, r7
 80009ba:	fb07 1110 	mls	r1, r7, r0, r1
 80009be:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009c2:	fb00 f606 	mul.w	r6, r0, r6
 80009c6:	429e      	cmp	r6, r3
 80009c8:	d90a      	bls.n	80009e0 <__udivmoddi4+0x94>
 80009ca:	eb1c 0303 	adds.w	r3, ip, r3
 80009ce:	f100 31ff 	add.w	r1, r0, #4294967295
 80009d2:	f080 80fc 	bcs.w	8000bce <__udivmoddi4+0x282>
 80009d6:	429e      	cmp	r6, r3
 80009d8:	f240 80f9 	bls.w	8000bce <__udivmoddi4+0x282>
 80009dc:	4463      	add	r3, ip
 80009de:	3802      	subs	r0, #2
 80009e0:	1b9b      	subs	r3, r3, r6
 80009e2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80009e6:	2100      	movs	r1, #0
 80009e8:	b11d      	cbz	r5, 80009f2 <__udivmoddi4+0xa6>
 80009ea:	40d3      	lsrs	r3, r2
 80009ec:	2200      	movs	r2, #0
 80009ee:	e9c5 3200 	strd	r3, r2, [r5]
 80009f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009f6:	428b      	cmp	r3, r1
 80009f8:	d905      	bls.n	8000a06 <__udivmoddi4+0xba>
 80009fa:	b10d      	cbz	r5, 8000a00 <__udivmoddi4+0xb4>
 80009fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000a00:	2100      	movs	r1, #0
 8000a02:	4608      	mov	r0, r1
 8000a04:	e7f5      	b.n	80009f2 <__udivmoddi4+0xa6>
 8000a06:	fab3 f183 	clz	r1, r3
 8000a0a:	2900      	cmp	r1, #0
 8000a0c:	d146      	bne.n	8000a9c <__udivmoddi4+0x150>
 8000a0e:	42a3      	cmp	r3, r4
 8000a10:	d302      	bcc.n	8000a18 <__udivmoddi4+0xcc>
 8000a12:	4290      	cmp	r0, r2
 8000a14:	f0c0 80f0 	bcc.w	8000bf8 <__udivmoddi4+0x2ac>
 8000a18:	1a86      	subs	r6, r0, r2
 8000a1a:	eb64 0303 	sbc.w	r3, r4, r3
 8000a1e:	2001      	movs	r0, #1
 8000a20:	2d00      	cmp	r5, #0
 8000a22:	d0e6      	beq.n	80009f2 <__udivmoddi4+0xa6>
 8000a24:	e9c5 6300 	strd	r6, r3, [r5]
 8000a28:	e7e3      	b.n	80009f2 <__udivmoddi4+0xa6>
 8000a2a:	2a00      	cmp	r2, #0
 8000a2c:	f040 8090 	bne.w	8000b50 <__udivmoddi4+0x204>
 8000a30:	eba1 040c 	sub.w	r4, r1, ip
 8000a34:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a38:	fa1f f78c 	uxth.w	r7, ip
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a46:	fb08 4416 	mls	r4, r8, r6, r4
 8000a4a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a4e:	fb07 f006 	mul.w	r0, r7, r6
 8000a52:	4298      	cmp	r0, r3
 8000a54:	d908      	bls.n	8000a68 <__udivmoddi4+0x11c>
 8000a56:	eb1c 0303 	adds.w	r3, ip, r3
 8000a5a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a5e:	d202      	bcs.n	8000a66 <__udivmoddi4+0x11a>
 8000a60:	4298      	cmp	r0, r3
 8000a62:	f200 80cd 	bhi.w	8000c00 <__udivmoddi4+0x2b4>
 8000a66:	4626      	mov	r6, r4
 8000a68:	1a1c      	subs	r4, r3, r0
 8000a6a:	fa1f f38e 	uxth.w	r3, lr
 8000a6e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a72:	fb08 4410 	mls	r4, r8, r0, r4
 8000a76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a7a:	fb00 f707 	mul.w	r7, r0, r7
 8000a7e:	429f      	cmp	r7, r3
 8000a80:	d908      	bls.n	8000a94 <__udivmoddi4+0x148>
 8000a82:	eb1c 0303 	adds.w	r3, ip, r3
 8000a86:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a8a:	d202      	bcs.n	8000a92 <__udivmoddi4+0x146>
 8000a8c:	429f      	cmp	r7, r3
 8000a8e:	f200 80b0 	bhi.w	8000bf2 <__udivmoddi4+0x2a6>
 8000a92:	4620      	mov	r0, r4
 8000a94:	1bdb      	subs	r3, r3, r7
 8000a96:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a9a:	e7a5      	b.n	80009e8 <__udivmoddi4+0x9c>
 8000a9c:	f1c1 0620 	rsb	r6, r1, #32
 8000aa0:	408b      	lsls	r3, r1
 8000aa2:	fa22 f706 	lsr.w	r7, r2, r6
 8000aa6:	431f      	orrs	r7, r3
 8000aa8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000aac:	fa04 f301 	lsl.w	r3, r4, r1
 8000ab0:	ea43 030c 	orr.w	r3, r3, ip
 8000ab4:	40f4      	lsrs	r4, r6
 8000ab6:	fa00 f801 	lsl.w	r8, r0, r1
 8000aba:	0c38      	lsrs	r0, r7, #16
 8000abc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ac0:	fbb4 fef0 	udiv	lr, r4, r0
 8000ac4:	fa1f fc87 	uxth.w	ip, r7
 8000ac8:	fb00 441e 	mls	r4, r0, lr, r4
 8000acc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ad0:	fb0e f90c 	mul.w	r9, lr, ip
 8000ad4:	45a1      	cmp	r9, r4
 8000ad6:	fa02 f201 	lsl.w	r2, r2, r1
 8000ada:	d90a      	bls.n	8000af2 <__udivmoddi4+0x1a6>
 8000adc:	193c      	adds	r4, r7, r4
 8000ade:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000ae2:	f080 8084 	bcs.w	8000bee <__udivmoddi4+0x2a2>
 8000ae6:	45a1      	cmp	r9, r4
 8000ae8:	f240 8081 	bls.w	8000bee <__udivmoddi4+0x2a2>
 8000aec:	f1ae 0e02 	sub.w	lr, lr, #2
 8000af0:	443c      	add	r4, r7
 8000af2:	eba4 0409 	sub.w	r4, r4, r9
 8000af6:	fa1f f983 	uxth.w	r9, r3
 8000afa:	fbb4 f3f0 	udiv	r3, r4, r0
 8000afe:	fb00 4413 	mls	r4, r0, r3, r4
 8000b02:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b06:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b0a:	45a4      	cmp	ip, r4
 8000b0c:	d907      	bls.n	8000b1e <__udivmoddi4+0x1d2>
 8000b0e:	193c      	adds	r4, r7, r4
 8000b10:	f103 30ff 	add.w	r0, r3, #4294967295
 8000b14:	d267      	bcs.n	8000be6 <__udivmoddi4+0x29a>
 8000b16:	45a4      	cmp	ip, r4
 8000b18:	d965      	bls.n	8000be6 <__udivmoddi4+0x29a>
 8000b1a:	3b02      	subs	r3, #2
 8000b1c:	443c      	add	r4, r7
 8000b1e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000b22:	fba0 9302 	umull	r9, r3, r0, r2
 8000b26:	eba4 040c 	sub.w	r4, r4, ip
 8000b2a:	429c      	cmp	r4, r3
 8000b2c:	46ce      	mov	lr, r9
 8000b2e:	469c      	mov	ip, r3
 8000b30:	d351      	bcc.n	8000bd6 <__udivmoddi4+0x28a>
 8000b32:	d04e      	beq.n	8000bd2 <__udivmoddi4+0x286>
 8000b34:	b155      	cbz	r5, 8000b4c <__udivmoddi4+0x200>
 8000b36:	ebb8 030e 	subs.w	r3, r8, lr
 8000b3a:	eb64 040c 	sbc.w	r4, r4, ip
 8000b3e:	fa04 f606 	lsl.w	r6, r4, r6
 8000b42:	40cb      	lsrs	r3, r1
 8000b44:	431e      	orrs	r6, r3
 8000b46:	40cc      	lsrs	r4, r1
 8000b48:	e9c5 6400 	strd	r6, r4, [r5]
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	e750      	b.n	80009f2 <__udivmoddi4+0xa6>
 8000b50:	f1c2 0320 	rsb	r3, r2, #32
 8000b54:	fa20 f103 	lsr.w	r1, r0, r3
 8000b58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b5c:	fa24 f303 	lsr.w	r3, r4, r3
 8000b60:	4094      	lsls	r4, r2
 8000b62:	430c      	orrs	r4, r1
 8000b64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b68:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b6c:	fa1f f78c 	uxth.w	r7, ip
 8000b70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b74:	fb08 3110 	mls	r1, r8, r0, r3
 8000b78:	0c23      	lsrs	r3, r4, #16
 8000b7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b7e:	fb00 f107 	mul.w	r1, r0, r7
 8000b82:	4299      	cmp	r1, r3
 8000b84:	d908      	bls.n	8000b98 <__udivmoddi4+0x24c>
 8000b86:	eb1c 0303 	adds.w	r3, ip, r3
 8000b8a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000b8e:	d22c      	bcs.n	8000bea <__udivmoddi4+0x29e>
 8000b90:	4299      	cmp	r1, r3
 8000b92:	d92a      	bls.n	8000bea <__udivmoddi4+0x29e>
 8000b94:	3802      	subs	r0, #2
 8000b96:	4463      	add	r3, ip
 8000b98:	1a5b      	subs	r3, r3, r1
 8000b9a:	b2a4      	uxth	r4, r4
 8000b9c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ba0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ba4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba8:	fb01 f307 	mul.w	r3, r1, r7
 8000bac:	42a3      	cmp	r3, r4
 8000bae:	d908      	bls.n	8000bc2 <__udivmoddi4+0x276>
 8000bb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bb4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000bb8:	d213      	bcs.n	8000be2 <__udivmoddi4+0x296>
 8000bba:	42a3      	cmp	r3, r4
 8000bbc:	d911      	bls.n	8000be2 <__udivmoddi4+0x296>
 8000bbe:	3902      	subs	r1, #2
 8000bc0:	4464      	add	r4, ip
 8000bc2:	1ae4      	subs	r4, r4, r3
 8000bc4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000bc8:	e739      	b.n	8000a3e <__udivmoddi4+0xf2>
 8000bca:	4604      	mov	r4, r0
 8000bcc:	e6f0      	b.n	80009b0 <__udivmoddi4+0x64>
 8000bce:	4608      	mov	r0, r1
 8000bd0:	e706      	b.n	80009e0 <__udivmoddi4+0x94>
 8000bd2:	45c8      	cmp	r8, r9
 8000bd4:	d2ae      	bcs.n	8000b34 <__udivmoddi4+0x1e8>
 8000bd6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000bda:	eb63 0c07 	sbc.w	ip, r3, r7
 8000bde:	3801      	subs	r0, #1
 8000be0:	e7a8      	b.n	8000b34 <__udivmoddi4+0x1e8>
 8000be2:	4631      	mov	r1, r6
 8000be4:	e7ed      	b.n	8000bc2 <__udivmoddi4+0x276>
 8000be6:	4603      	mov	r3, r0
 8000be8:	e799      	b.n	8000b1e <__udivmoddi4+0x1d2>
 8000bea:	4630      	mov	r0, r6
 8000bec:	e7d4      	b.n	8000b98 <__udivmoddi4+0x24c>
 8000bee:	46d6      	mov	lr, sl
 8000bf0:	e77f      	b.n	8000af2 <__udivmoddi4+0x1a6>
 8000bf2:	4463      	add	r3, ip
 8000bf4:	3802      	subs	r0, #2
 8000bf6:	e74d      	b.n	8000a94 <__udivmoddi4+0x148>
 8000bf8:	4606      	mov	r6, r0
 8000bfa:	4623      	mov	r3, r4
 8000bfc:	4608      	mov	r0, r1
 8000bfe:	e70f      	b.n	8000a20 <__udivmoddi4+0xd4>
 8000c00:	3e02      	subs	r6, #2
 8000c02:	4463      	add	r3, ip
 8000c04:	e730      	b.n	8000a68 <__udivmoddi4+0x11c>
 8000c06:	bf00      	nop

08000c08 <__aeabi_idiv0>:
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <Delay_Init>:
#include "Delay.h"
#include <stdint.h>



void Delay_Init(Delay *dly, float delayTime_ms, float mix, float feedback, float sampleRate_Hz) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b088      	sub	sp, #32
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6178      	str	r0, [r7, #20]
 8000c14:	ed87 0a04 	vstr	s0, [r7, #16]
 8000c18:	edc7 0a03 	vstr	s1, [r7, #12]
 8000c1c:	ed87 1a02 	vstr	s2, [r7, #8]
 8000c20:	edc7 1a01 	vstr	s3, [r7, #4]

	// set delay line length
	Delay_SetLength(dly, delayTime_ms, sampleRate_Hz);
 8000c24:	edd7 0a01 	vldr	s1, [r7, #4]
 8000c28:	ed97 0a04 	vldr	s0, [r7, #16]
 8000c2c:	6978      	ldr	r0, [r7, #20]
 8000c2e:	f000 f875 	bl	8000d1c <Delay_SetLength>

	// store delay setting
	dly->mix = mix;
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	68fa      	ldr	r2, [r7, #12]
 8000c36:	601a      	str	r2, [r3, #0]
	dly->feedback = feedback;
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	68ba      	ldr	r2, [r7, #8]
 8000c3c:	605a      	str	r2, [r3, #4]

	// clear delay line circular buffer, reset index
	dly->lineIndex = 0;
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	2200      	movs	r2, #0
 8000c42:	631a      	str	r2, [r3, #48]	@ 0x30

	for (uint32_t n = 0; n < DELAY_MAX_LINE_LENGTH; n++) {
 8000c44:	2300      	movs	r3, #0
 8000c46:	61fb      	str	r3, [r7, #28]
 8000c48:	e00a      	b.n	8000c60 <Delay_Init+0x54>
		dly->line[n] = 0.0f;
 8000c4a:	697a      	ldr	r2, [r7, #20]
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	3302      	adds	r3, #2
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	4413      	add	r3, r2
 8000c54:	f04f 0200 	mov.w	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
	for (uint32_t n = 0; n < DELAY_MAX_LINE_LENGTH; n++) {
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	61fb      	str	r3, [r7, #28]
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	2b09      	cmp	r3, #9
 8000c64:	d9f1      	bls.n	8000c4a <Delay_Init+0x3e>
	}

	// clear output
	dly->out = 0.0f;
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	f04f 0200 	mov.w	r2, #0
 8000c6c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000c6e:	bf00      	nop
 8000c70:	3720      	adds	r7, #32
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <Delay_Update>:

float Delay_Update(Delay *dly, float inp){
 8000c76:	b480      	push	{r7}
 8000c78:	b085      	sub	sp, #20
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
 8000c7e:	ed87 0a00 	vstr	s0, [r7]
	// get current delay line output
	float delayLineOutput = dly->line[dly->lineIndex];
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	3302      	adds	r3, #2
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	4413      	add	r3, r2
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	60fb      	str	r3, [r7, #12]

	// compute current delay line input
	float delayLineInput = inp + dly->feedback*delayLineOutput;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	ed93 7a01 	vldr	s14, [r3, #4]
 8000c98:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ca0:	ed97 7a00 	vldr	s14, [r7]
 8000ca4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ca8:	edc7 7a02 	vstr	s15, [r7, #8]

	//store in delay line circular buffer
	dly->line[dly->lineIndex] = delayLineInput;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	3302      	adds	r3, #2
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	4413      	add	r3, r2
 8000cb8:	68ba      	ldr	r2, [r7, #8]
 8000cba:	601a      	str	r2, [r3, #0]

	// increment delay line index
	dly->lineIndex++;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc0:	1c5a      	adds	r2, r3, #1
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	631a      	str	r2, [r3, #48]	@ 0x30
	if (dly->lineIndex >= dly->lineLength) {
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	d302      	bcc.n	8000cd8 <Delay_Update+0x62>
		dly->lineIndex = 0;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	631a      	str	r2, [r3, #48]	@ 0x30
	}

	dly->out = (1.0f - dly->mix) * inp + dly->mix * delayLineOutput;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	edd3 7a00 	vldr	s15, [r3]
 8000cde:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000ce2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ce6:	edd7 7a00 	vldr	s15, [r7]
 8000cea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	edd3 6a00 	vldr	s13, [r3]
 8000cf4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000cf8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000cfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
	else if (dly->out < -1.0) {
		dly->out = -1.0f;
	}
	*/

	return dly->out;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d0a:	ee07 3a90 	vmov	s15, r3

}
 8000d0e:	eeb0 0a67 	vmov.f32	s0, s15
 8000d12:	3714      	adds	r7, #20
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <Delay_SetLength>:
void Delay_SetLength(Delay *dly, float delayTime_ms, float sampleRate_Hz) {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	ed87 0a02 	vstr	s0, [r7, #8]
 8000d28:	edc7 0a01 	vstr	s1, [r7, #4]
	float testFloat = 0.001f * delayTime_ms * (float)(sampleRate_Hz);
 8000d2c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d30:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8000dac <Delay_SetLength+0x90>
 8000d34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d38:	ed97 7a01 	vldr	s14, [r7, #4]
 8000d3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d40:	edc7 7a05 	vstr	s15, [r7, #20]
	printf("delay time %d \n", (int32_t)(delayTime_ms));
 8000d44:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d4c:	ee17 1a90 	vmov	r1, s15
 8000d50:	4817      	ldr	r0, [pc, #92]	@ (8000db0 <Delay_SetLength+0x94>)
 8000d52:	f004 fc23 	bl	800559c <iprintf>
	printf("freq %d \n", (int32_t)(sampleRate_Hz));
 8000d56:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d5e:	ee17 1a90 	vmov	r1, s15
 8000d62:	4814      	ldr	r0, [pc, #80]	@ (8000db4 <Delay_SetLength+0x98>)
 8000d64:	f004 fc1a 	bl	800559c <iprintf>
	dly->lineLength = (uint32_t)(0.001f * delayTime_ms * (float)(sampleRate_Hz));
 8000d68:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d6c:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8000dac <Delay_SetLength+0x90>
 8000d70:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d74:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d80:	ee17 2a90 	vmov	r2, s15
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	635a      	str	r2, [r3, #52]	@ 0x34
	printf("line length: %d \n", (int)(dly->lineLength));
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	480a      	ldr	r0, [pc, #40]	@ (8000db8 <Delay_SetLength+0x9c>)
 8000d90:	f004 fc04 	bl	800559c <iprintf>
	if (dly->lineLength > DELAY_MAX_LINE_LENGTH) {
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d98:	2b0a      	cmp	r3, #10
 8000d9a:	d902      	bls.n	8000da2 <Delay_SetLength+0x86>
		dly->lineLength = DELAY_MAX_LINE_LENGTH;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	220a      	movs	r2, #10
 8000da0:	635a      	str	r2, [r3, #52]	@ 0x34
	}
}
 8000da2:	bf00      	nop
 8000da4:	3718      	adds	r7, #24
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	3a83126f 	.word	0x3a83126f
 8000db0:	08006bf4 	.word	0x08006bf4
 8000db4:	08006c04 	.word	0x08006c04
 8000db8:	08006c10 	.word	0x08006c10

08000dbc <HighPass_FirstOrder_Init>:
 *      Author: joeln
 */

#include "HighPass_FirstOrder.h"

void HighPass_FirstOrder_Init(HighPass_FirstOrder *filt, float fc_Hz, float fs_Hz) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	ed87 0a02 	vstr	s0, [r7, #8]
 8000dc8:	edc7 0a01 	vstr	s1, [r7, #4]
	filt->fs_Hz = fs_Hz = fs_Hz;
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	60da      	str	r2, [r3, #12]

	HighPass_FirstOrder_SetCutoff(filt, fc_Hz);
 8000dd2:	ed97 0a02 	vldr	s0, [r7, #8]
 8000dd6:	68f8      	ldr	r0, [r7, #12]
 8000dd8:	f000 f80c 	bl	8000df4 <HighPass_FirstOrder_SetCutoff>

	filt->out = 0.0f;
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	f04f 0200 	mov.w	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
	filt->inp = 0.0f;
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	f04f 0200 	mov.w	r2, #0
 8000dea:	605a      	str	r2, [r3, #4]
}
 8000dec:	bf00      	nop
 8000dee:	3710      	adds	r7, #16
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <HighPass_FirstOrder_SetCutoff>:

void HighPass_FirstOrder_SetCutoff(HighPass_FirstOrder *filt, float fc_Hz) {
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	ed87 0a00 	vstr	s0, [r7]
	if ( fc_Hz > (0.5f * filt->fs_Hz)) {
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	edd3 7a03 	vldr	s15, [r3, #12]
 8000e06:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000e0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e0e:	ed97 7a00 	vldr	s14, [r7]
 8000e12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e1a:	dd09      	ble.n	8000e30 <HighPass_FirstOrder_SetCutoff+0x3c>
		fc_Hz = 0.5f * filt->fs_Hz;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	edd3 7a03 	vldr	s15, [r3, #12]
 8000e22:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000e26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e2a:	edc7 7a00 	vstr	s15, [r7]
 8000e2e:	e009      	b.n	8000e44 <HighPass_FirstOrder_SetCutoff+0x50>
	}
	else if (fc_Hz < 0.0f) {
 8000e30:	edd7 7a00 	vldr	s15, [r7]
 8000e34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e3c:	d502      	bpl.n	8000e44 <HighPass_FirstOrder_SetCutoff+0x50>
		fc_Hz = 0.0f;
 8000e3e:	f04f 0300 	mov.w	r3, #0
 8000e42:	603b      	str	r3, [r7, #0]
	}

	// compute and store filter coefficient
	float alpha = 6.28318530718f * fc_Hz / filt->fs_Hz; // alpha = 2 * pi * fc / fs
 8000e44:	edd7 7a00 	vldr	s15, [r7]
 8000e48:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8000e84 <HighPass_FirstOrder_SetCutoff+0x90>
 8000e4c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	ed93 7a03 	vldr	s14, [r3, #12]
 8000e56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e5a:	edc7 7a03 	vstr	s15, [r7, #12]

	filt->coeff = 1.0f / (1.0f + alpha);
 8000e5e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000e66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000e6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000e6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8000e78:	bf00      	nop
 8000e7a:	3714      	adds	r7, #20
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	40c90fdb 	.word	0x40c90fdb

08000e88 <HighPass_FirstOrder_Update>:

float HighPass_FirstOrder_Update(HighPass_FirstOrder *filt, float inp) {
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	ed87 0a00 	vstr	s0, [r7]
	filt->out = filt->coeff * (inp - filt->inp + filt->out);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	ed93 7a02 	vldr	s14, [r3, #8]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	edd3 7a01 	vldr	s15, [r3, #4]
 8000ea0:	edd7 6a00 	vldr	s13, [r7]
 8000ea4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	edd3 7a00 	vldr	s15, [r3]
 8000eae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	edc3 7a00 	vstr	s15, [r3]

	if (filt->out > 1.0f) {
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	edd3 7a00 	vldr	s15, [r3]
 8000ec2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000ec6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ece:	dd04      	ble.n	8000eda <HighPass_FirstOrder_Update+0x52>
		filt->out = 1.0f;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	e00c      	b.n	8000ef4 <HighPass_FirstOrder_Update+0x6c>
	}
	else if (filt->out < -1.0f) {
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	edd3 7a00 	vldr	s15, [r3]
 8000ee0:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8000ee4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eec:	d502      	bpl.n	8000ef4 <HighPass_FirstOrder_Update+0x6c>
		filt->out = -1.0f;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a06      	ldr	r2, [pc, #24]	@ (8000f0c <HighPass_FirstOrder_Update+0x84>)
 8000ef2:	601a      	str	r2, [r3, #0]
	}

	return filt->out;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	ee07 3a90 	vmov	s15, r3
}
 8000efc:	eeb0 0a67 	vmov.f32	s0, s15
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	bf800000 	.word	0xbf800000

08000f10 <LowPass_FirstOrder_Init>:
 *      Author: joeln
 */

#include "LowPass_FirstOrder.h"

void LowPass_FirstOrder_Init(LowPass_FirstOrder *filt, float fc_Hz, float fs_Hz) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f1c:	edc7 0a01 	vstr	s1, [r7, #4]
	filt->fs_Hz = fs_Hz = fs_Hz;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	60da      	str	r2, [r3, #12]

	LowPass_FirstOrder_SetCutoff(filt, fc_Hz);
 8000f26:	ed97 0a02 	vldr	s0, [r7, #8]
 8000f2a:	68f8      	ldr	r0, [r7, #12]
 8000f2c:	f000 f808 	bl	8000f40 <LowPass_FirstOrder_SetCutoff>

	filt->out = 0.0f;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	f04f 0200 	mov.w	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
}
 8000f38:	bf00      	nop
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <LowPass_FirstOrder_SetCutoff>:

void LowPass_FirstOrder_SetCutoff(LowPass_FirstOrder *filt, float fc_Hz) {
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	ed87 0a00 	vstr	s0, [r7]
	if ( fc_Hz > (0.5f * filt->fs_Hz)) {
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	edd3 7a03 	vldr	s15, [r3, #12]
 8000f52:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000f56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f5a:	ed97 7a00 	vldr	s14, [r7]
 8000f5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f66:	dd09      	ble.n	8000f7c <LowPass_FirstOrder_SetCutoff+0x3c>
		fc_Hz = 0.5f * filt->fs_Hz;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	edd3 7a03 	vldr	s15, [r3, #12]
 8000f6e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000f72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f76:	edc7 7a00 	vstr	s15, [r7]
 8000f7a:	e009      	b.n	8000f90 <LowPass_FirstOrder_SetCutoff+0x50>
	}
	else if (fc_Hz < 0.0f) {
 8000f7c:	edd7 7a00 	vldr	s15, [r7]
 8000f80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f88:	d502      	bpl.n	8000f90 <LowPass_FirstOrder_SetCutoff+0x50>
		fc_Hz = 0.0f;
 8000f8a:	f04f 0300 	mov.w	r3, #0
 8000f8e:	603b      	str	r3, [r7, #0]
	}

	// compute and store filter coefficient
	float alpha = 6.28318530718f * fc_Hz / filt->fs_Hz; // alpha = 2 * pi * fc / fs
 8000f90:	edd7 7a00 	vldr	s15, [r7]
 8000f94:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8000fec <LowPass_FirstOrder_SetCutoff+0xac>
 8000f98:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	ed93 7a03 	vldr	s14, [r3, #12]
 8000fa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fa6:	edc7 7a03 	vstr	s15, [r7, #12]

	filt->coeff[0] = alpha / (1.0f + alpha);
 8000faa:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000fb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000fb6:	edd7 6a03 	vldr	s13, [r7, #12]
 8000fba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	edc3 7a01 	vstr	s15, [r3, #4]
	filt->coeff[1] = 1.0f / (1.0f + alpha);
 8000fc4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fc8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000fcc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000fd0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000fd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8000fde:	bf00      	nop
 8000fe0:	3714      	adds	r7, #20
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	40c90fdb 	.word	0x40c90fdb

08000ff0 <LowPass_FirstOrder_Update>:

float LowPass_FirstOrder_Update(LowPass_FirstOrder *filt, float inp) {
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	ed87 0a00 	vstr	s0, [r7]
	filt->out = filt->coeff[0] * inp + filt->coeff[1] * filt->out;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	ed93 7a01 	vldr	s14, [r3, #4]
 8001002:	edd7 7a00 	vldr	s15, [r7]
 8001006:	ee27 7a27 	vmul.f32	s14, s14, s15
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	edd3 7a00 	vldr	s15, [r3]
 8001016:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800101a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	edc3 7a00 	vstr	s15, [r3]

	if (filt->out > 1.0f) {
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	edd3 7a00 	vldr	s15, [r3]
 800102a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800102e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001036:	dd04      	ble.n	8001042 <LowPass_FirstOrder_Update+0x52>
		filt->out = 1.0f;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	e00c      	b.n	800105c <LowPass_FirstOrder_Update+0x6c>
	}
	else if (filt->out < -1.0f) {
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	edd3 7a00 	vldr	s15, [r3]
 8001048:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800104c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001054:	d502      	bpl.n	800105c <LowPass_FirstOrder_Update+0x6c>
		filt->out = -1.0f;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a06      	ldr	r2, [pc, #24]	@ (8001074 <LowPass_FirstOrder_Update+0x84>)
 800105a:	601a      	str	r2, [r3, #0]
	}

	return filt->out;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	ee07 3a90 	vmov	s15, r3
}
 8001064:	eeb0 0a67 	vmov.f32	s0, s15
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	bf800000 	.word	0xbf800000

08001078 <EQ_init>:
#include "PeakingFilter.h"


//Function for initalizing filter
void EQ_init(EQ *filt, float fs)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	ed87 0a00 	vstr	s0, [r7]
    filt->T = 1.0f/fs;
 8001084:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001088:	ed97 7a00 	vldr	s14, [r7]
 800108c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	edc3 7a00 	vstr	s15, [r3]

    //clear input and output
    for(uint8_t n = 0; n<3; n++)
 8001096:	2300      	movs	r3, #0
 8001098:	73fb      	strb	r3, [r7, #15]
 800109a:	e012      	b.n	80010c2 <EQ_init+0x4a>
    {
        filt->x[n] = 0.0f;
 800109c:	7bfb      	ldrb	r3, [r7, #15]
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	4413      	add	r3, r2
 80010a4:	3304      	adds	r3, #4
 80010a6:	f04f 0200 	mov.w	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
        filt->y[n] = 0.0f;
 80010ac:	7bfb      	ldrb	r3, [r7, #15]
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	3304      	adds	r3, #4
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	4413      	add	r3, r2
 80010b6:	f04f 0200 	mov.w	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
    for(uint8_t n = 0; n<3; n++)
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
 80010be:	3301      	adds	r3, #1
 80010c0:	73fb      	strb	r3, [r7, #15]
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d9e9      	bls.n	800109c <EQ_init+0x24>
    }

    //call function to set parameters
    EQ_setParam(filt, 1.0f, 1.0f, 0.0f);
 80010c8:	ed9f 1a06 	vldr	s2, [pc, #24]	@ 80010e4 <EQ_init+0x6c>
 80010cc:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80010d0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f000 f807 	bl	80010e8 <EQ_setParam>
}
 80010da:	bf00      	nop
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	00000000 	.word	0x00000000

080010e8 <EQ_setParam>:
//T, center freq, gain, bandwidth
void EQ_setParam(EQ *filt, float fc, float g, float bw)
{
 80010e8:	b5b0      	push	{r4, r5, r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	ed87 0a02 	vstr	s0, [r7, #8]
 80010f4:	edc7 0a01 	vstr	s1, [r7, #4]
 80010f8:	ed87 1a00 	vstr	s2, [r7]
    float wc = 2.0f*tanf(M_PI*fc*filt->T);
 80010fc:	68b8      	ldr	r0, [r7, #8]
 80010fe:	f7ff fb65 	bl	80007cc <__aeabi_f2d>
 8001102:	a35b      	add	r3, pc, #364	@ (adr r3, 8001270 <EQ_setParam+0x188>)
 8001104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001108:	f7ff f8d2 	bl	80002b0 <__aeabi_dmul>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	4614      	mov	r4, r2
 8001112:	461d      	mov	r5, r3
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff fb57 	bl	80007cc <__aeabi_f2d>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	4620      	mov	r0, r4
 8001124:	4629      	mov	r1, r5
 8001126:	f7ff f8c3 	bl	80002b0 <__aeabi_dmul>
 800112a:	4602      	mov	r2, r0
 800112c:	460b      	mov	r3, r1
 800112e:	4610      	mov	r0, r2
 8001130:	4619      	mov	r1, r3
 8001132:	f7ff fba3 	bl	800087c <__aeabi_d2f>
 8001136:	4603      	mov	r3, r0
 8001138:	ee00 3a10 	vmov	s0, r3
 800113c:	f004 ffee 	bl	800611c <tanf>
 8001140:	eef0 7a40 	vmov.f32	s15, s0
 8001144:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001148:	edc7 7a05 	vstr	s15, [r7, #20]
    float Q = fc/bw;
 800114c:	edd7 6a02 	vldr	s13, [r7, #8]
 8001150:	ed97 7a00 	vldr	s14, [r7]
 8001154:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001158:	edc7 7a04 	vstr	s15, [r7, #16]

    filt->a[0] = 4 + 2*(g/Q)*wc + (wc)*(wc);
 800115c:	edd7 6a01 	vldr	s13, [r7, #4]
 8001160:	ed97 7a04 	vldr	s14, [r7, #16]
 8001164:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001168:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800116c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001170:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001174:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001178:	ee37 7a87 	vadd.f32	s14, s15, s14
 800117c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001180:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001184:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	edc3 7a07 	vstr	s15, [r3, #28]
    filt->a[1] = 2*(wc)*(wc) - 8;
 800118e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001192:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001196:	edd7 7a05 	vldr	s15, [r7, #20]
 800119a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800119e:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 80011a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	edc3 7a08 	vstr	s15, [r3, #32]
    filt->a[2] = 4 - 2*(g/Q)*wc + (wc)*(wc);
 80011ac:	edd7 6a01 	vldr	s13, [r7, #4]
 80011b0:	ed97 7a04 	vldr	s14, [r7, #16]
 80011b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011b8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80011bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80011c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011c4:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80011c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80011d0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80011d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    filt->b[0] = 4 + 2*(1/Q)*wc + (wc)*(wc);
 80011de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80011e2:	ed97 7a04 	vldr	s14, [r7, #16]
 80011e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011ea:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80011ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80011f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011f6:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80011fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80011fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8001202:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001206:	ee77 7a27 	vadd.f32	s15, s14, s15
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    filt->b[1] = -(2*(wc)*(wc) - 8);
 8001210:	edd7 7a05 	vldr	s15, [r7, #20]
 8001214:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001218:	edd7 7a05 	vldr	s15, [r7, #20]
 800121c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001220:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8001224:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001228:	eef1 7a67 	vneg.f32	s15, s15
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    filt->b[2] = -(4 - 2*(1/Q)*wc + (wc)*(wc));
 8001232:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001236:	ed97 7a04 	vldr	s14, [r7, #16]
 800123a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800123e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001242:	edd7 7a05 	vldr	s15, [r7, #20]
 8001246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800124a:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800124e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001252:	edd7 7a05 	vldr	s15, [r7, #20]
 8001256:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800125a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800125e:	eef1 7a67 	vneg.f32	s15, s15
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
}
 8001268:	bf00      	nop
 800126a:	3718      	adds	r7, #24
 800126c:	46bd      	mov	sp, r7
 800126e:	bdb0      	pop	{r4, r5, r7, pc}
 8001270:	54442d18 	.word	0x54442d18
 8001274:	400921fb 	.word	0x400921fb

08001278 <EQ_filter>:

float EQ_filter(EQ *filt, float in)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	ed87 0a00 	vstr	s0, [r7]
    //shift
    filt->x[2] = filt->x[1];
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	689a      	ldr	r2, [r3, #8]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	60da      	str	r2, [r3, #12]
    filt->x[1] = filt->x[0];
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685a      	ldr	r2, [r3, #4]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	609a      	str	r2, [r3, #8]
    filt->x[0] = in;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	683a      	ldr	r2, [r7, #0]
 8001298:	605a      	str	r2, [r3, #4]

    filt->y[2] = filt->y[1];
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	695a      	ldr	r2, [r3, #20]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	619a      	str	r2, [r3, #24]
    filt->y[1] = filt->y[0];
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	691a      	ldr	r2, [r3, #16]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	615a      	str	r2, [r3, #20]

    filt->y[0] = (1/filt->b[0])*((filt->a[0]*filt->x[0] + filt->a[1]*filt->x[1] + filt->a[2]*filt->x[2]) + (filt->b[1]*filt->y[1] + filt->b[2]*filt->y[2]));
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80012b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80012b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	edd3 6a07 	vldr	s13, [r3, #28]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	edd3 7a01 	vldr	s15, [r3, #4]
 80012c4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	ed93 6a08 	vldr	s12, [r3, #32]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	edd3 7a02 	vldr	s15, [r3, #8]
 80012d4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80012d8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	ed93 6a09 	vldr	s12, [r3, #36]	@ 0x24
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	edd3 7a03 	vldr	s15, [r3, #12]
 80012e8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80012ec:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	ed93 6a0b 	vldr	s12, [r3, #44]	@ 0x2c
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	edd3 7a05 	vldr	s15, [r3, #20]
 80012fc:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	edd3 5a0c 	vldr	s11, [r3, #48]	@ 0x30
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	edd3 7a06 	vldr	s15, [r3, #24]
 800130c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001310:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001314:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001318:	ee67 7a27 	vmul.f32	s15, s14, s15
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	edc3 7a04 	vstr	s15, [r3, #16]

    return (filt->y[0]);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	691b      	ldr	r3, [r3, #16]
 8001326:	ee07 3a90 	vmov	s15, r3
}
 800132a:	eeb0 0a67 	vmov.f32	s0, s15
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <HAL_I2S_RxHalfCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */



void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
	check += 1;
 8001340:	4b08      	ldr	r3, [pc, #32]	@ (8001364 <HAL_I2S_RxHalfCpltCallback+0x2c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	3301      	adds	r3, #1
 8001346:	4a07      	ldr	r2, [pc, #28]	@ (8001364 <HAL_I2S_RxHalfCpltCallback+0x2c>)
 8001348:	6013      	str	r3, [r2, #0]
	inBufPtr = &inData[0];
 800134a:	4b07      	ldr	r3, [pc, #28]	@ (8001368 <HAL_I2S_RxHalfCpltCallback+0x30>)
 800134c:	4a07      	ldr	r2, [pc, #28]	@ (800136c <HAL_I2S_RxHalfCpltCallback+0x34>)
 800134e:	601a      	str	r2, [r3, #0]

	dataReadyFlag = 1;
 8001350:	4b07      	ldr	r3, [pc, #28]	@ (8001370 <HAL_I2S_RxHalfCpltCallback+0x38>)
 8001352:	2201      	movs	r2, #1
 8001354:	801a      	strh	r2, [r3, #0]
}
 8001356:	bf00      	nop
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	2000069c 	.word	0x2000069c
 8001368:	20000694 	.word	0x20000694
 800136c:	20000594 	.word	0x20000594
 8001370:	2000069a 	.word	0x2000069a

08001374 <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
	check += 1;
 800137c:	4b08      	ldr	r3, [pc, #32]	@ (80013a0 <HAL_I2S_RxCpltCallback+0x2c>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	3301      	adds	r3, #1
 8001382:	4a07      	ldr	r2, [pc, #28]	@ (80013a0 <HAL_I2S_RxCpltCallback+0x2c>)
 8001384:	6013      	str	r3, [r2, #0]
	inBufPtr = &inData[BUFFER_SIZE/2];
 8001386:	4b07      	ldr	r3, [pc, #28]	@ (80013a4 <HAL_I2S_RxCpltCallback+0x30>)
 8001388:	4a07      	ldr	r2, [pc, #28]	@ (80013a8 <HAL_I2S_RxCpltCallback+0x34>)
 800138a:	601a      	str	r2, [r3, #0]

	dataReadyFlag = 1;
 800138c:	4b07      	ldr	r3, [pc, #28]	@ (80013ac <HAL_I2S_RxCpltCallback+0x38>)
 800138e:	2201      	movs	r2, #1
 8001390:	801a      	strh	r2, [r3, #0]
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	2000069c 	.word	0x2000069c
 80013a4:	20000694 	.word	0x20000694
 80013a8:	20000614 	.word	0x20000614
 80013ac:	2000069a 	.word	0x2000069a

080013b0 <processData>:

}
*/


void processData(Delay *dly, HighPass_FirstOrder *hpFilt, LowPass_FirstOrder *lpFilt, EQ *eq) {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
 80013bc:	603b      	str	r3, [r7, #0]
	static float right;
	static float rightDelayed;
	static float out;

	//float out = Delay_Update(&dly, sample_i2s) * 5;
	for (uint8_t n = 0; n < (BUFFER_SIZE/2) - 1; n += 2) {
 80013be:	2300      	movs	r3, #0
 80013c0:	75fb      	strb	r3, [r7, #23]
 80013c2:	e0e1      	b.n	8001588 <processData+0x1d8>

		left = (inBufPtr[n] * INT16_TO_FLOAT); // + 0.0537;
 80013c4:	4b75      	ldr	r3, [pc, #468]	@ (800159c <processData+0x1ec>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	7dfb      	ldrb	r3, [r7, #23]
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	4413      	add	r3, r2
 80013ce:	881b      	ldrh	r3, [r3, #0]
 80013d0:	b21b      	sxth	r3, r3
 80013d2:	ee07 3a90 	vmov	s15, r3
 80013d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013da:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 80015a0 <processData+0x1f0>
 80013de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013e2:	4b70      	ldr	r3, [pc, #448]	@ (80015a4 <processData+0x1f4>)
 80013e4:	edc3 7a00 	vstr	s15, [r3]


		//left = LowPass_FirstOrder_Update(&lpFilt, left);
		left = HighPass_FirstOrder_Update(hpFilt, left);
 80013e8:	4b6e      	ldr	r3, [pc, #440]	@ (80015a4 <processData+0x1f4>)
 80013ea:	edd3 7a00 	vldr	s15, [r3]
 80013ee:	eeb0 0a67 	vmov.f32	s0, s15
 80013f2:	68b8      	ldr	r0, [r7, #8]
 80013f4:	f7ff fd48 	bl	8000e88 <HighPass_FirstOrder_Update>
 80013f8:	eef0 7a40 	vmov.f32	s15, s0
 80013fc:	4b69      	ldr	r3, [pc, #420]	@ (80015a4 <processData+0x1f4>)
 80013fe:	edc3 7a00 	vstr	s15, [r3]

		if (left > 1.0f) {
 8001402:	4b68      	ldr	r3, [pc, #416]	@ (80015a4 <processData+0x1f4>)
 8001404:	edd3 7a00 	vldr	s15, [r3]
 8001408:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800140c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001414:	dd04      	ble.n	8001420 <processData+0x70>
			left = 1.0f;
 8001416:	4b63      	ldr	r3, [pc, #396]	@ (80015a4 <processData+0x1f4>)
 8001418:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	e00c      	b.n	800143a <processData+0x8a>
		}
		else if (left < -1.0f) {
 8001420:	4b60      	ldr	r3, [pc, #384]	@ (80015a4 <processData+0x1f4>)
 8001422:	edd3 7a00 	vldr	s15, [r3]
 8001426:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800142a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800142e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001432:	d502      	bpl.n	800143a <processData+0x8a>
			left = -1;
 8001434:	4b5b      	ldr	r3, [pc, #364]	@ (80015a4 <processData+0x1f4>)
 8001436:	4a5c      	ldr	r2, [pc, #368]	@ (80015a8 <processData+0x1f8>)
 8001438:	601a      	str	r2, [r3, #0]

		}

		right = (inBufPtr[n+1] * INT16_TO_FLOAT); // + 0.054565;
 800143a:	4b58      	ldr	r3, [pc, #352]	@ (800159c <processData+0x1ec>)
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	7dfb      	ldrb	r3, [r7, #23]
 8001440:	3301      	adds	r3, #1
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	4413      	add	r3, r2
 8001446:	881b      	ldrh	r3, [r3, #0]
 8001448:	b21b      	sxth	r3, r3
 800144a:	ee07 3a90 	vmov	s15, r3
 800144e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001452:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 80015a0 <processData+0x1f0>
 8001456:	ee67 7a87 	vmul.f32	s15, s15, s14
 800145a:	4b54      	ldr	r3, [pc, #336]	@ (80015ac <processData+0x1fc>)
 800145c:	edc3 7a00 	vstr	s15, [r3]


		//right = LowPass_FirstOrder_Update(&lpFilt, right);
		right = HighPass_FirstOrder_Update(hpFilt, right);
 8001460:	4b52      	ldr	r3, [pc, #328]	@ (80015ac <processData+0x1fc>)
 8001462:	edd3 7a00 	vldr	s15, [r3]
 8001466:	eeb0 0a67 	vmov.f32	s0, s15
 800146a:	68b8      	ldr	r0, [r7, #8]
 800146c:	f7ff fd0c 	bl	8000e88 <HighPass_FirstOrder_Update>
 8001470:	eef0 7a40 	vmov.f32	s15, s0
 8001474:	4b4d      	ldr	r3, [pc, #308]	@ (80015ac <processData+0x1fc>)
 8001476:	edc3 7a00 	vstr	s15, [r3]
		rightDelayed = Delay_Update(dly, right);
 800147a:	4b4c      	ldr	r3, [pc, #304]	@ (80015ac <processData+0x1fc>)
 800147c:	edd3 7a00 	vldr	s15, [r3]
 8001480:	eeb0 0a67 	vmov.f32	s0, s15
 8001484:	68f8      	ldr	r0, [r7, #12]
 8001486:	f7ff fbf6 	bl	8000c76 <Delay_Update>
 800148a:	eef0 7a40 	vmov.f32	s15, s0
 800148e:	4b48      	ldr	r3, [pc, #288]	@ (80015b0 <processData+0x200>)
 8001490:	edc3 7a00 	vstr	s15, [r3]

		if (right > 1.0f) {
 8001494:	4b45      	ldr	r3, [pc, #276]	@ (80015ac <processData+0x1fc>)
 8001496:	edd3 7a00 	vldr	s15, [r3]
 800149a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800149e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a6:	dd04      	ble.n	80014b2 <processData+0x102>
			right = 1.0f;
 80014a8:	4b40      	ldr	r3, [pc, #256]	@ (80015ac <processData+0x1fc>)
 80014aa:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	e00c      	b.n	80014cc <processData+0x11c>
		}
		else if (right < -1.0f) {
 80014b2:	4b3e      	ldr	r3, [pc, #248]	@ (80015ac <processData+0x1fc>)
 80014b4:	edd3 7a00 	vldr	s15, [r3]
 80014b8:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80014bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c4:	d502      	bpl.n	80014cc <processData+0x11c>
			right = -1;
 80014c6:	4b39      	ldr	r3, [pc, #228]	@ (80015ac <processData+0x1fc>)
 80014c8:	4a37      	ldr	r2, [pc, #220]	@ (80015a8 <processData+0x1f8>)
 80014ca:	601a      	str	r2, [r3, #0]
		}

		out = left - rightDelayed;
 80014cc:	4b35      	ldr	r3, [pc, #212]	@ (80015a4 <processData+0x1f4>)
 80014ce:	ed93 7a00 	vldr	s14, [r3]
 80014d2:	4b37      	ldr	r3, [pc, #220]	@ (80015b0 <processData+0x200>)
 80014d4:	edd3 7a00 	vldr	s15, [r3]
 80014d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014dc:	4b35      	ldr	r3, [pc, #212]	@ (80015b4 <processData+0x204>)
 80014de:	edc3 7a00 	vstr	s15, [r3]

		if (out > 1.0f) {
 80014e2:	4b34      	ldr	r3, [pc, #208]	@ (80015b4 <processData+0x204>)
 80014e4:	edd3 7a00 	vldr	s15, [r3]
 80014e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80014ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f4:	dd04      	ble.n	8001500 <processData+0x150>
			out = 1.0f;
 80014f6:	4b2f      	ldr	r3, [pc, #188]	@ (80015b4 <processData+0x204>)
 80014f8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	e00c      	b.n	800151a <processData+0x16a>
		}
		else if (out < -1.0f) {
 8001500:	4b2c      	ldr	r3, [pc, #176]	@ (80015b4 <processData+0x204>)
 8001502:	edd3 7a00 	vldr	s15, [r3]
 8001506:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800150a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800150e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001512:	d502      	bpl.n	800151a <processData+0x16a>
			out = -1;
 8001514:	4b27      	ldr	r3, [pc, #156]	@ (80015b4 <processData+0x204>)
 8001516:	4a24      	ldr	r2, [pc, #144]	@ (80015a8 <processData+0x1f8>)
 8001518:	601a      	str	r2, [r3, #0]
		}

		out = LowPass_FirstOrder_Update(lpFilt, out);
 800151a:	4b26      	ldr	r3, [pc, #152]	@ (80015b4 <processData+0x204>)
 800151c:	edd3 7a00 	vldr	s15, [r3]
 8001520:	eeb0 0a67 	vmov.f32	s0, s15
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f7ff fd63 	bl	8000ff0 <LowPass_FirstOrder_Update>
 800152a:	eef0 7a40 	vmov.f32	s15, s0
 800152e:	4b21      	ldr	r3, [pc, #132]	@ (80015b4 <processData+0x204>)
 8001530:	edc3 7a00 	vstr	s15, [r3]
		out = EQ_filter(eq, out);
 8001534:	4b1f      	ldr	r3, [pc, #124]	@ (80015b4 <processData+0x204>)
 8001536:	edd3 7a00 	vldr	s15, [r3]
 800153a:	eeb0 0a67 	vmov.f32	s0, s15
 800153e:	6838      	ldr	r0, [r7, #0]
 8001540:	f7ff fe9a 	bl	8001278 <EQ_filter>
 8001544:	eef0 7a40 	vmov.f32	s15, s0
 8001548:	4b1a      	ldr	r3, [pc, #104]	@ (80015b4 <processData+0x204>)
 800154a:	edc3 7a00 	vstr	s15, [r3]

		dac_value = (int16_t)(out*2048.0f*VOLUME);
 800154e:	4b19      	ldr	r3, [pc, #100]	@ (80015b4 <processData+0x204>)
 8001550:	edd3 7a00 	vldr	s15, [r3]
 8001554:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80015b8 <processData+0x208>
 8001558:	ee67 7a87 	vmul.f32	s15, s15, s14
 800155c:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8001560:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001564:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001568:	ee17 3a90 	vmov	r3, s15
 800156c:	b21a      	sxth	r2, r3
 800156e:	4b13      	ldr	r3, [pc, #76]	@ (80015bc <processData+0x20c>)
 8001570:	801a      	strh	r2, [r3, #0]
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, dac_value);
 8001572:	4b12      	ldr	r3, [pc, #72]	@ (80015bc <processData+0x20c>)
 8001574:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001578:	2200      	movs	r2, #0
 800157a:	2110      	movs	r1, #16
 800157c:	4810      	ldr	r0, [pc, #64]	@ (80015c0 <processData+0x210>)
 800157e:	f000 ff34 	bl	80023ea <HAL_DAC_SetValue>
	for (uint8_t n = 0; n < (BUFFER_SIZE/2) - 1; n += 2) {
 8001582:	7dfb      	ldrb	r3, [r7, #23]
 8001584:	3302      	adds	r3, #2
 8001586:	75fb      	strb	r3, [r7, #23]
 8001588:	7dfb      	ldrb	r3, [r7, #23]
 800158a:	2b3e      	cmp	r3, #62	@ 0x3e
 800158c:	f67f af1a 	bls.w	80013c4 <processData+0x14>
		//printf("right: %d \n", (int16_t)(rightDelayed*32768.0f));


	}

}
 8001590:	bf00      	nop
 8001592:	bf00      	nop
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000694 	.word	0x20000694
 80015a0:	38000000 	.word	0x38000000
 80015a4:	200006a0 	.word	0x200006a0
 80015a8:	bf800000 	.word	0xbf800000
 80015ac:	200006a4 	.word	0x200006a4
 80015b0:	200006a8 	.word	0x200006a8
 80015b4:	200006ac 	.word	0x200006ac
 80015b8:	45000000 	.word	0x45000000
 80015bc:	20000698 	.word	0x20000698
 80015c0:	20000484 	.word	0x20000484

080015c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015ca:	f000 fd71 	bl	80020b0 <HAL_Init>
  // HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015ce:	f000 f875 	bl	80016bc <SystemClock_Config>
  //HAL_NVIC_EnableIRQ(SysTick_IRQn);

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015d2:	f000 f987 	bl	80018e4 <MX_GPIO_Init>
  MX_DMA_Init();
 80015d6:	f000 f965 	bl	80018a4 <MX_DMA_Init>
  MX_DAC_Init();
 80015da:	f000 f8dd 	bl	8001798 <MX_DAC_Init>
  MX_I2C3_Init();
 80015de:	f000 f905 	bl	80017ec <MX_I2C3_Init>
  MX_I2S3_Init();
 80015e2:	f000 f931 	bl	8001848 <MX_I2S3_Init>

/*
 *
 */

  LowPass_FirstOrder *lpFilt = (LowPass_FirstOrder*)malloc(sizeof(LowPass_FirstOrder));
 80015e6:	2010      	movs	r0, #16
 80015e8:	f003 fe60 	bl	80052ac <malloc>
 80015ec:	4603      	mov	r3, r0
 80015ee:	617b      	str	r3, [r7, #20]
  HighPass_FirstOrder *hpFilt = (HighPass_FirstOrder*)malloc(sizeof(HighPass_FirstOrder));
 80015f0:	2010      	movs	r0, #16
 80015f2:	f003 fe5b 	bl	80052ac <malloc>
 80015f6:	4603      	mov	r3, r0
 80015f8:	613b      	str	r3, [r7, #16]
  EQ *eq = (EQ*)malloc(sizeof(EQ));
 80015fa:	2034      	movs	r0, #52	@ 0x34
 80015fc:	f003 fe56 	bl	80052ac <malloc>
 8001600:	4603      	mov	r3, r0
 8001602:	60fb      	str	r3, [r7, #12]
  Delay *dly = (Delay*)malloc(sizeof(Delay));
 8001604:	203c      	movs	r0, #60	@ 0x3c
 8001606:	f003 fe51 	bl	80052ac <malloc>
 800160a:	4603      	mov	r3, r0
 800160c:	60bb      	str	r3, [r7, #8]

  HAL_I2S_Receive_DMA(&hi2s3, (uint16_t *)inData, BUFFER_SIZE);
 800160e:	2280      	movs	r2, #128	@ 0x80
 8001610:	491f      	ldr	r1, [pc, #124]	@ (8001690 <main+0xcc>)
 8001612:	4820      	ldr	r0, [pc, #128]	@ (8001694 <main+0xd0>)
 8001614:	f001 feac 	bl	8003370 <HAL_I2S_Receive_DMA>
  // 500 hz: delay = 1 ms
  float delayTime = 0.4081632653;;
 8001618:	4b1f      	ldr	r3, [pc, #124]	@ (8001698 <main+0xd4>)
 800161a:	607b      	str	r3, [r7, #4]
  Delay_Init(dly, delayTime, 1, 0, SAMPLING_RATE);
 800161c:	eddf 1a1f 	vldr	s3, [pc, #124]	@ 800169c <main+0xd8>
 8001620:	ed9f 1a1f 	vldr	s2, [pc, #124]	@ 80016a0 <main+0xdc>
 8001624:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8001628:	ed97 0a01 	vldr	s0, [r7, #4]
 800162c:	68b8      	ldr	r0, [r7, #8]
 800162e:	f7ff faed 	bl	8000c0c <Delay_Init>



  //ADC_Init();

  LowPass_FirstOrder_Init(lpFilt, 2000.0f, SAMPLING_RATE);
 8001632:	eddf 0a1a 	vldr	s1, [pc, #104]	@ 800169c <main+0xd8>
 8001636:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 80016a4 <main+0xe0>
 800163a:	6978      	ldr	r0, [r7, #20]
 800163c:	f7ff fc68 	bl	8000f10 <LowPass_FirstOrder_Init>
  HighPass_FirstOrder_Init(hpFilt, 100.0f, SAMPLING_RATE);
 8001640:	eddf 0a16 	vldr	s1, [pc, #88]	@ 800169c <main+0xd8>
 8001644:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 80016a8 <main+0xe4>
 8001648:	6938      	ldr	r0, [r7, #16]
 800164a:	f7ff fbb7 	bl	8000dbc <HighPass_FirstOrder_Init>
  EQ_init(eq, SAMPLING_RATE);
 800164e:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 800169c <main+0xd8>
 8001652:	68f8      	ldr	r0, [r7, #12]
 8001654:	f7ff fd10 	bl	8001078 <EQ_init>
  EQ_setParam(eq, 150, 1.5, 50);
 8001658:	ed9f 1a14 	vldr	s2, [pc, #80]	@ 80016ac <main+0xe8>
 800165c:	eef7 0a08 	vmov.f32	s1, #120	@ 0x3fc00000  1.5
 8001660:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 80016b0 <main+0xec>
 8001664:	68f8      	ldr	r0, [r7, #12]
 8001666:	f7ff fd3f 	bl	80010e8 <EQ_setParam>
  //EQ_setParam()


  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 800166a:	2110      	movs	r1, #16
 800166c:	4811      	ldr	r0, [pc, #68]	@ (80016b4 <main+0xf0>)
 800166e:	f000 fe65 	bl	800233c <HAL_DAC_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	   if (dataReadyFlag) {
 8001672:	4b11      	ldr	r3, [pc, #68]	@ (80016b8 <main+0xf4>)
 8001674:	881b      	ldrh	r3, [r3, #0]
 8001676:	b29b      	uxth	r3, r3
 8001678:	2b00      	cmp	r3, #0
 800167a:	d0fa      	beq.n	8001672 <main+0xae>
		   dataReadyFlag = 0;
 800167c:	4b0e      	ldr	r3, [pc, #56]	@ (80016b8 <main+0xf4>)
 800167e:	2200      	movs	r2, #0
 8001680:	801a      	strh	r2, [r3, #0]
		   processData(dly, hpFilt, lpFilt, eq);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	697a      	ldr	r2, [r7, #20]
 8001686:	6939      	ldr	r1, [r7, #16]
 8001688:	68b8      	ldr	r0, [r7, #8]
 800168a:	f7ff fe91 	bl	80013b0 <processData>
	   if (dataReadyFlag) {
 800168e:	e7f0      	b.n	8001672 <main+0xae>
 8001690:	20000594 	.word	0x20000594
 8001694:	200004ec 	.word	0x200004ec
 8001698:	3ed0fac7 	.word	0x3ed0fac7
 800169c:	473b8000 	.word	0x473b8000
 80016a0:	00000000 	.word	0x00000000
 80016a4:	44fa0000 	.word	0x44fa0000
 80016a8:	42c80000 	.word	0x42c80000
 80016ac:	42480000 	.word	0x42480000
 80016b0:	43160000 	.word	0x43160000
 80016b4:	20000484 	.word	0x20000484
 80016b8:	2000069a 	.word	0x2000069a

080016bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b094      	sub	sp, #80	@ 0x50
 80016c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016c2:	f107 031c 	add.w	r3, r7, #28
 80016c6:	2234      	movs	r2, #52	@ 0x34
 80016c8:	2100      	movs	r1, #0
 80016ca:	4618      	mov	r0, r3
 80016cc:	f003 ffbb 	bl	8005646 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016d0:	f107 0308 	add.w	r3, r7, #8
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016e0:	2300      	movs	r3, #0
 80016e2:	607b      	str	r3, [r7, #4]
 80016e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001790 <SystemClock_Config+0xd4>)
 80016e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e8:	4a29      	ldr	r2, [pc, #164]	@ (8001790 <SystemClock_Config+0xd4>)
 80016ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80016f0:	4b27      	ldr	r3, [pc, #156]	@ (8001790 <SystemClock_Config+0xd4>)
 80016f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016f8:	607b      	str	r3, [r7, #4]
 80016fa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80016fc:	2300      	movs	r3, #0
 80016fe:	603b      	str	r3, [r7, #0]
 8001700:	4b24      	ldr	r3, [pc, #144]	@ (8001794 <SystemClock_Config+0xd8>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001708:	4a22      	ldr	r2, [pc, #136]	@ (8001794 <SystemClock_Config+0xd8>)
 800170a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800170e:	6013      	str	r3, [r2, #0]
 8001710:	4b20      	ldr	r3, [pc, #128]	@ (8001794 <SystemClock_Config+0xd8>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001718:	603b      	str	r3, [r7, #0]
 800171a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800171c:	2301      	movs	r3, #1
 800171e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001720:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001724:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001726:	2302      	movs	r3, #2
 8001728:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800172a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800172e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 13;
 8001730:	230d      	movs	r3, #13
 8001732:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001734:	2332      	movs	r3, #50	@ 0x32
 8001736:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001738:	2302      	movs	r3, #2
 800173a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800173c:	2304      	movs	r3, #4
 800173e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001740:	2302      	movs	r3, #2
 8001742:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001744:	f107 031c 	add.w	r3, r7, #28
 8001748:	4618      	mov	r0, r3
 800174a:	f003 f86f 	bl	800482c <HAL_RCC_OscConfig>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001754:	f000 f919 	bl	800198a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001758:	230f      	movs	r3, #15
 800175a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800175c:	2302      	movs	r3, #2
 800175e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001760:	2300      	movs	r3, #0
 8001762:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001764:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001768:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800176a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800176e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001770:	f107 0308 	add.w	r3, r7, #8
 8001774:	2101      	movs	r1, #1
 8001776:	4618      	mov	r0, r3
 8001778:	f002 f802 	bl	8003780 <HAL_RCC_ClockConfig>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001782:	f000 f902 	bl	800198a <Error_Handler>
  }
}
 8001786:	bf00      	nop
 8001788:	3750      	adds	r7, #80	@ 0x50
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40023800 	.word	0x40023800
 8001794:	40007000 	.word	0x40007000

08001798 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800179e:	463b      	mov	r3, r7
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80017a6:	4b0f      	ldr	r3, [pc, #60]	@ (80017e4 <MX_DAC_Init+0x4c>)
 80017a8:	4a0f      	ldr	r2, [pc, #60]	@ (80017e8 <MX_DAC_Init+0x50>)
 80017aa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80017ac:	480d      	ldr	r0, [pc, #52]	@ (80017e4 <MX_DAC_Init+0x4c>)
 80017ae:	f000 fda3 	bl	80022f8 <HAL_DAC_Init>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80017b8:	f000 f8e7 	bl	800198a <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80017bc:	2300      	movs	r3, #0
 80017be:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80017c0:	2300      	movs	r3, #0
 80017c2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80017c4:	463b      	mov	r3, r7
 80017c6:	2210      	movs	r2, #16
 80017c8:	4619      	mov	r1, r3
 80017ca:	4806      	ldr	r0, [pc, #24]	@ (80017e4 <MX_DAC_Init+0x4c>)
 80017cc:	f000 fe37 	bl	800243e <HAL_DAC_ConfigChannel>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80017d6:	f000 f8d8 	bl	800198a <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000484 	.word	0x20000484
 80017e8:	40007400 	.word	0x40007400

080017ec <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80017f0:	4b12      	ldr	r3, [pc, #72]	@ (800183c <MX_I2C3_Init+0x50>)
 80017f2:	4a13      	ldr	r2, [pc, #76]	@ (8001840 <MX_I2C3_Init+0x54>)
 80017f4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80017f6:	4b11      	ldr	r3, [pc, #68]	@ (800183c <MX_I2C3_Init+0x50>)
 80017f8:	4a12      	ldr	r2, [pc, #72]	@ (8001844 <MX_I2C3_Init+0x58>)
 80017fa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017fc:	4b0f      	ldr	r3, [pc, #60]	@ (800183c <MX_I2C3_Init+0x50>)
 80017fe:	2200      	movs	r2, #0
 8001800:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001802:	4b0e      	ldr	r3, [pc, #56]	@ (800183c <MX_I2C3_Init+0x50>)
 8001804:	2200      	movs	r2, #0
 8001806:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001808:	4b0c      	ldr	r3, [pc, #48]	@ (800183c <MX_I2C3_Init+0x50>)
 800180a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800180e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001810:	4b0a      	ldr	r3, [pc, #40]	@ (800183c <MX_I2C3_Init+0x50>)
 8001812:	2200      	movs	r2, #0
 8001814:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001816:	4b09      	ldr	r3, [pc, #36]	@ (800183c <MX_I2C3_Init+0x50>)
 8001818:	2200      	movs	r2, #0
 800181a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800181c:	4b07      	ldr	r3, [pc, #28]	@ (800183c <MX_I2C3_Init+0x50>)
 800181e:	2200      	movs	r2, #0
 8001820:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001822:	4b06      	ldr	r3, [pc, #24]	@ (800183c <MX_I2C3_Init+0x50>)
 8001824:	2200      	movs	r2, #0
 8001826:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001828:	4804      	ldr	r0, [pc, #16]	@ (800183c <MX_I2C3_Init+0x50>)
 800182a:	f001 fb65 	bl	8002ef8 <HAL_I2C_Init>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001834:	f000 f8a9 	bl	800198a <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001838:	bf00      	nop
 800183a:	bd80      	pop	{r7, pc}
 800183c:	20000498 	.word	0x20000498
 8001840:	40005c00 	.word	0x40005c00
 8001844:	000186a0 	.word	0x000186a0

08001848 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800184c:	4b13      	ldr	r3, [pc, #76]	@ (800189c <MX_I2S3_Init+0x54>)
 800184e:	4a14      	ldr	r2, [pc, #80]	@ (80018a0 <MX_I2S3_Init+0x58>)
 8001850:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_RX;
 8001852:	4b12      	ldr	r3, [pc, #72]	@ (800189c <MX_I2S3_Init+0x54>)
 8001854:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001858:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800185a:	4b10      	ldr	r3, [pc, #64]	@ (800189c <MX_I2S3_Init+0x54>)
 800185c:	2200      	movs	r2, #0
 800185e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8001860:	4b0e      	ldr	r3, [pc, #56]	@ (800189c <MX_I2S3_Init+0x54>)
 8001862:	2201      	movs	r2, #1
 8001864:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001866:	4b0d      	ldr	r3, [pc, #52]	@ (800189c <MX_I2S3_Init+0x54>)
 8001868:	2200      	movs	r2, #0
 800186a:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 800186c:	4b0b      	ldr	r3, [pc, #44]	@ (800189c <MX_I2S3_Init+0x54>)
 800186e:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8001872:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001874:	4b09      	ldr	r3, [pc, #36]	@ (800189c <MX_I2S3_Init+0x54>)
 8001876:	2200      	movs	r2, #0
 8001878:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800187a:	4b08      	ldr	r3, [pc, #32]	@ (800189c <MX_I2S3_Init+0x54>)
 800187c:	2200      	movs	r2, #0
 800187e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001880:	4b06      	ldr	r3, [pc, #24]	@ (800189c <MX_I2S3_Init+0x54>)
 8001882:	2200      	movs	r2, #0
 8001884:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001886:	4805      	ldr	r0, [pc, #20]	@ (800189c <MX_I2S3_Init+0x54>)
 8001888:	f001 fc7a 	bl	8003180 <HAL_I2S_Init>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001892:	f000 f87a 	bl	800198a <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	200004ec 	.word	0x200004ec
 80018a0:	40003c00 	.word	0x40003c00

080018a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	607b      	str	r3, [r7, #4]
 80018ae:	4b0c      	ldr	r3, [pc, #48]	@ (80018e0 <MX_DMA_Init+0x3c>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b2:	4a0b      	ldr	r2, [pc, #44]	@ (80018e0 <MX_DMA_Init+0x3c>)
 80018b4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ba:	4b09      	ldr	r3, [pc, #36]	@ (80018e0 <MX_DMA_Init+0x3c>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018c2:	607b      	str	r3, [r7, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80018c6:	2200      	movs	r2, #0
 80018c8:	2100      	movs	r1, #0
 80018ca:	200b      	movs	r0, #11
 80018cc:	f000 fcea 	bl	80022a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80018d0:	200b      	movs	r0, #11
 80018d2:	f000 fd03 	bl	80022dc <HAL_NVIC_EnableIRQ>

}
 80018d6:	bf00      	nop
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40023800 	.word	0x40023800

080018e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001968 <MX_GPIO_Init+0x84>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f2:	4a1d      	ldr	r2, [pc, #116]	@ (8001968 <MX_GPIO_Init+0x84>)
 80018f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001968 <MX_GPIO_Init+0x84>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	60bb      	str	r3, [r7, #8]
 800190a:	4b17      	ldr	r3, [pc, #92]	@ (8001968 <MX_GPIO_Init+0x84>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190e:	4a16      	ldr	r2, [pc, #88]	@ (8001968 <MX_GPIO_Init+0x84>)
 8001910:	f043 0301 	orr.w	r3, r3, #1
 8001914:	6313      	str	r3, [r2, #48]	@ 0x30
 8001916:	4b14      	ldr	r3, [pc, #80]	@ (8001968 <MX_GPIO_Init+0x84>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	60bb      	str	r3, [r7, #8]
 8001920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	607b      	str	r3, [r7, #4]
 8001926:	4b10      	ldr	r3, [pc, #64]	@ (8001968 <MX_GPIO_Init+0x84>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192a:	4a0f      	ldr	r2, [pc, #60]	@ (8001968 <MX_GPIO_Init+0x84>)
 800192c:	f043 0302 	orr.w	r3, r3, #2
 8001930:	6313      	str	r3, [r2, #48]	@ 0x30
 8001932:	4b0d      	ldr	r3, [pc, #52]	@ (8001968 <MX_GPIO_Init+0x84>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	607b      	str	r3, [r7, #4]
 800193c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	603b      	str	r3, [r7, #0]
 8001942:	4b09      	ldr	r3, [pc, #36]	@ (8001968 <MX_GPIO_Init+0x84>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001946:	4a08      	ldr	r2, [pc, #32]	@ (8001968 <MX_GPIO_Init+0x84>)
 8001948:	f043 0304 	orr.w	r3, r3, #4
 800194c:	6313      	str	r3, [r2, #48]	@ 0x30
 800194e:	4b06      	ldr	r3, [pc, #24]	@ (8001968 <MX_GPIO_Init+0x84>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001952:	f003 0304 	and.w	r3, r3, #4
 8001956:	603b      	str	r3, [r7, #0]
 8001958:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800195a:	bf00      	nop
 800195c:	3714      	adds	r7, #20
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	40023800 	.word	0x40023800

0800196c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800197c:	d101      	bne.n	8001982 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800197e:	f000 fbb9 	bl	80020f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800198a:	b480      	push	{r7}
 800198c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800198e:	b672      	cpsid	i
}
 8001990:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001992:	bf00      	nop
 8001994:	e7fd      	b.n	8001992 <Error_Handler+0x8>
	...

08001998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	607b      	str	r3, [r7, #4]
 80019a2:	4b10      	ldr	r3, [pc, #64]	@ (80019e4 <HAL_MspInit+0x4c>)
 80019a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a6:	4a0f      	ldr	r2, [pc, #60]	@ (80019e4 <HAL_MspInit+0x4c>)
 80019a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80019ae:	4b0d      	ldr	r3, [pc, #52]	@ (80019e4 <HAL_MspInit+0x4c>)
 80019b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019b6:	607b      	str	r3, [r7, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	603b      	str	r3, [r7, #0]
 80019be:	4b09      	ldr	r3, [pc, #36]	@ (80019e4 <HAL_MspInit+0x4c>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c2:	4a08      	ldr	r2, [pc, #32]	@ (80019e4 <HAL_MspInit+0x4c>)
 80019c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80019ca:	4b06      	ldr	r3, [pc, #24]	@ (80019e4 <HAL_MspInit+0x4c>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019d2:	603b      	str	r3, [r7, #0]
 80019d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	40023800 	.word	0x40023800

080019e8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08a      	sub	sp, #40	@ 0x28
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f0:	f107 0314 	add.w	r3, r7, #20
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	609a      	str	r2, [r3, #8]
 80019fc:	60da      	str	r2, [r3, #12]
 80019fe:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a17      	ldr	r2, [pc, #92]	@ (8001a64 <HAL_DAC_MspInit+0x7c>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d127      	bne.n	8001a5a <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	613b      	str	r3, [r7, #16]
 8001a0e:	4b16      	ldr	r3, [pc, #88]	@ (8001a68 <HAL_DAC_MspInit+0x80>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a12:	4a15      	ldr	r2, [pc, #84]	@ (8001a68 <HAL_DAC_MspInit+0x80>)
 8001a14:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001a18:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a1a:	4b13      	ldr	r3, [pc, #76]	@ (8001a68 <HAL_DAC_MspInit+0x80>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001a22:	613b      	str	r3, [r7, #16]
 8001a24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a68 <HAL_DAC_MspInit+0x80>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2e:	4a0e      	ldr	r2, [pc, #56]	@ (8001a68 <HAL_DAC_MspInit+0x80>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a36:	4b0c      	ldr	r3, [pc, #48]	@ (8001a68 <HAL_DAC_MspInit+0x80>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a42:	2320      	movs	r3, #32
 8001a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a46:	2303      	movs	r3, #3
 8001a48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a4e:	f107 0314 	add.w	r3, r7, #20
 8001a52:	4619      	mov	r1, r3
 8001a54:	4805      	ldr	r0, [pc, #20]	@ (8001a6c <HAL_DAC_MspInit+0x84>)
 8001a56:	f001 f8bb 	bl	8002bd0 <HAL_GPIO_Init>

  /* USER CODE END DAC_MspInit 1 */

  }

}
 8001a5a:	bf00      	nop
 8001a5c:	3728      	adds	r7, #40	@ 0x28
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40007400 	.word	0x40007400
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	40020000 	.word	0x40020000

08001a70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08a      	sub	sp, #40	@ 0x28
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a78:	f107 0314 	add.w	r3, r7, #20
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a29      	ldr	r2, [pc, #164]	@ (8001b34 <HAL_I2C_MspInit+0xc4>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d14b      	bne.n	8001b2a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	613b      	str	r3, [r7, #16]
 8001a96:	4b28      	ldr	r3, [pc, #160]	@ (8001b38 <HAL_I2C_MspInit+0xc8>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9a:	4a27      	ldr	r2, [pc, #156]	@ (8001b38 <HAL_I2C_MspInit+0xc8>)
 8001a9c:	f043 0304 	orr.w	r3, r3, #4
 8001aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aa2:	4b25      	ldr	r3, [pc, #148]	@ (8001b38 <HAL_I2C_MspInit+0xc8>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa6:	f003 0304 	and.w	r3, r3, #4
 8001aaa:	613b      	str	r3, [r7, #16]
 8001aac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	4b21      	ldr	r3, [pc, #132]	@ (8001b38 <HAL_I2C_MspInit+0xc8>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab6:	4a20      	ldr	r2, [pc, #128]	@ (8001b38 <HAL_I2C_MspInit+0xc8>)
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001abe:	4b1e      	ldr	r3, [pc, #120]	@ (8001b38 <HAL_I2C_MspInit+0xc8>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001aca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ace:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ad0:	2312      	movs	r3, #18
 8001ad2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001adc:	2304      	movs	r3, #4
 8001ade:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ae0:	f107 0314 	add.w	r3, r7, #20
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4815      	ldr	r0, [pc, #84]	@ (8001b3c <HAL_I2C_MspInit+0xcc>)
 8001ae8:	f001 f872 	bl	8002bd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001aec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001af2:	2312      	movs	r3, #18
 8001af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afa:	2303      	movs	r3, #3
 8001afc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001afe:	2304      	movs	r3, #4
 8001b00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b02:	f107 0314 	add.w	r3, r7, #20
 8001b06:	4619      	mov	r1, r3
 8001b08:	480d      	ldr	r0, [pc, #52]	@ (8001b40 <HAL_I2C_MspInit+0xd0>)
 8001b0a:	f001 f861 	bl	8002bd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60bb      	str	r3, [r7, #8]
 8001b12:	4b09      	ldr	r3, [pc, #36]	@ (8001b38 <HAL_I2C_MspInit+0xc8>)
 8001b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b16:	4a08      	ldr	r2, [pc, #32]	@ (8001b38 <HAL_I2C_MspInit+0xc8>)
 8001b18:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001b1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b1e:	4b06      	ldr	r3, [pc, #24]	@ (8001b38 <HAL_I2C_MspInit+0xc8>)
 8001b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001b26:	60bb      	str	r3, [r7, #8]
 8001b28:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8001b2a:	bf00      	nop
 8001b2c:	3728      	adds	r7, #40	@ 0x28
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40005c00 	.word	0x40005c00
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	40020800 	.word	0x40020800
 8001b40:	40020000 	.word	0x40020000

08001b44 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b0a2      	sub	sp, #136	@ 0x88
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]
 8001b5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b5c:	f107 0318 	add.w	r3, r7, #24
 8001b60:	225c      	movs	r2, #92	@ 0x5c
 8001b62:	2100      	movs	r1, #0
 8001b64:	4618      	mov	r0, r3
 8001b66:	f003 fd6e 	bl	8005646 <memset>
  if(hi2s->Instance==SPI3)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a61      	ldr	r2, [pc, #388]	@ (8001cf4 <HAL_I2S_MspInit+0x1b0>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	f040 80ba 	bne.w	8001cea <HAL_I2S_MspInit+0x1a6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1;
 8001b76:	2301      	movs	r3, #1
 8001b78:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8001b7a:	2332      	movs	r3, #50	@ 0x32
 8001b7c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLI2SP_DIV2;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 13;
 8001b82:	230d      	movs	r3, #13
 8001b84:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001b86:	2302      	movs	r3, #2
 8001b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 8001b92:	2300      	movs	r3, #0
 8001b94:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b96:	f107 0318 	add.w	r3, r7, #24
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f001 ff28 	bl	80039f0 <HAL_RCCEx_PeriphCLKConfig>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <HAL_I2S_MspInit+0x66>
    {
      Error_Handler();
 8001ba6:	f7ff fef0 	bl	800198a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
 8001bae:	4b52      	ldr	r3, [pc, #328]	@ (8001cf8 <HAL_I2S_MspInit+0x1b4>)
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb2:	4a51      	ldr	r2, [pc, #324]	@ (8001cf8 <HAL_I2S_MspInit+0x1b4>)
 8001bb4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001bb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bba:	4b4f      	ldr	r3, [pc, #316]	@ (8001cf8 <HAL_I2S_MspInit+0x1b4>)
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bbe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001bc2:	617b      	str	r3, [r7, #20]
 8001bc4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	613b      	str	r3, [r7, #16]
 8001bca:	4b4b      	ldr	r3, [pc, #300]	@ (8001cf8 <HAL_I2S_MspInit+0x1b4>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bce:	4a4a      	ldr	r2, [pc, #296]	@ (8001cf8 <HAL_I2S_MspInit+0x1b4>)
 8001bd0:	f043 0301 	orr.w	r3, r3, #1
 8001bd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bd6:	4b48      	ldr	r3, [pc, #288]	@ (8001cf8 <HAL_I2S_MspInit+0x1b4>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	613b      	str	r3, [r7, #16]
 8001be0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	4b44      	ldr	r3, [pc, #272]	@ (8001cf8 <HAL_I2S_MspInit+0x1b4>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bea:	4a43      	ldr	r2, [pc, #268]	@ (8001cf8 <HAL_I2S_MspInit+0x1b4>)
 8001bec:	f043 0302 	orr.w	r3, r3, #2
 8001bf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bf2:	4b41      	ldr	r3, [pc, #260]	@ (8001cf8 <HAL_I2S_MspInit+0x1b4>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60bb      	str	r3, [r7, #8]
 8001c02:	4b3d      	ldr	r3, [pc, #244]	@ (8001cf8 <HAL_I2S_MspInit+0x1b4>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c06:	4a3c      	ldr	r2, [pc, #240]	@ (8001cf8 <HAL_I2S_MspInit+0x1b4>)
 8001c08:	f043 0304 	orr.w	r3, r3, #4
 8001c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c0e:	4b3a      	ldr	r3, [pc, #232]	@ (8001cf8 <HAL_I2S_MspInit+0x1b4>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c12:	f003 0304 	and.w	r3, r3, #4
 8001c16:	60bb      	str	r3, [r7, #8]
 8001c18:	68bb      	ldr	r3, [r7, #8]
    /**I2S3 GPIO Configuration
    PA4     ------> I2S3_WS
    PB0     ------> I2S3_SD
    PC10     ------> I2S3_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c1a:	2310      	movs	r3, #16
 8001c1c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c26:	2300      	movs	r3, #0
 8001c28:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c2c:	2306      	movs	r3, #6
 8001c2e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c32:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001c36:	4619      	mov	r1, r3
 8001c38:	4830      	ldr	r0, [pc, #192]	@ (8001cfc <HAL_I2S_MspInit+0x1b8>)
 8001c3a:	f000 ffc9 	bl	8002bd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c42:	2302      	movs	r3, #2
 8001c44:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001c50:	2307      	movs	r3, #7
 8001c52:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c56:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4828      	ldr	r0, [pc, #160]	@ (8001d00 <HAL_I2S_MspInit+0x1bc>)
 8001c5e:	f000 ffb7 	bl	8002bd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c66:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c70:	2300      	movs	r3, #0
 8001c72:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c76:	2306      	movs	r3, #6
 8001c78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c7c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001c80:	4619      	mov	r1, r3
 8001c82:	4820      	ldr	r0, [pc, #128]	@ (8001d04 <HAL_I2S_MspInit+0x1c0>)
 8001c84:	f000 ffa4 	bl	8002bd0 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_RX Init */
    hdma_spi3_rx.Instance = DMA1_Stream0;
 8001c88:	4b1f      	ldr	r3, [pc, #124]	@ (8001d08 <HAL_I2S_MspInit+0x1c4>)
 8001c8a:	4a20      	ldr	r2, [pc, #128]	@ (8001d0c <HAL_I2S_MspInit+0x1c8>)
 8001c8c:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 8001c8e:	4b1e      	ldr	r3, [pc, #120]	@ (8001d08 <HAL_I2S_MspInit+0x1c4>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c94:	4b1c      	ldr	r3, [pc, #112]	@ (8001d08 <HAL_I2S_MspInit+0x1c4>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c9a:	4b1b      	ldr	r3, [pc, #108]	@ (8001d08 <HAL_I2S_MspInit+0x1c4>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ca0:	4b19      	ldr	r3, [pc, #100]	@ (8001d08 <HAL_I2S_MspInit+0x1c4>)
 8001ca2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ca6:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ca8:	4b17      	ldr	r3, [pc, #92]	@ (8001d08 <HAL_I2S_MspInit+0x1c4>)
 8001caa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001cae:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001cb0:	4b15      	ldr	r3, [pc, #84]	@ (8001d08 <HAL_I2S_MspInit+0x1c4>)
 8001cb2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cb6:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 8001cb8:	4b13      	ldr	r3, [pc, #76]	@ (8001d08 <HAL_I2S_MspInit+0x1c4>)
 8001cba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cbe:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001cc0:	4b11      	ldr	r3, [pc, #68]	@ (8001d08 <HAL_I2S_MspInit+0x1c4>)
 8001cc2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001cc6:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cc8:	4b0f      	ldr	r3, [pc, #60]	@ (8001d08 <HAL_I2S_MspInit+0x1c4>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8001cce:	480e      	ldr	r0, [pc, #56]	@ (8001d08 <HAL_I2S_MspInit+0x1c4>)
 8001cd0:	f000 fc0e 	bl	80024f0 <HAL_DMA_Init>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <HAL_I2S_MspInit+0x19a>
    {
      Error_Handler();
 8001cda:	f7ff fe56 	bl	800198a <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi3_rx);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a09      	ldr	r2, [pc, #36]	@ (8001d08 <HAL_I2S_MspInit+0x1c4>)
 8001ce2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ce4:	4a08      	ldr	r2, [pc, #32]	@ (8001d08 <HAL_I2S_MspInit+0x1c4>)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001cea:	bf00      	nop
 8001cec:	3788      	adds	r7, #136	@ 0x88
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	40003c00 	.word	0x40003c00
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	40020000 	.word	0x40020000
 8001d00:	40020400 	.word	0x40020400
 8001d04:	40020800 	.word	0x40020800
 8001d08:	20000534 	.word	0x20000534
 8001d0c:	40026010 	.word	0x40026010

08001d10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08e      	sub	sp, #56	@ 0x38
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001d20:	2300      	movs	r3, #0
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	4b34      	ldr	r3, [pc, #208]	@ (8001df8 <HAL_InitTick+0xe8>)
 8001d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d28:	4a33      	ldr	r2, [pc, #204]	@ (8001df8 <HAL_InitTick+0xe8>)
 8001d2a:	f043 0301 	orr.w	r3, r3, #1
 8001d2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d30:	4b31      	ldr	r3, [pc, #196]	@ (8001df8 <HAL_InitTick+0xe8>)
 8001d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d3c:	f107 0210 	add.w	r2, r7, #16
 8001d40:	f107 0314 	add.w	r3, r7, #20
 8001d44:	4611      	mov	r1, r2
 8001d46:	4618      	mov	r0, r3
 8001d48:	f001 fe20 	bl	800398c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001d4c:	6a3b      	ldr	r3, [r7, #32]
 8001d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d103      	bne.n	8001d5e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001d56:	f001 fe05 	bl	8003964 <HAL_RCC_GetPCLK1Freq>
 8001d5a:	6378      	str	r0, [r7, #52]	@ 0x34
 8001d5c:	e004      	b.n	8001d68 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001d5e:	f001 fe01 	bl	8003964 <HAL_RCC_GetPCLK1Freq>
 8001d62:	4603      	mov	r3, r0
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d6a:	4a24      	ldr	r2, [pc, #144]	@ (8001dfc <HAL_InitTick+0xec>)
 8001d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d70:	0c9b      	lsrs	r3, r3, #18
 8001d72:	3b01      	subs	r3, #1
 8001d74:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001d76:	4b22      	ldr	r3, [pc, #136]	@ (8001e00 <HAL_InitTick+0xf0>)
 8001d78:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d7c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001d7e:	4b20      	ldr	r3, [pc, #128]	@ (8001e00 <HAL_InitTick+0xf0>)
 8001d80:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d84:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001d86:	4a1e      	ldr	r2, [pc, #120]	@ (8001e00 <HAL_InitTick+0xf0>)
 8001d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d8a:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001d8c:	4b1c      	ldr	r3, [pc, #112]	@ (8001e00 <HAL_InitTick+0xf0>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d92:	4b1b      	ldr	r3, [pc, #108]	@ (8001e00 <HAL_InitTick+0xf0>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d98:	4b19      	ldr	r3, [pc, #100]	@ (8001e00 <HAL_InitTick+0xf0>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001d9e:	4818      	ldr	r0, [pc, #96]	@ (8001e00 <HAL_InitTick+0xf0>)
 8001da0:	f002 ffe2 	bl	8004d68 <HAL_TIM_Base_Init>
 8001da4:	4603      	mov	r3, r0
 8001da6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001daa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d11b      	bne.n	8001dea <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001db2:	4813      	ldr	r0, [pc, #76]	@ (8001e00 <HAL_InitTick+0xf0>)
 8001db4:	f003 f832 	bl	8004e1c <HAL_TIM_Base_Start_IT>
 8001db8:	4603      	mov	r3, r0
 8001dba:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001dbe:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d111      	bne.n	8001dea <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001dc6:	201c      	movs	r0, #28
 8001dc8:	f000 fa88 	bl	80022dc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b0f      	cmp	r3, #15
 8001dd0:	d808      	bhi.n	8001de4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	6879      	ldr	r1, [r7, #4]
 8001dd6:	201c      	movs	r0, #28
 8001dd8:	f000 fa64 	bl	80022a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ddc:	4a09      	ldr	r2, [pc, #36]	@ (8001e04 <HAL_InitTick+0xf4>)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6013      	str	r3, [r2, #0]
 8001de2:	e002      	b.n	8001dea <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001dea:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3738      	adds	r7, #56	@ 0x38
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	431bde83 	.word	0x431bde83
 8001e00:	200006b0 	.word	0x200006b0
 8001e04:	20000404 	.word	0x20000404

08001e08 <check_stack_overflow2>:
/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */



void check_stack_overflow2() {
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
    if (stack2[0] != STACK_PATTERN2) {
 8001e0c:	4b04      	ldr	r3, [pc, #16]	@ (8001e20 <check_stack_overflow2+0x18>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a04      	ldr	r2, [pc, #16]	@ (8001e24 <check_stack_overflow2+0x1c>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d001      	beq.n	8001e1a <check_stack_overflow2+0x12>
        // Stack overflow detected
        Error_Handler();
 8001e16:	f7ff fdb8 	bl	800198a <Error_Handler>
    }
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000000 	.word	0x20000000
 8001e24:	deaddead 	.word	0xdeaddead

08001e28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e2c:	bf00      	nop
 8001e2e:	e7fd      	b.n	8001e2c <NMI_Handler+0x4>

08001e30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	check_stack_overflow2();
 8001e34:	f7ff ffe8 	bl	8001e08 <check_stack_overflow2>
	//check_stack_overflow();
    __asm volatile (
 8001e38:	f01e 0f04 	tst.w	lr, #4
 8001e3c:	bf0c      	ite	eq
 8001e3e:	f3ef 8008 	mrseq	r0, MSP
 8001e42:	f3ef 8009 	mrsne	r0, PSP
 8001e46:	f000 b83f 	b.w	8001ec8 <HardFault_HandlerC>
        "MRSNE r0, PSP \n"
        "B HardFault_HandlerC \n"
    );

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e4a:	bf00      	nop
 8001e4c:	e7fd      	b.n	8001e4a <HardFault_Handler+0x1a>

08001e4e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e52:	bf00      	nop
 8001e54:	e7fd      	b.n	8001e52 <MemManage_Handler+0x4>

08001e56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e56:	b480      	push	{r7}
 8001e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e5a:	bf00      	nop
 8001e5c:	e7fd      	b.n	8001e5a <BusFault_Handler+0x4>

08001e5e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e62:	bf00      	nop
 8001e64:	e7fd      	b.n	8001e62 <UsageFault_Handler+0x4>

08001e66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e66:	b480      	push	{r7}
 8001e68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e78:	bf00      	nop
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e82:	b480      	push	{r7}
 8001e84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e94:	bf00      	nop
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
	...

08001ea0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8001ea4:	4802      	ldr	r0, [pc, #8]	@ (8001eb0 <DMA1_Stream0_IRQHandler+0x10>)
 8001ea6:	f000 fc29 	bl	80026fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */
  // fault

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20000534 	.word	0x20000534

08001eb4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001eb8:	4802      	ldr	r0, [pc, #8]	@ (8001ec4 <TIM2_IRQHandler+0x10>)
 8001eba:	f003 f81f 	bl	8004efc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	200006b0 	.word	0x200006b0

08001ec8 <HardFault_HandlerC>:

/* USER CODE BEGIN 1 */

void HardFault_HandlerC(StackFrame *frame)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
    volatile uint32_t fault_addr = SCB->BFAR;
 8001ed0:	4b06      	ldr	r3, [pc, #24]	@ (8001eec <HardFault_HandlerC+0x24>)
 8001ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ed4:	60fb      	str	r3, [r7, #12]
    volatile uint32_t faulting_pc = frame->pc; // Address of the faulting instruction
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	60bb      	str	r3, [r7, #8]

    // Set breakpoint here to inspect `faulting_pc` and `fault_addr`
    __asm("BKPT #0");
 8001edc:	be00      	bkpt	0x0000
}
 8001ede:	bf00      	nop
 8001ee0:	3714      	adds	r7, #20
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	e000ed00 	.word	0xe000ed00

08001ef0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001efc:	2300      	movs	r3, #0
 8001efe:	617b      	str	r3, [r7, #20]
 8001f00:	e00a      	b.n	8001f18 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f02:	f3af 8000 	nop.w
 8001f06:	4601      	mov	r1, r0
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	1c5a      	adds	r2, r3, #1
 8001f0c:	60ba      	str	r2, [r7, #8]
 8001f0e:	b2ca      	uxtb	r2, r1
 8001f10:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	3301      	adds	r3, #1
 8001f16:	617b      	str	r3, [r7, #20]
 8001f18:	697a      	ldr	r2, [r7, #20]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	dbf0      	blt.n	8001f02 <_read+0x12>
  }

  return len;
 8001f20:	687b      	ldr	r3, [r7, #4]
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3718      	adds	r7, #24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b086      	sub	sp, #24
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	60f8      	str	r0, [r7, #12]
 8001f32:	60b9      	str	r1, [r7, #8]
 8001f34:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f36:	2300      	movs	r3, #0
 8001f38:	617b      	str	r3, [r7, #20]
 8001f3a:	e009      	b.n	8001f50 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	1c5a      	adds	r2, r3, #1
 8001f40:	60ba      	str	r2, [r7, #8]
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	617b      	str	r3, [r7, #20]
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	dbf1      	blt.n	8001f3c <_write+0x12>
  }
  return len;
 8001f58:	687b      	ldr	r3, [r7, #4]
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3718      	adds	r7, #24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <_close>:

int _close(int file)
{
 8001f62:	b480      	push	{r7}
 8001f64:	b083      	sub	sp, #12
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b083      	sub	sp, #12
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
 8001f82:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f8a:	605a      	str	r2, [r3, #4]
  return 0;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <_isatty>:

int _isatty(int file)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fa2:	2301      	movs	r3, #1
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3714      	adds	r7, #20
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
	...

08001fcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fd4:	4a14      	ldr	r2, [pc, #80]	@ (8002028 <_sbrk+0x5c>)
 8001fd6:	4b15      	ldr	r3, [pc, #84]	@ (800202c <_sbrk+0x60>)
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fe0:	4b13      	ldr	r3, [pc, #76]	@ (8002030 <_sbrk+0x64>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d102      	bne.n	8001fee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fe8:	4b11      	ldr	r3, [pc, #68]	@ (8002030 <_sbrk+0x64>)
 8001fea:	4a12      	ldr	r2, [pc, #72]	@ (8002034 <_sbrk+0x68>)
 8001fec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fee:	4b10      	ldr	r3, [pc, #64]	@ (8002030 <_sbrk+0x64>)
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d207      	bcs.n	800200c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ffc:	f003 fb82 	bl	8005704 <__errno>
 8002000:	4603      	mov	r3, r0
 8002002:	220c      	movs	r2, #12
 8002004:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002006:	f04f 33ff 	mov.w	r3, #4294967295
 800200a:	e009      	b.n	8002020 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800200c:	4b08      	ldr	r3, [pc, #32]	@ (8002030 <_sbrk+0x64>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002012:	4b07      	ldr	r3, [pc, #28]	@ (8002030 <_sbrk+0x64>)
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4413      	add	r3, r2
 800201a:	4a05      	ldr	r2, [pc, #20]	@ (8002030 <_sbrk+0x64>)
 800201c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800201e:	68fb      	ldr	r3, [r7, #12]
}
 8002020:	4618      	mov	r0, r3
 8002022:	3718      	adds	r7, #24
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	20020000 	.word	0x20020000
 800202c:	00007d00 	.word	0x00007d00
 8002030:	200006f8 	.word	0x200006f8
 8002034:	20000850 	.word	0x20000850

08002038 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800203c:	4b06      	ldr	r3, [pc, #24]	@ (8002058 <SystemInit+0x20>)
 800203e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002042:	4a05      	ldr	r2, [pc, #20]	@ (8002058 <SystemInit+0x20>)
 8002044:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002048:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800204c:	bf00      	nop
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	e000ed00 	.word	0xe000ed00

0800205c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800205c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002094 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002060:	f7ff ffea 	bl	8002038 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002064:	480c      	ldr	r0, [pc, #48]	@ (8002098 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002066:	490d      	ldr	r1, [pc, #52]	@ (800209c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002068:	4a0d      	ldr	r2, [pc, #52]	@ (80020a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800206a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800206c:	e002      	b.n	8002074 <LoopCopyDataInit>

0800206e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800206e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002070:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002072:	3304      	adds	r3, #4

08002074 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002074:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002076:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002078:	d3f9      	bcc.n	800206e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800207a:	4a0a      	ldr	r2, [pc, #40]	@ (80020a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800207c:	4c0a      	ldr	r4, [pc, #40]	@ (80020a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800207e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002080:	e001      	b.n	8002086 <LoopFillZerobss>

08002082 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002082:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002084:	3204      	adds	r2, #4

08002086 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002086:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002088:	d3fb      	bcc.n	8002082 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800208a:	f003 fb41 	bl	8005710 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800208e:	f7ff fa99 	bl	80015c4 <main>
  bx  lr    
 8002092:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002094:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002098:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800209c:	20000468 	.word	0x20000468
  ldr r2, =_sidata
 80020a0:	08007058 	.word	0x08007058
  ldr r2, =_sbss
 80020a4:	20000468 	.word	0x20000468
  ldr r4, =_ebss
 80020a8:	2000084c 	.word	0x2000084c

080020ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020ac:	e7fe      	b.n	80020ac <ADC_IRQHandler>
	...

080020b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020b4:	4b0e      	ldr	r3, [pc, #56]	@ (80020f0 <HAL_Init+0x40>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a0d      	ldr	r2, [pc, #52]	@ (80020f0 <HAL_Init+0x40>)
 80020ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020c0:	4b0b      	ldr	r3, [pc, #44]	@ (80020f0 <HAL_Init+0x40>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a0a      	ldr	r2, [pc, #40]	@ (80020f0 <HAL_Init+0x40>)
 80020c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020cc:	4b08      	ldr	r3, [pc, #32]	@ (80020f0 <HAL_Init+0x40>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a07      	ldr	r2, [pc, #28]	@ (80020f0 <HAL_Init+0x40>)
 80020d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020d8:	2003      	movs	r0, #3
 80020da:	f000 f8d8 	bl	800228e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020de:	200f      	movs	r0, #15
 80020e0:	f7ff fe16 	bl	8001d10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020e4:	f7ff fc58 	bl	8001998 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40023c00 	.word	0x40023c00

080020f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020f8:	4b06      	ldr	r3, [pc, #24]	@ (8002114 <HAL_IncTick+0x20>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	461a      	mov	r2, r3
 80020fe:	4b06      	ldr	r3, [pc, #24]	@ (8002118 <HAL_IncTick+0x24>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4413      	add	r3, r2
 8002104:	4a04      	ldr	r2, [pc, #16]	@ (8002118 <HAL_IncTick+0x24>)
 8002106:	6013      	str	r3, [r2, #0]
}
 8002108:	bf00      	nop
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	20000408 	.word	0x20000408
 8002118:	200006fc 	.word	0x200006fc

0800211c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  return uwTick;
 8002120:	4b03      	ldr	r3, [pc, #12]	@ (8002130 <HAL_GetTick+0x14>)
 8002122:	681b      	ldr	r3, [r3, #0]
}
 8002124:	4618      	mov	r0, r3
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	200006fc 	.word	0x200006fc

08002134 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002144:	4b0c      	ldr	r3, [pc, #48]	@ (8002178 <__NVIC_SetPriorityGrouping+0x44>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800214a:	68ba      	ldr	r2, [r7, #8]
 800214c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002150:	4013      	ands	r3, r2
 8002152:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800215c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002160:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002164:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002166:	4a04      	ldr	r2, [pc, #16]	@ (8002178 <__NVIC_SetPriorityGrouping+0x44>)
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	60d3      	str	r3, [r2, #12]
}
 800216c:	bf00      	nop
 800216e:	3714      	adds	r7, #20
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002180:	4b04      	ldr	r3, [pc, #16]	@ (8002194 <__NVIC_GetPriorityGrouping+0x18>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	0a1b      	lsrs	r3, r3, #8
 8002186:	f003 0307 	and.w	r3, r3, #7
}
 800218a:	4618      	mov	r0, r3
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	db0b      	blt.n	80021c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021aa:	79fb      	ldrb	r3, [r7, #7]
 80021ac:	f003 021f 	and.w	r2, r3, #31
 80021b0:	4907      	ldr	r1, [pc, #28]	@ (80021d0 <__NVIC_EnableIRQ+0x38>)
 80021b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b6:	095b      	lsrs	r3, r3, #5
 80021b8:	2001      	movs	r0, #1
 80021ba:	fa00 f202 	lsl.w	r2, r0, r2
 80021be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021c2:	bf00      	nop
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	e000e100 	.word	0xe000e100

080021d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	6039      	str	r1, [r7, #0]
 80021de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	db0a      	blt.n	80021fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	490c      	ldr	r1, [pc, #48]	@ (8002220 <__NVIC_SetPriority+0x4c>)
 80021ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f2:	0112      	lsls	r2, r2, #4
 80021f4:	b2d2      	uxtb	r2, r2
 80021f6:	440b      	add	r3, r1
 80021f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021fc:	e00a      	b.n	8002214 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	b2da      	uxtb	r2, r3
 8002202:	4908      	ldr	r1, [pc, #32]	@ (8002224 <__NVIC_SetPriority+0x50>)
 8002204:	79fb      	ldrb	r3, [r7, #7]
 8002206:	f003 030f 	and.w	r3, r3, #15
 800220a:	3b04      	subs	r3, #4
 800220c:	0112      	lsls	r2, r2, #4
 800220e:	b2d2      	uxtb	r2, r2
 8002210:	440b      	add	r3, r1
 8002212:	761a      	strb	r2, [r3, #24]
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	e000e100 	.word	0xe000e100
 8002224:	e000ed00 	.word	0xe000ed00

08002228 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002228:	b480      	push	{r7}
 800222a:	b089      	sub	sp, #36	@ 0x24
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	f1c3 0307 	rsb	r3, r3, #7
 8002242:	2b04      	cmp	r3, #4
 8002244:	bf28      	it	cs
 8002246:	2304      	movcs	r3, #4
 8002248:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	3304      	adds	r3, #4
 800224e:	2b06      	cmp	r3, #6
 8002250:	d902      	bls.n	8002258 <NVIC_EncodePriority+0x30>
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	3b03      	subs	r3, #3
 8002256:	e000      	b.n	800225a <NVIC_EncodePriority+0x32>
 8002258:	2300      	movs	r3, #0
 800225a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800225c:	f04f 32ff 	mov.w	r2, #4294967295
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	43da      	mvns	r2, r3
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	401a      	ands	r2, r3
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002270:	f04f 31ff 	mov.w	r1, #4294967295
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	fa01 f303 	lsl.w	r3, r1, r3
 800227a:	43d9      	mvns	r1, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002280:	4313      	orrs	r3, r2
         );
}
 8002282:	4618      	mov	r0, r3
 8002284:	3724      	adds	r7, #36	@ 0x24
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b082      	sub	sp, #8
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f7ff ff4c 	bl	8002134 <__NVIC_SetPriorityGrouping>
}
 800229c:	bf00      	nop
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
 80022b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022b2:	2300      	movs	r3, #0
 80022b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022b6:	f7ff ff61 	bl	800217c <__NVIC_GetPriorityGrouping>
 80022ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	68b9      	ldr	r1, [r7, #8]
 80022c0:	6978      	ldr	r0, [r7, #20]
 80022c2:	f7ff ffb1 	bl	8002228 <NVIC_EncodePriority>
 80022c6:	4602      	mov	r2, r0
 80022c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022cc:	4611      	mov	r1, r2
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff ff80 	bl	80021d4 <__NVIC_SetPriority>
}
 80022d4:	bf00      	nop
 80022d6:	3718      	adds	r7, #24
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff ff54 	bl	8002198 <__NVIC_EnableIRQ>
}
 80022f0:	bf00      	nop
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e014      	b.n	8002334 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	791b      	ldrb	r3, [r3, #4]
 800230e:	b2db      	uxtb	r3, r3
 8002310:	2b00      	cmp	r3, #0
 8002312:	d105      	bne.n	8002320 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f7ff fb64 	bl	80019e8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2202      	movs	r2, #2
 8002324:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d101      	bne.n	8002350 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e046      	b.n	80023de <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	795b      	ldrb	r3, [r3, #5]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d101      	bne.n	800235c <HAL_DAC_Start+0x20>
 8002358:	2302      	movs	r3, #2
 800235a:	e040      	b.n	80023de <HAL_DAC_Start+0xa2>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2202      	movs	r2, #2
 8002366:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6819      	ldr	r1, [r3, #0]
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	f003 0310 	and.w	r3, r3, #16
 8002374:	2201      	movs	r2, #1
 8002376:	409a      	lsls	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	430a      	orrs	r2, r1
 800237e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d10f      	bne.n	80023a6 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8002390:	2b3c      	cmp	r3, #60	@ 0x3c
 8002392:	d11d      	bne.n	80023d0 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	685a      	ldr	r2, [r3, #4]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f042 0201 	orr.w	r2, r2, #1
 80023a2:	605a      	str	r2, [r3, #4]
 80023a4:	e014      	b.n	80023d0 <HAL_DAC_Start+0x94>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	f003 0310 	and.w	r3, r3, #16
 80023b6:	213c      	movs	r1, #60	@ 0x3c
 80023b8:	fa01 f303 	lsl.w	r3, r1, r3
 80023bc:	429a      	cmp	r2, r3
 80023be:	d107      	bne.n	80023d0 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f042 0202 	orr.w	r2, r2, #2
 80023ce:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80023ea:	b480      	push	{r7}
 80023ec:	b087      	sub	sp, #28
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	60f8      	str	r0, [r7, #12]
 80023f2:	60b9      	str	r1, [r7, #8]
 80023f4:	607a      	str	r2, [r7, #4]
 80023f6:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80023f8:	2300      	movs	r3, #0
 80023fa:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e015      	b.n	8002432 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d105      	bne.n	800241e <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4413      	add	r3, r2
 8002418:	3308      	adds	r3, #8
 800241a:	617b      	str	r3, [r7, #20]
 800241c:	e004      	b.n	8002428 <HAL_DAC_SetValue+0x3e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800241e:	697a      	ldr	r2, [r7, #20]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4413      	add	r3, r2
 8002424:	3314      	adds	r3, #20
 8002426:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	461a      	mov	r2, r3
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	371c      	adds	r7, #28
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr

0800243e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800243e:	b480      	push	{r7}
 8002440:	b089      	sub	sp, #36	@ 0x24
 8002442:	af00      	add	r7, sp, #0
 8002444:	60f8      	str	r0, [r7, #12]
 8002446:	60b9      	str	r1, [r7, #8]
 8002448:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800244a:	2300      	movs	r3, #0
 800244c:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d002      	beq.n	800245a <HAL_DAC_ConfigChannel+0x1c>
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e042      	b.n	80024e4 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	795b      	ldrb	r3, [r3, #5]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d101      	bne.n	800246a <HAL_DAC_ConfigChannel+0x2c>
 8002466:	2302      	movs	r3, #2
 8002468:	e03c      	b.n	80024e4 <HAL_DAC_ConfigChannel+0xa6>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2201      	movs	r2, #1
 800246e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2202      	movs	r2, #2
 8002474:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f003 0310 	and.w	r3, r3, #16
 8002484:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 800248c:	43db      	mvns	r3, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4013      	ands	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	4313      	orrs	r3, r2
 800249e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f003 0310 	and.w	r3, r3, #16
 80024a6:	697a      	ldr	r2, [r7, #20]
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	6819      	ldr	r1, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f003 0310 	and.w	r3, r3, #16
 80024c6:	22c0      	movs	r2, #192	@ 0xc0
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	43da      	mvns	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	400a      	ands	r2, r1
 80024d4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2201      	movs	r2, #1
 80024da:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2200      	movs	r2, #0
 80024e0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80024e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3724      	adds	r7, #36	@ 0x24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024f8:	2300      	movs	r3, #0
 80024fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80024fc:	f7ff fe0e 	bl	800211c <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d101      	bne.n	800250c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e099      	b.n	8002640 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2202      	movs	r2, #2
 8002510:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f022 0201 	bic.w	r2, r2, #1
 800252a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800252c:	e00f      	b.n	800254e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800252e:	f7ff fdf5 	bl	800211c <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b05      	cmp	r3, #5
 800253a:	d908      	bls.n	800254e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2220      	movs	r2, #32
 8002540:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2203      	movs	r2, #3
 8002546:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e078      	b.n	8002640 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1e8      	bne.n	800252e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002564:	697a      	ldr	r2, [r7, #20]
 8002566:	4b38      	ldr	r3, [pc, #224]	@ (8002648 <HAL_DMA_Init+0x158>)
 8002568:	4013      	ands	r3, r2
 800256a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685a      	ldr	r2, [r3, #4]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800257a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002586:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002592:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	4313      	orrs	r3, r2
 800259e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a4:	2b04      	cmp	r3, #4
 80025a6:	d107      	bne.n	80025b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b0:	4313      	orrs	r3, r2
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	f023 0307 	bic.w	r3, r3, #7
 80025ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025de:	2b04      	cmp	r3, #4
 80025e0:	d117      	bne.n	8002612 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00e      	beq.n	8002612 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 fa6f 	bl	8002ad8 <DMA_CheckFifoParam>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d008      	beq.n	8002612 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2240      	movs	r2, #64	@ 0x40
 8002604:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800260e:	2301      	movs	r3, #1
 8002610:	e016      	b.n	8002640 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 fa26 	bl	8002a6c <DMA_CalcBaseAndBitshift>
 8002620:	4603      	mov	r3, r0
 8002622:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002628:	223f      	movs	r2, #63	@ 0x3f
 800262a:	409a      	lsls	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2201      	movs	r2, #1
 800263a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3718      	adds	r7, #24
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	f010803f 	.word	0xf010803f

0800264c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
 8002658:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800265a:	2300      	movs	r3, #0
 800265c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002662:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800266a:	2b01      	cmp	r3, #1
 800266c:	d101      	bne.n	8002672 <HAL_DMA_Start_IT+0x26>
 800266e:	2302      	movs	r3, #2
 8002670:	e040      	b.n	80026f4 <HAL_DMA_Start_IT+0xa8>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b01      	cmp	r3, #1
 8002684:	d12f      	bne.n	80026e6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2202      	movs	r2, #2
 800268a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2200      	movs	r2, #0
 8002692:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	68b9      	ldr	r1, [r7, #8]
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 f9b8 	bl	8002a10 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026a4:	223f      	movs	r2, #63	@ 0x3f
 80026a6:	409a      	lsls	r2, r3
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f042 0216 	orr.w	r2, r2, #22
 80026ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d007      	beq.n	80026d4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f042 0208 	orr.w	r2, r2, #8
 80026d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f042 0201 	orr.w	r2, r2, #1
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	e005      	b.n	80026f2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80026ee:	2302      	movs	r3, #2
 80026f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80026f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3718      	adds	r7, #24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002704:	2300      	movs	r3, #0
 8002706:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002708:	4b8e      	ldr	r3, [pc, #568]	@ (8002944 <HAL_DMA_IRQHandler+0x248>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a8e      	ldr	r2, [pc, #568]	@ (8002948 <HAL_DMA_IRQHandler+0x24c>)
 800270e:	fba2 2303 	umull	r2, r3, r2, r3
 8002712:	0a9b      	lsrs	r3, r3, #10
 8002714:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800271a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002726:	2208      	movs	r2, #8
 8002728:	409a      	lsls	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	4013      	ands	r3, r2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d01a      	beq.n	8002768 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0304 	and.w	r3, r3, #4
 800273c:	2b00      	cmp	r3, #0
 800273e:	d013      	beq.n	8002768 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 0204 	bic.w	r2, r2, #4
 800274e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002754:	2208      	movs	r2, #8
 8002756:	409a      	lsls	r2, r3
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002760:	f043 0201 	orr.w	r2, r3, #1
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800276c:	2201      	movs	r2, #1
 800276e:	409a      	lsls	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4013      	ands	r3, r2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d012      	beq.n	800279e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00b      	beq.n	800279e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800278a:	2201      	movs	r2, #1
 800278c:	409a      	lsls	r2, r3
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002796:	f043 0202 	orr.w	r2, r3, #2
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027a2:	2204      	movs	r2, #4
 80027a4:	409a      	lsls	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	4013      	ands	r3, r2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d012      	beq.n	80027d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d00b      	beq.n	80027d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027c0:	2204      	movs	r2, #4
 80027c2:	409a      	lsls	r2, r3
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027cc:	f043 0204 	orr.w	r2, r3, #4
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027d8:	2210      	movs	r2, #16
 80027da:	409a      	lsls	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	4013      	ands	r3, r2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d043      	beq.n	800286c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0308 	and.w	r3, r3, #8
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d03c      	beq.n	800286c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027f6:	2210      	movs	r2, #16
 80027f8:	409a      	lsls	r2, r3
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d018      	beq.n	800283e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d108      	bne.n	800282c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281e:	2b00      	cmp	r3, #0
 8002820:	d024      	beq.n	800286c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	4798      	blx	r3
 800282a:	e01f      	b.n	800286c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002830:	2b00      	cmp	r3, #0
 8002832:	d01b      	beq.n	800286c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	4798      	blx	r3
 800283c:	e016      	b.n	800286c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002848:	2b00      	cmp	r3, #0
 800284a:	d107      	bne.n	800285c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 0208 	bic.w	r2, r2, #8
 800285a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002860:	2b00      	cmp	r3, #0
 8002862:	d003      	beq.n	800286c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002870:	2220      	movs	r2, #32
 8002872:	409a      	lsls	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	4013      	ands	r3, r2
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 808f 	beq.w	800299c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0310 	and.w	r3, r3, #16
 8002888:	2b00      	cmp	r3, #0
 800288a:	f000 8087 	beq.w	800299c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002892:	2220      	movs	r2, #32
 8002894:	409a      	lsls	r2, r3
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b05      	cmp	r3, #5
 80028a4:	d136      	bne.n	8002914 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 0216 	bic.w	r2, r2, #22
 80028b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	695a      	ldr	r2, [r3, #20]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80028c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d103      	bne.n	80028d6 <HAL_DMA_IRQHandler+0x1da>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d007      	beq.n	80028e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f022 0208 	bic.w	r2, r2, #8
 80028e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ea:	223f      	movs	r2, #63	@ 0x3f
 80028ec:	409a      	lsls	r2, r3
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002906:	2b00      	cmp	r3, #0
 8002908:	d07e      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	4798      	blx	r3
        }
        return;
 8002912:	e079      	b.n	8002a08 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d01d      	beq.n	800295e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10d      	bne.n	800294c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002934:	2b00      	cmp	r3, #0
 8002936:	d031      	beq.n	800299c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	4798      	blx	r3
 8002940:	e02c      	b.n	800299c <HAL_DMA_IRQHandler+0x2a0>
 8002942:	bf00      	nop
 8002944:	20000400 	.word	0x20000400
 8002948:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002950:	2b00      	cmp	r3, #0
 8002952:	d023      	beq.n	800299c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	4798      	blx	r3
 800295c:	e01e      	b.n	800299c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10f      	bne.n	800298c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 0210 	bic.w	r2, r2, #16
 800297a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002990:	2b00      	cmp	r3, #0
 8002992:	d003      	beq.n	800299c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d032      	beq.n	8002a0a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d022      	beq.n	80029f6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2205      	movs	r2, #5
 80029b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f022 0201 	bic.w	r2, r2, #1
 80029c6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	3301      	adds	r3, #1
 80029cc:	60bb      	str	r3, [r7, #8]
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d307      	bcc.n	80029e4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1f2      	bne.n	80029c8 <HAL_DMA_IRQHandler+0x2cc>
 80029e2:	e000      	b.n	80029e6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80029e4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d005      	beq.n	8002a0a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	4798      	blx	r3
 8002a06:	e000      	b.n	8002a0a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002a08:	bf00      	nop
    }
  }
}
 8002a0a:	3718      	adds	r7, #24
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
 8002a1c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002a2c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	2b40      	cmp	r3, #64	@ 0x40
 8002a3c:	d108      	bne.n	8002a50 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68ba      	ldr	r2, [r7, #8]
 8002a4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a4e:	e007      	b.n	8002a60 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68ba      	ldr	r2, [r7, #8]
 8002a56:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	60da      	str	r2, [r3, #12]
}
 8002a60:	bf00      	nop
 8002a62:	3714      	adds	r7, #20
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	3b10      	subs	r3, #16
 8002a7c:	4a14      	ldr	r2, [pc, #80]	@ (8002ad0 <DMA_CalcBaseAndBitshift+0x64>)
 8002a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a82:	091b      	lsrs	r3, r3, #4
 8002a84:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a86:	4a13      	ldr	r2, [pc, #76]	@ (8002ad4 <DMA_CalcBaseAndBitshift+0x68>)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	461a      	mov	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2b03      	cmp	r3, #3
 8002a98:	d909      	bls.n	8002aae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002aa2:	f023 0303 	bic.w	r3, r3, #3
 8002aa6:	1d1a      	adds	r2, r3, #4
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	659a      	str	r2, [r3, #88]	@ 0x58
 8002aac:	e007      	b.n	8002abe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002ab6:	f023 0303 	bic.w	r3, r3, #3
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3714      	adds	r7, #20
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	aaaaaaab 	.word	0xaaaaaaab
 8002ad4:	08006c3c 	.word	0x08006c3c

08002ad8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ae8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d11f      	bne.n	8002b32 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	2b03      	cmp	r3, #3
 8002af6:	d856      	bhi.n	8002ba6 <DMA_CheckFifoParam+0xce>
 8002af8:	a201      	add	r2, pc, #4	@ (adr r2, 8002b00 <DMA_CheckFifoParam+0x28>)
 8002afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002afe:	bf00      	nop
 8002b00:	08002b11 	.word	0x08002b11
 8002b04:	08002b23 	.word	0x08002b23
 8002b08:	08002b11 	.word	0x08002b11
 8002b0c:	08002ba7 	.word	0x08002ba7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d046      	beq.n	8002baa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b20:	e043      	b.n	8002baa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b26:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002b2a:	d140      	bne.n	8002bae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b30:	e03d      	b.n	8002bae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b3a:	d121      	bne.n	8002b80 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	2b03      	cmp	r3, #3
 8002b40:	d837      	bhi.n	8002bb2 <DMA_CheckFifoParam+0xda>
 8002b42:	a201      	add	r2, pc, #4	@ (adr r2, 8002b48 <DMA_CheckFifoParam+0x70>)
 8002b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b48:	08002b59 	.word	0x08002b59
 8002b4c:	08002b5f 	.word	0x08002b5f
 8002b50:	08002b59 	.word	0x08002b59
 8002b54:	08002b71 	.word	0x08002b71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b5c:	e030      	b.n	8002bc0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b62:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d025      	beq.n	8002bb6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b6e:	e022      	b.n	8002bb6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b74:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002b78:	d11f      	bne.n	8002bba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b7e:	e01c      	b.n	8002bba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d903      	bls.n	8002b8e <DMA_CheckFifoParam+0xb6>
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	2b03      	cmp	r3, #3
 8002b8a:	d003      	beq.n	8002b94 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b8c:	e018      	b.n	8002bc0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	73fb      	strb	r3, [r7, #15]
      break;
 8002b92:	e015      	b.n	8002bc0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b98:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00e      	beq.n	8002bbe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ba4:	e00b      	b.n	8002bbe <DMA_CheckFifoParam+0xe6>
      break;
 8002ba6:	bf00      	nop
 8002ba8:	e00a      	b.n	8002bc0 <DMA_CheckFifoParam+0xe8>
      break;
 8002baa:	bf00      	nop
 8002bac:	e008      	b.n	8002bc0 <DMA_CheckFifoParam+0xe8>
      break;
 8002bae:	bf00      	nop
 8002bb0:	e006      	b.n	8002bc0 <DMA_CheckFifoParam+0xe8>
      break;
 8002bb2:	bf00      	nop
 8002bb4:	e004      	b.n	8002bc0 <DMA_CheckFifoParam+0xe8>
      break;
 8002bb6:	bf00      	nop
 8002bb8:	e002      	b.n	8002bc0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002bba:	bf00      	nop
 8002bbc:	e000      	b.n	8002bc0 <DMA_CheckFifoParam+0xe8>
      break;
 8002bbe:	bf00      	nop
    }
  } 
  
  return status; 
 8002bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3714      	adds	r7, #20
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop

08002bd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b089      	sub	sp, #36	@ 0x24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bde:	2300      	movs	r3, #0
 8002be0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002be2:	2300      	movs	r3, #0
 8002be4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002be6:	2300      	movs	r3, #0
 8002be8:	61fb      	str	r3, [r7, #28]
 8002bea:	e165      	b.n	8002eb8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bec:	2201      	movs	r2, #1
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	f040 8154 	bne.w	8002eb2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f003 0303 	and.w	r3, r3, #3
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d005      	beq.n	8002c22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d130      	bne.n	8002c84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	2203      	movs	r2, #3
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	43db      	mvns	r3, r3
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	4013      	ands	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	68da      	ldr	r2, [r3, #12]
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	fa02 f303 	lsl.w	r3, r2, r3
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c58:	2201      	movs	r2, #1
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	43db      	mvns	r3, r3
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	4013      	ands	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	091b      	lsrs	r3, r3, #4
 8002c6e:	f003 0201 	and.w	r2, r3, #1
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f003 0303 	and.w	r3, r3, #3
 8002c8c:	2b03      	cmp	r3, #3
 8002c8e:	d017      	beq.n	8002cc0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	2203      	movs	r2, #3
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	689a      	ldr	r2, [r3, #8]
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f003 0303 	and.w	r3, r3, #3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d123      	bne.n	8002d14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	08da      	lsrs	r2, r3, #3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	3208      	adds	r2, #8
 8002cd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	220f      	movs	r2, #15
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	43db      	mvns	r3, r3
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	4013      	ands	r3, r2
 8002cee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	691a      	ldr	r2, [r3, #16]
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	f003 0307 	and.w	r3, r3, #7
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	08da      	lsrs	r2, r3, #3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	3208      	adds	r2, #8
 8002d0e:	69b9      	ldr	r1, [r7, #24]
 8002d10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	2203      	movs	r2, #3
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	43db      	mvns	r3, r3
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f003 0203 	and.w	r2, r3, #3
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 80ae 	beq.w	8002eb2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d56:	2300      	movs	r3, #0
 8002d58:	60fb      	str	r3, [r7, #12]
 8002d5a:	4b5d      	ldr	r3, [pc, #372]	@ (8002ed0 <HAL_GPIO_Init+0x300>)
 8002d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d5e:	4a5c      	ldr	r2, [pc, #368]	@ (8002ed0 <HAL_GPIO_Init+0x300>)
 8002d60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d64:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d66:	4b5a      	ldr	r3, [pc, #360]	@ (8002ed0 <HAL_GPIO_Init+0x300>)
 8002d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d6e:	60fb      	str	r3, [r7, #12]
 8002d70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d72:	4a58      	ldr	r2, [pc, #352]	@ (8002ed4 <HAL_GPIO_Init+0x304>)
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	089b      	lsrs	r3, r3, #2
 8002d78:	3302      	adds	r3, #2
 8002d7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	f003 0303 	and.w	r3, r3, #3
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	220f      	movs	r2, #15
 8002d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8e:	43db      	mvns	r3, r3
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	4013      	ands	r3, r2
 8002d94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a4f      	ldr	r2, [pc, #316]	@ (8002ed8 <HAL_GPIO_Init+0x308>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d025      	beq.n	8002dea <HAL_GPIO_Init+0x21a>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a4e      	ldr	r2, [pc, #312]	@ (8002edc <HAL_GPIO_Init+0x30c>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d01f      	beq.n	8002de6 <HAL_GPIO_Init+0x216>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a4d      	ldr	r2, [pc, #308]	@ (8002ee0 <HAL_GPIO_Init+0x310>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d019      	beq.n	8002de2 <HAL_GPIO_Init+0x212>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a4c      	ldr	r2, [pc, #304]	@ (8002ee4 <HAL_GPIO_Init+0x314>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d013      	beq.n	8002dde <HAL_GPIO_Init+0x20e>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a4b      	ldr	r2, [pc, #300]	@ (8002ee8 <HAL_GPIO_Init+0x318>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d00d      	beq.n	8002dda <HAL_GPIO_Init+0x20a>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a4a      	ldr	r2, [pc, #296]	@ (8002eec <HAL_GPIO_Init+0x31c>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d007      	beq.n	8002dd6 <HAL_GPIO_Init+0x206>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a49      	ldr	r2, [pc, #292]	@ (8002ef0 <HAL_GPIO_Init+0x320>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d101      	bne.n	8002dd2 <HAL_GPIO_Init+0x202>
 8002dce:	2306      	movs	r3, #6
 8002dd0:	e00c      	b.n	8002dec <HAL_GPIO_Init+0x21c>
 8002dd2:	2307      	movs	r3, #7
 8002dd4:	e00a      	b.n	8002dec <HAL_GPIO_Init+0x21c>
 8002dd6:	2305      	movs	r3, #5
 8002dd8:	e008      	b.n	8002dec <HAL_GPIO_Init+0x21c>
 8002dda:	2304      	movs	r3, #4
 8002ddc:	e006      	b.n	8002dec <HAL_GPIO_Init+0x21c>
 8002dde:	2303      	movs	r3, #3
 8002de0:	e004      	b.n	8002dec <HAL_GPIO_Init+0x21c>
 8002de2:	2302      	movs	r3, #2
 8002de4:	e002      	b.n	8002dec <HAL_GPIO_Init+0x21c>
 8002de6:	2301      	movs	r3, #1
 8002de8:	e000      	b.n	8002dec <HAL_GPIO_Init+0x21c>
 8002dea:	2300      	movs	r3, #0
 8002dec:	69fa      	ldr	r2, [r7, #28]
 8002dee:	f002 0203 	and.w	r2, r2, #3
 8002df2:	0092      	lsls	r2, r2, #2
 8002df4:	4093      	lsls	r3, r2
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dfc:	4935      	ldr	r1, [pc, #212]	@ (8002ed4 <HAL_GPIO_Init+0x304>)
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	089b      	lsrs	r3, r3, #2
 8002e02:	3302      	adds	r3, #2
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e0a:	4b3a      	ldr	r3, [pc, #232]	@ (8002ef4 <HAL_GPIO_Init+0x324>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	43db      	mvns	r3, r3
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	4013      	ands	r3, r2
 8002e18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d003      	beq.n	8002e2e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e2e:	4a31      	ldr	r2, [pc, #196]	@ (8002ef4 <HAL_GPIO_Init+0x324>)
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e34:	4b2f      	ldr	r3, [pc, #188]	@ (8002ef4 <HAL_GPIO_Init+0x324>)
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	43db      	mvns	r3, r3
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	4013      	ands	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d003      	beq.n	8002e58 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e58:	4a26      	ldr	r2, [pc, #152]	@ (8002ef4 <HAL_GPIO_Init+0x324>)
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e5e:	4b25      	ldr	r3, [pc, #148]	@ (8002ef4 <HAL_GPIO_Init+0x324>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	43db      	mvns	r3, r3
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d003      	beq.n	8002e82 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e82:	4a1c      	ldr	r2, [pc, #112]	@ (8002ef4 <HAL_GPIO_Init+0x324>)
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e88:	4b1a      	ldr	r3, [pc, #104]	@ (8002ef4 <HAL_GPIO_Init+0x324>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	43db      	mvns	r3, r3
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	4013      	ands	r3, r2
 8002e96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d003      	beq.n	8002eac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002eac:	4a11      	ldr	r2, [pc, #68]	@ (8002ef4 <HAL_GPIO_Init+0x324>)
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	61fb      	str	r3, [r7, #28]
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	2b0f      	cmp	r3, #15
 8002ebc:	f67f ae96 	bls.w	8002bec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ec0:	bf00      	nop
 8002ec2:	bf00      	nop
 8002ec4:	3724      	adds	r7, #36	@ 0x24
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	40023800 	.word	0x40023800
 8002ed4:	40013800 	.word	0x40013800
 8002ed8:	40020000 	.word	0x40020000
 8002edc:	40020400 	.word	0x40020400
 8002ee0:	40020800 	.word	0x40020800
 8002ee4:	40020c00 	.word	0x40020c00
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	40021400 	.word	0x40021400
 8002ef0:	40021800 	.word	0x40021800
 8002ef4:	40013c00 	.word	0x40013c00

08002ef8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e12b      	b.n	8003162 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d106      	bne.n	8002f24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f7fe fda6 	bl	8001a70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2224      	movs	r2, #36	@ 0x24
 8002f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 0201 	bic.w	r2, r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f5c:	f000 fd02 	bl	8003964 <HAL_RCC_GetPCLK1Freq>
 8002f60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	4a81      	ldr	r2, [pc, #516]	@ (800316c <HAL_I2C_Init+0x274>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d807      	bhi.n	8002f7c <HAL_I2C_Init+0x84>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	4a80      	ldr	r2, [pc, #512]	@ (8003170 <HAL_I2C_Init+0x278>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	bf94      	ite	ls
 8002f74:	2301      	movls	r3, #1
 8002f76:	2300      	movhi	r3, #0
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	e006      	b.n	8002f8a <HAL_I2C_Init+0x92>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	4a7d      	ldr	r2, [pc, #500]	@ (8003174 <HAL_I2C_Init+0x27c>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	bf94      	ite	ls
 8002f84:	2301      	movls	r3, #1
 8002f86:	2300      	movhi	r3, #0
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e0e7      	b.n	8003162 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	4a78      	ldr	r2, [pc, #480]	@ (8003178 <HAL_I2C_Init+0x280>)
 8002f96:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9a:	0c9b      	lsrs	r3, r3, #18
 8002f9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68ba      	ldr	r2, [r7, #8]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	4a6a      	ldr	r2, [pc, #424]	@ (800316c <HAL_I2C_Init+0x274>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d802      	bhi.n	8002fcc <HAL_I2C_Init+0xd4>
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	3301      	adds	r3, #1
 8002fca:	e009      	b.n	8002fe0 <HAL_I2C_Init+0xe8>
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002fd2:	fb02 f303 	mul.w	r3, r2, r3
 8002fd6:	4a69      	ldr	r2, [pc, #420]	@ (800317c <HAL_I2C_Init+0x284>)
 8002fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fdc:	099b      	lsrs	r3, r3, #6
 8002fde:	3301      	adds	r3, #1
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	6812      	ldr	r2, [r2, #0]
 8002fe4:	430b      	orrs	r3, r1
 8002fe6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	69db      	ldr	r3, [r3, #28]
 8002fee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002ff2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	495c      	ldr	r1, [pc, #368]	@ (800316c <HAL_I2C_Init+0x274>)
 8002ffc:	428b      	cmp	r3, r1
 8002ffe:	d819      	bhi.n	8003034 <HAL_I2C_Init+0x13c>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	1e59      	subs	r1, r3, #1
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	fbb1 f3f3 	udiv	r3, r1, r3
 800300e:	1c59      	adds	r1, r3, #1
 8003010:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003014:	400b      	ands	r3, r1
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00a      	beq.n	8003030 <HAL_I2C_Init+0x138>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	1e59      	subs	r1, r3, #1
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	fbb1 f3f3 	udiv	r3, r1, r3
 8003028:	3301      	adds	r3, #1
 800302a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800302e:	e051      	b.n	80030d4 <HAL_I2C_Init+0x1dc>
 8003030:	2304      	movs	r3, #4
 8003032:	e04f      	b.n	80030d4 <HAL_I2C_Init+0x1dc>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d111      	bne.n	8003060 <HAL_I2C_Init+0x168>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	1e58      	subs	r0, r3, #1
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6859      	ldr	r1, [r3, #4]
 8003044:	460b      	mov	r3, r1
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	440b      	add	r3, r1
 800304a:	fbb0 f3f3 	udiv	r3, r0, r3
 800304e:	3301      	adds	r3, #1
 8003050:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003054:	2b00      	cmp	r3, #0
 8003056:	bf0c      	ite	eq
 8003058:	2301      	moveq	r3, #1
 800305a:	2300      	movne	r3, #0
 800305c:	b2db      	uxtb	r3, r3
 800305e:	e012      	b.n	8003086 <HAL_I2C_Init+0x18e>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	1e58      	subs	r0, r3, #1
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6859      	ldr	r1, [r3, #4]
 8003068:	460b      	mov	r3, r1
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	440b      	add	r3, r1
 800306e:	0099      	lsls	r1, r3, #2
 8003070:	440b      	add	r3, r1
 8003072:	fbb0 f3f3 	udiv	r3, r0, r3
 8003076:	3301      	adds	r3, #1
 8003078:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800307c:	2b00      	cmp	r3, #0
 800307e:	bf0c      	ite	eq
 8003080:	2301      	moveq	r3, #1
 8003082:	2300      	movne	r3, #0
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <HAL_I2C_Init+0x196>
 800308a:	2301      	movs	r3, #1
 800308c:	e022      	b.n	80030d4 <HAL_I2C_Init+0x1dc>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10e      	bne.n	80030b4 <HAL_I2C_Init+0x1bc>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	1e58      	subs	r0, r3, #1
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6859      	ldr	r1, [r3, #4]
 800309e:	460b      	mov	r3, r1
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	440b      	add	r3, r1
 80030a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80030a8:	3301      	adds	r3, #1
 80030aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030b2:	e00f      	b.n	80030d4 <HAL_I2C_Init+0x1dc>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	1e58      	subs	r0, r3, #1
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6859      	ldr	r1, [r3, #4]
 80030bc:	460b      	mov	r3, r1
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	440b      	add	r3, r1
 80030c2:	0099      	lsls	r1, r3, #2
 80030c4:	440b      	add	r3, r1
 80030c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ca:	3301      	adds	r3, #1
 80030cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80030d4:	6879      	ldr	r1, [r7, #4]
 80030d6:	6809      	ldr	r1, [r1, #0]
 80030d8:	4313      	orrs	r3, r2
 80030da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	69da      	ldr	r2, [r3, #28]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	431a      	orrs	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003102:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	6911      	ldr	r1, [r2, #16]
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	68d2      	ldr	r2, [r2, #12]
 800310e:	4311      	orrs	r1, r2
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	6812      	ldr	r2, [r2, #0]
 8003114:	430b      	orrs	r3, r1
 8003116:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	695a      	ldr	r2, [r3, #20]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	431a      	orrs	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	430a      	orrs	r2, r1
 8003132:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 0201 	orr.w	r2, r2, #1
 8003142:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2220      	movs	r2, #32
 800314e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	000186a0 	.word	0x000186a0
 8003170:	001e847f 	.word	0x001e847f
 8003174:	003d08ff 	.word	0x003d08ff
 8003178:	431bde83 	.word	0x431bde83
 800317c:	10624dd3 	.word	0x10624dd3

08003180 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b088      	sub	sp, #32
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e0e1      	b.n	8003356 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d109      	bne.n	80031b2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a6d      	ldr	r2, [pc, #436]	@ (8003360 <HAL_I2S_Init+0x1e0>)
 80031aa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f7fe fcc9 	bl	8001b44 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2202      	movs	r2, #2
 80031b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	69db      	ldr	r3, [r3, #28]
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	6812      	ldr	r2, [r2, #0]
 80031c4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80031c8:	f023 030f 	bic.w	r3, r3, #15
 80031cc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2202      	movs	r2, #2
 80031d4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d06f      	beq.n	80032be <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d102      	bne.n	80031ec <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80031e6:	2310      	movs	r3, #16
 80031e8:	617b      	str	r3, [r7, #20]
 80031ea:	e001      	b.n	80031f0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80031ec:	2320      	movs	r3, #32
 80031ee:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	2b20      	cmp	r3, #32
 80031f6:	d802      	bhi.n	80031fe <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a58      	ldr	r2, [pc, #352]	@ (8003364 <HAL_I2S_Init+0x1e4>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d004      	beq.n	8003212 <HAL_I2S_Init+0x92>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a56      	ldr	r2, [pc, #344]	@ (8003368 <HAL_I2S_Init+0x1e8>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d104      	bne.n	800321c <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8003212:	2001      	movs	r0, #1
 8003214:	f000 ff16 	bl	8004044 <HAL_RCCEx_GetPeriphCLKFreq>
 8003218:	60f8      	str	r0, [r7, #12]
 800321a:	e003      	b.n	8003224 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 800321c:	2002      	movs	r0, #2
 800321e:	f000 ff11 	bl	8004044 <HAL_RCCEx_GetPeriphCLKFreq>
 8003222:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800322c:	d125      	bne.n	800327a <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d010      	beq.n	8003258 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003240:	4613      	mov	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	461a      	mov	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003252:	3305      	adds	r3, #5
 8003254:	613b      	str	r3, [r7, #16]
 8003256:	e01f      	b.n	8003298 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003262:	4613      	mov	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4413      	add	r3, r2
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	461a      	mov	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	695b      	ldr	r3, [r3, #20]
 8003270:	fbb2 f3f3 	udiv	r3, r2, r3
 8003274:	3305      	adds	r3, #5
 8003276:	613b      	str	r3, [r7, #16]
 8003278:	e00e      	b.n	8003298 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003282:	4613      	mov	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	4413      	add	r3, r2
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	461a      	mov	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	695b      	ldr	r3, [r3, #20]
 8003290:	fbb2 f3f3 	udiv	r3, r2, r3
 8003294:	3305      	adds	r3, #5
 8003296:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	4a34      	ldr	r2, [pc, #208]	@ (800336c <HAL_I2S_Init+0x1ec>)
 800329c:	fba2 2303 	umull	r2, r3, r2, r3
 80032a0:	08db      	lsrs	r3, r3, #3
 80032a2:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	085b      	lsrs	r3, r3, #1
 80032b4:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	021b      	lsls	r3, r3, #8
 80032ba:	61bb      	str	r3, [r7, #24]
 80032bc:	e003      	b.n	80032c6 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80032be:	2302      	movs	r3, #2
 80032c0:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80032c2:	2300      	movs	r3, #0
 80032c4:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d902      	bls.n	80032d2 <HAL_I2S_Init+0x152>
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	2bff      	cmp	r3, #255	@ 0xff
 80032d0:	d907      	bls.n	80032e2 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032d6:	f043 0210 	orr.w	r2, r3, #16
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e039      	b.n	8003356 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	691a      	ldr	r2, [r3, #16]
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	ea42 0103 	orr.w	r1, r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	69fa      	ldr	r2, [r7, #28]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	69db      	ldr	r3, [r3, #28]
 80032fc:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003300:	f023 030f 	bic.w	r3, r3, #15
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	6851      	ldr	r1, [r2, #4]
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	6892      	ldr	r2, [r2, #8]
 800330c:	4311      	orrs	r1, r2
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	68d2      	ldr	r2, [r2, #12]
 8003312:	4311      	orrs	r1, r2
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	6992      	ldr	r2, [r2, #24]
 8003318:	430a      	orrs	r2, r1
 800331a:	431a      	orrs	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003324:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	2b30      	cmp	r3, #48	@ 0x30
 800332c:	d003      	beq.n	8003336 <HAL_I2S_Init+0x1b6>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	2bb0      	cmp	r3, #176	@ 0xb0
 8003334:	d107      	bne.n	8003346 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	69da      	ldr	r2, [r3, #28]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003344:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3720      	adds	r7, #32
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	0800366d 	.word	0x0800366d
 8003364:	40003800 	.word	0x40003800
 8003368:	40003c00 	.word	0x40003c00
 800336c:	cccccccd 	.word	0xcccccccd

08003370 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	4613      	mov	r3, r2
 800337c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d002      	beq.n	800338a <HAL_I2S_Receive_DMA+0x1a>
 8003384:	88fb      	ldrh	r3, [r7, #6]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e09d      	b.n	80034ca <HAL_I2S_Receive_DMA+0x15a>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b01      	cmp	r3, #1
 8003398:	d001      	beq.n	800339e <HAL_I2S_Receive_DMA+0x2e>
  {
    return HAL_BUSY;
 800339a:	2302      	movs	r3, #2
 800339c:	e095      	b.n	80034ca <HAL_I2S_Receive_DMA+0x15a>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d101      	bne.n	80033ae <HAL_I2S_Receive_DMA+0x3e>
 80033aa:	2302      	movs	r3, #2
 80033ac:	e08d      	b.n	80034ca <HAL_I2S_Receive_DMA+0x15a>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2204      	movs	r2, #4
 80033ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pRxBuffPtr = pData;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	68ba      	ldr	r2, [r7, #8]
 80033c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	69db      	ldr	r3, [r3, #28]
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	2b03      	cmp	r3, #3
 80033da:	d002      	beq.n	80033e2 <HAL_I2S_Receive_DMA+0x72>
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	2b05      	cmp	r3, #5
 80033e0:	d10a      	bne.n	80033f8 <HAL_I2S_Receive_DMA+0x88>
  {
    hi2s->RxXferSize = (Size << 1U);
 80033e2:	88fb      	ldrh	r3, [r7, #6]
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	b29a      	uxth	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = (Size << 1U);
 80033ec:	88fb      	ldrh	r3, [r7, #6]
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	865a      	strh	r2, [r3, #50]	@ 0x32
 80033f6:	e005      	b.n	8003404 <HAL_I2S_Receive_DMA+0x94>
  }
  else
  {
    hi2s->RxXferSize = Size;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	88fa      	ldrh	r2, [r7, #6]
 80033fc:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = Size;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	88fa      	ldrh	r2, [r7, #6]
 8003402:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003408:	4a32      	ldr	r2, [pc, #200]	@ (80034d4 <HAL_I2S_Receive_DMA+0x164>)
 800340a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003410:	4a31      	ldr	r2, [pc, #196]	@ (80034d8 <HAL_I2S_Receive_DMA+0x168>)
 8003412:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003418:	4a30      	ldr	r2, [pc, #192]	@ (80034dc <HAL_I2S_Receive_DMA+0x16c>)
 800341a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003426:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800342a:	d10a      	bne.n	8003442 <HAL_I2S_Receive_DMA+0xd2>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800342c:	2300      	movs	r3, #0
 800342e:	613b      	str	r3, [r7, #16]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	613b      	str	r3, [r7, #16]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	613b      	str	r3, [r7, #16]
 8003440:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	330c      	adds	r3, #12
 800344c:	4619      	mov	r1, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003452:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8003458:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800345a:	f7ff f8f7 	bl	800264c <HAL_DMA_Start_IT>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00f      	beq.n	8003484 <HAL_I2S_Receive_DMA+0x114>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003468:	f043 0208 	orr.w	r2, r3, #8
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e022      	b.n	80034ca <HAL_I2S_Receive_DMA+0x15a>
  }

  __HAL_UNLOCK(hi2s);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b00      	cmp	r3, #0
 8003498:	d107      	bne.n	80034aa <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	685a      	ldr	r2, [r3, #4]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f042 0201 	orr.w	r2, r2, #1
 80034a8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	69db      	ldr	r3, [r3, #28]
 80034b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d107      	bne.n	80034c8 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	69da      	ldr	r2, [r3, #28]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80034c6:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3718      	adds	r7, #24
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	0800354b 	.word	0x0800354b
 80034d8:	08003509 	.word	0x08003509
 80034dc:	08003567 	.word	0x08003567

080034e0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003514:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10e      	bne.n	800353c <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 0201 	bic.w	r2, r2, #1
 800352c:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	865a      	strh	r2, [r3, #50]	@ 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f7fd ff19 	bl	8001374 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003542:	bf00      	nop
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b084      	sub	sp, #16
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003556:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8003558:	68f8      	ldr	r0, [r7, #12]
 800355a:	f7fd feed 	bl	8001338 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800355e:	bf00      	nop
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b084      	sub	sp, #16
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003572:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	685a      	ldr	r2, [r3, #4]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0203 	bic.w	r2, r2, #3
 8003582:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800359c:	f043 0208 	orr.w	r2, r3, #8
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	f7ff ffa5 	bl	80034f4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80035aa:	bf00      	nop
 80035ac:	3710      	adds	r7, #16
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b082      	sub	sp, #8
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035be:	881a      	ldrh	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ca:	1c9a      	adds	r2, r3, #2
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	3b01      	subs	r3, #1
 80035d8:	b29a      	uxth	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10e      	bne.n	8003606 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	685a      	ldr	r2, [r3, #4]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80035f6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f7ff ff6d 	bl	80034e0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003606:	bf00      	nop
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b082      	sub	sp, #8
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68da      	ldr	r2, [r3, #12]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003620:	b292      	uxth	r2, r2
 8003622:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003628:	1c9a      	adds	r2, r3, #2
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003632:	b29b      	uxth	r3, r3
 8003634:	3b01      	subs	r3, #1
 8003636:	b29a      	uxth	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003640:	b29b      	uxth	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10e      	bne.n	8003664 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003654:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f7fd fe88 	bl	8001374 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003664:	bf00      	nop
 8003666:	3708      	adds	r7, #8
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003682:	b2db      	uxtb	r3, r3
 8003684:	2b04      	cmp	r3, #4
 8003686:	d13a      	bne.n	80036fe <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b01      	cmp	r3, #1
 8003690:	d109      	bne.n	80036a6 <I2S_IRQHandler+0x3a>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800369c:	2b40      	cmp	r3, #64	@ 0x40
 800369e:	d102      	bne.n	80036a6 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f7ff ffb4 	bl	800360e <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ac:	2b40      	cmp	r3, #64	@ 0x40
 80036ae:	d126      	bne.n	80036fe <I2S_IRQHandler+0x92>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f003 0320 	and.w	r3, r3, #32
 80036ba:	2b20      	cmp	r3, #32
 80036bc:	d11f      	bne.n	80036fe <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80036cc:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80036ce:	2300      	movs	r3, #0
 80036d0:	613b      	str	r3, [r7, #16]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	613b      	str	r3, [r7, #16]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	613b      	str	r3, [r7, #16]
 80036e2:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036f0:	f043 0202 	orr.w	r2, r3, #2
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f7ff fefb 	bl	80034f4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b03      	cmp	r3, #3
 8003708:	d136      	bne.n	8003778 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	f003 0302 	and.w	r3, r3, #2
 8003710:	2b02      	cmp	r3, #2
 8003712:	d109      	bne.n	8003728 <I2S_IRQHandler+0xbc>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800371e:	2b80      	cmp	r3, #128	@ 0x80
 8003720:	d102      	bne.n	8003728 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f7ff ff45 	bl	80035b2 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	f003 0308 	and.w	r3, r3, #8
 800372e:	2b08      	cmp	r3, #8
 8003730:	d122      	bne.n	8003778 <I2S_IRQHandler+0x10c>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f003 0320 	and.w	r3, r3, #32
 800373c:	2b20      	cmp	r3, #32
 800373e:	d11b      	bne.n	8003778 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	685a      	ldr	r2, [r3, #4]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800374e:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003750:	2300      	movs	r3, #0
 8003752:	60fb      	str	r3, [r7, #12]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	60fb      	str	r3, [r7, #12]
 800375c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800376a:	f043 0204 	orr.w	r2, r3, #4
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f7ff febe 	bl	80034f4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003778:	bf00      	nop
 800377a:	3718      	adds	r7, #24
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d101      	bne.n	8003794 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e0cc      	b.n	800392e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003794:	4b68      	ldr	r3, [pc, #416]	@ (8003938 <HAL_RCC_ClockConfig+0x1b8>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 030f 	and.w	r3, r3, #15
 800379c:	683a      	ldr	r2, [r7, #0]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d90c      	bls.n	80037bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037a2:	4b65      	ldr	r3, [pc, #404]	@ (8003938 <HAL_RCC_ClockConfig+0x1b8>)
 80037a4:	683a      	ldr	r2, [r7, #0]
 80037a6:	b2d2      	uxtb	r2, r2
 80037a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037aa:	4b63      	ldr	r3, [pc, #396]	@ (8003938 <HAL_RCC_ClockConfig+0x1b8>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 030f 	and.w	r3, r3, #15
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d001      	beq.n	80037bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e0b8      	b.n	800392e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0302 	and.w	r3, r3, #2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d020      	beq.n	800380a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0304 	and.w	r3, r3, #4
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d005      	beq.n	80037e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037d4:	4b59      	ldr	r3, [pc, #356]	@ (800393c <HAL_RCC_ClockConfig+0x1bc>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	4a58      	ldr	r2, [pc, #352]	@ (800393c <HAL_RCC_ClockConfig+0x1bc>)
 80037da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80037de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0308 	and.w	r3, r3, #8
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d005      	beq.n	80037f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037ec:	4b53      	ldr	r3, [pc, #332]	@ (800393c <HAL_RCC_ClockConfig+0x1bc>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	4a52      	ldr	r2, [pc, #328]	@ (800393c <HAL_RCC_ClockConfig+0x1bc>)
 80037f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80037f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037f8:	4b50      	ldr	r3, [pc, #320]	@ (800393c <HAL_RCC_ClockConfig+0x1bc>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	494d      	ldr	r1, [pc, #308]	@ (800393c <HAL_RCC_ClockConfig+0x1bc>)
 8003806:	4313      	orrs	r3, r2
 8003808:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b00      	cmp	r3, #0
 8003814:	d044      	beq.n	80038a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d107      	bne.n	800382e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800381e:	4b47      	ldr	r3, [pc, #284]	@ (800393c <HAL_RCC_ClockConfig+0x1bc>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d119      	bne.n	800385e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e07f      	b.n	800392e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	2b02      	cmp	r3, #2
 8003834:	d003      	beq.n	800383e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800383a:	2b03      	cmp	r3, #3
 800383c:	d107      	bne.n	800384e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800383e:	4b3f      	ldr	r3, [pc, #252]	@ (800393c <HAL_RCC_ClockConfig+0x1bc>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d109      	bne.n	800385e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e06f      	b.n	800392e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800384e:	4b3b      	ldr	r3, [pc, #236]	@ (800393c <HAL_RCC_ClockConfig+0x1bc>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e067      	b.n	800392e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800385e:	4b37      	ldr	r3, [pc, #220]	@ (800393c <HAL_RCC_ClockConfig+0x1bc>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f023 0203 	bic.w	r2, r3, #3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	4934      	ldr	r1, [pc, #208]	@ (800393c <HAL_RCC_ClockConfig+0x1bc>)
 800386c:	4313      	orrs	r3, r2
 800386e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003870:	f7fe fc54 	bl	800211c <HAL_GetTick>
 8003874:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003876:	e00a      	b.n	800388e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003878:	f7fe fc50 	bl	800211c <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003886:	4293      	cmp	r3, r2
 8003888:	d901      	bls.n	800388e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e04f      	b.n	800392e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800388e:	4b2b      	ldr	r3, [pc, #172]	@ (800393c <HAL_RCC_ClockConfig+0x1bc>)
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f003 020c 	and.w	r2, r3, #12
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	429a      	cmp	r2, r3
 800389e:	d1eb      	bne.n	8003878 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038a0:	4b25      	ldr	r3, [pc, #148]	@ (8003938 <HAL_RCC_ClockConfig+0x1b8>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 030f 	and.w	r3, r3, #15
 80038a8:	683a      	ldr	r2, [r7, #0]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d20c      	bcs.n	80038c8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ae:	4b22      	ldr	r3, [pc, #136]	@ (8003938 <HAL_RCC_ClockConfig+0x1b8>)
 80038b0:	683a      	ldr	r2, [r7, #0]
 80038b2:	b2d2      	uxtb	r2, r2
 80038b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038b6:	4b20      	ldr	r3, [pc, #128]	@ (8003938 <HAL_RCC_ClockConfig+0x1b8>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 030f 	and.w	r3, r3, #15
 80038be:	683a      	ldr	r2, [r7, #0]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d001      	beq.n	80038c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e032      	b.n	800392e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0304 	and.w	r3, r3, #4
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d008      	beq.n	80038e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038d4:	4b19      	ldr	r3, [pc, #100]	@ (800393c <HAL_RCC_ClockConfig+0x1bc>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	4916      	ldr	r1, [pc, #88]	@ (800393c <HAL_RCC_ClockConfig+0x1bc>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0308 	and.w	r3, r3, #8
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d009      	beq.n	8003906 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038f2:	4b12      	ldr	r3, [pc, #72]	@ (800393c <HAL_RCC_ClockConfig+0x1bc>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	490e      	ldr	r1, [pc, #56]	@ (800393c <HAL_RCC_ClockConfig+0x1bc>)
 8003902:	4313      	orrs	r3, r2
 8003904:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003906:	f000 fde7 	bl	80044d8 <HAL_RCC_GetSysClockFreq>
 800390a:	4602      	mov	r2, r0
 800390c:	4b0b      	ldr	r3, [pc, #44]	@ (800393c <HAL_RCC_ClockConfig+0x1bc>)
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	091b      	lsrs	r3, r3, #4
 8003912:	f003 030f 	and.w	r3, r3, #15
 8003916:	490a      	ldr	r1, [pc, #40]	@ (8003940 <HAL_RCC_ClockConfig+0x1c0>)
 8003918:	5ccb      	ldrb	r3, [r1, r3]
 800391a:	fa22 f303 	lsr.w	r3, r2, r3
 800391e:	4a09      	ldr	r2, [pc, #36]	@ (8003944 <HAL_RCC_ClockConfig+0x1c4>)
 8003920:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003922:	4b09      	ldr	r3, [pc, #36]	@ (8003948 <HAL_RCC_ClockConfig+0x1c8>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4618      	mov	r0, r3
 8003928:	f7fe f9f2 	bl	8001d10 <HAL_InitTick>

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	40023c00 	.word	0x40023c00
 800393c:	40023800 	.word	0x40023800
 8003940:	08006c24 	.word	0x08006c24
 8003944:	20000400 	.word	0x20000400
 8003948:	20000404 	.word	0x20000404

0800394c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003950:	4b03      	ldr	r3, [pc, #12]	@ (8003960 <HAL_RCC_GetHCLKFreq+0x14>)
 8003952:	681b      	ldr	r3, [r3, #0]
}
 8003954:	4618      	mov	r0, r3
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	20000400 	.word	0x20000400

08003964 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003968:	f7ff fff0 	bl	800394c <HAL_RCC_GetHCLKFreq>
 800396c:	4602      	mov	r2, r0
 800396e:	4b05      	ldr	r3, [pc, #20]	@ (8003984 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	0a9b      	lsrs	r3, r3, #10
 8003974:	f003 0307 	and.w	r3, r3, #7
 8003978:	4903      	ldr	r1, [pc, #12]	@ (8003988 <HAL_RCC_GetPCLK1Freq+0x24>)
 800397a:	5ccb      	ldrb	r3, [r1, r3]
 800397c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003980:	4618      	mov	r0, r3
 8003982:	bd80      	pop	{r7, pc}
 8003984:	40023800 	.word	0x40023800
 8003988:	08006c34 	.word	0x08006c34

0800398c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	220f      	movs	r2, #15
 800399a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800399c:	4b12      	ldr	r3, [pc, #72]	@ (80039e8 <HAL_RCC_GetClockConfig+0x5c>)
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f003 0203 	and.w	r2, r3, #3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80039a8:	4b0f      	ldr	r3, [pc, #60]	@ (80039e8 <HAL_RCC_GetClockConfig+0x5c>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80039b4:	4b0c      	ldr	r3, [pc, #48]	@ (80039e8 <HAL_RCC_GetClockConfig+0x5c>)
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80039c0:	4b09      	ldr	r3, [pc, #36]	@ (80039e8 <HAL_RCC_GetClockConfig+0x5c>)
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	08db      	lsrs	r3, r3, #3
 80039c6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80039ce:	4b07      	ldr	r3, [pc, #28]	@ (80039ec <HAL_RCC_GetClockConfig+0x60>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 020f 	and.w	r2, r3, #15
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	601a      	str	r2, [r3, #0]
}
 80039da:	bf00      	nop
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	40023800 	.word	0x40023800
 80039ec:	40023c00 	.word	0x40023c00

080039f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b08c      	sub	sp, #48	@ 0x30
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039f8:	2300      	movs	r3, #0
 80039fa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 80039fc:	2300      	movs	r3, #0
 80039fe:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003a00:	2300      	movs	r3, #0
 8003a02:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003a04:	2300      	movs	r3, #0
 8003a06:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003a10:	2300      	movs	r3, #0
 8003a12:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003a14:	2300      	movs	r3, #0
 8003a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d010      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003a28:	4b6f      	ldr	r3, [pc, #444]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a2e:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a36:	496c      	ldr	r1, [pc, #432]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d101      	bne.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003a46:	2301      	movs	r3, #1
 8003a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d010      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003a56:	4b64      	ldr	r3, [pc, #400]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a5c:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a64:	4960      	ldr	r1, [pc, #384]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d101      	bne.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003a74:	2301      	movs	r3, #1
 8003a76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0304 	and.w	r3, r3, #4
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d017      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a84:	4b58      	ldr	r3, [pc, #352]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a8a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a92:	4955      	ldr	r1, [pc, #340]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003aa2:	d101      	bne.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d101      	bne.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0308 	and.w	r3, r3, #8
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d017      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ac0:	4b49      	ldr	r3, [pc, #292]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ac2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ac6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ace:	4946      	ldr	r1, [pc, #280]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ada:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ade:	d101      	bne.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d101      	bne.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003aec:	2301      	movs	r3, #1
 8003aee:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0320 	and.w	r3, r3, #32
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f000 808a 	beq.w	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003afe:	2300      	movs	r3, #0
 8003b00:	60bb      	str	r3, [r7, #8]
 8003b02:	4b39      	ldr	r3, [pc, #228]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b06:	4a38      	ldr	r2, [pc, #224]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b0e:	4b36      	ldr	r3, [pc, #216]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b16:	60bb      	str	r3, [r7, #8]
 8003b18:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003b1a:	4b34      	ldr	r3, [pc, #208]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a33      	ldr	r2, [pc, #204]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003b20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b24:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b26:	f7fe faf9 	bl	800211c <HAL_GetTick>
 8003b2a:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003b2c:	e008      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b2e:	f7fe faf5 	bl	800211c <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d901      	bls.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e278      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003b40:	4b2a      	ldr	r3, [pc, #168]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d0f0      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b4c:	4b26      	ldr	r3, [pc, #152]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b50:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b54:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b56:	6a3b      	ldr	r3, [r7, #32]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d02f      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b64:	6a3a      	ldr	r2, [r7, #32]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d028      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b6a:	4b1f      	ldr	r3, [pc, #124]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b72:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b74:	4b1e      	ldr	r3, [pc, #120]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003b76:	2201      	movs	r2, #1
 8003b78:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b7a:	4b1d      	ldr	r3, [pc, #116]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003b80:	4a19      	ldr	r2, [pc, #100]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b82:	6a3b      	ldr	r3, [r7, #32]
 8003b84:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003b86:	4b18      	ldr	r3, [pc, #96]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d114      	bne.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003b92:	f7fe fac3 	bl	800211c <HAL_GetTick>
 8003b96:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b98:	e00a      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b9a:	f7fe fabf 	bl	800211c <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d901      	bls.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e240      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bb0:	4b0d      	ldr	r3, [pc, #52]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003bb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bb4:	f003 0302 	and.w	r3, r3, #2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d0ee      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bc4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bc8:	d114      	bne.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003bca:	4b07      	ldr	r3, [pc, #28]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003bda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bde:	4902      	ldr	r1, [pc, #8]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	608b      	str	r3, [r1, #8]
 8003be4:	e00c      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003be6:	bf00      	nop
 8003be8:	40023800 	.word	0x40023800
 8003bec:	40007000 	.word	0x40007000
 8003bf0:	42470e40 	.word	0x42470e40
 8003bf4:	4b4a      	ldr	r3, [pc, #296]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	4a49      	ldr	r2, [pc, #292]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003bfa:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003bfe:	6093      	str	r3, [r2, #8]
 8003c00:	4b47      	ldr	r3, [pc, #284]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c02:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c0c:	4944      	ldr	r1, [pc, #272]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0310 	and.w	r3, r3, #16
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d004      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003c24:	4b3f      	ldr	r3, [pc, #252]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003c26:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00a      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003c34:	4b3a      	ldr	r3, [pc, #232]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c3a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c42:	4937      	ldr	r1, [pc, #220]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00a      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c56:	4b32      	ldr	r3, [pc, #200]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c5c:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c64:	492e      	ldr	r1, [pc, #184]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d011      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003c78:	4b29      	ldr	r3, [pc, #164]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c7e:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c86:	4926      	ldr	r1, [pc, #152]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c96:	d101      	bne.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00a      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003ca8:	4b1d      	ldr	r3, [pc, #116]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003caa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cae:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cb6:	491a      	ldr	r1, [pc, #104]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d011      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003cca:	4b15      	ldr	r3, [pc, #84]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ccc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cd0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cd8:	4911      	ldr	r1, [pc, #68]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ce4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ce8:	d101      	bne.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003cea:	2301      	movs	r3, #1
 8003cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003cee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d005      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cfc:	f040 80ff 	bne.w	8003efe <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d00:	4b09      	ldr	r3, [pc, #36]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d06:	f7fe fa09 	bl	800211c <HAL_GetTick>
 8003d0a:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d0c:	e00e      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d0e:	f7fe fa05 	bl	800211c <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d907      	bls.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e188      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003d20:	40023800 	.word	0x40023800
 8003d24:	424711e0 	.word	0x424711e0
 8003d28:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d2c:	4b7e      	ldr	r3, [pc, #504]	@ (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1ea      	bne.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d003      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d009      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d028      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d124      	bne.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003d60:	4b71      	ldr	r3, [pc, #452]	@ (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d66:	0c1b      	lsrs	r3, r3, #16
 8003d68:	f003 0303 	and.w	r3, r3, #3
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	005b      	lsls	r3, r3, #1
 8003d70:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d72:	4b6d      	ldr	r3, [pc, #436]	@ (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d78:	0e1b      	lsrs	r3, r3, #24
 8003d7a:	f003 030f 	and.w	r3, r3, #15
 8003d7e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	019b      	lsls	r3, r3, #6
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	085b      	lsrs	r3, r3, #1
 8003d90:	3b01      	subs	r3, #1
 8003d92:	041b      	lsls	r3, r3, #16
 8003d94:	431a      	orrs	r2, r3
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	061b      	lsls	r3, r3, #24
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	071b      	lsls	r3, r3, #28
 8003da2:	4961      	ldr	r1, [pc, #388]	@ (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0304 	and.w	r3, r3, #4
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d004      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003dbe:	d00a      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d035      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dd0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003dd4:	d130      	bne.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003dd6:	4b54      	ldr	r3, [pc, #336]	@ (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003dd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ddc:	0c1b      	lsrs	r3, r3, #16
 8003dde:	f003 0303 	and.w	r3, r3, #3
 8003de2:	3301      	adds	r3, #1
 8003de4:	005b      	lsls	r3, r3, #1
 8003de6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003de8:	4b4f      	ldr	r3, [pc, #316]	@ (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003dea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dee:	0f1b      	lsrs	r3, r3, #28
 8003df0:	f003 0307 	and.w	r3, r3, #7
 8003df4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	019b      	lsls	r3, r3, #6
 8003e00:	431a      	orrs	r2, r3
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	085b      	lsrs	r3, r3, #1
 8003e06:	3b01      	subs	r3, #1
 8003e08:	041b      	lsls	r3, r3, #16
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	061b      	lsls	r3, r3, #24
 8003e12:	431a      	orrs	r2, r3
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	071b      	lsls	r3, r3, #28
 8003e18:	4943      	ldr	r1, [pc, #268]	@ (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003e20:	4b41      	ldr	r3, [pc, #260]	@ (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e26:	f023 021f 	bic.w	r2, r3, #31
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	493d      	ldr	r1, [pc, #244]	@ (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d029      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e4c:	d124      	bne.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003e4e:	4b36      	ldr	r3, [pc, #216]	@ (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e54:	0c1b      	lsrs	r3, r3, #16
 8003e56:	f003 0303 	and.w	r3, r3, #3
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	005b      	lsls	r3, r3, #1
 8003e5e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e60:	4b31      	ldr	r3, [pc, #196]	@ (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e66:	0f1b      	lsrs	r3, r3, #28
 8003e68:	f003 0307 	and.w	r3, r3, #7
 8003e6c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685a      	ldr	r2, [r3, #4]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	019b      	lsls	r3, r3, #6
 8003e78:	431a      	orrs	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	085b      	lsrs	r3, r3, #1
 8003e80:	3b01      	subs	r3, #1
 8003e82:	041b      	lsls	r3, r3, #16
 8003e84:	431a      	orrs	r2, r3
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	061b      	lsls	r3, r3, #24
 8003e8a:	431a      	orrs	r2, r3
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	071b      	lsls	r3, r3, #28
 8003e90:	4925      	ldr	r1, [pc, #148]	@ (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d016      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	019b      	lsls	r3, r3, #6
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	085b      	lsrs	r3, r3, #1
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	041b      	lsls	r3, r3, #16
 8003eba:	431a      	orrs	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	061b      	lsls	r3, r3, #24
 8003ec2:	431a      	orrs	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	071b      	lsls	r3, r3, #28
 8003eca:	4917      	ldr	r1, [pc, #92]	@ (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ed2:	4b16      	ldr	r3, [pc, #88]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ed8:	f7fe f920 	bl	800211c <HAL_GetTick>
 8003edc:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ede:	e008      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ee0:	f7fe f91c 	bl	800211c <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e09f      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d0f0      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8003efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	f040 8095 	bne.w	8004030 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003f06:	4b0a      	ldr	r3, [pc, #40]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f0c:	f7fe f906 	bl	800211c <HAL_GetTick>
 8003f10:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f12:	e00f      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f14:	f7fe f902 	bl	800211c <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d908      	bls.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e085      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003f26:	bf00      	nop
 8003f28:	40023800 	.word	0x40023800
 8003f2c:	42470068 	.word	0x42470068
 8003f30:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f34:	4b41      	ldr	r3, [pc, #260]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f40:	d0e8      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0304 	and.w	r3, r3, #4
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d003      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d009      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d02b      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d127      	bne.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003f6a:	4b34      	ldr	r3, [pc, #208]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f70:	0c1b      	lsrs	r3, r3, #16
 8003f72:	f003 0303 	and.w	r3, r3, #3
 8003f76:	3301      	adds	r3, #1
 8003f78:	005b      	lsls	r3, r3, #1
 8003f7a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	699a      	ldr	r2, [r3, #24]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	69db      	ldr	r3, [r3, #28]
 8003f84:	019b      	lsls	r3, r3, #6
 8003f86:	431a      	orrs	r2, r3
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	085b      	lsrs	r3, r3, #1
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	041b      	lsls	r3, r3, #16
 8003f90:	431a      	orrs	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f96:	061b      	lsls	r3, r3, #24
 8003f98:	4928      	ldr	r1, [pc, #160]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003fa0:	4b26      	ldr	r3, [pc, #152]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003fa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fa6:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	021b      	lsls	r3, r3, #8
 8003fb2:	4922      	ldr	r1, [pc, #136]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d01d      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fce:	d118      	bne.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003fd0:	4b1a      	ldr	r3, [pc, #104]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fd6:	0e1b      	lsrs	r3, r3, #24
 8003fd8:	f003 030f 	and.w	r3, r3, #15
 8003fdc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	699a      	ldr	r2, [r3, #24]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	69db      	ldr	r3, [r3, #28]
 8003fe6:	019b      	lsls	r3, r3, #6
 8003fe8:	431a      	orrs	r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a1b      	ldr	r3, [r3, #32]
 8003fee:	085b      	lsrs	r3, r3, #1
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	041b      	lsls	r3, r3, #16
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	061b      	lsls	r3, r3, #24
 8003ffa:	4910      	ldr	r1, [pc, #64]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004002:	4b0f      	ldr	r3, [pc, #60]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8004004:	2201      	movs	r2, #1
 8004006:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004008:	f7fe f888 	bl	800211c <HAL_GetTick>
 800400c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800400e:	e008      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004010:	f7fe f884 	bl	800211c <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d901      	bls.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e007      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004022:	4b06      	ldr	r3, [pc, #24]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800402a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800402e:	d1ef      	bne.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3730      	adds	r7, #48	@ 0x30
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	40023800 	.word	0x40023800
 8004040:	42470070 	.word	0x42470070

08004044 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004044:	b480      	push	{r7}
 8004046:	b089      	sub	sp, #36	@ 0x24
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 800404c:	2300      	movs	r3, #0
 800404e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004050:	2300      	movs	r3, #0
 8004052:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004054:	2300      	movs	r3, #0
 8004056:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 8004058:	2300      	movs	r3, #0
 800405a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800405c:	2300      	movs	r3, #0
 800405e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004060:	2300      	movs	r3, #0
 8004062:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	3b01      	subs	r3, #1
 8004068:	2b07      	cmp	r3, #7
 800406a:	f200 8224 	bhi.w	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800406e:	a201      	add	r2, pc, #4	@ (adr r2, 8004074 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8004070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004074:	08004277 	.word	0x08004277
 8004078:	080043a1 	.word	0x080043a1
 800407c:	080044b7 	.word	0x080044b7
 8004080:	08004095 	.word	0x08004095
 8004084:	080044b7 	.word	0x080044b7
 8004088:	080044b7 	.word	0x080044b7
 800408c:	080044b7 	.word	0x080044b7
 8004090:	08004095 	.word	0x08004095
  {
    case RCC_PERIPHCLK_SAI1:
    case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 8004094:	4ba8      	ldr	r3, [pc, #672]	@ (8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004096:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800409a:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
 80040a2:	613b      	str	r3, [r7, #16]
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80040aa:	f000 80d6 	beq.w	800425a <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80040b4:	f200 80dd 	bhi.w	8004272 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80040be:	f000 809f 	beq.w	8004200 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80040c8:	f200 80d3 	bhi.w	8004272 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040d2:	d05b      	beq.n	800418c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040da:	f200 80ca 	bhi.w	8004272 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80040e4:	f000 80b6 	beq.w	8004254 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80040ee:	f200 80c0 	bhi.w	8004272 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80040f8:	f000 8082 	beq.w	8004200 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004102:	f200 80b6 	bhi.w	8004272 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d004      	beq.n	8004116 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004112:	d03b      	beq.n	800418c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
        default :
        {
          break;
 8004114:	e0ad      	b.n	8004272 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004116:	4b88      	ldr	r3, [pc, #544]	@ (8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d109      	bne.n	8004136 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 8004122:	4b85      	ldr	r3, [pc, #532]	@ (8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004124:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004128:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800412c:	4a83      	ldr	r2, [pc, #524]	@ (800433c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800412e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004132:	61bb      	str	r3, [r7, #24]
 8004134:	e008      	b.n	8004148 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 8004136:	4b80      	ldr	r3, [pc, #512]	@ (8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004138:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800413c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004140:	4a7f      	ldr	r2, [pc, #508]	@ (8004340 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004142:	fbb2 f3f3 	udiv	r3, r2, r3
 8004146:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8004148:	4b7b      	ldr	r3, [pc, #492]	@ (8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800414a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800414e:	0e1b      	lsrs	r3, r3, #24
 8004150:	f003 030f 	and.w	r3, r3, #15
 8004154:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U)) / (tmpreg1);
 8004156:	4b78      	ldr	r3, [pc, #480]	@ (8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004158:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800415c:	099b      	lsrs	r3, r3, #6
 800415e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004162:	69ba      	ldr	r2, [r7, #24]
 8004164:	fb03 f202 	mul.w	r2, r3, r2
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	fbb2 f3f3 	udiv	r3, r2, r3
 800416e:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8004170:	4b71      	ldr	r3, [pc, #452]	@ (8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004172:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004176:	0a1b      	lsrs	r3, r3, #8
 8004178:	f003 031f 	and.w	r3, r3, #31
 800417c:	3301      	adds	r3, #1
 800417e:	617b      	str	r3, [r7, #20]
          frequency = frequency / (tmpreg1);
 8004180:	69fa      	ldr	r2, [r7, #28]
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	fbb2 f3f3 	udiv	r3, r2, r3
 8004188:	61fb      	str	r3, [r7, #28]
          break;
 800418a:	e073      	b.n	8004274 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800418c:	4b6a      	ldr	r3, [pc, #424]	@ (8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d109      	bne.n	80041ac <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004198:	4b67      	ldr	r3, [pc, #412]	@ (8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800419a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800419e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041a2:	4a66      	ldr	r2, [pc, #408]	@ (800433c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80041a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a8:	61bb      	str	r3, [r7, #24]
 80041aa:	e008      	b.n	80041be <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 80041ac:	4b62      	ldr	r3, [pc, #392]	@ (8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80041ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041b6:	4a62      	ldr	r2, [pc, #392]	@ (8004340 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80041b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041bc:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 80041be:	4b5e      	ldr	r3, [pc, #376]	@ (8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80041c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041c4:	0e1b      	lsrs	r3, r3, #24
 80041c6:	f003 030f 	and.w	r3, r3, #15
 80041ca:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg1);
 80041cc:	4b5a      	ldr	r3, [pc, #360]	@ (8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80041ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041d2:	099b      	lsrs	r3, r3, #6
 80041d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041d8:	69ba      	ldr	r2, [r7, #24]
 80041da:	fb03 f202 	mul.w	r2, r3, r2
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e4:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 80041e6:	4b54      	ldr	r3, [pc, #336]	@ (8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80041e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80041ec:	f003 031f 	and.w	r3, r3, #31
 80041f0:	3301      	adds	r3, #1
 80041f2:	617b      	str	r3, [r7, #20]
          frequency = frequency / (tmpreg1);
 80041f4:	69fa      	ldr	r2, [r7, #28]
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041fc:	61fb      	str	r3, [r7, #28]
          break;
 80041fe:	e039      	b.n	8004274 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004200:	4b4d      	ldr	r3, [pc, #308]	@ (8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d108      	bne.n	800421e <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800420c:	4b4a      	ldr	r3, [pc, #296]	@ (8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004214:	4a49      	ldr	r2, [pc, #292]	@ (800433c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004216:	fbb2 f3f3 	udiv	r3, r2, r3
 800421a:	61bb      	str	r3, [r7, #24]
 800421c:	e007      	b.n	800422e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800421e:	4b46      	ldr	r3, [pc, #280]	@ (8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004226:	4a46      	ldr	r2, [pc, #280]	@ (8004340 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004228:	fbb2 f3f3 	udiv	r3, r2, r3
 800422c:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 800422e:	4b42      	ldr	r3, [pc, #264]	@ (8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	0f1b      	lsrs	r3, r3, #28
 8004234:	f003 0307 	and.w	r3, r3, #7
 8004238:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U)) / (tmpreg1);
 800423a:	4b3f      	ldr	r3, [pc, #252]	@ (8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	099b      	lsrs	r3, r3, #6
 8004240:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004244:	69ba      	ldr	r2, [r7, #24]
 8004246:	fb03 f202 	mul.w	r2, r3, r2
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004250:	61fb      	str	r3, [r7, #28]
          break;
 8004252:	e00f      	b.n	8004274 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 8004254:	4b3b      	ldr	r3, [pc, #236]	@ (8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8004256:	61fb      	str	r3, [r7, #28]
          break;
 8004258:	e00c      	b.n	8004274 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800425a:	4b37      	ldr	r3, [pc, #220]	@ (8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d102      	bne.n	800426c <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 8004266:	4b35      	ldr	r3, [pc, #212]	@ (800433c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004268:	61fb      	str	r3, [r7, #28]
          break;
 800426a:	e003      	b.n	8004274 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 800426c:	4b34      	ldr	r3, [pc, #208]	@ (8004340 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800426e:	61fb      	str	r3, [r7, #28]
          break;
 8004270:	e000      	b.n	8004274 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 8004272:	bf00      	nop
        }
      }
      break;
 8004274:	e120      	b.n	80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    }
    case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8004276:	4b30      	ldr	r3, [pc, #192]	@ (8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004278:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800427c:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8004280:	60fb      	str	r3, [r7, #12]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 8004288:	d079      	beq.n	800437e <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 8004290:	f200 8082 	bhi.w	8004398 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800429a:	d03c      	beq.n	8004316 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80042a2:	d879      	bhi.n	8004398 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d006      	beq.n	80042b8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80042b0:	d172      	bne.n	8004398 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80042b2:	4b24      	ldr	r3, [pc, #144]	@ (8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80042b4:	61fb      	str	r3, [r7, #28]
          break;
 80042b6:	e072      	b.n	800439e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
        case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80042b8:	4b1f      	ldr	r3, [pc, #124]	@ (8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042c4:	d109      	bne.n	80042da <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80042c6:	4b1c      	ldr	r3, [pc, #112]	@ (8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80042c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042d0:	4a1b      	ldr	r2, [pc, #108]	@ (8004340 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80042d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d6:	61bb      	str	r3, [r7, #24]
 80042d8:	e008      	b.n	80042ec <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80042da:	4b17      	ldr	r3, [pc, #92]	@ (8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80042dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042e4:	4a15      	ldr	r2, [pc, #84]	@ (800433c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80042e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ea:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80042ec:	4b12      	ldr	r3, [pc, #72]	@ (8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80042ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042f2:	099b      	lsrs	r3, r3, #6
 80042f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	fb02 f303 	mul.w	r3, r2, r3
 80042fe:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004300:	4b0d      	ldr	r3, [pc, #52]	@ (8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004302:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004306:	0f1b      	lsrs	r3, r3, #28
 8004308:	f003 0307 	and.w	r3, r3, #7
 800430c:	68ba      	ldr	r2, [r7, #8]
 800430e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004312:	61fb      	str	r3, [r7, #28]
          break;
 8004314:	e043      	b.n	800439e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
        case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004316:	4b08      	ldr	r3, [pc, #32]	@ (8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800431e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004322:	d111      	bne.n	8004348 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004324:	4b04      	ldr	r3, [pc, #16]	@ (8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800432c:	4a04      	ldr	r2, [pc, #16]	@ (8004340 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800432e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004332:	61bb      	str	r3, [r7, #24]
 8004334:	e010      	b.n	8004358 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8004336:	bf00      	nop
 8004338:	40023800 	.word	0x40023800
 800433c:	00f42400 	.word	0x00f42400
 8004340:	018cba80 	.word	0x018cba80
 8004344:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004348:	4b5f      	ldr	r3, [pc, #380]	@ (80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004350:	4a5e      	ldr	r2, [pc, #376]	@ (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8004352:	fbb2 f3f3 	udiv	r3, r2, r3
 8004356:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8004358:	4b5b      	ldr	r3, [pc, #364]	@ (80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	099b      	lsrs	r3, r3, #6
 800435e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	fb02 f303 	mul.w	r3, r2, r3
 8004368:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 800436a:	4b57      	ldr	r3, [pc, #348]	@ (80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	0f1b      	lsrs	r3, r3, #28
 8004370:	f003 0307 	and.w	r3, r3, #7
 8004374:	68ba      	ldr	r2, [r7, #8]
 8004376:	fbb2 f3f3 	udiv	r3, r2, r3
 800437a:	61fb      	str	r3, [r7, #28]
          break;
 800437c:	e00f      	b.n	800439e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
        case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800437e:	4b52      	ldr	r3, [pc, #328]	@ (80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004386:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800438a:	d102      	bne.n	8004392 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 800438c:	4b50      	ldr	r3, [pc, #320]	@ (80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 800438e:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8004390:	e005      	b.n	800439e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 8004392:	4b4e      	ldr	r3, [pc, #312]	@ (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8004394:	61fb      	str	r3, [r7, #28]
          break;
 8004396:	e002      	b.n	800439e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8004398:	2300      	movs	r3, #0
 800439a:	61fb      	str	r3, [r7, #28]
          break;
 800439c:	bf00      	nop
        }
      }
      break;
 800439e:	e08b      	b.n	80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    }
    case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 80043a0:	4b49      	ldr	r3, [pc, #292]	@ (80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80043a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043a6:	f003 53c0 	and.w	r3, r3, #402653184	@ 0x18000000
 80043aa:	60fb      	str	r3, [r7, #12]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80043b2:	d06f      	beq.n	8004494 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80043ba:	d878      	bhi.n	80044ae <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80043c2:	d03c      	beq.n	800443e <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80043ca:	d870      	bhi.n	80044ae <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d006      	beq.n	80043e0 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80043d8:	d169      	bne.n	80044ae <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80043da:	4b3e      	ldr	r3, [pc, #248]	@ (80044d4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>)
 80043dc:	61fb      	str	r3, [r7, #28]
          break;
 80043de:	e069      	b.n	80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
        case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80043e0:	4b39      	ldr	r3, [pc, #228]	@ (80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043ec:	d109      	bne.n	8004402 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80043ee:	4b36      	ldr	r3, [pc, #216]	@ (80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80043f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80043f8:	4a35      	ldr	r2, [pc, #212]	@ (80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 80043fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80043fe:	61bb      	str	r3, [r7, #24]
 8004400:	e008      	b.n	8004414 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004402:	4b31      	ldr	r3, [pc, #196]	@ (80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004404:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004408:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800440c:	4a2f      	ldr	r2, [pc, #188]	@ (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 800440e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004412:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004414:	4b2c      	ldr	r3, [pc, #176]	@ (80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004416:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800441a:	099b      	lsrs	r3, r3, #6
 800441c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	fb02 f303 	mul.w	r3, r2, r3
 8004426:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004428:	4b27      	ldr	r3, [pc, #156]	@ (80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800442a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800442e:	0f1b      	lsrs	r3, r3, #28
 8004430:	f003 0307 	and.w	r3, r3, #7
 8004434:	68ba      	ldr	r2, [r7, #8]
 8004436:	fbb2 f3f3 	udiv	r3, r2, r3
 800443a:	61fb      	str	r3, [r7, #28]
          break;
 800443c:	e03a      	b.n	80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
        case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800443e:	4b22      	ldr	r3, [pc, #136]	@ (80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004446:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800444a:	d108      	bne.n	800445e <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800444c:	4b1e      	ldr	r3, [pc, #120]	@ (80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004454:	4a1e      	ldr	r2, [pc, #120]	@ (80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8004456:	fbb2 f3f3 	udiv	r3, r2, r3
 800445a:	61bb      	str	r3, [r7, #24]
 800445c:	e007      	b.n	800446e <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800445e:	4b1a      	ldr	r3, [pc, #104]	@ (80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004466:	4a19      	ldr	r2, [pc, #100]	@ (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8004468:	fbb2 f3f3 	udiv	r3, r2, r3
 800446c:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 800446e:	4b16      	ldr	r3, [pc, #88]	@ (80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	099b      	lsrs	r3, r3, #6
 8004474:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	fb02 f303 	mul.w	r3, r2, r3
 800447e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8004480:	4b11      	ldr	r3, [pc, #68]	@ (80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	0f1b      	lsrs	r3, r3, #28
 8004486:	f003 0307 	and.w	r3, r3, #7
 800448a:	68ba      	ldr	r2, [r7, #8]
 800448c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004490:	61fb      	str	r3, [r7, #28]
          break;
 8004492:	e00f      	b.n	80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
        case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004494:	4b0c      	ldr	r3, [pc, #48]	@ (80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800449c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044a0:	d102      	bne.n	80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 80044a2:	4b0b      	ldr	r3, [pc, #44]	@ (80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 80044a4:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80044a6:	e005      	b.n	80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 80044a8:	4b08      	ldr	r3, [pc, #32]	@ (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80044aa:	61fb      	str	r3, [r7, #28]
          break;
 80044ac:	e002      	b.n	80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80044ae:	2300      	movs	r3, #0
 80044b0:	61fb      	str	r3, [r7, #28]
          break;
 80044b2:	bf00      	nop
        }
      }
      break;
 80044b4:	e000      	b.n	80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    }
    default:
    {
      break;
 80044b6:	bf00      	nop
    }
  }
  return frequency;
 80044b8:	69fb      	ldr	r3, [r7, #28]
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3724      	adds	r7, #36	@ 0x24
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	40023800 	.word	0x40023800
 80044cc:	00f42400 	.word	0x00f42400
 80044d0:	018cba80 	.word	0x018cba80
 80044d4:	00bb8000 	.word	0x00bb8000

080044d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044dc:	b0a6      	sub	sp, #152	@ 0x98
 80044de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80044e0:	2300      	movs	r3, #0
 80044e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80044e6:	2300      	movs	r3, #0
 80044e8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80044ec:	2300      	movs	r3, #0
 80044ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80044f2:	2300      	movs	r3, #0
 80044f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80044f8:	2300      	movs	r3, #0
 80044fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044fe:	4bc8      	ldr	r3, [pc, #800]	@ (8004820 <HAL_RCC_GetSysClockFreq+0x348>)
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f003 030c 	and.w	r3, r3, #12
 8004506:	2b0c      	cmp	r3, #12
 8004508:	f200 817e 	bhi.w	8004808 <HAL_RCC_GetSysClockFreq+0x330>
 800450c:	a201      	add	r2, pc, #4	@ (adr r2, 8004514 <HAL_RCC_GetSysClockFreq+0x3c>)
 800450e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004512:	bf00      	nop
 8004514:	08004549 	.word	0x08004549
 8004518:	08004809 	.word	0x08004809
 800451c:	08004809 	.word	0x08004809
 8004520:	08004809 	.word	0x08004809
 8004524:	08004551 	.word	0x08004551
 8004528:	08004809 	.word	0x08004809
 800452c:	08004809 	.word	0x08004809
 8004530:	08004809 	.word	0x08004809
 8004534:	08004559 	.word	0x08004559
 8004538:	08004809 	.word	0x08004809
 800453c:	08004809 	.word	0x08004809
 8004540:	08004809 	.word	0x08004809
 8004544:	080046c3 	.word	0x080046c3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004548:	4bb6      	ldr	r3, [pc, #728]	@ (8004824 <HAL_RCC_GetSysClockFreq+0x34c>)
 800454a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800454e:	e15f      	b.n	8004810 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004550:	4bb5      	ldr	r3, [pc, #724]	@ (8004828 <HAL_RCC_GetSysClockFreq+0x350>)
 8004552:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004556:	e15b      	b.n	8004810 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004558:	4bb1      	ldr	r3, [pc, #708]	@ (8004820 <HAL_RCC_GetSysClockFreq+0x348>)
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004560:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004564:	4bae      	ldr	r3, [pc, #696]	@ (8004820 <HAL_RCC_GetSysClockFreq+0x348>)
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d031      	beq.n	80045d4 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004570:	4bab      	ldr	r3, [pc, #684]	@ (8004820 <HAL_RCC_GetSysClockFreq+0x348>)
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	099b      	lsrs	r3, r3, #6
 8004576:	2200      	movs	r2, #0
 8004578:	66bb      	str	r3, [r7, #104]	@ 0x68
 800457a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800457c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800457e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004582:	663b      	str	r3, [r7, #96]	@ 0x60
 8004584:	2300      	movs	r3, #0
 8004586:	667b      	str	r3, [r7, #100]	@ 0x64
 8004588:	4ba7      	ldr	r3, [pc, #668]	@ (8004828 <HAL_RCC_GetSysClockFreq+0x350>)
 800458a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800458e:	462a      	mov	r2, r5
 8004590:	fb03 f202 	mul.w	r2, r3, r2
 8004594:	2300      	movs	r3, #0
 8004596:	4621      	mov	r1, r4
 8004598:	fb01 f303 	mul.w	r3, r1, r3
 800459c:	4413      	add	r3, r2
 800459e:	4aa2      	ldr	r2, [pc, #648]	@ (8004828 <HAL_RCC_GetSysClockFreq+0x350>)
 80045a0:	4621      	mov	r1, r4
 80045a2:	fba1 1202 	umull	r1, r2, r1, r2
 80045a6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80045a8:	460a      	mov	r2, r1
 80045aa:	67ba      	str	r2, [r7, #120]	@ 0x78
 80045ac:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80045ae:	4413      	add	r3, r2
 80045b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80045b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045b6:	2200      	movs	r2, #0
 80045b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80045ba:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80045bc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80045c0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80045c4:	f7fc f9aa 	bl	800091c <__aeabi_uldivmod>
 80045c8:	4602      	mov	r2, r0
 80045ca:	460b      	mov	r3, r1
 80045cc:	4613      	mov	r3, r2
 80045ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80045d2:	e064      	b.n	800469e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045d4:	4b92      	ldr	r3, [pc, #584]	@ (8004820 <HAL_RCC_GetSysClockFreq+0x348>)
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	099b      	lsrs	r3, r3, #6
 80045da:	2200      	movs	r2, #0
 80045dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80045de:	657a      	str	r2, [r7, #84]	@ 0x54
 80045e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045e8:	2300      	movs	r3, #0
 80045ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045ec:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80045f0:	4622      	mov	r2, r4
 80045f2:	462b      	mov	r3, r5
 80045f4:	f04f 0000 	mov.w	r0, #0
 80045f8:	f04f 0100 	mov.w	r1, #0
 80045fc:	0159      	lsls	r1, r3, #5
 80045fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004602:	0150      	lsls	r0, r2, #5
 8004604:	4602      	mov	r2, r0
 8004606:	460b      	mov	r3, r1
 8004608:	4621      	mov	r1, r4
 800460a:	1a51      	subs	r1, r2, r1
 800460c:	6139      	str	r1, [r7, #16]
 800460e:	4629      	mov	r1, r5
 8004610:	eb63 0301 	sbc.w	r3, r3, r1
 8004614:	617b      	str	r3, [r7, #20]
 8004616:	f04f 0200 	mov.w	r2, #0
 800461a:	f04f 0300 	mov.w	r3, #0
 800461e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004622:	4659      	mov	r1, fp
 8004624:	018b      	lsls	r3, r1, #6
 8004626:	4651      	mov	r1, sl
 8004628:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800462c:	4651      	mov	r1, sl
 800462e:	018a      	lsls	r2, r1, #6
 8004630:	4651      	mov	r1, sl
 8004632:	ebb2 0801 	subs.w	r8, r2, r1
 8004636:	4659      	mov	r1, fp
 8004638:	eb63 0901 	sbc.w	r9, r3, r1
 800463c:	f04f 0200 	mov.w	r2, #0
 8004640:	f04f 0300 	mov.w	r3, #0
 8004644:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004648:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800464c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004650:	4690      	mov	r8, r2
 8004652:	4699      	mov	r9, r3
 8004654:	4623      	mov	r3, r4
 8004656:	eb18 0303 	adds.w	r3, r8, r3
 800465a:	60bb      	str	r3, [r7, #8]
 800465c:	462b      	mov	r3, r5
 800465e:	eb49 0303 	adc.w	r3, r9, r3
 8004662:	60fb      	str	r3, [r7, #12]
 8004664:	f04f 0200 	mov.w	r2, #0
 8004668:	f04f 0300 	mov.w	r3, #0
 800466c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004670:	4629      	mov	r1, r5
 8004672:	028b      	lsls	r3, r1, #10
 8004674:	4621      	mov	r1, r4
 8004676:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800467a:	4621      	mov	r1, r4
 800467c:	028a      	lsls	r2, r1, #10
 800467e:	4610      	mov	r0, r2
 8004680:	4619      	mov	r1, r3
 8004682:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004686:	2200      	movs	r2, #0
 8004688:	643b      	str	r3, [r7, #64]	@ 0x40
 800468a:	647a      	str	r2, [r7, #68]	@ 0x44
 800468c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004690:	f7fc f944 	bl	800091c <__aeabi_uldivmod>
 8004694:	4602      	mov	r2, r0
 8004696:	460b      	mov	r3, r1
 8004698:	4613      	mov	r3, r2
 800469a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800469e:	4b60      	ldr	r3, [pc, #384]	@ (8004820 <HAL_RCC_GetSysClockFreq+0x348>)
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	0c1b      	lsrs	r3, r3, #16
 80046a4:	f003 0303 	and.w	r3, r3, #3
 80046a8:	3301      	adds	r3, #1
 80046aa:	005b      	lsls	r3, r3, #1
 80046ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 80046b0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80046b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80046b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80046c0:	e0a6      	b.n	8004810 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046c2:	4b57      	ldr	r3, [pc, #348]	@ (8004820 <HAL_RCC_GetSysClockFreq+0x348>)
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80046ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046ce:	4b54      	ldr	r3, [pc, #336]	@ (8004820 <HAL_RCC_GetSysClockFreq+0x348>)
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d02a      	beq.n	8004730 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046da:	4b51      	ldr	r3, [pc, #324]	@ (8004820 <HAL_RCC_GetSysClockFreq+0x348>)
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	099b      	lsrs	r3, r3, #6
 80046e0:	2200      	movs	r2, #0
 80046e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80046e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80046e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046e8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80046ec:	2100      	movs	r1, #0
 80046ee:	4b4e      	ldr	r3, [pc, #312]	@ (8004828 <HAL_RCC_GetSysClockFreq+0x350>)
 80046f0:	fb03 f201 	mul.w	r2, r3, r1
 80046f4:	2300      	movs	r3, #0
 80046f6:	fb00 f303 	mul.w	r3, r0, r3
 80046fa:	4413      	add	r3, r2
 80046fc:	4a4a      	ldr	r2, [pc, #296]	@ (8004828 <HAL_RCC_GetSysClockFreq+0x350>)
 80046fe:	fba0 1202 	umull	r1, r2, r0, r2
 8004702:	677a      	str	r2, [r7, #116]	@ 0x74
 8004704:	460a      	mov	r2, r1
 8004706:	673a      	str	r2, [r7, #112]	@ 0x70
 8004708:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800470a:	4413      	add	r3, r2
 800470c:	677b      	str	r3, [r7, #116]	@ 0x74
 800470e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004712:	2200      	movs	r2, #0
 8004714:	633b      	str	r3, [r7, #48]	@ 0x30
 8004716:	637a      	str	r2, [r7, #52]	@ 0x34
 8004718:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800471c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8004720:	f7fc f8fc 	bl	800091c <__aeabi_uldivmod>
 8004724:	4602      	mov	r2, r0
 8004726:	460b      	mov	r3, r1
 8004728:	4613      	mov	r3, r2
 800472a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800472e:	e05b      	b.n	80047e8 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004730:	4b3b      	ldr	r3, [pc, #236]	@ (8004820 <HAL_RCC_GetSysClockFreq+0x348>)
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	099b      	lsrs	r3, r3, #6
 8004736:	2200      	movs	r2, #0
 8004738:	62bb      	str	r3, [r7, #40]	@ 0x28
 800473a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800473c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800473e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004742:	623b      	str	r3, [r7, #32]
 8004744:	2300      	movs	r3, #0
 8004746:	627b      	str	r3, [r7, #36]	@ 0x24
 8004748:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800474c:	4642      	mov	r2, r8
 800474e:	464b      	mov	r3, r9
 8004750:	f04f 0000 	mov.w	r0, #0
 8004754:	f04f 0100 	mov.w	r1, #0
 8004758:	0159      	lsls	r1, r3, #5
 800475a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800475e:	0150      	lsls	r0, r2, #5
 8004760:	4602      	mov	r2, r0
 8004762:	460b      	mov	r3, r1
 8004764:	4641      	mov	r1, r8
 8004766:	ebb2 0a01 	subs.w	sl, r2, r1
 800476a:	4649      	mov	r1, r9
 800476c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004770:	f04f 0200 	mov.w	r2, #0
 8004774:	f04f 0300 	mov.w	r3, #0
 8004778:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800477c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004780:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004784:	ebb2 040a 	subs.w	r4, r2, sl
 8004788:	eb63 050b 	sbc.w	r5, r3, fp
 800478c:	f04f 0200 	mov.w	r2, #0
 8004790:	f04f 0300 	mov.w	r3, #0
 8004794:	00eb      	lsls	r3, r5, #3
 8004796:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800479a:	00e2      	lsls	r2, r4, #3
 800479c:	4614      	mov	r4, r2
 800479e:	461d      	mov	r5, r3
 80047a0:	4643      	mov	r3, r8
 80047a2:	18e3      	adds	r3, r4, r3
 80047a4:	603b      	str	r3, [r7, #0]
 80047a6:	464b      	mov	r3, r9
 80047a8:	eb45 0303 	adc.w	r3, r5, r3
 80047ac:	607b      	str	r3, [r7, #4]
 80047ae:	f04f 0200 	mov.w	r2, #0
 80047b2:	f04f 0300 	mov.w	r3, #0
 80047b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047ba:	4629      	mov	r1, r5
 80047bc:	028b      	lsls	r3, r1, #10
 80047be:	4621      	mov	r1, r4
 80047c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047c4:	4621      	mov	r1, r4
 80047c6:	028a      	lsls	r2, r1, #10
 80047c8:	4610      	mov	r0, r2
 80047ca:	4619      	mov	r1, r3
 80047cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047d0:	2200      	movs	r2, #0
 80047d2:	61bb      	str	r3, [r7, #24]
 80047d4:	61fa      	str	r2, [r7, #28]
 80047d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047da:	f7fc f89f 	bl	800091c <__aeabi_uldivmod>
 80047de:	4602      	mov	r2, r0
 80047e0:	460b      	mov	r3, r1
 80047e2:	4613      	mov	r3, r2
 80047e4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80047e8:	4b0d      	ldr	r3, [pc, #52]	@ (8004820 <HAL_RCC_GetSysClockFreq+0x348>)
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	0f1b      	lsrs	r3, r3, #28
 80047ee:	f003 0307 	and.w	r3, r3, #7
 80047f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 80047f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80047fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80047fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004802:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004806:	e003      	b.n	8004810 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004808:	4b06      	ldr	r3, [pc, #24]	@ (8004824 <HAL_RCC_GetSysClockFreq+0x34c>)
 800480a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800480e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004810:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8004814:	4618      	mov	r0, r3
 8004816:	3798      	adds	r7, #152	@ 0x98
 8004818:	46bd      	mov	sp, r7
 800481a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800481e:	bf00      	nop
 8004820:	40023800 	.word	0x40023800
 8004824:	00f42400 	.word	0x00f42400
 8004828:	018cba80 	.word	0x018cba80

0800482c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b086      	sub	sp, #24
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d101      	bne.n	800483e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e28d      	b.n	8004d5a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	2b00      	cmp	r3, #0
 8004848:	f000 8083 	beq.w	8004952 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800484c:	4b94      	ldr	r3, [pc, #592]	@ (8004aa0 <HAL_RCC_OscConfig+0x274>)
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f003 030c 	and.w	r3, r3, #12
 8004854:	2b04      	cmp	r3, #4
 8004856:	d019      	beq.n	800488c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004858:	4b91      	ldr	r3, [pc, #580]	@ (8004aa0 <HAL_RCC_OscConfig+0x274>)
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f003 030c 	and.w	r3, r3, #12
        || \
 8004860:	2b08      	cmp	r3, #8
 8004862:	d106      	bne.n	8004872 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004864:	4b8e      	ldr	r3, [pc, #568]	@ (8004aa0 <HAL_RCC_OscConfig+0x274>)
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800486c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004870:	d00c      	beq.n	800488c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004872:	4b8b      	ldr	r3, [pc, #556]	@ (8004aa0 <HAL_RCC_OscConfig+0x274>)
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800487a:	2b0c      	cmp	r3, #12
 800487c:	d112      	bne.n	80048a4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800487e:	4b88      	ldr	r3, [pc, #544]	@ (8004aa0 <HAL_RCC_OscConfig+0x274>)
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004886:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800488a:	d10b      	bne.n	80048a4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800488c:	4b84      	ldr	r3, [pc, #528]	@ (8004aa0 <HAL_RCC_OscConfig+0x274>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d05b      	beq.n	8004950 <HAL_RCC_OscConfig+0x124>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d157      	bne.n	8004950 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e25a      	b.n	8004d5a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048ac:	d106      	bne.n	80048bc <HAL_RCC_OscConfig+0x90>
 80048ae:	4b7c      	ldr	r3, [pc, #496]	@ (8004aa0 <HAL_RCC_OscConfig+0x274>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a7b      	ldr	r2, [pc, #492]	@ (8004aa0 <HAL_RCC_OscConfig+0x274>)
 80048b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048b8:	6013      	str	r3, [r2, #0]
 80048ba:	e01d      	b.n	80048f8 <HAL_RCC_OscConfig+0xcc>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80048c4:	d10c      	bne.n	80048e0 <HAL_RCC_OscConfig+0xb4>
 80048c6:	4b76      	ldr	r3, [pc, #472]	@ (8004aa0 <HAL_RCC_OscConfig+0x274>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a75      	ldr	r2, [pc, #468]	@ (8004aa0 <HAL_RCC_OscConfig+0x274>)
 80048cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80048d0:	6013      	str	r3, [r2, #0]
 80048d2:	4b73      	ldr	r3, [pc, #460]	@ (8004aa0 <HAL_RCC_OscConfig+0x274>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a72      	ldr	r2, [pc, #456]	@ (8004aa0 <HAL_RCC_OscConfig+0x274>)
 80048d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048dc:	6013      	str	r3, [r2, #0]
 80048de:	e00b      	b.n	80048f8 <HAL_RCC_OscConfig+0xcc>
 80048e0:	4b6f      	ldr	r3, [pc, #444]	@ (8004aa0 <HAL_RCC_OscConfig+0x274>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a6e      	ldr	r2, [pc, #440]	@ (8004aa0 <HAL_RCC_OscConfig+0x274>)
 80048e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048ea:	6013      	str	r3, [r2, #0]
 80048ec:	4b6c      	ldr	r3, [pc, #432]	@ (8004aa0 <HAL_RCC_OscConfig+0x274>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a6b      	ldr	r2, [pc, #428]	@ (8004aa0 <HAL_RCC_OscConfig+0x274>)
 80048f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80048f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d013      	beq.n	8004928 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004900:	f7fd fc0c 	bl	800211c <HAL_GetTick>
 8004904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004906:	e008      	b.n	800491a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004908:	f7fd fc08 	bl	800211c <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	2b64      	cmp	r3, #100	@ 0x64
 8004914:	d901      	bls.n	800491a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e21f      	b.n	8004d5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800491a:	4b61      	ldr	r3, [pc, #388]	@ (8004aa0 <HAL_RCC_OscConfig+0x274>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d0f0      	beq.n	8004908 <HAL_RCC_OscConfig+0xdc>
 8004926:	e014      	b.n	8004952 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004928:	f7fd fbf8 	bl	800211c <HAL_GetTick>
 800492c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800492e:	e008      	b.n	8004942 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004930:	f7fd fbf4 	bl	800211c <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	2b64      	cmp	r3, #100	@ 0x64
 800493c:	d901      	bls.n	8004942 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e20b      	b.n	8004d5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004942:	4b57      	ldr	r3, [pc, #348]	@ (8004aa0 <HAL_RCC_OscConfig+0x274>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1f0      	bne.n	8004930 <HAL_RCC_OscConfig+0x104>
 800494e:	e000      	b.n	8004952 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004950:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b00      	cmp	r3, #0
 800495c:	d06f      	beq.n	8004a3e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800495e:	4b50      	ldr	r3, [pc, #320]	@ (8004aa0 <HAL_RCC_OscConfig+0x274>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f003 030c 	and.w	r3, r3, #12
 8004966:	2b00      	cmp	r3, #0
 8004968:	d017      	beq.n	800499a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800496a:	4b4d      	ldr	r3, [pc, #308]	@ (8004aa0 <HAL_RCC_OscConfig+0x274>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f003 030c 	and.w	r3, r3, #12
        || \
 8004972:	2b08      	cmp	r3, #8
 8004974:	d105      	bne.n	8004982 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004976:	4b4a      	ldr	r3, [pc, #296]	@ (8004aa0 <HAL_RCC_OscConfig+0x274>)
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00b      	beq.n	800499a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004982:	4b47      	ldr	r3, [pc, #284]	@ (8004aa0 <HAL_RCC_OscConfig+0x274>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800498a:	2b0c      	cmp	r3, #12
 800498c:	d11c      	bne.n	80049c8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800498e:	4b44      	ldr	r3, [pc, #272]	@ (8004aa0 <HAL_RCC_OscConfig+0x274>)
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d116      	bne.n	80049c8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800499a:	4b41      	ldr	r3, [pc, #260]	@ (8004aa0 <HAL_RCC_OscConfig+0x274>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d005      	beq.n	80049b2 <HAL_RCC_OscConfig+0x186>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d001      	beq.n	80049b2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e1d3      	b.n	8004d5a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049b2:	4b3b      	ldr	r3, [pc, #236]	@ (8004aa0 <HAL_RCC_OscConfig+0x274>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	00db      	lsls	r3, r3, #3
 80049c0:	4937      	ldr	r1, [pc, #220]	@ (8004aa0 <HAL_RCC_OscConfig+0x274>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049c6:	e03a      	b.n	8004a3e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d020      	beq.n	8004a12 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049d0:	4b34      	ldr	r3, [pc, #208]	@ (8004aa4 <HAL_RCC_OscConfig+0x278>)
 80049d2:	2201      	movs	r2, #1
 80049d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d6:	f7fd fba1 	bl	800211c <HAL_GetTick>
 80049da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049dc:	e008      	b.n	80049f0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049de:	f7fd fb9d 	bl	800211c <HAL_GetTick>
 80049e2:	4602      	mov	r2, r0
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d901      	bls.n	80049f0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e1b4      	b.n	8004d5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049f0:	4b2b      	ldr	r3, [pc, #172]	@ (8004aa0 <HAL_RCC_OscConfig+0x274>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0302 	and.w	r3, r3, #2
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d0f0      	beq.n	80049de <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049fc:	4b28      	ldr	r3, [pc, #160]	@ (8004aa0 <HAL_RCC_OscConfig+0x274>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	00db      	lsls	r3, r3, #3
 8004a0a:	4925      	ldr	r1, [pc, #148]	@ (8004aa0 <HAL_RCC_OscConfig+0x274>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	600b      	str	r3, [r1, #0]
 8004a10:	e015      	b.n	8004a3e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a12:	4b24      	ldr	r3, [pc, #144]	@ (8004aa4 <HAL_RCC_OscConfig+0x278>)
 8004a14:	2200      	movs	r2, #0
 8004a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a18:	f7fd fb80 	bl	800211c <HAL_GetTick>
 8004a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a1e:	e008      	b.n	8004a32 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a20:	f7fd fb7c 	bl	800211c <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d901      	bls.n	8004a32 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e193      	b.n	8004d5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a32:	4b1b      	ldr	r3, [pc, #108]	@ (8004aa0 <HAL_RCC_OscConfig+0x274>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1f0      	bne.n	8004a20 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0308 	and.w	r3, r3, #8
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d036      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d016      	beq.n	8004a80 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a52:	4b15      	ldr	r3, [pc, #84]	@ (8004aa8 <HAL_RCC_OscConfig+0x27c>)
 8004a54:	2201      	movs	r2, #1
 8004a56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a58:	f7fd fb60 	bl	800211c <HAL_GetTick>
 8004a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a5e:	e008      	b.n	8004a72 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a60:	f7fd fb5c 	bl	800211c <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d901      	bls.n	8004a72 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e173      	b.n	8004d5a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a72:	4b0b      	ldr	r3, [pc, #44]	@ (8004aa0 <HAL_RCC_OscConfig+0x274>)
 8004a74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a76:	f003 0302 	and.w	r3, r3, #2
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d0f0      	beq.n	8004a60 <HAL_RCC_OscConfig+0x234>
 8004a7e:	e01b      	b.n	8004ab8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a80:	4b09      	ldr	r3, [pc, #36]	@ (8004aa8 <HAL_RCC_OscConfig+0x27c>)
 8004a82:	2200      	movs	r2, #0
 8004a84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a86:	f7fd fb49 	bl	800211c <HAL_GetTick>
 8004a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a8c:	e00e      	b.n	8004aac <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a8e:	f7fd fb45 	bl	800211c <HAL_GetTick>
 8004a92:	4602      	mov	r2, r0
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d907      	bls.n	8004aac <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e15c      	b.n	8004d5a <HAL_RCC_OscConfig+0x52e>
 8004aa0:	40023800 	.word	0x40023800
 8004aa4:	42470000 	.word	0x42470000
 8004aa8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004aac:	4b8a      	ldr	r3, [pc, #552]	@ (8004cd8 <HAL_RCC_OscConfig+0x4ac>)
 8004aae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ab0:	f003 0302 	and.w	r3, r3, #2
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1ea      	bne.n	8004a8e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0304 	and.w	r3, r3, #4
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f000 8097 	beq.w	8004bf4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004aca:	4b83      	ldr	r3, [pc, #524]	@ (8004cd8 <HAL_RCC_OscConfig+0x4ac>)
 8004acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d10f      	bne.n	8004af6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	60bb      	str	r3, [r7, #8]
 8004ada:	4b7f      	ldr	r3, [pc, #508]	@ (8004cd8 <HAL_RCC_OscConfig+0x4ac>)
 8004adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ade:	4a7e      	ldr	r2, [pc, #504]	@ (8004cd8 <HAL_RCC_OscConfig+0x4ac>)
 8004ae0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ae4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ae6:	4b7c      	ldr	r3, [pc, #496]	@ (8004cd8 <HAL_RCC_OscConfig+0x4ac>)
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004aee:	60bb      	str	r3, [r7, #8]
 8004af0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004af2:	2301      	movs	r3, #1
 8004af4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004af6:	4b79      	ldr	r3, [pc, #484]	@ (8004cdc <HAL_RCC_OscConfig+0x4b0>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d118      	bne.n	8004b34 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b02:	4b76      	ldr	r3, [pc, #472]	@ (8004cdc <HAL_RCC_OscConfig+0x4b0>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a75      	ldr	r2, [pc, #468]	@ (8004cdc <HAL_RCC_OscConfig+0x4b0>)
 8004b08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b0e:	f7fd fb05 	bl	800211c <HAL_GetTick>
 8004b12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b14:	e008      	b.n	8004b28 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b16:	f7fd fb01 	bl	800211c <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d901      	bls.n	8004b28 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e118      	b.n	8004d5a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b28:	4b6c      	ldr	r3, [pc, #432]	@ (8004cdc <HAL_RCC_OscConfig+0x4b0>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d0f0      	beq.n	8004b16 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d106      	bne.n	8004b4a <HAL_RCC_OscConfig+0x31e>
 8004b3c:	4b66      	ldr	r3, [pc, #408]	@ (8004cd8 <HAL_RCC_OscConfig+0x4ac>)
 8004b3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b40:	4a65      	ldr	r2, [pc, #404]	@ (8004cd8 <HAL_RCC_OscConfig+0x4ac>)
 8004b42:	f043 0301 	orr.w	r3, r3, #1
 8004b46:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b48:	e01c      	b.n	8004b84 <HAL_RCC_OscConfig+0x358>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	2b05      	cmp	r3, #5
 8004b50:	d10c      	bne.n	8004b6c <HAL_RCC_OscConfig+0x340>
 8004b52:	4b61      	ldr	r3, [pc, #388]	@ (8004cd8 <HAL_RCC_OscConfig+0x4ac>)
 8004b54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b56:	4a60      	ldr	r2, [pc, #384]	@ (8004cd8 <HAL_RCC_OscConfig+0x4ac>)
 8004b58:	f043 0304 	orr.w	r3, r3, #4
 8004b5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b5e:	4b5e      	ldr	r3, [pc, #376]	@ (8004cd8 <HAL_RCC_OscConfig+0x4ac>)
 8004b60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b62:	4a5d      	ldr	r2, [pc, #372]	@ (8004cd8 <HAL_RCC_OscConfig+0x4ac>)
 8004b64:	f043 0301 	orr.w	r3, r3, #1
 8004b68:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b6a:	e00b      	b.n	8004b84 <HAL_RCC_OscConfig+0x358>
 8004b6c:	4b5a      	ldr	r3, [pc, #360]	@ (8004cd8 <HAL_RCC_OscConfig+0x4ac>)
 8004b6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b70:	4a59      	ldr	r2, [pc, #356]	@ (8004cd8 <HAL_RCC_OscConfig+0x4ac>)
 8004b72:	f023 0301 	bic.w	r3, r3, #1
 8004b76:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b78:	4b57      	ldr	r3, [pc, #348]	@ (8004cd8 <HAL_RCC_OscConfig+0x4ac>)
 8004b7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b7c:	4a56      	ldr	r2, [pc, #344]	@ (8004cd8 <HAL_RCC_OscConfig+0x4ac>)
 8004b7e:	f023 0304 	bic.w	r3, r3, #4
 8004b82:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d015      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b8c:	f7fd fac6 	bl	800211c <HAL_GetTick>
 8004b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b92:	e00a      	b.n	8004baa <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b94:	f7fd fac2 	bl	800211c <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d901      	bls.n	8004baa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e0d7      	b.n	8004d5a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004baa:	4b4b      	ldr	r3, [pc, #300]	@ (8004cd8 <HAL_RCC_OscConfig+0x4ac>)
 8004bac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bae:	f003 0302 	and.w	r3, r3, #2
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d0ee      	beq.n	8004b94 <HAL_RCC_OscConfig+0x368>
 8004bb6:	e014      	b.n	8004be2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bb8:	f7fd fab0 	bl	800211c <HAL_GetTick>
 8004bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bbe:	e00a      	b.n	8004bd6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bc0:	f7fd faac 	bl	800211c <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d901      	bls.n	8004bd6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e0c1      	b.n	8004d5a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bd6:	4b40      	ldr	r3, [pc, #256]	@ (8004cd8 <HAL_RCC_OscConfig+0x4ac>)
 8004bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d1ee      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004be2:	7dfb      	ldrb	r3, [r7, #23]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d105      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004be8:	4b3b      	ldr	r3, [pc, #236]	@ (8004cd8 <HAL_RCC_OscConfig+0x4ac>)
 8004bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bec:	4a3a      	ldr	r2, [pc, #232]	@ (8004cd8 <HAL_RCC_OscConfig+0x4ac>)
 8004bee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bf2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	f000 80ad 	beq.w	8004d58 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004bfe:	4b36      	ldr	r3, [pc, #216]	@ (8004cd8 <HAL_RCC_OscConfig+0x4ac>)
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f003 030c 	and.w	r3, r3, #12
 8004c06:	2b08      	cmp	r3, #8
 8004c08:	d060      	beq.n	8004ccc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d145      	bne.n	8004c9e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c12:	4b33      	ldr	r3, [pc, #204]	@ (8004ce0 <HAL_RCC_OscConfig+0x4b4>)
 8004c14:	2200      	movs	r2, #0
 8004c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c18:	f7fd fa80 	bl	800211c <HAL_GetTick>
 8004c1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c1e:	e008      	b.n	8004c32 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c20:	f7fd fa7c 	bl	800211c <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e093      	b.n	8004d5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c32:	4b29      	ldr	r3, [pc, #164]	@ (8004cd8 <HAL_RCC_OscConfig+0x4ac>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1f0      	bne.n	8004c20 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	69da      	ldr	r2, [r3, #28]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	431a      	orrs	r2, r3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c4c:	019b      	lsls	r3, r3, #6
 8004c4e:	431a      	orrs	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c54:	085b      	lsrs	r3, r3, #1
 8004c56:	3b01      	subs	r3, #1
 8004c58:	041b      	lsls	r3, r3, #16
 8004c5a:	431a      	orrs	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c60:	061b      	lsls	r3, r3, #24
 8004c62:	431a      	orrs	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c68:	071b      	lsls	r3, r3, #28
 8004c6a:	491b      	ldr	r1, [pc, #108]	@ (8004cd8 <HAL_RCC_OscConfig+0x4ac>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c70:	4b1b      	ldr	r3, [pc, #108]	@ (8004ce0 <HAL_RCC_OscConfig+0x4b4>)
 8004c72:	2201      	movs	r2, #1
 8004c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c76:	f7fd fa51 	bl	800211c <HAL_GetTick>
 8004c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c7c:	e008      	b.n	8004c90 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c7e:	f7fd fa4d 	bl	800211c <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d901      	bls.n	8004c90 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e064      	b.n	8004d5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c90:	4b11      	ldr	r3, [pc, #68]	@ (8004cd8 <HAL_RCC_OscConfig+0x4ac>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d0f0      	beq.n	8004c7e <HAL_RCC_OscConfig+0x452>
 8004c9c:	e05c      	b.n	8004d58 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c9e:	4b10      	ldr	r3, [pc, #64]	@ (8004ce0 <HAL_RCC_OscConfig+0x4b4>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca4:	f7fd fa3a 	bl	800211c <HAL_GetTick>
 8004ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004caa:	e008      	b.n	8004cbe <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cac:	f7fd fa36 	bl	800211c <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e04d      	b.n	8004d5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cbe:	4b06      	ldr	r3, [pc, #24]	@ (8004cd8 <HAL_RCC_OscConfig+0x4ac>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1f0      	bne.n	8004cac <HAL_RCC_OscConfig+0x480>
 8004cca:	e045      	b.n	8004d58 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d107      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e040      	b.n	8004d5a <HAL_RCC_OscConfig+0x52e>
 8004cd8:	40023800 	.word	0x40023800
 8004cdc:	40007000 	.word	0x40007000
 8004ce0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ce4:	4b1f      	ldr	r3, [pc, #124]	@ (8004d64 <HAL_RCC_OscConfig+0x538>)
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d030      	beq.n	8004d54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d129      	bne.n	8004d54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d122      	bne.n	8004d54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004d14:	4013      	ands	r3, r2
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004d1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d119      	bne.n	8004d54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d2a:	085b      	lsrs	r3, r3, #1
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d10f      	bne.n	8004d54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d107      	bne.n	8004d54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d4e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d001      	beq.n	8004d58 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e000      	b.n	8004d5a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3718      	adds	r7, #24
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	40023800 	.word	0x40023800

08004d68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d101      	bne.n	8004d7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e041      	b.n	8004dfe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d106      	bne.n	8004d94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 f839 	bl	8004e06 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2202      	movs	r2, #2
 8004d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	3304      	adds	r3, #4
 8004da4:	4619      	mov	r1, r3
 8004da6:	4610      	mov	r0, r2
 8004da8:	f000 f9c0 	bl	800512c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3708      	adds	r7, #8
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}

08004e06 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004e06:	b480      	push	{r7}
 8004e08:	b083      	sub	sp, #12
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004e0e:	bf00      	nop
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
	...

08004e1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b085      	sub	sp, #20
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d001      	beq.n	8004e34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e04e      	b.n	8004ed2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2202      	movs	r2, #2
 8004e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68da      	ldr	r2, [r3, #12]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f042 0201 	orr.w	r2, r2, #1
 8004e4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a23      	ldr	r2, [pc, #140]	@ (8004ee0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d022      	beq.n	8004e9c <HAL_TIM_Base_Start_IT+0x80>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e5e:	d01d      	beq.n	8004e9c <HAL_TIM_Base_Start_IT+0x80>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a1f      	ldr	r2, [pc, #124]	@ (8004ee4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d018      	beq.n	8004e9c <HAL_TIM_Base_Start_IT+0x80>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a1e      	ldr	r2, [pc, #120]	@ (8004ee8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d013      	beq.n	8004e9c <HAL_TIM_Base_Start_IT+0x80>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a1c      	ldr	r2, [pc, #112]	@ (8004eec <HAL_TIM_Base_Start_IT+0xd0>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d00e      	beq.n	8004e9c <HAL_TIM_Base_Start_IT+0x80>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a1b      	ldr	r2, [pc, #108]	@ (8004ef0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d009      	beq.n	8004e9c <HAL_TIM_Base_Start_IT+0x80>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a19      	ldr	r2, [pc, #100]	@ (8004ef4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d004      	beq.n	8004e9c <HAL_TIM_Base_Start_IT+0x80>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a18      	ldr	r2, [pc, #96]	@ (8004ef8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d111      	bne.n	8004ec0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f003 0307 	and.w	r3, r3, #7
 8004ea6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2b06      	cmp	r3, #6
 8004eac:	d010      	beq.n	8004ed0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f042 0201 	orr.w	r2, r2, #1
 8004ebc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ebe:	e007      	b.n	8004ed0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f042 0201 	orr.w	r2, r2, #1
 8004ece:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3714      	adds	r7, #20
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	40010000 	.word	0x40010000
 8004ee4:	40000400 	.word	0x40000400
 8004ee8:	40000800 	.word	0x40000800
 8004eec:	40000c00 	.word	0x40000c00
 8004ef0:	40010400 	.word	0x40010400
 8004ef4:	40014000 	.word	0x40014000
 8004ef8:	40001800 	.word	0x40001800

08004efc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	f003 0302 	and.w	r3, r3, #2
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d020      	beq.n	8004f60 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f003 0302 	and.w	r3, r3, #2
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d01b      	beq.n	8004f60 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f06f 0202 	mvn.w	r2, #2
 8004f30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2201      	movs	r2, #1
 8004f36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	f003 0303 	and.w	r3, r3, #3
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d003      	beq.n	8004f4e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 f8d2 	bl	80050f0 <HAL_TIM_IC_CaptureCallback>
 8004f4c:	e005      	b.n	8004f5a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 f8c4 	bl	80050dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 f8d5 	bl	8005104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	f003 0304 	and.w	r3, r3, #4
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d020      	beq.n	8004fac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f003 0304 	and.w	r3, r3, #4
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d01b      	beq.n	8004fac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f06f 0204 	mvn.w	r2, #4
 8004f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2202      	movs	r2, #2
 8004f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d003      	beq.n	8004f9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 f8ac 	bl	80050f0 <HAL_TIM_IC_CaptureCallback>
 8004f98:	e005      	b.n	8004fa6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 f89e 	bl	80050dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 f8af 	bl	8005104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	f003 0308 	and.w	r3, r3, #8
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d020      	beq.n	8004ff8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f003 0308 	and.w	r3, r3, #8
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d01b      	beq.n	8004ff8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f06f 0208 	mvn.w	r2, #8
 8004fc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2204      	movs	r2, #4
 8004fce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	69db      	ldr	r3, [r3, #28]
 8004fd6:	f003 0303 	and.w	r3, r3, #3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d003      	beq.n	8004fe6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 f886 	bl	80050f0 <HAL_TIM_IC_CaptureCallback>
 8004fe4:	e005      	b.n	8004ff2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 f878 	bl	80050dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f000 f889 	bl	8005104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	f003 0310 	and.w	r3, r3, #16
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d020      	beq.n	8005044 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f003 0310 	and.w	r3, r3, #16
 8005008:	2b00      	cmp	r3, #0
 800500a:	d01b      	beq.n	8005044 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f06f 0210 	mvn.w	r2, #16
 8005014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2208      	movs	r2, #8
 800501a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	69db      	ldr	r3, [r3, #28]
 8005022:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005026:	2b00      	cmp	r3, #0
 8005028:	d003      	beq.n	8005032 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 f860 	bl	80050f0 <HAL_TIM_IC_CaptureCallback>
 8005030:	e005      	b.n	800503e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 f852 	bl	80050dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f000 f863 	bl	8005104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	f003 0301 	and.w	r3, r3, #1
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00c      	beq.n	8005068 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f003 0301 	and.w	r3, r3, #1
 8005054:	2b00      	cmp	r3, #0
 8005056:	d007      	beq.n	8005068 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f06f 0201 	mvn.w	r2, #1
 8005060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f7fc fc82 	bl	800196c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800506e:	2b00      	cmp	r3, #0
 8005070:	d00c      	beq.n	800508c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005078:	2b00      	cmp	r3, #0
 800507a:	d007      	beq.n	800508c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 f906 	bl	8005298 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00c      	beq.n	80050b0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800509c:	2b00      	cmp	r3, #0
 800509e:	d007      	beq.n	80050b0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80050a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 f834 	bl	8005118 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	f003 0320 	and.w	r3, r3, #32
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00c      	beq.n	80050d4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f003 0320 	and.w	r3, r3, #32
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d007      	beq.n	80050d4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f06f 0220 	mvn.w	r2, #32
 80050cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 f8d8 	bl	8005284 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050d4:	bf00      	nop
 80050d6:	3710      	adds	r7, #16
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050e4:	bf00      	nop
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050f8:	bf00      	nop
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800510c:	bf00      	nop
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005120:	bf00      	nop
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800512c:	b480      	push	{r7}
 800512e:	b085      	sub	sp, #20
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a46      	ldr	r2, [pc, #280]	@ (8005258 <TIM_Base_SetConfig+0x12c>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d013      	beq.n	800516c <TIM_Base_SetConfig+0x40>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800514a:	d00f      	beq.n	800516c <TIM_Base_SetConfig+0x40>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a43      	ldr	r2, [pc, #268]	@ (800525c <TIM_Base_SetConfig+0x130>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d00b      	beq.n	800516c <TIM_Base_SetConfig+0x40>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a42      	ldr	r2, [pc, #264]	@ (8005260 <TIM_Base_SetConfig+0x134>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d007      	beq.n	800516c <TIM_Base_SetConfig+0x40>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a41      	ldr	r2, [pc, #260]	@ (8005264 <TIM_Base_SetConfig+0x138>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d003      	beq.n	800516c <TIM_Base_SetConfig+0x40>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a40      	ldr	r2, [pc, #256]	@ (8005268 <TIM_Base_SetConfig+0x13c>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d108      	bne.n	800517e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005172:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	4313      	orrs	r3, r2
 800517c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a35      	ldr	r2, [pc, #212]	@ (8005258 <TIM_Base_SetConfig+0x12c>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d02b      	beq.n	80051de <TIM_Base_SetConfig+0xb2>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800518c:	d027      	beq.n	80051de <TIM_Base_SetConfig+0xb2>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a32      	ldr	r2, [pc, #200]	@ (800525c <TIM_Base_SetConfig+0x130>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d023      	beq.n	80051de <TIM_Base_SetConfig+0xb2>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a31      	ldr	r2, [pc, #196]	@ (8005260 <TIM_Base_SetConfig+0x134>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d01f      	beq.n	80051de <TIM_Base_SetConfig+0xb2>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a30      	ldr	r2, [pc, #192]	@ (8005264 <TIM_Base_SetConfig+0x138>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d01b      	beq.n	80051de <TIM_Base_SetConfig+0xb2>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a2f      	ldr	r2, [pc, #188]	@ (8005268 <TIM_Base_SetConfig+0x13c>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d017      	beq.n	80051de <TIM_Base_SetConfig+0xb2>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a2e      	ldr	r2, [pc, #184]	@ (800526c <TIM_Base_SetConfig+0x140>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d013      	beq.n	80051de <TIM_Base_SetConfig+0xb2>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a2d      	ldr	r2, [pc, #180]	@ (8005270 <TIM_Base_SetConfig+0x144>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d00f      	beq.n	80051de <TIM_Base_SetConfig+0xb2>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a2c      	ldr	r2, [pc, #176]	@ (8005274 <TIM_Base_SetConfig+0x148>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d00b      	beq.n	80051de <TIM_Base_SetConfig+0xb2>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a2b      	ldr	r2, [pc, #172]	@ (8005278 <TIM_Base_SetConfig+0x14c>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d007      	beq.n	80051de <TIM_Base_SetConfig+0xb2>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a2a      	ldr	r2, [pc, #168]	@ (800527c <TIM_Base_SetConfig+0x150>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d003      	beq.n	80051de <TIM_Base_SetConfig+0xb2>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a29      	ldr	r2, [pc, #164]	@ (8005280 <TIM_Base_SetConfig+0x154>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d108      	bne.n	80051f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	689a      	ldr	r2, [r3, #8]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a10      	ldr	r2, [pc, #64]	@ (8005258 <TIM_Base_SetConfig+0x12c>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d003      	beq.n	8005224 <TIM_Base_SetConfig+0xf8>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a12      	ldr	r2, [pc, #72]	@ (8005268 <TIM_Base_SetConfig+0x13c>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d103      	bne.n	800522c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	691a      	ldr	r2, [r3, #16]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	2b01      	cmp	r3, #1
 800523c:	d105      	bne.n	800524a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	f023 0201 	bic.w	r2, r3, #1
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	611a      	str	r2, [r3, #16]
  }
}
 800524a:	bf00      	nop
 800524c:	3714      	adds	r7, #20
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	40010000 	.word	0x40010000
 800525c:	40000400 	.word	0x40000400
 8005260:	40000800 	.word	0x40000800
 8005264:	40000c00 	.word	0x40000c00
 8005268:	40010400 	.word	0x40010400
 800526c:	40014000 	.word	0x40014000
 8005270:	40014400 	.word	0x40014400
 8005274:	40014800 	.word	0x40014800
 8005278:	40001800 	.word	0x40001800
 800527c:	40001c00 	.word	0x40001c00
 8005280:	40002000 	.word	0x40002000

08005284 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800528c:	bf00      	nop
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <malloc>:
 80052ac:	4b02      	ldr	r3, [pc, #8]	@ (80052b8 <malloc+0xc>)
 80052ae:	4601      	mov	r1, r0
 80052b0:	6818      	ldr	r0, [r3, #0]
 80052b2:	f000 b825 	b.w	8005300 <_malloc_r>
 80052b6:	bf00      	nop
 80052b8:	20000418 	.word	0x20000418

080052bc <sbrk_aligned>:
 80052bc:	b570      	push	{r4, r5, r6, lr}
 80052be:	4e0f      	ldr	r6, [pc, #60]	@ (80052fc <sbrk_aligned+0x40>)
 80052c0:	460c      	mov	r4, r1
 80052c2:	6831      	ldr	r1, [r6, #0]
 80052c4:	4605      	mov	r5, r0
 80052c6:	b911      	cbnz	r1, 80052ce <sbrk_aligned+0x12>
 80052c8:	f000 f9fa 	bl	80056c0 <_sbrk_r>
 80052cc:	6030      	str	r0, [r6, #0]
 80052ce:	4621      	mov	r1, r4
 80052d0:	4628      	mov	r0, r5
 80052d2:	f000 f9f5 	bl	80056c0 <_sbrk_r>
 80052d6:	1c43      	adds	r3, r0, #1
 80052d8:	d103      	bne.n	80052e2 <sbrk_aligned+0x26>
 80052da:	f04f 34ff 	mov.w	r4, #4294967295
 80052de:	4620      	mov	r0, r4
 80052e0:	bd70      	pop	{r4, r5, r6, pc}
 80052e2:	1cc4      	adds	r4, r0, #3
 80052e4:	f024 0403 	bic.w	r4, r4, #3
 80052e8:	42a0      	cmp	r0, r4
 80052ea:	d0f8      	beq.n	80052de <sbrk_aligned+0x22>
 80052ec:	1a21      	subs	r1, r4, r0
 80052ee:	4628      	mov	r0, r5
 80052f0:	f000 f9e6 	bl	80056c0 <_sbrk_r>
 80052f4:	3001      	adds	r0, #1
 80052f6:	d1f2      	bne.n	80052de <sbrk_aligned+0x22>
 80052f8:	e7ef      	b.n	80052da <sbrk_aligned+0x1e>
 80052fa:	bf00      	nop
 80052fc:	20000700 	.word	0x20000700

08005300 <_malloc_r>:
 8005300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005304:	1ccd      	adds	r5, r1, #3
 8005306:	f025 0503 	bic.w	r5, r5, #3
 800530a:	3508      	adds	r5, #8
 800530c:	2d0c      	cmp	r5, #12
 800530e:	bf38      	it	cc
 8005310:	250c      	movcc	r5, #12
 8005312:	2d00      	cmp	r5, #0
 8005314:	4606      	mov	r6, r0
 8005316:	db01      	blt.n	800531c <_malloc_r+0x1c>
 8005318:	42a9      	cmp	r1, r5
 800531a:	d904      	bls.n	8005326 <_malloc_r+0x26>
 800531c:	230c      	movs	r3, #12
 800531e:	6033      	str	r3, [r6, #0]
 8005320:	2000      	movs	r0, #0
 8005322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005326:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80053fc <_malloc_r+0xfc>
 800532a:	f000 f869 	bl	8005400 <__malloc_lock>
 800532e:	f8d8 3000 	ldr.w	r3, [r8]
 8005332:	461c      	mov	r4, r3
 8005334:	bb44      	cbnz	r4, 8005388 <_malloc_r+0x88>
 8005336:	4629      	mov	r1, r5
 8005338:	4630      	mov	r0, r6
 800533a:	f7ff ffbf 	bl	80052bc <sbrk_aligned>
 800533e:	1c43      	adds	r3, r0, #1
 8005340:	4604      	mov	r4, r0
 8005342:	d158      	bne.n	80053f6 <_malloc_r+0xf6>
 8005344:	f8d8 4000 	ldr.w	r4, [r8]
 8005348:	4627      	mov	r7, r4
 800534a:	2f00      	cmp	r7, #0
 800534c:	d143      	bne.n	80053d6 <_malloc_r+0xd6>
 800534e:	2c00      	cmp	r4, #0
 8005350:	d04b      	beq.n	80053ea <_malloc_r+0xea>
 8005352:	6823      	ldr	r3, [r4, #0]
 8005354:	4639      	mov	r1, r7
 8005356:	4630      	mov	r0, r6
 8005358:	eb04 0903 	add.w	r9, r4, r3
 800535c:	f000 f9b0 	bl	80056c0 <_sbrk_r>
 8005360:	4581      	cmp	r9, r0
 8005362:	d142      	bne.n	80053ea <_malloc_r+0xea>
 8005364:	6821      	ldr	r1, [r4, #0]
 8005366:	1a6d      	subs	r5, r5, r1
 8005368:	4629      	mov	r1, r5
 800536a:	4630      	mov	r0, r6
 800536c:	f7ff ffa6 	bl	80052bc <sbrk_aligned>
 8005370:	3001      	adds	r0, #1
 8005372:	d03a      	beq.n	80053ea <_malloc_r+0xea>
 8005374:	6823      	ldr	r3, [r4, #0]
 8005376:	442b      	add	r3, r5
 8005378:	6023      	str	r3, [r4, #0]
 800537a:	f8d8 3000 	ldr.w	r3, [r8]
 800537e:	685a      	ldr	r2, [r3, #4]
 8005380:	bb62      	cbnz	r2, 80053dc <_malloc_r+0xdc>
 8005382:	f8c8 7000 	str.w	r7, [r8]
 8005386:	e00f      	b.n	80053a8 <_malloc_r+0xa8>
 8005388:	6822      	ldr	r2, [r4, #0]
 800538a:	1b52      	subs	r2, r2, r5
 800538c:	d420      	bmi.n	80053d0 <_malloc_r+0xd0>
 800538e:	2a0b      	cmp	r2, #11
 8005390:	d917      	bls.n	80053c2 <_malloc_r+0xc2>
 8005392:	1961      	adds	r1, r4, r5
 8005394:	42a3      	cmp	r3, r4
 8005396:	6025      	str	r5, [r4, #0]
 8005398:	bf18      	it	ne
 800539a:	6059      	strne	r1, [r3, #4]
 800539c:	6863      	ldr	r3, [r4, #4]
 800539e:	bf08      	it	eq
 80053a0:	f8c8 1000 	streq.w	r1, [r8]
 80053a4:	5162      	str	r2, [r4, r5]
 80053a6:	604b      	str	r3, [r1, #4]
 80053a8:	4630      	mov	r0, r6
 80053aa:	f000 f82f 	bl	800540c <__malloc_unlock>
 80053ae:	f104 000b 	add.w	r0, r4, #11
 80053b2:	1d23      	adds	r3, r4, #4
 80053b4:	f020 0007 	bic.w	r0, r0, #7
 80053b8:	1ac2      	subs	r2, r0, r3
 80053ba:	bf1c      	itt	ne
 80053bc:	1a1b      	subne	r3, r3, r0
 80053be:	50a3      	strne	r3, [r4, r2]
 80053c0:	e7af      	b.n	8005322 <_malloc_r+0x22>
 80053c2:	6862      	ldr	r2, [r4, #4]
 80053c4:	42a3      	cmp	r3, r4
 80053c6:	bf0c      	ite	eq
 80053c8:	f8c8 2000 	streq.w	r2, [r8]
 80053cc:	605a      	strne	r2, [r3, #4]
 80053ce:	e7eb      	b.n	80053a8 <_malloc_r+0xa8>
 80053d0:	4623      	mov	r3, r4
 80053d2:	6864      	ldr	r4, [r4, #4]
 80053d4:	e7ae      	b.n	8005334 <_malloc_r+0x34>
 80053d6:	463c      	mov	r4, r7
 80053d8:	687f      	ldr	r7, [r7, #4]
 80053da:	e7b6      	b.n	800534a <_malloc_r+0x4a>
 80053dc:	461a      	mov	r2, r3
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	42a3      	cmp	r3, r4
 80053e2:	d1fb      	bne.n	80053dc <_malloc_r+0xdc>
 80053e4:	2300      	movs	r3, #0
 80053e6:	6053      	str	r3, [r2, #4]
 80053e8:	e7de      	b.n	80053a8 <_malloc_r+0xa8>
 80053ea:	230c      	movs	r3, #12
 80053ec:	6033      	str	r3, [r6, #0]
 80053ee:	4630      	mov	r0, r6
 80053f0:	f000 f80c 	bl	800540c <__malloc_unlock>
 80053f4:	e794      	b.n	8005320 <_malloc_r+0x20>
 80053f6:	6005      	str	r5, [r0, #0]
 80053f8:	e7d6      	b.n	80053a8 <_malloc_r+0xa8>
 80053fa:	bf00      	nop
 80053fc:	20000704 	.word	0x20000704

08005400 <__malloc_lock>:
 8005400:	4801      	ldr	r0, [pc, #4]	@ (8005408 <__malloc_lock+0x8>)
 8005402:	f000 b9aa 	b.w	800575a <__retarget_lock_acquire_recursive>
 8005406:	bf00      	nop
 8005408:	20000848 	.word	0x20000848

0800540c <__malloc_unlock>:
 800540c:	4801      	ldr	r0, [pc, #4]	@ (8005414 <__malloc_unlock+0x8>)
 800540e:	f000 b9a5 	b.w	800575c <__retarget_lock_release_recursive>
 8005412:	bf00      	nop
 8005414:	20000848 	.word	0x20000848

08005418 <std>:
 8005418:	2300      	movs	r3, #0
 800541a:	b510      	push	{r4, lr}
 800541c:	4604      	mov	r4, r0
 800541e:	e9c0 3300 	strd	r3, r3, [r0]
 8005422:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005426:	6083      	str	r3, [r0, #8]
 8005428:	8181      	strh	r1, [r0, #12]
 800542a:	6643      	str	r3, [r0, #100]	@ 0x64
 800542c:	81c2      	strh	r2, [r0, #14]
 800542e:	6183      	str	r3, [r0, #24]
 8005430:	4619      	mov	r1, r3
 8005432:	2208      	movs	r2, #8
 8005434:	305c      	adds	r0, #92	@ 0x5c
 8005436:	f000 f906 	bl	8005646 <memset>
 800543a:	4b0d      	ldr	r3, [pc, #52]	@ (8005470 <std+0x58>)
 800543c:	6263      	str	r3, [r4, #36]	@ 0x24
 800543e:	4b0d      	ldr	r3, [pc, #52]	@ (8005474 <std+0x5c>)
 8005440:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005442:	4b0d      	ldr	r3, [pc, #52]	@ (8005478 <std+0x60>)
 8005444:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005446:	4b0d      	ldr	r3, [pc, #52]	@ (800547c <std+0x64>)
 8005448:	6323      	str	r3, [r4, #48]	@ 0x30
 800544a:	4b0d      	ldr	r3, [pc, #52]	@ (8005480 <std+0x68>)
 800544c:	6224      	str	r4, [r4, #32]
 800544e:	429c      	cmp	r4, r3
 8005450:	d006      	beq.n	8005460 <std+0x48>
 8005452:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005456:	4294      	cmp	r4, r2
 8005458:	d002      	beq.n	8005460 <std+0x48>
 800545a:	33d0      	adds	r3, #208	@ 0xd0
 800545c:	429c      	cmp	r4, r3
 800545e:	d105      	bne.n	800546c <std+0x54>
 8005460:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005468:	f000 b976 	b.w	8005758 <__retarget_lock_init_recursive>
 800546c:	bd10      	pop	{r4, pc}
 800546e:	bf00      	nop
 8005470:	080055c1 	.word	0x080055c1
 8005474:	080055e3 	.word	0x080055e3
 8005478:	0800561b 	.word	0x0800561b
 800547c:	0800563f 	.word	0x0800563f
 8005480:	20000708 	.word	0x20000708

08005484 <stdio_exit_handler>:
 8005484:	4a02      	ldr	r2, [pc, #8]	@ (8005490 <stdio_exit_handler+0xc>)
 8005486:	4903      	ldr	r1, [pc, #12]	@ (8005494 <stdio_exit_handler+0x10>)
 8005488:	4803      	ldr	r0, [pc, #12]	@ (8005498 <stdio_exit_handler+0x14>)
 800548a:	f000 b869 	b.w	8005560 <_fwalk_sglue>
 800548e:	bf00      	nop
 8005490:	2000040c 	.word	0x2000040c
 8005494:	08005e9d 	.word	0x08005e9d
 8005498:	2000041c 	.word	0x2000041c

0800549c <cleanup_stdio>:
 800549c:	6841      	ldr	r1, [r0, #4]
 800549e:	4b0c      	ldr	r3, [pc, #48]	@ (80054d0 <cleanup_stdio+0x34>)
 80054a0:	4299      	cmp	r1, r3
 80054a2:	b510      	push	{r4, lr}
 80054a4:	4604      	mov	r4, r0
 80054a6:	d001      	beq.n	80054ac <cleanup_stdio+0x10>
 80054a8:	f000 fcf8 	bl	8005e9c <_fflush_r>
 80054ac:	68a1      	ldr	r1, [r4, #8]
 80054ae:	4b09      	ldr	r3, [pc, #36]	@ (80054d4 <cleanup_stdio+0x38>)
 80054b0:	4299      	cmp	r1, r3
 80054b2:	d002      	beq.n	80054ba <cleanup_stdio+0x1e>
 80054b4:	4620      	mov	r0, r4
 80054b6:	f000 fcf1 	bl	8005e9c <_fflush_r>
 80054ba:	68e1      	ldr	r1, [r4, #12]
 80054bc:	4b06      	ldr	r3, [pc, #24]	@ (80054d8 <cleanup_stdio+0x3c>)
 80054be:	4299      	cmp	r1, r3
 80054c0:	d004      	beq.n	80054cc <cleanup_stdio+0x30>
 80054c2:	4620      	mov	r0, r4
 80054c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054c8:	f000 bce8 	b.w	8005e9c <_fflush_r>
 80054cc:	bd10      	pop	{r4, pc}
 80054ce:	bf00      	nop
 80054d0:	20000708 	.word	0x20000708
 80054d4:	20000770 	.word	0x20000770
 80054d8:	200007d8 	.word	0x200007d8

080054dc <global_stdio_init.part.0>:
 80054dc:	b510      	push	{r4, lr}
 80054de:	4b0b      	ldr	r3, [pc, #44]	@ (800550c <global_stdio_init.part.0+0x30>)
 80054e0:	4c0b      	ldr	r4, [pc, #44]	@ (8005510 <global_stdio_init.part.0+0x34>)
 80054e2:	4a0c      	ldr	r2, [pc, #48]	@ (8005514 <global_stdio_init.part.0+0x38>)
 80054e4:	601a      	str	r2, [r3, #0]
 80054e6:	4620      	mov	r0, r4
 80054e8:	2200      	movs	r2, #0
 80054ea:	2104      	movs	r1, #4
 80054ec:	f7ff ff94 	bl	8005418 <std>
 80054f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80054f4:	2201      	movs	r2, #1
 80054f6:	2109      	movs	r1, #9
 80054f8:	f7ff ff8e 	bl	8005418 <std>
 80054fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005500:	2202      	movs	r2, #2
 8005502:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005506:	2112      	movs	r1, #18
 8005508:	f7ff bf86 	b.w	8005418 <std>
 800550c:	20000840 	.word	0x20000840
 8005510:	20000708 	.word	0x20000708
 8005514:	08005485 	.word	0x08005485

08005518 <__sfp_lock_acquire>:
 8005518:	4801      	ldr	r0, [pc, #4]	@ (8005520 <__sfp_lock_acquire+0x8>)
 800551a:	f000 b91e 	b.w	800575a <__retarget_lock_acquire_recursive>
 800551e:	bf00      	nop
 8005520:	20000849 	.word	0x20000849

08005524 <__sfp_lock_release>:
 8005524:	4801      	ldr	r0, [pc, #4]	@ (800552c <__sfp_lock_release+0x8>)
 8005526:	f000 b919 	b.w	800575c <__retarget_lock_release_recursive>
 800552a:	bf00      	nop
 800552c:	20000849 	.word	0x20000849

08005530 <__sinit>:
 8005530:	b510      	push	{r4, lr}
 8005532:	4604      	mov	r4, r0
 8005534:	f7ff fff0 	bl	8005518 <__sfp_lock_acquire>
 8005538:	6a23      	ldr	r3, [r4, #32]
 800553a:	b11b      	cbz	r3, 8005544 <__sinit+0x14>
 800553c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005540:	f7ff bff0 	b.w	8005524 <__sfp_lock_release>
 8005544:	4b04      	ldr	r3, [pc, #16]	@ (8005558 <__sinit+0x28>)
 8005546:	6223      	str	r3, [r4, #32]
 8005548:	4b04      	ldr	r3, [pc, #16]	@ (800555c <__sinit+0x2c>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d1f5      	bne.n	800553c <__sinit+0xc>
 8005550:	f7ff ffc4 	bl	80054dc <global_stdio_init.part.0>
 8005554:	e7f2      	b.n	800553c <__sinit+0xc>
 8005556:	bf00      	nop
 8005558:	0800549d 	.word	0x0800549d
 800555c:	20000840 	.word	0x20000840

08005560 <_fwalk_sglue>:
 8005560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005564:	4607      	mov	r7, r0
 8005566:	4688      	mov	r8, r1
 8005568:	4614      	mov	r4, r2
 800556a:	2600      	movs	r6, #0
 800556c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005570:	f1b9 0901 	subs.w	r9, r9, #1
 8005574:	d505      	bpl.n	8005582 <_fwalk_sglue+0x22>
 8005576:	6824      	ldr	r4, [r4, #0]
 8005578:	2c00      	cmp	r4, #0
 800557a:	d1f7      	bne.n	800556c <_fwalk_sglue+0xc>
 800557c:	4630      	mov	r0, r6
 800557e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005582:	89ab      	ldrh	r3, [r5, #12]
 8005584:	2b01      	cmp	r3, #1
 8005586:	d907      	bls.n	8005598 <_fwalk_sglue+0x38>
 8005588:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800558c:	3301      	adds	r3, #1
 800558e:	d003      	beq.n	8005598 <_fwalk_sglue+0x38>
 8005590:	4629      	mov	r1, r5
 8005592:	4638      	mov	r0, r7
 8005594:	47c0      	blx	r8
 8005596:	4306      	orrs	r6, r0
 8005598:	3568      	adds	r5, #104	@ 0x68
 800559a:	e7e9      	b.n	8005570 <_fwalk_sglue+0x10>

0800559c <iprintf>:
 800559c:	b40f      	push	{r0, r1, r2, r3}
 800559e:	b507      	push	{r0, r1, r2, lr}
 80055a0:	4906      	ldr	r1, [pc, #24]	@ (80055bc <iprintf+0x20>)
 80055a2:	ab04      	add	r3, sp, #16
 80055a4:	6808      	ldr	r0, [r1, #0]
 80055a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80055aa:	6881      	ldr	r1, [r0, #8]
 80055ac:	9301      	str	r3, [sp, #4]
 80055ae:	f000 f94b 	bl	8005848 <_vfiprintf_r>
 80055b2:	b003      	add	sp, #12
 80055b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80055b8:	b004      	add	sp, #16
 80055ba:	4770      	bx	lr
 80055bc:	20000418 	.word	0x20000418

080055c0 <__sread>:
 80055c0:	b510      	push	{r4, lr}
 80055c2:	460c      	mov	r4, r1
 80055c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055c8:	f000 f868 	bl	800569c <_read_r>
 80055cc:	2800      	cmp	r0, #0
 80055ce:	bfab      	itete	ge
 80055d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80055d2:	89a3      	ldrhlt	r3, [r4, #12]
 80055d4:	181b      	addge	r3, r3, r0
 80055d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80055da:	bfac      	ite	ge
 80055dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80055de:	81a3      	strhlt	r3, [r4, #12]
 80055e0:	bd10      	pop	{r4, pc}

080055e2 <__swrite>:
 80055e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055e6:	461f      	mov	r7, r3
 80055e8:	898b      	ldrh	r3, [r1, #12]
 80055ea:	05db      	lsls	r3, r3, #23
 80055ec:	4605      	mov	r5, r0
 80055ee:	460c      	mov	r4, r1
 80055f0:	4616      	mov	r6, r2
 80055f2:	d505      	bpl.n	8005600 <__swrite+0x1e>
 80055f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055f8:	2302      	movs	r3, #2
 80055fa:	2200      	movs	r2, #0
 80055fc:	f000 f83c 	bl	8005678 <_lseek_r>
 8005600:	89a3      	ldrh	r3, [r4, #12]
 8005602:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005606:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800560a:	81a3      	strh	r3, [r4, #12]
 800560c:	4632      	mov	r2, r6
 800560e:	463b      	mov	r3, r7
 8005610:	4628      	mov	r0, r5
 8005612:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005616:	f000 b863 	b.w	80056e0 <_write_r>

0800561a <__sseek>:
 800561a:	b510      	push	{r4, lr}
 800561c:	460c      	mov	r4, r1
 800561e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005622:	f000 f829 	bl	8005678 <_lseek_r>
 8005626:	1c43      	adds	r3, r0, #1
 8005628:	89a3      	ldrh	r3, [r4, #12]
 800562a:	bf15      	itete	ne
 800562c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800562e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005632:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005636:	81a3      	strheq	r3, [r4, #12]
 8005638:	bf18      	it	ne
 800563a:	81a3      	strhne	r3, [r4, #12]
 800563c:	bd10      	pop	{r4, pc}

0800563e <__sclose>:
 800563e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005642:	f000 b809 	b.w	8005658 <_close_r>

08005646 <memset>:
 8005646:	4402      	add	r2, r0
 8005648:	4603      	mov	r3, r0
 800564a:	4293      	cmp	r3, r2
 800564c:	d100      	bne.n	8005650 <memset+0xa>
 800564e:	4770      	bx	lr
 8005650:	f803 1b01 	strb.w	r1, [r3], #1
 8005654:	e7f9      	b.n	800564a <memset+0x4>
	...

08005658 <_close_r>:
 8005658:	b538      	push	{r3, r4, r5, lr}
 800565a:	4d06      	ldr	r5, [pc, #24]	@ (8005674 <_close_r+0x1c>)
 800565c:	2300      	movs	r3, #0
 800565e:	4604      	mov	r4, r0
 8005660:	4608      	mov	r0, r1
 8005662:	602b      	str	r3, [r5, #0]
 8005664:	f7fc fc7d 	bl	8001f62 <_close>
 8005668:	1c43      	adds	r3, r0, #1
 800566a:	d102      	bne.n	8005672 <_close_r+0x1a>
 800566c:	682b      	ldr	r3, [r5, #0]
 800566e:	b103      	cbz	r3, 8005672 <_close_r+0x1a>
 8005670:	6023      	str	r3, [r4, #0]
 8005672:	bd38      	pop	{r3, r4, r5, pc}
 8005674:	20000844 	.word	0x20000844

08005678 <_lseek_r>:
 8005678:	b538      	push	{r3, r4, r5, lr}
 800567a:	4d07      	ldr	r5, [pc, #28]	@ (8005698 <_lseek_r+0x20>)
 800567c:	4604      	mov	r4, r0
 800567e:	4608      	mov	r0, r1
 8005680:	4611      	mov	r1, r2
 8005682:	2200      	movs	r2, #0
 8005684:	602a      	str	r2, [r5, #0]
 8005686:	461a      	mov	r2, r3
 8005688:	f7fc fc92 	bl	8001fb0 <_lseek>
 800568c:	1c43      	adds	r3, r0, #1
 800568e:	d102      	bne.n	8005696 <_lseek_r+0x1e>
 8005690:	682b      	ldr	r3, [r5, #0]
 8005692:	b103      	cbz	r3, 8005696 <_lseek_r+0x1e>
 8005694:	6023      	str	r3, [r4, #0]
 8005696:	bd38      	pop	{r3, r4, r5, pc}
 8005698:	20000844 	.word	0x20000844

0800569c <_read_r>:
 800569c:	b538      	push	{r3, r4, r5, lr}
 800569e:	4d07      	ldr	r5, [pc, #28]	@ (80056bc <_read_r+0x20>)
 80056a0:	4604      	mov	r4, r0
 80056a2:	4608      	mov	r0, r1
 80056a4:	4611      	mov	r1, r2
 80056a6:	2200      	movs	r2, #0
 80056a8:	602a      	str	r2, [r5, #0]
 80056aa:	461a      	mov	r2, r3
 80056ac:	f7fc fc20 	bl	8001ef0 <_read>
 80056b0:	1c43      	adds	r3, r0, #1
 80056b2:	d102      	bne.n	80056ba <_read_r+0x1e>
 80056b4:	682b      	ldr	r3, [r5, #0]
 80056b6:	b103      	cbz	r3, 80056ba <_read_r+0x1e>
 80056b8:	6023      	str	r3, [r4, #0]
 80056ba:	bd38      	pop	{r3, r4, r5, pc}
 80056bc:	20000844 	.word	0x20000844

080056c0 <_sbrk_r>:
 80056c0:	b538      	push	{r3, r4, r5, lr}
 80056c2:	4d06      	ldr	r5, [pc, #24]	@ (80056dc <_sbrk_r+0x1c>)
 80056c4:	2300      	movs	r3, #0
 80056c6:	4604      	mov	r4, r0
 80056c8:	4608      	mov	r0, r1
 80056ca:	602b      	str	r3, [r5, #0]
 80056cc:	f7fc fc7e 	bl	8001fcc <_sbrk>
 80056d0:	1c43      	adds	r3, r0, #1
 80056d2:	d102      	bne.n	80056da <_sbrk_r+0x1a>
 80056d4:	682b      	ldr	r3, [r5, #0]
 80056d6:	b103      	cbz	r3, 80056da <_sbrk_r+0x1a>
 80056d8:	6023      	str	r3, [r4, #0]
 80056da:	bd38      	pop	{r3, r4, r5, pc}
 80056dc:	20000844 	.word	0x20000844

080056e0 <_write_r>:
 80056e0:	b538      	push	{r3, r4, r5, lr}
 80056e2:	4d07      	ldr	r5, [pc, #28]	@ (8005700 <_write_r+0x20>)
 80056e4:	4604      	mov	r4, r0
 80056e6:	4608      	mov	r0, r1
 80056e8:	4611      	mov	r1, r2
 80056ea:	2200      	movs	r2, #0
 80056ec:	602a      	str	r2, [r5, #0]
 80056ee:	461a      	mov	r2, r3
 80056f0:	f7fc fc1b 	bl	8001f2a <_write>
 80056f4:	1c43      	adds	r3, r0, #1
 80056f6:	d102      	bne.n	80056fe <_write_r+0x1e>
 80056f8:	682b      	ldr	r3, [r5, #0]
 80056fa:	b103      	cbz	r3, 80056fe <_write_r+0x1e>
 80056fc:	6023      	str	r3, [r4, #0]
 80056fe:	bd38      	pop	{r3, r4, r5, pc}
 8005700:	20000844 	.word	0x20000844

08005704 <__errno>:
 8005704:	4b01      	ldr	r3, [pc, #4]	@ (800570c <__errno+0x8>)
 8005706:	6818      	ldr	r0, [r3, #0]
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop
 800570c:	20000418 	.word	0x20000418

08005710 <__libc_init_array>:
 8005710:	b570      	push	{r4, r5, r6, lr}
 8005712:	4d0d      	ldr	r5, [pc, #52]	@ (8005748 <__libc_init_array+0x38>)
 8005714:	4c0d      	ldr	r4, [pc, #52]	@ (800574c <__libc_init_array+0x3c>)
 8005716:	1b64      	subs	r4, r4, r5
 8005718:	10a4      	asrs	r4, r4, #2
 800571a:	2600      	movs	r6, #0
 800571c:	42a6      	cmp	r6, r4
 800571e:	d109      	bne.n	8005734 <__libc_init_array+0x24>
 8005720:	4d0b      	ldr	r5, [pc, #44]	@ (8005750 <__libc_init_array+0x40>)
 8005722:	4c0c      	ldr	r4, [pc, #48]	@ (8005754 <__libc_init_array+0x44>)
 8005724:	f001 fa5a 	bl	8006bdc <_init>
 8005728:	1b64      	subs	r4, r4, r5
 800572a:	10a4      	asrs	r4, r4, #2
 800572c:	2600      	movs	r6, #0
 800572e:	42a6      	cmp	r6, r4
 8005730:	d105      	bne.n	800573e <__libc_init_array+0x2e>
 8005732:	bd70      	pop	{r4, r5, r6, pc}
 8005734:	f855 3b04 	ldr.w	r3, [r5], #4
 8005738:	4798      	blx	r3
 800573a:	3601      	adds	r6, #1
 800573c:	e7ee      	b.n	800571c <__libc_init_array+0xc>
 800573e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005742:	4798      	blx	r3
 8005744:	3601      	adds	r6, #1
 8005746:	e7f2      	b.n	800572e <__libc_init_array+0x1e>
 8005748:	08007050 	.word	0x08007050
 800574c:	08007050 	.word	0x08007050
 8005750:	08007050 	.word	0x08007050
 8005754:	08007054 	.word	0x08007054

08005758 <__retarget_lock_init_recursive>:
 8005758:	4770      	bx	lr

0800575a <__retarget_lock_acquire_recursive>:
 800575a:	4770      	bx	lr

0800575c <__retarget_lock_release_recursive>:
 800575c:	4770      	bx	lr
	...

08005760 <_free_r>:
 8005760:	b538      	push	{r3, r4, r5, lr}
 8005762:	4605      	mov	r5, r0
 8005764:	2900      	cmp	r1, #0
 8005766:	d041      	beq.n	80057ec <_free_r+0x8c>
 8005768:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800576c:	1f0c      	subs	r4, r1, #4
 800576e:	2b00      	cmp	r3, #0
 8005770:	bfb8      	it	lt
 8005772:	18e4      	addlt	r4, r4, r3
 8005774:	f7ff fe44 	bl	8005400 <__malloc_lock>
 8005778:	4a1d      	ldr	r2, [pc, #116]	@ (80057f0 <_free_r+0x90>)
 800577a:	6813      	ldr	r3, [r2, #0]
 800577c:	b933      	cbnz	r3, 800578c <_free_r+0x2c>
 800577e:	6063      	str	r3, [r4, #4]
 8005780:	6014      	str	r4, [r2, #0]
 8005782:	4628      	mov	r0, r5
 8005784:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005788:	f7ff be40 	b.w	800540c <__malloc_unlock>
 800578c:	42a3      	cmp	r3, r4
 800578e:	d908      	bls.n	80057a2 <_free_r+0x42>
 8005790:	6820      	ldr	r0, [r4, #0]
 8005792:	1821      	adds	r1, r4, r0
 8005794:	428b      	cmp	r3, r1
 8005796:	bf01      	itttt	eq
 8005798:	6819      	ldreq	r1, [r3, #0]
 800579a:	685b      	ldreq	r3, [r3, #4]
 800579c:	1809      	addeq	r1, r1, r0
 800579e:	6021      	streq	r1, [r4, #0]
 80057a0:	e7ed      	b.n	800577e <_free_r+0x1e>
 80057a2:	461a      	mov	r2, r3
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	b10b      	cbz	r3, 80057ac <_free_r+0x4c>
 80057a8:	42a3      	cmp	r3, r4
 80057aa:	d9fa      	bls.n	80057a2 <_free_r+0x42>
 80057ac:	6811      	ldr	r1, [r2, #0]
 80057ae:	1850      	adds	r0, r2, r1
 80057b0:	42a0      	cmp	r0, r4
 80057b2:	d10b      	bne.n	80057cc <_free_r+0x6c>
 80057b4:	6820      	ldr	r0, [r4, #0]
 80057b6:	4401      	add	r1, r0
 80057b8:	1850      	adds	r0, r2, r1
 80057ba:	4283      	cmp	r3, r0
 80057bc:	6011      	str	r1, [r2, #0]
 80057be:	d1e0      	bne.n	8005782 <_free_r+0x22>
 80057c0:	6818      	ldr	r0, [r3, #0]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	6053      	str	r3, [r2, #4]
 80057c6:	4408      	add	r0, r1
 80057c8:	6010      	str	r0, [r2, #0]
 80057ca:	e7da      	b.n	8005782 <_free_r+0x22>
 80057cc:	d902      	bls.n	80057d4 <_free_r+0x74>
 80057ce:	230c      	movs	r3, #12
 80057d0:	602b      	str	r3, [r5, #0]
 80057d2:	e7d6      	b.n	8005782 <_free_r+0x22>
 80057d4:	6820      	ldr	r0, [r4, #0]
 80057d6:	1821      	adds	r1, r4, r0
 80057d8:	428b      	cmp	r3, r1
 80057da:	bf04      	itt	eq
 80057dc:	6819      	ldreq	r1, [r3, #0]
 80057de:	685b      	ldreq	r3, [r3, #4]
 80057e0:	6063      	str	r3, [r4, #4]
 80057e2:	bf04      	itt	eq
 80057e4:	1809      	addeq	r1, r1, r0
 80057e6:	6021      	streq	r1, [r4, #0]
 80057e8:	6054      	str	r4, [r2, #4]
 80057ea:	e7ca      	b.n	8005782 <_free_r+0x22>
 80057ec:	bd38      	pop	{r3, r4, r5, pc}
 80057ee:	bf00      	nop
 80057f0:	20000704 	.word	0x20000704

080057f4 <__sfputc_r>:
 80057f4:	6893      	ldr	r3, [r2, #8]
 80057f6:	3b01      	subs	r3, #1
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	b410      	push	{r4}
 80057fc:	6093      	str	r3, [r2, #8]
 80057fe:	da08      	bge.n	8005812 <__sfputc_r+0x1e>
 8005800:	6994      	ldr	r4, [r2, #24]
 8005802:	42a3      	cmp	r3, r4
 8005804:	db01      	blt.n	800580a <__sfputc_r+0x16>
 8005806:	290a      	cmp	r1, #10
 8005808:	d103      	bne.n	8005812 <__sfputc_r+0x1e>
 800580a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800580e:	f000 bb6d 	b.w	8005eec <__swbuf_r>
 8005812:	6813      	ldr	r3, [r2, #0]
 8005814:	1c58      	adds	r0, r3, #1
 8005816:	6010      	str	r0, [r2, #0]
 8005818:	7019      	strb	r1, [r3, #0]
 800581a:	4608      	mov	r0, r1
 800581c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005820:	4770      	bx	lr

08005822 <__sfputs_r>:
 8005822:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005824:	4606      	mov	r6, r0
 8005826:	460f      	mov	r7, r1
 8005828:	4614      	mov	r4, r2
 800582a:	18d5      	adds	r5, r2, r3
 800582c:	42ac      	cmp	r4, r5
 800582e:	d101      	bne.n	8005834 <__sfputs_r+0x12>
 8005830:	2000      	movs	r0, #0
 8005832:	e007      	b.n	8005844 <__sfputs_r+0x22>
 8005834:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005838:	463a      	mov	r2, r7
 800583a:	4630      	mov	r0, r6
 800583c:	f7ff ffda 	bl	80057f4 <__sfputc_r>
 8005840:	1c43      	adds	r3, r0, #1
 8005842:	d1f3      	bne.n	800582c <__sfputs_r+0xa>
 8005844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005848 <_vfiprintf_r>:
 8005848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800584c:	460d      	mov	r5, r1
 800584e:	b09d      	sub	sp, #116	@ 0x74
 8005850:	4614      	mov	r4, r2
 8005852:	4698      	mov	r8, r3
 8005854:	4606      	mov	r6, r0
 8005856:	b118      	cbz	r0, 8005860 <_vfiprintf_r+0x18>
 8005858:	6a03      	ldr	r3, [r0, #32]
 800585a:	b90b      	cbnz	r3, 8005860 <_vfiprintf_r+0x18>
 800585c:	f7ff fe68 	bl	8005530 <__sinit>
 8005860:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005862:	07d9      	lsls	r1, r3, #31
 8005864:	d405      	bmi.n	8005872 <_vfiprintf_r+0x2a>
 8005866:	89ab      	ldrh	r3, [r5, #12]
 8005868:	059a      	lsls	r2, r3, #22
 800586a:	d402      	bmi.n	8005872 <_vfiprintf_r+0x2a>
 800586c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800586e:	f7ff ff74 	bl	800575a <__retarget_lock_acquire_recursive>
 8005872:	89ab      	ldrh	r3, [r5, #12]
 8005874:	071b      	lsls	r3, r3, #28
 8005876:	d501      	bpl.n	800587c <_vfiprintf_r+0x34>
 8005878:	692b      	ldr	r3, [r5, #16]
 800587a:	b99b      	cbnz	r3, 80058a4 <_vfiprintf_r+0x5c>
 800587c:	4629      	mov	r1, r5
 800587e:	4630      	mov	r0, r6
 8005880:	f000 fb72 	bl	8005f68 <__swsetup_r>
 8005884:	b170      	cbz	r0, 80058a4 <_vfiprintf_r+0x5c>
 8005886:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005888:	07dc      	lsls	r4, r3, #31
 800588a:	d504      	bpl.n	8005896 <_vfiprintf_r+0x4e>
 800588c:	f04f 30ff 	mov.w	r0, #4294967295
 8005890:	b01d      	add	sp, #116	@ 0x74
 8005892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005896:	89ab      	ldrh	r3, [r5, #12]
 8005898:	0598      	lsls	r0, r3, #22
 800589a:	d4f7      	bmi.n	800588c <_vfiprintf_r+0x44>
 800589c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800589e:	f7ff ff5d 	bl	800575c <__retarget_lock_release_recursive>
 80058a2:	e7f3      	b.n	800588c <_vfiprintf_r+0x44>
 80058a4:	2300      	movs	r3, #0
 80058a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80058a8:	2320      	movs	r3, #32
 80058aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80058ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80058b2:	2330      	movs	r3, #48	@ 0x30
 80058b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005a64 <_vfiprintf_r+0x21c>
 80058b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80058bc:	f04f 0901 	mov.w	r9, #1
 80058c0:	4623      	mov	r3, r4
 80058c2:	469a      	mov	sl, r3
 80058c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058c8:	b10a      	cbz	r2, 80058ce <_vfiprintf_r+0x86>
 80058ca:	2a25      	cmp	r2, #37	@ 0x25
 80058cc:	d1f9      	bne.n	80058c2 <_vfiprintf_r+0x7a>
 80058ce:	ebba 0b04 	subs.w	fp, sl, r4
 80058d2:	d00b      	beq.n	80058ec <_vfiprintf_r+0xa4>
 80058d4:	465b      	mov	r3, fp
 80058d6:	4622      	mov	r2, r4
 80058d8:	4629      	mov	r1, r5
 80058da:	4630      	mov	r0, r6
 80058dc:	f7ff ffa1 	bl	8005822 <__sfputs_r>
 80058e0:	3001      	adds	r0, #1
 80058e2:	f000 80a7 	beq.w	8005a34 <_vfiprintf_r+0x1ec>
 80058e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80058e8:	445a      	add	r2, fp
 80058ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80058ec:	f89a 3000 	ldrb.w	r3, [sl]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	f000 809f 	beq.w	8005a34 <_vfiprintf_r+0x1ec>
 80058f6:	2300      	movs	r3, #0
 80058f8:	f04f 32ff 	mov.w	r2, #4294967295
 80058fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005900:	f10a 0a01 	add.w	sl, sl, #1
 8005904:	9304      	str	r3, [sp, #16]
 8005906:	9307      	str	r3, [sp, #28]
 8005908:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800590c:	931a      	str	r3, [sp, #104]	@ 0x68
 800590e:	4654      	mov	r4, sl
 8005910:	2205      	movs	r2, #5
 8005912:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005916:	4853      	ldr	r0, [pc, #332]	@ (8005a64 <_vfiprintf_r+0x21c>)
 8005918:	f7fa fc7a 	bl	8000210 <memchr>
 800591c:	9a04      	ldr	r2, [sp, #16]
 800591e:	b9d8      	cbnz	r0, 8005958 <_vfiprintf_r+0x110>
 8005920:	06d1      	lsls	r1, r2, #27
 8005922:	bf44      	itt	mi
 8005924:	2320      	movmi	r3, #32
 8005926:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800592a:	0713      	lsls	r3, r2, #28
 800592c:	bf44      	itt	mi
 800592e:	232b      	movmi	r3, #43	@ 0x2b
 8005930:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005934:	f89a 3000 	ldrb.w	r3, [sl]
 8005938:	2b2a      	cmp	r3, #42	@ 0x2a
 800593a:	d015      	beq.n	8005968 <_vfiprintf_r+0x120>
 800593c:	9a07      	ldr	r2, [sp, #28]
 800593e:	4654      	mov	r4, sl
 8005940:	2000      	movs	r0, #0
 8005942:	f04f 0c0a 	mov.w	ip, #10
 8005946:	4621      	mov	r1, r4
 8005948:	f811 3b01 	ldrb.w	r3, [r1], #1
 800594c:	3b30      	subs	r3, #48	@ 0x30
 800594e:	2b09      	cmp	r3, #9
 8005950:	d94b      	bls.n	80059ea <_vfiprintf_r+0x1a2>
 8005952:	b1b0      	cbz	r0, 8005982 <_vfiprintf_r+0x13a>
 8005954:	9207      	str	r2, [sp, #28]
 8005956:	e014      	b.n	8005982 <_vfiprintf_r+0x13a>
 8005958:	eba0 0308 	sub.w	r3, r0, r8
 800595c:	fa09 f303 	lsl.w	r3, r9, r3
 8005960:	4313      	orrs	r3, r2
 8005962:	9304      	str	r3, [sp, #16]
 8005964:	46a2      	mov	sl, r4
 8005966:	e7d2      	b.n	800590e <_vfiprintf_r+0xc6>
 8005968:	9b03      	ldr	r3, [sp, #12]
 800596a:	1d19      	adds	r1, r3, #4
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	9103      	str	r1, [sp, #12]
 8005970:	2b00      	cmp	r3, #0
 8005972:	bfbb      	ittet	lt
 8005974:	425b      	neglt	r3, r3
 8005976:	f042 0202 	orrlt.w	r2, r2, #2
 800597a:	9307      	strge	r3, [sp, #28]
 800597c:	9307      	strlt	r3, [sp, #28]
 800597e:	bfb8      	it	lt
 8005980:	9204      	strlt	r2, [sp, #16]
 8005982:	7823      	ldrb	r3, [r4, #0]
 8005984:	2b2e      	cmp	r3, #46	@ 0x2e
 8005986:	d10a      	bne.n	800599e <_vfiprintf_r+0x156>
 8005988:	7863      	ldrb	r3, [r4, #1]
 800598a:	2b2a      	cmp	r3, #42	@ 0x2a
 800598c:	d132      	bne.n	80059f4 <_vfiprintf_r+0x1ac>
 800598e:	9b03      	ldr	r3, [sp, #12]
 8005990:	1d1a      	adds	r2, r3, #4
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	9203      	str	r2, [sp, #12]
 8005996:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800599a:	3402      	adds	r4, #2
 800599c:	9305      	str	r3, [sp, #20]
 800599e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005a74 <_vfiprintf_r+0x22c>
 80059a2:	7821      	ldrb	r1, [r4, #0]
 80059a4:	2203      	movs	r2, #3
 80059a6:	4650      	mov	r0, sl
 80059a8:	f7fa fc32 	bl	8000210 <memchr>
 80059ac:	b138      	cbz	r0, 80059be <_vfiprintf_r+0x176>
 80059ae:	9b04      	ldr	r3, [sp, #16]
 80059b0:	eba0 000a 	sub.w	r0, r0, sl
 80059b4:	2240      	movs	r2, #64	@ 0x40
 80059b6:	4082      	lsls	r2, r0
 80059b8:	4313      	orrs	r3, r2
 80059ba:	3401      	adds	r4, #1
 80059bc:	9304      	str	r3, [sp, #16]
 80059be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059c2:	4829      	ldr	r0, [pc, #164]	@ (8005a68 <_vfiprintf_r+0x220>)
 80059c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80059c8:	2206      	movs	r2, #6
 80059ca:	f7fa fc21 	bl	8000210 <memchr>
 80059ce:	2800      	cmp	r0, #0
 80059d0:	d03f      	beq.n	8005a52 <_vfiprintf_r+0x20a>
 80059d2:	4b26      	ldr	r3, [pc, #152]	@ (8005a6c <_vfiprintf_r+0x224>)
 80059d4:	bb1b      	cbnz	r3, 8005a1e <_vfiprintf_r+0x1d6>
 80059d6:	9b03      	ldr	r3, [sp, #12]
 80059d8:	3307      	adds	r3, #7
 80059da:	f023 0307 	bic.w	r3, r3, #7
 80059de:	3308      	adds	r3, #8
 80059e0:	9303      	str	r3, [sp, #12]
 80059e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059e4:	443b      	add	r3, r7
 80059e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80059e8:	e76a      	b.n	80058c0 <_vfiprintf_r+0x78>
 80059ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80059ee:	460c      	mov	r4, r1
 80059f0:	2001      	movs	r0, #1
 80059f2:	e7a8      	b.n	8005946 <_vfiprintf_r+0xfe>
 80059f4:	2300      	movs	r3, #0
 80059f6:	3401      	adds	r4, #1
 80059f8:	9305      	str	r3, [sp, #20]
 80059fa:	4619      	mov	r1, r3
 80059fc:	f04f 0c0a 	mov.w	ip, #10
 8005a00:	4620      	mov	r0, r4
 8005a02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a06:	3a30      	subs	r2, #48	@ 0x30
 8005a08:	2a09      	cmp	r2, #9
 8005a0a:	d903      	bls.n	8005a14 <_vfiprintf_r+0x1cc>
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d0c6      	beq.n	800599e <_vfiprintf_r+0x156>
 8005a10:	9105      	str	r1, [sp, #20]
 8005a12:	e7c4      	b.n	800599e <_vfiprintf_r+0x156>
 8005a14:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a18:	4604      	mov	r4, r0
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e7f0      	b.n	8005a00 <_vfiprintf_r+0x1b8>
 8005a1e:	ab03      	add	r3, sp, #12
 8005a20:	9300      	str	r3, [sp, #0]
 8005a22:	462a      	mov	r2, r5
 8005a24:	4b12      	ldr	r3, [pc, #72]	@ (8005a70 <_vfiprintf_r+0x228>)
 8005a26:	a904      	add	r1, sp, #16
 8005a28:	4630      	mov	r0, r6
 8005a2a:	f3af 8000 	nop.w
 8005a2e:	4607      	mov	r7, r0
 8005a30:	1c78      	adds	r0, r7, #1
 8005a32:	d1d6      	bne.n	80059e2 <_vfiprintf_r+0x19a>
 8005a34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005a36:	07d9      	lsls	r1, r3, #31
 8005a38:	d405      	bmi.n	8005a46 <_vfiprintf_r+0x1fe>
 8005a3a:	89ab      	ldrh	r3, [r5, #12]
 8005a3c:	059a      	lsls	r2, r3, #22
 8005a3e:	d402      	bmi.n	8005a46 <_vfiprintf_r+0x1fe>
 8005a40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005a42:	f7ff fe8b 	bl	800575c <__retarget_lock_release_recursive>
 8005a46:	89ab      	ldrh	r3, [r5, #12]
 8005a48:	065b      	lsls	r3, r3, #25
 8005a4a:	f53f af1f 	bmi.w	800588c <_vfiprintf_r+0x44>
 8005a4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005a50:	e71e      	b.n	8005890 <_vfiprintf_r+0x48>
 8005a52:	ab03      	add	r3, sp, #12
 8005a54:	9300      	str	r3, [sp, #0]
 8005a56:	462a      	mov	r2, r5
 8005a58:	4b05      	ldr	r3, [pc, #20]	@ (8005a70 <_vfiprintf_r+0x228>)
 8005a5a:	a904      	add	r1, sp, #16
 8005a5c:	4630      	mov	r0, r6
 8005a5e:	f000 f879 	bl	8005b54 <_printf_i>
 8005a62:	e7e4      	b.n	8005a2e <_vfiprintf_r+0x1e6>
 8005a64:	08006c44 	.word	0x08006c44
 8005a68:	08006c4e 	.word	0x08006c4e
 8005a6c:	00000000 	.word	0x00000000
 8005a70:	08005823 	.word	0x08005823
 8005a74:	08006c4a 	.word	0x08006c4a

08005a78 <_printf_common>:
 8005a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a7c:	4616      	mov	r6, r2
 8005a7e:	4698      	mov	r8, r3
 8005a80:	688a      	ldr	r2, [r1, #8]
 8005a82:	690b      	ldr	r3, [r1, #16]
 8005a84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	bfb8      	it	lt
 8005a8c:	4613      	movlt	r3, r2
 8005a8e:	6033      	str	r3, [r6, #0]
 8005a90:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005a94:	4607      	mov	r7, r0
 8005a96:	460c      	mov	r4, r1
 8005a98:	b10a      	cbz	r2, 8005a9e <_printf_common+0x26>
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	6033      	str	r3, [r6, #0]
 8005a9e:	6823      	ldr	r3, [r4, #0]
 8005aa0:	0699      	lsls	r1, r3, #26
 8005aa2:	bf42      	ittt	mi
 8005aa4:	6833      	ldrmi	r3, [r6, #0]
 8005aa6:	3302      	addmi	r3, #2
 8005aa8:	6033      	strmi	r3, [r6, #0]
 8005aaa:	6825      	ldr	r5, [r4, #0]
 8005aac:	f015 0506 	ands.w	r5, r5, #6
 8005ab0:	d106      	bne.n	8005ac0 <_printf_common+0x48>
 8005ab2:	f104 0a19 	add.w	sl, r4, #25
 8005ab6:	68e3      	ldr	r3, [r4, #12]
 8005ab8:	6832      	ldr	r2, [r6, #0]
 8005aba:	1a9b      	subs	r3, r3, r2
 8005abc:	42ab      	cmp	r3, r5
 8005abe:	dc26      	bgt.n	8005b0e <_printf_common+0x96>
 8005ac0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005ac4:	6822      	ldr	r2, [r4, #0]
 8005ac6:	3b00      	subs	r3, #0
 8005ac8:	bf18      	it	ne
 8005aca:	2301      	movne	r3, #1
 8005acc:	0692      	lsls	r2, r2, #26
 8005ace:	d42b      	bmi.n	8005b28 <_printf_common+0xb0>
 8005ad0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005ad4:	4641      	mov	r1, r8
 8005ad6:	4638      	mov	r0, r7
 8005ad8:	47c8      	blx	r9
 8005ada:	3001      	adds	r0, #1
 8005adc:	d01e      	beq.n	8005b1c <_printf_common+0xa4>
 8005ade:	6823      	ldr	r3, [r4, #0]
 8005ae0:	6922      	ldr	r2, [r4, #16]
 8005ae2:	f003 0306 	and.w	r3, r3, #6
 8005ae6:	2b04      	cmp	r3, #4
 8005ae8:	bf02      	ittt	eq
 8005aea:	68e5      	ldreq	r5, [r4, #12]
 8005aec:	6833      	ldreq	r3, [r6, #0]
 8005aee:	1aed      	subeq	r5, r5, r3
 8005af0:	68a3      	ldr	r3, [r4, #8]
 8005af2:	bf0c      	ite	eq
 8005af4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005af8:	2500      	movne	r5, #0
 8005afa:	4293      	cmp	r3, r2
 8005afc:	bfc4      	itt	gt
 8005afe:	1a9b      	subgt	r3, r3, r2
 8005b00:	18ed      	addgt	r5, r5, r3
 8005b02:	2600      	movs	r6, #0
 8005b04:	341a      	adds	r4, #26
 8005b06:	42b5      	cmp	r5, r6
 8005b08:	d11a      	bne.n	8005b40 <_printf_common+0xc8>
 8005b0a:	2000      	movs	r0, #0
 8005b0c:	e008      	b.n	8005b20 <_printf_common+0xa8>
 8005b0e:	2301      	movs	r3, #1
 8005b10:	4652      	mov	r2, sl
 8005b12:	4641      	mov	r1, r8
 8005b14:	4638      	mov	r0, r7
 8005b16:	47c8      	blx	r9
 8005b18:	3001      	adds	r0, #1
 8005b1a:	d103      	bne.n	8005b24 <_printf_common+0xac>
 8005b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b24:	3501      	adds	r5, #1
 8005b26:	e7c6      	b.n	8005ab6 <_printf_common+0x3e>
 8005b28:	18e1      	adds	r1, r4, r3
 8005b2a:	1c5a      	adds	r2, r3, #1
 8005b2c:	2030      	movs	r0, #48	@ 0x30
 8005b2e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005b32:	4422      	add	r2, r4
 8005b34:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005b38:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005b3c:	3302      	adds	r3, #2
 8005b3e:	e7c7      	b.n	8005ad0 <_printf_common+0x58>
 8005b40:	2301      	movs	r3, #1
 8005b42:	4622      	mov	r2, r4
 8005b44:	4641      	mov	r1, r8
 8005b46:	4638      	mov	r0, r7
 8005b48:	47c8      	blx	r9
 8005b4a:	3001      	adds	r0, #1
 8005b4c:	d0e6      	beq.n	8005b1c <_printf_common+0xa4>
 8005b4e:	3601      	adds	r6, #1
 8005b50:	e7d9      	b.n	8005b06 <_printf_common+0x8e>
	...

08005b54 <_printf_i>:
 8005b54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b58:	7e0f      	ldrb	r7, [r1, #24]
 8005b5a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005b5c:	2f78      	cmp	r7, #120	@ 0x78
 8005b5e:	4691      	mov	r9, r2
 8005b60:	4680      	mov	r8, r0
 8005b62:	460c      	mov	r4, r1
 8005b64:	469a      	mov	sl, r3
 8005b66:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005b6a:	d807      	bhi.n	8005b7c <_printf_i+0x28>
 8005b6c:	2f62      	cmp	r7, #98	@ 0x62
 8005b6e:	d80a      	bhi.n	8005b86 <_printf_i+0x32>
 8005b70:	2f00      	cmp	r7, #0
 8005b72:	f000 80d2 	beq.w	8005d1a <_printf_i+0x1c6>
 8005b76:	2f58      	cmp	r7, #88	@ 0x58
 8005b78:	f000 80b9 	beq.w	8005cee <_printf_i+0x19a>
 8005b7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b80:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005b84:	e03a      	b.n	8005bfc <_printf_i+0xa8>
 8005b86:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005b8a:	2b15      	cmp	r3, #21
 8005b8c:	d8f6      	bhi.n	8005b7c <_printf_i+0x28>
 8005b8e:	a101      	add	r1, pc, #4	@ (adr r1, 8005b94 <_printf_i+0x40>)
 8005b90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b94:	08005bed 	.word	0x08005bed
 8005b98:	08005c01 	.word	0x08005c01
 8005b9c:	08005b7d 	.word	0x08005b7d
 8005ba0:	08005b7d 	.word	0x08005b7d
 8005ba4:	08005b7d 	.word	0x08005b7d
 8005ba8:	08005b7d 	.word	0x08005b7d
 8005bac:	08005c01 	.word	0x08005c01
 8005bb0:	08005b7d 	.word	0x08005b7d
 8005bb4:	08005b7d 	.word	0x08005b7d
 8005bb8:	08005b7d 	.word	0x08005b7d
 8005bbc:	08005b7d 	.word	0x08005b7d
 8005bc0:	08005d01 	.word	0x08005d01
 8005bc4:	08005c2b 	.word	0x08005c2b
 8005bc8:	08005cbb 	.word	0x08005cbb
 8005bcc:	08005b7d 	.word	0x08005b7d
 8005bd0:	08005b7d 	.word	0x08005b7d
 8005bd4:	08005d23 	.word	0x08005d23
 8005bd8:	08005b7d 	.word	0x08005b7d
 8005bdc:	08005c2b 	.word	0x08005c2b
 8005be0:	08005b7d 	.word	0x08005b7d
 8005be4:	08005b7d 	.word	0x08005b7d
 8005be8:	08005cc3 	.word	0x08005cc3
 8005bec:	6833      	ldr	r3, [r6, #0]
 8005bee:	1d1a      	adds	r2, r3, #4
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	6032      	str	r2, [r6, #0]
 8005bf4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005bf8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e09d      	b.n	8005d3c <_printf_i+0x1e8>
 8005c00:	6833      	ldr	r3, [r6, #0]
 8005c02:	6820      	ldr	r0, [r4, #0]
 8005c04:	1d19      	adds	r1, r3, #4
 8005c06:	6031      	str	r1, [r6, #0]
 8005c08:	0606      	lsls	r6, r0, #24
 8005c0a:	d501      	bpl.n	8005c10 <_printf_i+0xbc>
 8005c0c:	681d      	ldr	r5, [r3, #0]
 8005c0e:	e003      	b.n	8005c18 <_printf_i+0xc4>
 8005c10:	0645      	lsls	r5, r0, #25
 8005c12:	d5fb      	bpl.n	8005c0c <_printf_i+0xb8>
 8005c14:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005c18:	2d00      	cmp	r5, #0
 8005c1a:	da03      	bge.n	8005c24 <_printf_i+0xd0>
 8005c1c:	232d      	movs	r3, #45	@ 0x2d
 8005c1e:	426d      	negs	r5, r5
 8005c20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c24:	4859      	ldr	r0, [pc, #356]	@ (8005d8c <_printf_i+0x238>)
 8005c26:	230a      	movs	r3, #10
 8005c28:	e011      	b.n	8005c4e <_printf_i+0xfa>
 8005c2a:	6821      	ldr	r1, [r4, #0]
 8005c2c:	6833      	ldr	r3, [r6, #0]
 8005c2e:	0608      	lsls	r0, r1, #24
 8005c30:	f853 5b04 	ldr.w	r5, [r3], #4
 8005c34:	d402      	bmi.n	8005c3c <_printf_i+0xe8>
 8005c36:	0649      	lsls	r1, r1, #25
 8005c38:	bf48      	it	mi
 8005c3a:	b2ad      	uxthmi	r5, r5
 8005c3c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005c3e:	4853      	ldr	r0, [pc, #332]	@ (8005d8c <_printf_i+0x238>)
 8005c40:	6033      	str	r3, [r6, #0]
 8005c42:	bf14      	ite	ne
 8005c44:	230a      	movne	r3, #10
 8005c46:	2308      	moveq	r3, #8
 8005c48:	2100      	movs	r1, #0
 8005c4a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005c4e:	6866      	ldr	r6, [r4, #4]
 8005c50:	60a6      	str	r6, [r4, #8]
 8005c52:	2e00      	cmp	r6, #0
 8005c54:	bfa2      	ittt	ge
 8005c56:	6821      	ldrge	r1, [r4, #0]
 8005c58:	f021 0104 	bicge.w	r1, r1, #4
 8005c5c:	6021      	strge	r1, [r4, #0]
 8005c5e:	b90d      	cbnz	r5, 8005c64 <_printf_i+0x110>
 8005c60:	2e00      	cmp	r6, #0
 8005c62:	d04b      	beq.n	8005cfc <_printf_i+0x1a8>
 8005c64:	4616      	mov	r6, r2
 8005c66:	fbb5 f1f3 	udiv	r1, r5, r3
 8005c6a:	fb03 5711 	mls	r7, r3, r1, r5
 8005c6e:	5dc7      	ldrb	r7, [r0, r7]
 8005c70:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005c74:	462f      	mov	r7, r5
 8005c76:	42bb      	cmp	r3, r7
 8005c78:	460d      	mov	r5, r1
 8005c7a:	d9f4      	bls.n	8005c66 <_printf_i+0x112>
 8005c7c:	2b08      	cmp	r3, #8
 8005c7e:	d10b      	bne.n	8005c98 <_printf_i+0x144>
 8005c80:	6823      	ldr	r3, [r4, #0]
 8005c82:	07df      	lsls	r7, r3, #31
 8005c84:	d508      	bpl.n	8005c98 <_printf_i+0x144>
 8005c86:	6923      	ldr	r3, [r4, #16]
 8005c88:	6861      	ldr	r1, [r4, #4]
 8005c8a:	4299      	cmp	r1, r3
 8005c8c:	bfde      	ittt	le
 8005c8e:	2330      	movle	r3, #48	@ 0x30
 8005c90:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c94:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005c98:	1b92      	subs	r2, r2, r6
 8005c9a:	6122      	str	r2, [r4, #16]
 8005c9c:	f8cd a000 	str.w	sl, [sp]
 8005ca0:	464b      	mov	r3, r9
 8005ca2:	aa03      	add	r2, sp, #12
 8005ca4:	4621      	mov	r1, r4
 8005ca6:	4640      	mov	r0, r8
 8005ca8:	f7ff fee6 	bl	8005a78 <_printf_common>
 8005cac:	3001      	adds	r0, #1
 8005cae:	d14a      	bne.n	8005d46 <_printf_i+0x1f2>
 8005cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8005cb4:	b004      	add	sp, #16
 8005cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cba:	6823      	ldr	r3, [r4, #0]
 8005cbc:	f043 0320 	orr.w	r3, r3, #32
 8005cc0:	6023      	str	r3, [r4, #0]
 8005cc2:	4833      	ldr	r0, [pc, #204]	@ (8005d90 <_printf_i+0x23c>)
 8005cc4:	2778      	movs	r7, #120	@ 0x78
 8005cc6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005cca:	6823      	ldr	r3, [r4, #0]
 8005ccc:	6831      	ldr	r1, [r6, #0]
 8005cce:	061f      	lsls	r7, r3, #24
 8005cd0:	f851 5b04 	ldr.w	r5, [r1], #4
 8005cd4:	d402      	bmi.n	8005cdc <_printf_i+0x188>
 8005cd6:	065f      	lsls	r7, r3, #25
 8005cd8:	bf48      	it	mi
 8005cda:	b2ad      	uxthmi	r5, r5
 8005cdc:	6031      	str	r1, [r6, #0]
 8005cde:	07d9      	lsls	r1, r3, #31
 8005ce0:	bf44      	itt	mi
 8005ce2:	f043 0320 	orrmi.w	r3, r3, #32
 8005ce6:	6023      	strmi	r3, [r4, #0]
 8005ce8:	b11d      	cbz	r5, 8005cf2 <_printf_i+0x19e>
 8005cea:	2310      	movs	r3, #16
 8005cec:	e7ac      	b.n	8005c48 <_printf_i+0xf4>
 8005cee:	4827      	ldr	r0, [pc, #156]	@ (8005d8c <_printf_i+0x238>)
 8005cf0:	e7e9      	b.n	8005cc6 <_printf_i+0x172>
 8005cf2:	6823      	ldr	r3, [r4, #0]
 8005cf4:	f023 0320 	bic.w	r3, r3, #32
 8005cf8:	6023      	str	r3, [r4, #0]
 8005cfa:	e7f6      	b.n	8005cea <_printf_i+0x196>
 8005cfc:	4616      	mov	r6, r2
 8005cfe:	e7bd      	b.n	8005c7c <_printf_i+0x128>
 8005d00:	6833      	ldr	r3, [r6, #0]
 8005d02:	6825      	ldr	r5, [r4, #0]
 8005d04:	6961      	ldr	r1, [r4, #20]
 8005d06:	1d18      	adds	r0, r3, #4
 8005d08:	6030      	str	r0, [r6, #0]
 8005d0a:	062e      	lsls	r6, r5, #24
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	d501      	bpl.n	8005d14 <_printf_i+0x1c0>
 8005d10:	6019      	str	r1, [r3, #0]
 8005d12:	e002      	b.n	8005d1a <_printf_i+0x1c6>
 8005d14:	0668      	lsls	r0, r5, #25
 8005d16:	d5fb      	bpl.n	8005d10 <_printf_i+0x1bc>
 8005d18:	8019      	strh	r1, [r3, #0]
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	6123      	str	r3, [r4, #16]
 8005d1e:	4616      	mov	r6, r2
 8005d20:	e7bc      	b.n	8005c9c <_printf_i+0x148>
 8005d22:	6833      	ldr	r3, [r6, #0]
 8005d24:	1d1a      	adds	r2, r3, #4
 8005d26:	6032      	str	r2, [r6, #0]
 8005d28:	681e      	ldr	r6, [r3, #0]
 8005d2a:	6862      	ldr	r2, [r4, #4]
 8005d2c:	2100      	movs	r1, #0
 8005d2e:	4630      	mov	r0, r6
 8005d30:	f7fa fa6e 	bl	8000210 <memchr>
 8005d34:	b108      	cbz	r0, 8005d3a <_printf_i+0x1e6>
 8005d36:	1b80      	subs	r0, r0, r6
 8005d38:	6060      	str	r0, [r4, #4]
 8005d3a:	6863      	ldr	r3, [r4, #4]
 8005d3c:	6123      	str	r3, [r4, #16]
 8005d3e:	2300      	movs	r3, #0
 8005d40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d44:	e7aa      	b.n	8005c9c <_printf_i+0x148>
 8005d46:	6923      	ldr	r3, [r4, #16]
 8005d48:	4632      	mov	r2, r6
 8005d4a:	4649      	mov	r1, r9
 8005d4c:	4640      	mov	r0, r8
 8005d4e:	47d0      	blx	sl
 8005d50:	3001      	adds	r0, #1
 8005d52:	d0ad      	beq.n	8005cb0 <_printf_i+0x15c>
 8005d54:	6823      	ldr	r3, [r4, #0]
 8005d56:	079b      	lsls	r3, r3, #30
 8005d58:	d413      	bmi.n	8005d82 <_printf_i+0x22e>
 8005d5a:	68e0      	ldr	r0, [r4, #12]
 8005d5c:	9b03      	ldr	r3, [sp, #12]
 8005d5e:	4298      	cmp	r0, r3
 8005d60:	bfb8      	it	lt
 8005d62:	4618      	movlt	r0, r3
 8005d64:	e7a6      	b.n	8005cb4 <_printf_i+0x160>
 8005d66:	2301      	movs	r3, #1
 8005d68:	4632      	mov	r2, r6
 8005d6a:	4649      	mov	r1, r9
 8005d6c:	4640      	mov	r0, r8
 8005d6e:	47d0      	blx	sl
 8005d70:	3001      	adds	r0, #1
 8005d72:	d09d      	beq.n	8005cb0 <_printf_i+0x15c>
 8005d74:	3501      	adds	r5, #1
 8005d76:	68e3      	ldr	r3, [r4, #12]
 8005d78:	9903      	ldr	r1, [sp, #12]
 8005d7a:	1a5b      	subs	r3, r3, r1
 8005d7c:	42ab      	cmp	r3, r5
 8005d7e:	dcf2      	bgt.n	8005d66 <_printf_i+0x212>
 8005d80:	e7eb      	b.n	8005d5a <_printf_i+0x206>
 8005d82:	2500      	movs	r5, #0
 8005d84:	f104 0619 	add.w	r6, r4, #25
 8005d88:	e7f5      	b.n	8005d76 <_printf_i+0x222>
 8005d8a:	bf00      	nop
 8005d8c:	08006c55 	.word	0x08006c55
 8005d90:	08006c66 	.word	0x08006c66

08005d94 <__sflush_r>:
 8005d94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d9c:	0716      	lsls	r6, r2, #28
 8005d9e:	4605      	mov	r5, r0
 8005da0:	460c      	mov	r4, r1
 8005da2:	d454      	bmi.n	8005e4e <__sflush_r+0xba>
 8005da4:	684b      	ldr	r3, [r1, #4]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	dc02      	bgt.n	8005db0 <__sflush_r+0x1c>
 8005daa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	dd48      	ble.n	8005e42 <__sflush_r+0xae>
 8005db0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005db2:	2e00      	cmp	r6, #0
 8005db4:	d045      	beq.n	8005e42 <__sflush_r+0xae>
 8005db6:	2300      	movs	r3, #0
 8005db8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005dbc:	682f      	ldr	r7, [r5, #0]
 8005dbe:	6a21      	ldr	r1, [r4, #32]
 8005dc0:	602b      	str	r3, [r5, #0]
 8005dc2:	d030      	beq.n	8005e26 <__sflush_r+0x92>
 8005dc4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005dc6:	89a3      	ldrh	r3, [r4, #12]
 8005dc8:	0759      	lsls	r1, r3, #29
 8005dca:	d505      	bpl.n	8005dd8 <__sflush_r+0x44>
 8005dcc:	6863      	ldr	r3, [r4, #4]
 8005dce:	1ad2      	subs	r2, r2, r3
 8005dd0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005dd2:	b10b      	cbz	r3, 8005dd8 <__sflush_r+0x44>
 8005dd4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005dd6:	1ad2      	subs	r2, r2, r3
 8005dd8:	2300      	movs	r3, #0
 8005dda:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005ddc:	6a21      	ldr	r1, [r4, #32]
 8005dde:	4628      	mov	r0, r5
 8005de0:	47b0      	blx	r6
 8005de2:	1c43      	adds	r3, r0, #1
 8005de4:	89a3      	ldrh	r3, [r4, #12]
 8005de6:	d106      	bne.n	8005df6 <__sflush_r+0x62>
 8005de8:	6829      	ldr	r1, [r5, #0]
 8005dea:	291d      	cmp	r1, #29
 8005dec:	d82b      	bhi.n	8005e46 <__sflush_r+0xb2>
 8005dee:	4a2a      	ldr	r2, [pc, #168]	@ (8005e98 <__sflush_r+0x104>)
 8005df0:	410a      	asrs	r2, r1
 8005df2:	07d6      	lsls	r6, r2, #31
 8005df4:	d427      	bmi.n	8005e46 <__sflush_r+0xb2>
 8005df6:	2200      	movs	r2, #0
 8005df8:	6062      	str	r2, [r4, #4]
 8005dfa:	04d9      	lsls	r1, r3, #19
 8005dfc:	6922      	ldr	r2, [r4, #16]
 8005dfe:	6022      	str	r2, [r4, #0]
 8005e00:	d504      	bpl.n	8005e0c <__sflush_r+0x78>
 8005e02:	1c42      	adds	r2, r0, #1
 8005e04:	d101      	bne.n	8005e0a <__sflush_r+0x76>
 8005e06:	682b      	ldr	r3, [r5, #0]
 8005e08:	b903      	cbnz	r3, 8005e0c <__sflush_r+0x78>
 8005e0a:	6560      	str	r0, [r4, #84]	@ 0x54
 8005e0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005e0e:	602f      	str	r7, [r5, #0]
 8005e10:	b1b9      	cbz	r1, 8005e42 <__sflush_r+0xae>
 8005e12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005e16:	4299      	cmp	r1, r3
 8005e18:	d002      	beq.n	8005e20 <__sflush_r+0x8c>
 8005e1a:	4628      	mov	r0, r5
 8005e1c:	f7ff fca0 	bl	8005760 <_free_r>
 8005e20:	2300      	movs	r3, #0
 8005e22:	6363      	str	r3, [r4, #52]	@ 0x34
 8005e24:	e00d      	b.n	8005e42 <__sflush_r+0xae>
 8005e26:	2301      	movs	r3, #1
 8005e28:	4628      	mov	r0, r5
 8005e2a:	47b0      	blx	r6
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	1c50      	adds	r0, r2, #1
 8005e30:	d1c9      	bne.n	8005dc6 <__sflush_r+0x32>
 8005e32:	682b      	ldr	r3, [r5, #0]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d0c6      	beq.n	8005dc6 <__sflush_r+0x32>
 8005e38:	2b1d      	cmp	r3, #29
 8005e3a:	d001      	beq.n	8005e40 <__sflush_r+0xac>
 8005e3c:	2b16      	cmp	r3, #22
 8005e3e:	d11e      	bne.n	8005e7e <__sflush_r+0xea>
 8005e40:	602f      	str	r7, [r5, #0]
 8005e42:	2000      	movs	r0, #0
 8005e44:	e022      	b.n	8005e8c <__sflush_r+0xf8>
 8005e46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e4a:	b21b      	sxth	r3, r3
 8005e4c:	e01b      	b.n	8005e86 <__sflush_r+0xf2>
 8005e4e:	690f      	ldr	r7, [r1, #16]
 8005e50:	2f00      	cmp	r7, #0
 8005e52:	d0f6      	beq.n	8005e42 <__sflush_r+0xae>
 8005e54:	0793      	lsls	r3, r2, #30
 8005e56:	680e      	ldr	r6, [r1, #0]
 8005e58:	bf08      	it	eq
 8005e5a:	694b      	ldreq	r3, [r1, #20]
 8005e5c:	600f      	str	r7, [r1, #0]
 8005e5e:	bf18      	it	ne
 8005e60:	2300      	movne	r3, #0
 8005e62:	eba6 0807 	sub.w	r8, r6, r7
 8005e66:	608b      	str	r3, [r1, #8]
 8005e68:	f1b8 0f00 	cmp.w	r8, #0
 8005e6c:	dde9      	ble.n	8005e42 <__sflush_r+0xae>
 8005e6e:	6a21      	ldr	r1, [r4, #32]
 8005e70:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005e72:	4643      	mov	r3, r8
 8005e74:	463a      	mov	r2, r7
 8005e76:	4628      	mov	r0, r5
 8005e78:	47b0      	blx	r6
 8005e7a:	2800      	cmp	r0, #0
 8005e7c:	dc08      	bgt.n	8005e90 <__sflush_r+0xfc>
 8005e7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e86:	81a3      	strh	r3, [r4, #12]
 8005e88:	f04f 30ff 	mov.w	r0, #4294967295
 8005e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e90:	4407      	add	r7, r0
 8005e92:	eba8 0800 	sub.w	r8, r8, r0
 8005e96:	e7e7      	b.n	8005e68 <__sflush_r+0xd4>
 8005e98:	dfbffffe 	.word	0xdfbffffe

08005e9c <_fflush_r>:
 8005e9c:	b538      	push	{r3, r4, r5, lr}
 8005e9e:	690b      	ldr	r3, [r1, #16]
 8005ea0:	4605      	mov	r5, r0
 8005ea2:	460c      	mov	r4, r1
 8005ea4:	b913      	cbnz	r3, 8005eac <_fflush_r+0x10>
 8005ea6:	2500      	movs	r5, #0
 8005ea8:	4628      	mov	r0, r5
 8005eaa:	bd38      	pop	{r3, r4, r5, pc}
 8005eac:	b118      	cbz	r0, 8005eb6 <_fflush_r+0x1a>
 8005eae:	6a03      	ldr	r3, [r0, #32]
 8005eb0:	b90b      	cbnz	r3, 8005eb6 <_fflush_r+0x1a>
 8005eb2:	f7ff fb3d 	bl	8005530 <__sinit>
 8005eb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d0f3      	beq.n	8005ea6 <_fflush_r+0xa>
 8005ebe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005ec0:	07d0      	lsls	r0, r2, #31
 8005ec2:	d404      	bmi.n	8005ece <_fflush_r+0x32>
 8005ec4:	0599      	lsls	r1, r3, #22
 8005ec6:	d402      	bmi.n	8005ece <_fflush_r+0x32>
 8005ec8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005eca:	f7ff fc46 	bl	800575a <__retarget_lock_acquire_recursive>
 8005ece:	4628      	mov	r0, r5
 8005ed0:	4621      	mov	r1, r4
 8005ed2:	f7ff ff5f 	bl	8005d94 <__sflush_r>
 8005ed6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005ed8:	07da      	lsls	r2, r3, #31
 8005eda:	4605      	mov	r5, r0
 8005edc:	d4e4      	bmi.n	8005ea8 <_fflush_r+0xc>
 8005ede:	89a3      	ldrh	r3, [r4, #12]
 8005ee0:	059b      	lsls	r3, r3, #22
 8005ee2:	d4e1      	bmi.n	8005ea8 <_fflush_r+0xc>
 8005ee4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005ee6:	f7ff fc39 	bl	800575c <__retarget_lock_release_recursive>
 8005eea:	e7dd      	b.n	8005ea8 <_fflush_r+0xc>

08005eec <__swbuf_r>:
 8005eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eee:	460e      	mov	r6, r1
 8005ef0:	4614      	mov	r4, r2
 8005ef2:	4605      	mov	r5, r0
 8005ef4:	b118      	cbz	r0, 8005efe <__swbuf_r+0x12>
 8005ef6:	6a03      	ldr	r3, [r0, #32]
 8005ef8:	b90b      	cbnz	r3, 8005efe <__swbuf_r+0x12>
 8005efa:	f7ff fb19 	bl	8005530 <__sinit>
 8005efe:	69a3      	ldr	r3, [r4, #24]
 8005f00:	60a3      	str	r3, [r4, #8]
 8005f02:	89a3      	ldrh	r3, [r4, #12]
 8005f04:	071a      	lsls	r2, r3, #28
 8005f06:	d501      	bpl.n	8005f0c <__swbuf_r+0x20>
 8005f08:	6923      	ldr	r3, [r4, #16]
 8005f0a:	b943      	cbnz	r3, 8005f1e <__swbuf_r+0x32>
 8005f0c:	4621      	mov	r1, r4
 8005f0e:	4628      	mov	r0, r5
 8005f10:	f000 f82a 	bl	8005f68 <__swsetup_r>
 8005f14:	b118      	cbz	r0, 8005f1e <__swbuf_r+0x32>
 8005f16:	f04f 37ff 	mov.w	r7, #4294967295
 8005f1a:	4638      	mov	r0, r7
 8005f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f1e:	6823      	ldr	r3, [r4, #0]
 8005f20:	6922      	ldr	r2, [r4, #16]
 8005f22:	1a98      	subs	r0, r3, r2
 8005f24:	6963      	ldr	r3, [r4, #20]
 8005f26:	b2f6      	uxtb	r6, r6
 8005f28:	4283      	cmp	r3, r0
 8005f2a:	4637      	mov	r7, r6
 8005f2c:	dc05      	bgt.n	8005f3a <__swbuf_r+0x4e>
 8005f2e:	4621      	mov	r1, r4
 8005f30:	4628      	mov	r0, r5
 8005f32:	f7ff ffb3 	bl	8005e9c <_fflush_r>
 8005f36:	2800      	cmp	r0, #0
 8005f38:	d1ed      	bne.n	8005f16 <__swbuf_r+0x2a>
 8005f3a:	68a3      	ldr	r3, [r4, #8]
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	60a3      	str	r3, [r4, #8]
 8005f40:	6823      	ldr	r3, [r4, #0]
 8005f42:	1c5a      	adds	r2, r3, #1
 8005f44:	6022      	str	r2, [r4, #0]
 8005f46:	701e      	strb	r6, [r3, #0]
 8005f48:	6962      	ldr	r2, [r4, #20]
 8005f4a:	1c43      	adds	r3, r0, #1
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d004      	beq.n	8005f5a <__swbuf_r+0x6e>
 8005f50:	89a3      	ldrh	r3, [r4, #12]
 8005f52:	07db      	lsls	r3, r3, #31
 8005f54:	d5e1      	bpl.n	8005f1a <__swbuf_r+0x2e>
 8005f56:	2e0a      	cmp	r6, #10
 8005f58:	d1df      	bne.n	8005f1a <__swbuf_r+0x2e>
 8005f5a:	4621      	mov	r1, r4
 8005f5c:	4628      	mov	r0, r5
 8005f5e:	f7ff ff9d 	bl	8005e9c <_fflush_r>
 8005f62:	2800      	cmp	r0, #0
 8005f64:	d0d9      	beq.n	8005f1a <__swbuf_r+0x2e>
 8005f66:	e7d6      	b.n	8005f16 <__swbuf_r+0x2a>

08005f68 <__swsetup_r>:
 8005f68:	b538      	push	{r3, r4, r5, lr}
 8005f6a:	4b29      	ldr	r3, [pc, #164]	@ (8006010 <__swsetup_r+0xa8>)
 8005f6c:	4605      	mov	r5, r0
 8005f6e:	6818      	ldr	r0, [r3, #0]
 8005f70:	460c      	mov	r4, r1
 8005f72:	b118      	cbz	r0, 8005f7c <__swsetup_r+0x14>
 8005f74:	6a03      	ldr	r3, [r0, #32]
 8005f76:	b90b      	cbnz	r3, 8005f7c <__swsetup_r+0x14>
 8005f78:	f7ff fada 	bl	8005530 <__sinit>
 8005f7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f80:	0719      	lsls	r1, r3, #28
 8005f82:	d422      	bmi.n	8005fca <__swsetup_r+0x62>
 8005f84:	06da      	lsls	r2, r3, #27
 8005f86:	d407      	bmi.n	8005f98 <__swsetup_r+0x30>
 8005f88:	2209      	movs	r2, #9
 8005f8a:	602a      	str	r2, [r5, #0]
 8005f8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f90:	81a3      	strh	r3, [r4, #12]
 8005f92:	f04f 30ff 	mov.w	r0, #4294967295
 8005f96:	e033      	b.n	8006000 <__swsetup_r+0x98>
 8005f98:	0758      	lsls	r0, r3, #29
 8005f9a:	d512      	bpl.n	8005fc2 <__swsetup_r+0x5a>
 8005f9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005f9e:	b141      	cbz	r1, 8005fb2 <__swsetup_r+0x4a>
 8005fa0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005fa4:	4299      	cmp	r1, r3
 8005fa6:	d002      	beq.n	8005fae <__swsetup_r+0x46>
 8005fa8:	4628      	mov	r0, r5
 8005faa:	f7ff fbd9 	bl	8005760 <_free_r>
 8005fae:	2300      	movs	r3, #0
 8005fb0:	6363      	str	r3, [r4, #52]	@ 0x34
 8005fb2:	89a3      	ldrh	r3, [r4, #12]
 8005fb4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005fb8:	81a3      	strh	r3, [r4, #12]
 8005fba:	2300      	movs	r3, #0
 8005fbc:	6063      	str	r3, [r4, #4]
 8005fbe:	6923      	ldr	r3, [r4, #16]
 8005fc0:	6023      	str	r3, [r4, #0]
 8005fc2:	89a3      	ldrh	r3, [r4, #12]
 8005fc4:	f043 0308 	orr.w	r3, r3, #8
 8005fc8:	81a3      	strh	r3, [r4, #12]
 8005fca:	6923      	ldr	r3, [r4, #16]
 8005fcc:	b94b      	cbnz	r3, 8005fe2 <__swsetup_r+0x7a>
 8005fce:	89a3      	ldrh	r3, [r4, #12]
 8005fd0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005fd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fd8:	d003      	beq.n	8005fe2 <__swsetup_r+0x7a>
 8005fda:	4621      	mov	r1, r4
 8005fdc:	4628      	mov	r0, r5
 8005fde:	f000 f83f 	bl	8006060 <__smakebuf_r>
 8005fe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fe6:	f013 0201 	ands.w	r2, r3, #1
 8005fea:	d00a      	beq.n	8006002 <__swsetup_r+0x9a>
 8005fec:	2200      	movs	r2, #0
 8005fee:	60a2      	str	r2, [r4, #8]
 8005ff0:	6962      	ldr	r2, [r4, #20]
 8005ff2:	4252      	negs	r2, r2
 8005ff4:	61a2      	str	r2, [r4, #24]
 8005ff6:	6922      	ldr	r2, [r4, #16]
 8005ff8:	b942      	cbnz	r2, 800600c <__swsetup_r+0xa4>
 8005ffa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005ffe:	d1c5      	bne.n	8005f8c <__swsetup_r+0x24>
 8006000:	bd38      	pop	{r3, r4, r5, pc}
 8006002:	0799      	lsls	r1, r3, #30
 8006004:	bf58      	it	pl
 8006006:	6962      	ldrpl	r2, [r4, #20]
 8006008:	60a2      	str	r2, [r4, #8]
 800600a:	e7f4      	b.n	8005ff6 <__swsetup_r+0x8e>
 800600c:	2000      	movs	r0, #0
 800600e:	e7f7      	b.n	8006000 <__swsetup_r+0x98>
 8006010:	20000418 	.word	0x20000418

08006014 <__swhatbuf_r>:
 8006014:	b570      	push	{r4, r5, r6, lr}
 8006016:	460c      	mov	r4, r1
 8006018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800601c:	2900      	cmp	r1, #0
 800601e:	b096      	sub	sp, #88	@ 0x58
 8006020:	4615      	mov	r5, r2
 8006022:	461e      	mov	r6, r3
 8006024:	da0d      	bge.n	8006042 <__swhatbuf_r+0x2e>
 8006026:	89a3      	ldrh	r3, [r4, #12]
 8006028:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800602c:	f04f 0100 	mov.w	r1, #0
 8006030:	bf14      	ite	ne
 8006032:	2340      	movne	r3, #64	@ 0x40
 8006034:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006038:	2000      	movs	r0, #0
 800603a:	6031      	str	r1, [r6, #0]
 800603c:	602b      	str	r3, [r5, #0]
 800603e:	b016      	add	sp, #88	@ 0x58
 8006040:	bd70      	pop	{r4, r5, r6, pc}
 8006042:	466a      	mov	r2, sp
 8006044:	f000 f848 	bl	80060d8 <_fstat_r>
 8006048:	2800      	cmp	r0, #0
 800604a:	dbec      	blt.n	8006026 <__swhatbuf_r+0x12>
 800604c:	9901      	ldr	r1, [sp, #4]
 800604e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006052:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006056:	4259      	negs	r1, r3
 8006058:	4159      	adcs	r1, r3
 800605a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800605e:	e7eb      	b.n	8006038 <__swhatbuf_r+0x24>

08006060 <__smakebuf_r>:
 8006060:	898b      	ldrh	r3, [r1, #12]
 8006062:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006064:	079d      	lsls	r5, r3, #30
 8006066:	4606      	mov	r6, r0
 8006068:	460c      	mov	r4, r1
 800606a:	d507      	bpl.n	800607c <__smakebuf_r+0x1c>
 800606c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006070:	6023      	str	r3, [r4, #0]
 8006072:	6123      	str	r3, [r4, #16]
 8006074:	2301      	movs	r3, #1
 8006076:	6163      	str	r3, [r4, #20]
 8006078:	b003      	add	sp, #12
 800607a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800607c:	ab01      	add	r3, sp, #4
 800607e:	466a      	mov	r2, sp
 8006080:	f7ff ffc8 	bl	8006014 <__swhatbuf_r>
 8006084:	9f00      	ldr	r7, [sp, #0]
 8006086:	4605      	mov	r5, r0
 8006088:	4639      	mov	r1, r7
 800608a:	4630      	mov	r0, r6
 800608c:	f7ff f938 	bl	8005300 <_malloc_r>
 8006090:	b948      	cbnz	r0, 80060a6 <__smakebuf_r+0x46>
 8006092:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006096:	059a      	lsls	r2, r3, #22
 8006098:	d4ee      	bmi.n	8006078 <__smakebuf_r+0x18>
 800609a:	f023 0303 	bic.w	r3, r3, #3
 800609e:	f043 0302 	orr.w	r3, r3, #2
 80060a2:	81a3      	strh	r3, [r4, #12]
 80060a4:	e7e2      	b.n	800606c <__smakebuf_r+0xc>
 80060a6:	89a3      	ldrh	r3, [r4, #12]
 80060a8:	6020      	str	r0, [r4, #0]
 80060aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060ae:	81a3      	strh	r3, [r4, #12]
 80060b0:	9b01      	ldr	r3, [sp, #4]
 80060b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80060b6:	b15b      	cbz	r3, 80060d0 <__smakebuf_r+0x70>
 80060b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060bc:	4630      	mov	r0, r6
 80060be:	f000 f81d 	bl	80060fc <_isatty_r>
 80060c2:	b128      	cbz	r0, 80060d0 <__smakebuf_r+0x70>
 80060c4:	89a3      	ldrh	r3, [r4, #12]
 80060c6:	f023 0303 	bic.w	r3, r3, #3
 80060ca:	f043 0301 	orr.w	r3, r3, #1
 80060ce:	81a3      	strh	r3, [r4, #12]
 80060d0:	89a3      	ldrh	r3, [r4, #12]
 80060d2:	431d      	orrs	r5, r3
 80060d4:	81a5      	strh	r5, [r4, #12]
 80060d6:	e7cf      	b.n	8006078 <__smakebuf_r+0x18>

080060d8 <_fstat_r>:
 80060d8:	b538      	push	{r3, r4, r5, lr}
 80060da:	4d07      	ldr	r5, [pc, #28]	@ (80060f8 <_fstat_r+0x20>)
 80060dc:	2300      	movs	r3, #0
 80060de:	4604      	mov	r4, r0
 80060e0:	4608      	mov	r0, r1
 80060e2:	4611      	mov	r1, r2
 80060e4:	602b      	str	r3, [r5, #0]
 80060e6:	f7fb ff48 	bl	8001f7a <_fstat>
 80060ea:	1c43      	adds	r3, r0, #1
 80060ec:	d102      	bne.n	80060f4 <_fstat_r+0x1c>
 80060ee:	682b      	ldr	r3, [r5, #0]
 80060f0:	b103      	cbz	r3, 80060f4 <_fstat_r+0x1c>
 80060f2:	6023      	str	r3, [r4, #0]
 80060f4:	bd38      	pop	{r3, r4, r5, pc}
 80060f6:	bf00      	nop
 80060f8:	20000844 	.word	0x20000844

080060fc <_isatty_r>:
 80060fc:	b538      	push	{r3, r4, r5, lr}
 80060fe:	4d06      	ldr	r5, [pc, #24]	@ (8006118 <_isatty_r+0x1c>)
 8006100:	2300      	movs	r3, #0
 8006102:	4604      	mov	r4, r0
 8006104:	4608      	mov	r0, r1
 8006106:	602b      	str	r3, [r5, #0]
 8006108:	f7fb ff47 	bl	8001f9a <_isatty>
 800610c:	1c43      	adds	r3, r0, #1
 800610e:	d102      	bne.n	8006116 <_isatty_r+0x1a>
 8006110:	682b      	ldr	r3, [r5, #0]
 8006112:	b103      	cbz	r3, 8006116 <_isatty_r+0x1a>
 8006114:	6023      	str	r3, [r4, #0]
 8006116:	bd38      	pop	{r3, r4, r5, pc}
 8006118:	20000844 	.word	0x20000844

0800611c <tanf>:
 800611c:	ee10 3a10 	vmov	r3, s0
 8006120:	b507      	push	{r0, r1, r2, lr}
 8006122:	4a12      	ldr	r2, [pc, #72]	@ (800616c <tanf+0x50>)
 8006124:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006128:	4293      	cmp	r3, r2
 800612a:	d807      	bhi.n	800613c <tanf+0x20>
 800612c:	eddf 0a10 	vldr	s1, [pc, #64]	@ 8006170 <tanf+0x54>
 8006130:	2001      	movs	r0, #1
 8006132:	b003      	add	sp, #12
 8006134:	f85d eb04 	ldr.w	lr, [sp], #4
 8006138:	f000 b81c 	b.w	8006174 <__kernel_tanf>
 800613c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8006140:	d304      	bcc.n	800614c <tanf+0x30>
 8006142:	ee30 0a40 	vsub.f32	s0, s0, s0
 8006146:	b003      	add	sp, #12
 8006148:	f85d fb04 	ldr.w	pc, [sp], #4
 800614c:	4668      	mov	r0, sp
 800614e:	f000 f8f1 	bl	8006334 <__ieee754_rem_pio2f>
 8006152:	0040      	lsls	r0, r0, #1
 8006154:	f000 0002 	and.w	r0, r0, #2
 8006158:	eddd 0a01 	vldr	s1, [sp, #4]
 800615c:	ed9d 0a00 	vldr	s0, [sp]
 8006160:	f1c0 0001 	rsb	r0, r0, #1
 8006164:	f000 f806 	bl	8006174 <__kernel_tanf>
 8006168:	e7ed      	b.n	8006146 <tanf+0x2a>
 800616a:	bf00      	nop
 800616c:	3f490fda 	.word	0x3f490fda
 8006170:	00000000 	.word	0x00000000

08006174 <__kernel_tanf>:
 8006174:	b508      	push	{r3, lr}
 8006176:	ee10 3a10 	vmov	r3, s0
 800617a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800617e:	f1b2 5f46 	cmp.w	r2, #830472192	@ 0x31800000
 8006182:	eef0 7a40 	vmov.f32	s15, s0
 8006186:	d217      	bcs.n	80061b8 <__kernel_tanf+0x44>
 8006188:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 800618c:	ee17 1a10 	vmov	r1, s14
 8006190:	bb41      	cbnz	r1, 80061e4 <__kernel_tanf+0x70>
 8006192:	1c43      	adds	r3, r0, #1
 8006194:	4313      	orrs	r3, r2
 8006196:	d108      	bne.n	80061aa <__kernel_tanf+0x36>
 8006198:	f000 f9fc 	bl	8006594 <fabsf>
 800619c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80061a0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80061a4:	eeb0 0a67 	vmov.f32	s0, s15
 80061a8:	bd08      	pop	{r3, pc}
 80061aa:	2801      	cmp	r0, #1
 80061ac:	d0fa      	beq.n	80061a4 <__kernel_tanf+0x30>
 80061ae:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80061b2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80061b6:	e7f5      	b.n	80061a4 <__kernel_tanf+0x30>
 80061b8:	494c      	ldr	r1, [pc, #304]	@ (80062ec <__kernel_tanf+0x178>)
 80061ba:	428a      	cmp	r2, r1
 80061bc:	d312      	bcc.n	80061e4 <__kernel_tanf+0x70>
 80061be:	2b00      	cmp	r3, #0
 80061c0:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 80062f0 <__kernel_tanf+0x17c>
 80061c4:	bfb8      	it	lt
 80061c6:	eef1 7a40 	vneglt.f32	s15, s0
 80061ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80061ce:	eddf 7a49 	vldr	s15, [pc, #292]	@ 80062f4 <__kernel_tanf+0x180>
 80061d2:	bfb8      	it	lt
 80061d4:	eef1 0a60 	vneglt.f32	s1, s1
 80061d8:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80061dc:	eddf 0a46 	vldr	s1, [pc, #280]	@ 80062f8 <__kernel_tanf+0x184>
 80061e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80061e4:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80061e8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80062fc <__kernel_tanf+0x188>
 80061ec:	ed9f 6a44 	vldr	s12, [pc, #272]	@ 8006300 <__kernel_tanf+0x18c>
 80061f0:	ed9f 5a44 	vldr	s10, [pc, #272]	@ 8006304 <__kernel_tanf+0x190>
 80061f4:	493d      	ldr	r1, [pc, #244]	@ (80062ec <__kernel_tanf+0x178>)
 80061f6:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80061fa:	428a      	cmp	r2, r1
 80061fc:	eea7 6a25 	vfma.f32	s12, s14, s11
 8006200:	eddf 5a41 	vldr	s11, [pc, #260]	@ 8006308 <__kernel_tanf+0x194>
 8006204:	eee6 5a07 	vfma.f32	s11, s12, s14
 8006208:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 800630c <__kernel_tanf+0x198>
 800620c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8006210:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006310 <__kernel_tanf+0x19c>
 8006214:	eee6 5a07 	vfma.f32	s11, s12, s14
 8006218:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 8006314 <__kernel_tanf+0x1a0>
 800621c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8006220:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8006318 <__kernel_tanf+0x1a4>
 8006224:	eee7 5a05 	vfma.f32	s11, s14, s10
 8006228:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 800631c <__kernel_tanf+0x1a8>
 800622c:	eea5 5a87 	vfma.f32	s10, s11, s14
 8006230:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8006320 <__kernel_tanf+0x1ac>
 8006234:	eee5 5a07 	vfma.f32	s11, s10, s14
 8006238:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 8006324 <__kernel_tanf+0x1b0>
 800623c:	eea5 5a87 	vfma.f32	s10, s11, s14
 8006240:	eddf 5a39 	vldr	s11, [pc, #228]	@ 8006328 <__kernel_tanf+0x1b4>
 8006244:	eee5 5a07 	vfma.f32	s11, s10, s14
 8006248:	eeb0 7a46 	vmov.f32	s14, s12
 800624c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8006250:	ee27 5aa6 	vmul.f32	s10, s15, s13
 8006254:	eeb0 6a60 	vmov.f32	s12, s1
 8006258:	eea7 6a05 	vfma.f32	s12, s14, s10
 800625c:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800632c <__kernel_tanf+0x1b8>
 8006260:	eee6 0a26 	vfma.f32	s1, s12, s13
 8006264:	eee5 0a07 	vfma.f32	s1, s10, s14
 8006268:	ee37 6aa0 	vadd.f32	s12, s15, s1
 800626c:	d31d      	bcc.n	80062aa <__kernel_tanf+0x136>
 800626e:	ee07 0a10 	vmov	s14, r0
 8006272:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006276:	ee26 5a06 	vmul.f32	s10, s12, s12
 800627a:	ee36 6a07 	vadd.f32	s12, s12, s14
 800627e:	179b      	asrs	r3, r3, #30
 8006280:	eec5 5a06 	vdiv.f32	s11, s10, s12
 8006284:	f003 0302 	and.w	r3, r3, #2
 8006288:	f1c3 0301 	rsb	r3, r3, #1
 800628c:	ee06 3a90 	vmov	s13, r3
 8006290:	ee35 6ae0 	vsub.f32	s12, s11, s1
 8006294:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8006298:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800629c:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80062a0:	eea7 7ac6 	vfms.f32	s14, s15, s12
 80062a4:	ee66 7a87 	vmul.f32	s15, s13, s14
 80062a8:	e77c      	b.n	80061a4 <__kernel_tanf+0x30>
 80062aa:	2801      	cmp	r0, #1
 80062ac:	d01b      	beq.n	80062e6 <__kernel_tanf+0x172>
 80062ae:	4b20      	ldr	r3, [pc, #128]	@ (8006330 <__kernel_tanf+0x1bc>)
 80062b0:	ee16 2a10 	vmov	r2, s12
 80062b4:	401a      	ands	r2, r3
 80062b6:	ee05 2a90 	vmov	s11, r2
 80062ba:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80062be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80062c2:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80062c6:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 80062ca:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80062ce:	ee16 2a90 	vmov	r2, s13
 80062d2:	4013      	ands	r3, r2
 80062d4:	ee07 3a90 	vmov	s15, r3
 80062d8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80062dc:	eea0 7aa7 	vfma.f32	s14, s1, s15
 80062e0:	eee7 7a26 	vfma.f32	s15, s14, s13
 80062e4:	e75e      	b.n	80061a4 <__kernel_tanf+0x30>
 80062e6:	eef0 7a46 	vmov.f32	s15, s12
 80062ea:	e75b      	b.n	80061a4 <__kernel_tanf+0x30>
 80062ec:	3f2ca140 	.word	0x3f2ca140
 80062f0:	3f490fda 	.word	0x3f490fda
 80062f4:	33222168 	.word	0x33222168
 80062f8:	00000000 	.word	0x00000000
 80062fc:	b79bae5f 	.word	0xb79bae5f
 8006300:	38a3f445 	.word	0x38a3f445
 8006304:	37d95384 	.word	0x37d95384
 8006308:	3a1a26c8 	.word	0x3a1a26c8
 800630c:	3b6b6916 	.word	0x3b6b6916
 8006310:	3cb327a4 	.word	0x3cb327a4
 8006314:	3e088889 	.word	0x3e088889
 8006318:	3895c07a 	.word	0x3895c07a
 800631c:	398137b9 	.word	0x398137b9
 8006320:	3abede48 	.word	0x3abede48
 8006324:	3c11371f 	.word	0x3c11371f
 8006328:	3d5d0dd1 	.word	0x3d5d0dd1
 800632c:	3eaaaaab 	.word	0x3eaaaaab
 8006330:	fffff000 	.word	0xfffff000

08006334 <__ieee754_rem_pio2f>:
 8006334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006336:	ee10 6a10 	vmov	r6, s0
 800633a:	4b88      	ldr	r3, [pc, #544]	@ (800655c <__ieee754_rem_pio2f+0x228>)
 800633c:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8006340:	429d      	cmp	r5, r3
 8006342:	b087      	sub	sp, #28
 8006344:	4604      	mov	r4, r0
 8006346:	d805      	bhi.n	8006354 <__ieee754_rem_pio2f+0x20>
 8006348:	2300      	movs	r3, #0
 800634a:	ed80 0a00 	vstr	s0, [r0]
 800634e:	6043      	str	r3, [r0, #4]
 8006350:	2000      	movs	r0, #0
 8006352:	e022      	b.n	800639a <__ieee754_rem_pio2f+0x66>
 8006354:	4b82      	ldr	r3, [pc, #520]	@ (8006560 <__ieee754_rem_pio2f+0x22c>)
 8006356:	429d      	cmp	r5, r3
 8006358:	d83a      	bhi.n	80063d0 <__ieee754_rem_pio2f+0x9c>
 800635a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800635e:	2e00      	cmp	r6, #0
 8006360:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8006564 <__ieee754_rem_pio2f+0x230>
 8006364:	4a80      	ldr	r2, [pc, #512]	@ (8006568 <__ieee754_rem_pio2f+0x234>)
 8006366:	f023 030f 	bic.w	r3, r3, #15
 800636a:	dd18      	ble.n	800639e <__ieee754_rem_pio2f+0x6a>
 800636c:	4293      	cmp	r3, r2
 800636e:	ee70 7a47 	vsub.f32	s15, s0, s14
 8006372:	bf09      	itett	eq
 8006374:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800656c <__ieee754_rem_pio2f+0x238>
 8006378:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8006570 <__ieee754_rem_pio2f+0x23c>
 800637c:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8006574 <__ieee754_rem_pio2f+0x240>
 8006380:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8006384:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8006388:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800638c:	ed80 7a00 	vstr	s14, [r0]
 8006390:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006394:	edc0 7a01 	vstr	s15, [r0, #4]
 8006398:	2001      	movs	r0, #1
 800639a:	b007      	add	sp, #28
 800639c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800639e:	4293      	cmp	r3, r2
 80063a0:	ee70 7a07 	vadd.f32	s15, s0, s14
 80063a4:	bf09      	itett	eq
 80063a6:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800656c <__ieee754_rem_pio2f+0x238>
 80063aa:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8006570 <__ieee754_rem_pio2f+0x23c>
 80063ae:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8006574 <__ieee754_rem_pio2f+0x240>
 80063b2:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80063b6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80063ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80063be:	ed80 7a00 	vstr	s14, [r0]
 80063c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063c6:	edc0 7a01 	vstr	s15, [r0, #4]
 80063ca:	f04f 30ff 	mov.w	r0, #4294967295
 80063ce:	e7e4      	b.n	800639a <__ieee754_rem_pio2f+0x66>
 80063d0:	4b69      	ldr	r3, [pc, #420]	@ (8006578 <__ieee754_rem_pio2f+0x244>)
 80063d2:	429d      	cmp	r5, r3
 80063d4:	d873      	bhi.n	80064be <__ieee754_rem_pio2f+0x18a>
 80063d6:	f000 f8dd 	bl	8006594 <fabsf>
 80063da:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800657c <__ieee754_rem_pio2f+0x248>
 80063de:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80063e2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80063e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80063ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80063ee:	ee17 0a90 	vmov	r0, s15
 80063f2:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8006564 <__ieee754_rem_pio2f+0x230>
 80063f6:	eea7 0a67 	vfms.f32	s0, s14, s15
 80063fa:	281f      	cmp	r0, #31
 80063fc:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8006570 <__ieee754_rem_pio2f+0x23c>
 8006400:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006404:	eeb1 6a47 	vneg.f32	s12, s14
 8006408:	ee70 6a67 	vsub.f32	s13, s0, s15
 800640c:	ee16 1a90 	vmov	r1, s13
 8006410:	dc09      	bgt.n	8006426 <__ieee754_rem_pio2f+0xf2>
 8006412:	4a5b      	ldr	r2, [pc, #364]	@ (8006580 <__ieee754_rem_pio2f+0x24c>)
 8006414:	1e47      	subs	r7, r0, #1
 8006416:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800641a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800641e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006422:	4293      	cmp	r3, r2
 8006424:	d107      	bne.n	8006436 <__ieee754_rem_pio2f+0x102>
 8006426:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800642a:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800642e:	2a08      	cmp	r2, #8
 8006430:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8006434:	dc14      	bgt.n	8006460 <__ieee754_rem_pio2f+0x12c>
 8006436:	6021      	str	r1, [r4, #0]
 8006438:	ed94 7a00 	vldr	s14, [r4]
 800643c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8006440:	2e00      	cmp	r6, #0
 8006442:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006446:	ed84 0a01 	vstr	s0, [r4, #4]
 800644a:	daa6      	bge.n	800639a <__ieee754_rem_pio2f+0x66>
 800644c:	eeb1 7a47 	vneg.f32	s14, s14
 8006450:	eeb1 0a40 	vneg.f32	s0, s0
 8006454:	ed84 7a00 	vstr	s14, [r4]
 8006458:	ed84 0a01 	vstr	s0, [r4, #4]
 800645c:	4240      	negs	r0, r0
 800645e:	e79c      	b.n	800639a <__ieee754_rem_pio2f+0x66>
 8006460:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800656c <__ieee754_rem_pio2f+0x238>
 8006464:	eef0 6a40 	vmov.f32	s13, s0
 8006468:	eee6 6a25 	vfma.f32	s13, s12, s11
 800646c:	ee70 7a66 	vsub.f32	s15, s0, s13
 8006470:	eee6 7a25 	vfma.f32	s15, s12, s11
 8006474:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006574 <__ieee754_rem_pio2f+0x240>
 8006478:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800647c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8006480:	ee15 2a90 	vmov	r2, s11
 8006484:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8006488:	1a5b      	subs	r3, r3, r1
 800648a:	2b19      	cmp	r3, #25
 800648c:	dc04      	bgt.n	8006498 <__ieee754_rem_pio2f+0x164>
 800648e:	edc4 5a00 	vstr	s11, [r4]
 8006492:	eeb0 0a66 	vmov.f32	s0, s13
 8006496:	e7cf      	b.n	8006438 <__ieee754_rem_pio2f+0x104>
 8006498:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8006584 <__ieee754_rem_pio2f+0x250>
 800649c:	eeb0 0a66 	vmov.f32	s0, s13
 80064a0:	eea6 0a25 	vfma.f32	s0, s12, s11
 80064a4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80064a8:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8006588 <__ieee754_rem_pio2f+0x254>
 80064ac:	eee6 7a25 	vfma.f32	s15, s12, s11
 80064b0:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80064b4:	ee30 7a67 	vsub.f32	s14, s0, s15
 80064b8:	ed84 7a00 	vstr	s14, [r4]
 80064bc:	e7bc      	b.n	8006438 <__ieee754_rem_pio2f+0x104>
 80064be:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 80064c2:	d306      	bcc.n	80064d2 <__ieee754_rem_pio2f+0x19e>
 80064c4:	ee70 7a40 	vsub.f32	s15, s0, s0
 80064c8:	edc0 7a01 	vstr	s15, [r0, #4]
 80064cc:	edc0 7a00 	vstr	s15, [r0]
 80064d0:	e73e      	b.n	8006350 <__ieee754_rem_pio2f+0x1c>
 80064d2:	15ea      	asrs	r2, r5, #23
 80064d4:	3a86      	subs	r2, #134	@ 0x86
 80064d6:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80064da:	ee07 3a90 	vmov	s15, r3
 80064de:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80064e2:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800658c <__ieee754_rem_pio2f+0x258>
 80064e6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80064ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80064ee:	ed8d 7a03 	vstr	s14, [sp, #12]
 80064f2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80064f6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80064fa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80064fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006502:	ed8d 7a04 	vstr	s14, [sp, #16]
 8006506:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800650a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800650e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006512:	edcd 7a05 	vstr	s15, [sp, #20]
 8006516:	d11e      	bne.n	8006556 <__ieee754_rem_pio2f+0x222>
 8006518:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800651c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006520:	bf0c      	ite	eq
 8006522:	2301      	moveq	r3, #1
 8006524:	2302      	movne	r3, #2
 8006526:	491a      	ldr	r1, [pc, #104]	@ (8006590 <__ieee754_rem_pio2f+0x25c>)
 8006528:	9101      	str	r1, [sp, #4]
 800652a:	2102      	movs	r1, #2
 800652c:	9100      	str	r1, [sp, #0]
 800652e:	a803      	add	r0, sp, #12
 8006530:	4621      	mov	r1, r4
 8006532:	f000 f837 	bl	80065a4 <__kernel_rem_pio2f>
 8006536:	2e00      	cmp	r6, #0
 8006538:	f6bf af2f 	bge.w	800639a <__ieee754_rem_pio2f+0x66>
 800653c:	edd4 7a00 	vldr	s15, [r4]
 8006540:	eef1 7a67 	vneg.f32	s15, s15
 8006544:	edc4 7a00 	vstr	s15, [r4]
 8006548:	edd4 7a01 	vldr	s15, [r4, #4]
 800654c:	eef1 7a67 	vneg.f32	s15, s15
 8006550:	edc4 7a01 	vstr	s15, [r4, #4]
 8006554:	e782      	b.n	800645c <__ieee754_rem_pio2f+0x128>
 8006556:	2303      	movs	r3, #3
 8006558:	e7e5      	b.n	8006526 <__ieee754_rem_pio2f+0x1f2>
 800655a:	bf00      	nop
 800655c:	3f490fd8 	.word	0x3f490fd8
 8006560:	4016cbe3 	.word	0x4016cbe3
 8006564:	3fc90f80 	.word	0x3fc90f80
 8006568:	3fc90fd0 	.word	0x3fc90fd0
 800656c:	37354400 	.word	0x37354400
 8006570:	37354443 	.word	0x37354443
 8006574:	2e85a308 	.word	0x2e85a308
 8006578:	43490f80 	.word	0x43490f80
 800657c:	3f22f984 	.word	0x3f22f984
 8006580:	08006c78 	.word	0x08006c78
 8006584:	2e85a300 	.word	0x2e85a300
 8006588:	248d3132 	.word	0x248d3132
 800658c:	43800000 	.word	0x43800000
 8006590:	08006cf8 	.word	0x08006cf8

08006594 <fabsf>:
 8006594:	ee10 3a10 	vmov	r3, s0
 8006598:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800659c:	ee00 3a10 	vmov	s0, r3
 80065a0:	4770      	bx	lr
	...

080065a4 <__kernel_rem_pio2f>:
 80065a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065a8:	ed2d 8b04 	vpush	{d8-d9}
 80065ac:	b0d9      	sub	sp, #356	@ 0x164
 80065ae:	4690      	mov	r8, r2
 80065b0:	9001      	str	r0, [sp, #4]
 80065b2:	4ab9      	ldr	r2, [pc, #740]	@ (8006898 <__kernel_rem_pio2f+0x2f4>)
 80065b4:	9866      	ldr	r0, [sp, #408]	@ 0x198
 80065b6:	f118 0f04 	cmn.w	r8, #4
 80065ba:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 80065be:	460f      	mov	r7, r1
 80065c0:	f103 3bff 	add.w	fp, r3, #4294967295
 80065c4:	db27      	blt.n	8006616 <__kernel_rem_pio2f+0x72>
 80065c6:	f1b8 0203 	subs.w	r2, r8, #3
 80065ca:	bf48      	it	mi
 80065cc:	f108 0204 	addmi.w	r2, r8, #4
 80065d0:	10d2      	asrs	r2, r2, #3
 80065d2:	1c55      	adds	r5, r2, #1
 80065d4:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80065d6:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 80068a8 <__kernel_rem_pio2f+0x304>
 80065da:	00e8      	lsls	r0, r5, #3
 80065dc:	eba2 060b 	sub.w	r6, r2, fp
 80065e0:	9002      	str	r0, [sp, #8]
 80065e2:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 80065e6:	eb0a 0c0b 	add.w	ip, sl, fp
 80065ea:	ac1c      	add	r4, sp, #112	@ 0x70
 80065ec:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 80065f0:	2000      	movs	r0, #0
 80065f2:	4560      	cmp	r0, ip
 80065f4:	dd11      	ble.n	800661a <__kernel_rem_pio2f+0x76>
 80065f6:	a91c      	add	r1, sp, #112	@ 0x70
 80065f8:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 80065fc:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8006600:	f04f 0c00 	mov.w	ip, #0
 8006604:	45d4      	cmp	ip, sl
 8006606:	dc27      	bgt.n	8006658 <__kernel_rem_pio2f+0xb4>
 8006608:	f8dd e004 	ldr.w	lr, [sp, #4]
 800660c:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 80068a8 <__kernel_rem_pio2f+0x304>
 8006610:	4606      	mov	r6, r0
 8006612:	2400      	movs	r4, #0
 8006614:	e016      	b.n	8006644 <__kernel_rem_pio2f+0xa0>
 8006616:	2200      	movs	r2, #0
 8006618:	e7db      	b.n	80065d2 <__kernel_rem_pio2f+0x2e>
 800661a:	42c6      	cmn	r6, r0
 800661c:	bf5d      	ittte	pl
 800661e:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8006622:	ee07 1a90 	vmovpl	s15, r1
 8006626:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800662a:	eef0 7a47 	vmovmi.f32	s15, s14
 800662e:	ece4 7a01 	vstmia	r4!, {s15}
 8006632:	3001      	adds	r0, #1
 8006634:	e7dd      	b.n	80065f2 <__kernel_rem_pio2f+0x4e>
 8006636:	ecfe 6a01 	vldmia	lr!, {s13}
 800663a:	ed96 7a00 	vldr	s14, [r6]
 800663e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8006642:	3401      	adds	r4, #1
 8006644:	455c      	cmp	r4, fp
 8006646:	f1a6 0604 	sub.w	r6, r6, #4
 800664a:	ddf4      	ble.n	8006636 <__kernel_rem_pio2f+0x92>
 800664c:	ece9 7a01 	vstmia	r9!, {s15}
 8006650:	f10c 0c01 	add.w	ip, ip, #1
 8006654:	3004      	adds	r0, #4
 8006656:	e7d5      	b.n	8006604 <__kernel_rem_pio2f+0x60>
 8006658:	a908      	add	r1, sp, #32
 800665a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800665e:	9104      	str	r1, [sp, #16]
 8006660:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8006662:	eddf 8a90 	vldr	s17, [pc, #576]	@ 80068a4 <__kernel_rem_pio2f+0x300>
 8006666:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 80068a0 <__kernel_rem_pio2f+0x2fc>
 800666a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800666e:	9203      	str	r2, [sp, #12]
 8006670:	4654      	mov	r4, sl
 8006672:	00a2      	lsls	r2, r4, #2
 8006674:	9205      	str	r2, [sp, #20]
 8006676:	aa58      	add	r2, sp, #352	@ 0x160
 8006678:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800667c:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8006680:	a944      	add	r1, sp, #272	@ 0x110
 8006682:	aa08      	add	r2, sp, #32
 8006684:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8006688:	4694      	mov	ip, r2
 800668a:	4626      	mov	r6, r4
 800668c:	2e00      	cmp	r6, #0
 800668e:	f1a0 0004 	sub.w	r0, r0, #4
 8006692:	dc4c      	bgt.n	800672e <__kernel_rem_pio2f+0x18a>
 8006694:	4628      	mov	r0, r5
 8006696:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800669a:	f000 f9f5 	bl	8006a88 <scalbnf>
 800669e:	eeb0 8a40 	vmov.f32	s16, s0
 80066a2:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 80066a6:	ee28 0a00 	vmul.f32	s0, s16, s0
 80066aa:	f000 fa53 	bl	8006b54 <floorf>
 80066ae:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 80066b2:	eea0 8a67 	vfms.f32	s16, s0, s15
 80066b6:	2d00      	cmp	r5, #0
 80066b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80066bc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80066c0:	ee17 9a90 	vmov	r9, s15
 80066c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80066c8:	ee38 8a67 	vsub.f32	s16, s16, s15
 80066cc:	dd41      	ble.n	8006752 <__kernel_rem_pio2f+0x1ae>
 80066ce:	f104 3cff 	add.w	ip, r4, #4294967295
 80066d2:	a908      	add	r1, sp, #32
 80066d4:	f1c5 0e08 	rsb	lr, r5, #8
 80066d8:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 80066dc:	fa46 f00e 	asr.w	r0, r6, lr
 80066e0:	4481      	add	r9, r0
 80066e2:	fa00 f00e 	lsl.w	r0, r0, lr
 80066e6:	1a36      	subs	r6, r6, r0
 80066e8:	f1c5 0007 	rsb	r0, r5, #7
 80066ec:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 80066f0:	4106      	asrs	r6, r0
 80066f2:	2e00      	cmp	r6, #0
 80066f4:	dd3c      	ble.n	8006770 <__kernel_rem_pio2f+0x1cc>
 80066f6:	f04f 0e00 	mov.w	lr, #0
 80066fa:	f109 0901 	add.w	r9, r9, #1
 80066fe:	4670      	mov	r0, lr
 8006700:	4574      	cmp	r4, lr
 8006702:	dc68      	bgt.n	80067d6 <__kernel_rem_pio2f+0x232>
 8006704:	2d00      	cmp	r5, #0
 8006706:	dd03      	ble.n	8006710 <__kernel_rem_pio2f+0x16c>
 8006708:	2d01      	cmp	r5, #1
 800670a:	d074      	beq.n	80067f6 <__kernel_rem_pio2f+0x252>
 800670c:	2d02      	cmp	r5, #2
 800670e:	d07d      	beq.n	800680c <__kernel_rem_pio2f+0x268>
 8006710:	2e02      	cmp	r6, #2
 8006712:	d12d      	bne.n	8006770 <__kernel_rem_pio2f+0x1cc>
 8006714:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8006718:	ee30 8a48 	vsub.f32	s16, s0, s16
 800671c:	b340      	cbz	r0, 8006770 <__kernel_rem_pio2f+0x1cc>
 800671e:	4628      	mov	r0, r5
 8006720:	9306      	str	r3, [sp, #24]
 8006722:	f000 f9b1 	bl	8006a88 <scalbnf>
 8006726:	9b06      	ldr	r3, [sp, #24]
 8006728:	ee38 8a40 	vsub.f32	s16, s16, s0
 800672c:	e020      	b.n	8006770 <__kernel_rem_pio2f+0x1cc>
 800672e:	ee60 7a28 	vmul.f32	s15, s0, s17
 8006732:	3e01      	subs	r6, #1
 8006734:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006738:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800673c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8006740:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8006744:	ecac 0a01 	vstmia	ip!, {s0}
 8006748:	ed90 0a00 	vldr	s0, [r0]
 800674c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8006750:	e79c      	b.n	800668c <__kernel_rem_pio2f+0xe8>
 8006752:	d105      	bne.n	8006760 <__kernel_rem_pio2f+0x1bc>
 8006754:	1e60      	subs	r0, r4, #1
 8006756:	a908      	add	r1, sp, #32
 8006758:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800675c:	11f6      	asrs	r6, r6, #7
 800675e:	e7c8      	b.n	80066f2 <__kernel_rem_pio2f+0x14e>
 8006760:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8006764:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8006768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800676c:	da31      	bge.n	80067d2 <__kernel_rem_pio2f+0x22e>
 800676e:	2600      	movs	r6, #0
 8006770:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8006774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006778:	f040 8098 	bne.w	80068ac <__kernel_rem_pio2f+0x308>
 800677c:	1e60      	subs	r0, r4, #1
 800677e:	2200      	movs	r2, #0
 8006780:	4550      	cmp	r0, sl
 8006782:	da4b      	bge.n	800681c <__kernel_rem_pio2f+0x278>
 8006784:	2a00      	cmp	r2, #0
 8006786:	d065      	beq.n	8006854 <__kernel_rem_pio2f+0x2b0>
 8006788:	3c01      	subs	r4, #1
 800678a:	ab08      	add	r3, sp, #32
 800678c:	3d08      	subs	r5, #8
 800678e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d0f8      	beq.n	8006788 <__kernel_rem_pio2f+0x1e4>
 8006796:	4628      	mov	r0, r5
 8006798:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800679c:	f000 f974 	bl	8006a88 <scalbnf>
 80067a0:	1c63      	adds	r3, r4, #1
 80067a2:	aa44      	add	r2, sp, #272	@ 0x110
 80067a4:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80068a4 <__kernel_rem_pio2f+0x300>
 80067a8:	0099      	lsls	r1, r3, #2
 80067aa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80067ae:	4623      	mov	r3, r4
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	f280 80a9 	bge.w	8006908 <__kernel_rem_pio2f+0x364>
 80067b6:	4623      	mov	r3, r4
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	f2c0 80c7 	blt.w	800694c <__kernel_rem_pio2f+0x3a8>
 80067be:	aa44      	add	r2, sp, #272	@ 0x110
 80067c0:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80067c4:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800689c <__kernel_rem_pio2f+0x2f8>
 80067c8:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80068a8 <__kernel_rem_pio2f+0x304>
 80067cc:	2000      	movs	r0, #0
 80067ce:	1ae2      	subs	r2, r4, r3
 80067d0:	e0b1      	b.n	8006936 <__kernel_rem_pio2f+0x392>
 80067d2:	2602      	movs	r6, #2
 80067d4:	e78f      	b.n	80066f6 <__kernel_rem_pio2f+0x152>
 80067d6:	f852 1b04 	ldr.w	r1, [r2], #4
 80067da:	b948      	cbnz	r0, 80067f0 <__kernel_rem_pio2f+0x24c>
 80067dc:	b121      	cbz	r1, 80067e8 <__kernel_rem_pio2f+0x244>
 80067de:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80067e2:	f842 1c04 	str.w	r1, [r2, #-4]
 80067e6:	2101      	movs	r1, #1
 80067e8:	f10e 0e01 	add.w	lr, lr, #1
 80067ec:	4608      	mov	r0, r1
 80067ee:	e787      	b.n	8006700 <__kernel_rem_pio2f+0x15c>
 80067f0:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 80067f4:	e7f5      	b.n	80067e2 <__kernel_rem_pio2f+0x23e>
 80067f6:	f104 3cff 	add.w	ip, r4, #4294967295
 80067fa:	aa08      	add	r2, sp, #32
 80067fc:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8006800:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006804:	a908      	add	r1, sp, #32
 8006806:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800680a:	e781      	b.n	8006710 <__kernel_rem_pio2f+0x16c>
 800680c:	f104 3cff 	add.w	ip, r4, #4294967295
 8006810:	aa08      	add	r2, sp, #32
 8006812:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8006816:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800681a:	e7f3      	b.n	8006804 <__kernel_rem_pio2f+0x260>
 800681c:	a908      	add	r1, sp, #32
 800681e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8006822:	3801      	subs	r0, #1
 8006824:	430a      	orrs	r2, r1
 8006826:	e7ab      	b.n	8006780 <__kernel_rem_pio2f+0x1dc>
 8006828:	3201      	adds	r2, #1
 800682a:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800682e:	2e00      	cmp	r6, #0
 8006830:	d0fa      	beq.n	8006828 <__kernel_rem_pio2f+0x284>
 8006832:	9905      	ldr	r1, [sp, #20]
 8006834:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8006838:	eb0d 0001 	add.w	r0, sp, r1
 800683c:	18e6      	adds	r6, r4, r3
 800683e:	a91c      	add	r1, sp, #112	@ 0x70
 8006840:	f104 0c01 	add.w	ip, r4, #1
 8006844:	384c      	subs	r0, #76	@ 0x4c
 8006846:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800684a:	4422      	add	r2, r4
 800684c:	4562      	cmp	r2, ip
 800684e:	da04      	bge.n	800685a <__kernel_rem_pio2f+0x2b6>
 8006850:	4614      	mov	r4, r2
 8006852:	e70e      	b.n	8006672 <__kernel_rem_pio2f+0xce>
 8006854:	9804      	ldr	r0, [sp, #16]
 8006856:	2201      	movs	r2, #1
 8006858:	e7e7      	b.n	800682a <__kernel_rem_pio2f+0x286>
 800685a:	9903      	ldr	r1, [sp, #12]
 800685c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8006860:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8006864:	9105      	str	r1, [sp, #20]
 8006866:	ee07 1a90 	vmov	s15, r1
 800686a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800686e:	2400      	movs	r4, #0
 8006870:	ece6 7a01 	vstmia	r6!, {s15}
 8006874:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80068a8 <__kernel_rem_pio2f+0x304>
 8006878:	46b1      	mov	r9, r6
 800687a:	455c      	cmp	r4, fp
 800687c:	dd04      	ble.n	8006888 <__kernel_rem_pio2f+0x2e4>
 800687e:	ece0 7a01 	vstmia	r0!, {s15}
 8006882:	f10c 0c01 	add.w	ip, ip, #1
 8006886:	e7e1      	b.n	800684c <__kernel_rem_pio2f+0x2a8>
 8006888:	ecfe 6a01 	vldmia	lr!, {s13}
 800688c:	ed39 7a01 	vldmdb	r9!, {s14}
 8006890:	3401      	adds	r4, #1
 8006892:	eee6 7a87 	vfma.f32	s15, s13, s14
 8006896:	e7f0      	b.n	800687a <__kernel_rem_pio2f+0x2d6>
 8006898:	0800703c 	.word	0x0800703c
 800689c:	08007010 	.word	0x08007010
 80068a0:	43800000 	.word	0x43800000
 80068a4:	3b800000 	.word	0x3b800000
 80068a8:	00000000 	.word	0x00000000
 80068ac:	9b02      	ldr	r3, [sp, #8]
 80068ae:	eeb0 0a48 	vmov.f32	s0, s16
 80068b2:	eba3 0008 	sub.w	r0, r3, r8
 80068b6:	f000 f8e7 	bl	8006a88 <scalbnf>
 80068ba:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 80068a0 <__kernel_rem_pio2f+0x2fc>
 80068be:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80068c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068c6:	db19      	blt.n	80068fc <__kernel_rem_pio2f+0x358>
 80068c8:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 80068a4 <__kernel_rem_pio2f+0x300>
 80068cc:	ee60 7a27 	vmul.f32	s15, s0, s15
 80068d0:	aa08      	add	r2, sp, #32
 80068d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80068d6:	3508      	adds	r5, #8
 80068d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80068dc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80068e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80068e4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80068e8:	ee10 3a10 	vmov	r3, s0
 80068ec:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80068f0:	ee17 3a90 	vmov	r3, s15
 80068f4:	3401      	adds	r4, #1
 80068f6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80068fa:	e74c      	b.n	8006796 <__kernel_rem_pio2f+0x1f2>
 80068fc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8006900:	aa08      	add	r2, sp, #32
 8006902:	ee10 3a10 	vmov	r3, s0
 8006906:	e7f6      	b.n	80068f6 <__kernel_rem_pio2f+0x352>
 8006908:	a808      	add	r0, sp, #32
 800690a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800690e:	9001      	str	r0, [sp, #4]
 8006910:	ee07 0a90 	vmov	s15, r0
 8006914:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006918:	3b01      	subs	r3, #1
 800691a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800691e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8006922:	ed62 7a01 	vstmdb	r2!, {s15}
 8006926:	e743      	b.n	80067b0 <__kernel_rem_pio2f+0x20c>
 8006928:	ecfc 6a01 	vldmia	ip!, {s13}
 800692c:	ecb5 7a01 	vldmia	r5!, {s14}
 8006930:	eee6 7a87 	vfma.f32	s15, s13, s14
 8006934:	3001      	adds	r0, #1
 8006936:	4550      	cmp	r0, sl
 8006938:	dc01      	bgt.n	800693e <__kernel_rem_pio2f+0x39a>
 800693a:	4282      	cmp	r2, r0
 800693c:	daf4      	bge.n	8006928 <__kernel_rem_pio2f+0x384>
 800693e:	a858      	add	r0, sp, #352	@ 0x160
 8006940:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8006944:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8006948:	3b01      	subs	r3, #1
 800694a:	e735      	b.n	80067b8 <__kernel_rem_pio2f+0x214>
 800694c:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800694e:	2b02      	cmp	r3, #2
 8006950:	dc09      	bgt.n	8006966 <__kernel_rem_pio2f+0x3c2>
 8006952:	2b00      	cmp	r3, #0
 8006954:	dc2b      	bgt.n	80069ae <__kernel_rem_pio2f+0x40a>
 8006956:	d044      	beq.n	80069e2 <__kernel_rem_pio2f+0x43e>
 8006958:	f009 0007 	and.w	r0, r9, #7
 800695c:	b059      	add	sp, #356	@ 0x164
 800695e:	ecbd 8b04 	vpop	{d8-d9}
 8006962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006966:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8006968:	2b03      	cmp	r3, #3
 800696a:	d1f5      	bne.n	8006958 <__kernel_rem_pio2f+0x3b4>
 800696c:	aa30      	add	r2, sp, #192	@ 0xc0
 800696e:	1f0b      	subs	r3, r1, #4
 8006970:	4413      	add	r3, r2
 8006972:	461a      	mov	r2, r3
 8006974:	4620      	mov	r0, r4
 8006976:	2800      	cmp	r0, #0
 8006978:	f1a2 0204 	sub.w	r2, r2, #4
 800697c:	dc52      	bgt.n	8006a24 <__kernel_rem_pio2f+0x480>
 800697e:	4622      	mov	r2, r4
 8006980:	2a01      	cmp	r2, #1
 8006982:	f1a3 0304 	sub.w	r3, r3, #4
 8006986:	dc5d      	bgt.n	8006a44 <__kernel_rem_pio2f+0x4a0>
 8006988:	ab30      	add	r3, sp, #192	@ 0xc0
 800698a:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 80068a8 <__kernel_rem_pio2f+0x304>
 800698e:	440b      	add	r3, r1
 8006990:	2c01      	cmp	r4, #1
 8006992:	dc67      	bgt.n	8006a64 <__kernel_rem_pio2f+0x4c0>
 8006994:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8006998:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800699c:	2e00      	cmp	r6, #0
 800699e:	d167      	bne.n	8006a70 <__kernel_rem_pio2f+0x4cc>
 80069a0:	edc7 6a00 	vstr	s13, [r7]
 80069a4:	ed87 7a01 	vstr	s14, [r7, #4]
 80069a8:	edc7 7a02 	vstr	s15, [r7, #8]
 80069ac:	e7d4      	b.n	8006958 <__kernel_rem_pio2f+0x3b4>
 80069ae:	ab30      	add	r3, sp, #192	@ 0xc0
 80069b0:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 80068a8 <__kernel_rem_pio2f+0x304>
 80069b4:	440b      	add	r3, r1
 80069b6:	4622      	mov	r2, r4
 80069b8:	2a00      	cmp	r2, #0
 80069ba:	da24      	bge.n	8006a06 <__kernel_rem_pio2f+0x462>
 80069bc:	b34e      	cbz	r6, 8006a12 <__kernel_rem_pio2f+0x46e>
 80069be:	eef1 7a47 	vneg.f32	s15, s14
 80069c2:	edc7 7a00 	vstr	s15, [r7]
 80069c6:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 80069ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80069ce:	aa31      	add	r2, sp, #196	@ 0xc4
 80069d0:	2301      	movs	r3, #1
 80069d2:	429c      	cmp	r4, r3
 80069d4:	da20      	bge.n	8006a18 <__kernel_rem_pio2f+0x474>
 80069d6:	b10e      	cbz	r6, 80069dc <__kernel_rem_pio2f+0x438>
 80069d8:	eef1 7a67 	vneg.f32	s15, s15
 80069dc:	edc7 7a01 	vstr	s15, [r7, #4]
 80069e0:	e7ba      	b.n	8006958 <__kernel_rem_pio2f+0x3b4>
 80069e2:	ab30      	add	r3, sp, #192	@ 0xc0
 80069e4:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 80068a8 <__kernel_rem_pio2f+0x304>
 80069e8:	440b      	add	r3, r1
 80069ea:	2c00      	cmp	r4, #0
 80069ec:	da05      	bge.n	80069fa <__kernel_rem_pio2f+0x456>
 80069ee:	b10e      	cbz	r6, 80069f4 <__kernel_rem_pio2f+0x450>
 80069f0:	eef1 7a67 	vneg.f32	s15, s15
 80069f4:	edc7 7a00 	vstr	s15, [r7]
 80069f8:	e7ae      	b.n	8006958 <__kernel_rem_pio2f+0x3b4>
 80069fa:	ed33 7a01 	vldmdb	r3!, {s14}
 80069fe:	3c01      	subs	r4, #1
 8006a00:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006a04:	e7f1      	b.n	80069ea <__kernel_rem_pio2f+0x446>
 8006a06:	ed73 7a01 	vldmdb	r3!, {s15}
 8006a0a:	3a01      	subs	r2, #1
 8006a0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006a10:	e7d2      	b.n	80069b8 <__kernel_rem_pio2f+0x414>
 8006a12:	eef0 7a47 	vmov.f32	s15, s14
 8006a16:	e7d4      	b.n	80069c2 <__kernel_rem_pio2f+0x41e>
 8006a18:	ecb2 7a01 	vldmia	r2!, {s14}
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006a22:	e7d6      	b.n	80069d2 <__kernel_rem_pio2f+0x42e>
 8006a24:	edd2 7a00 	vldr	s15, [r2]
 8006a28:	edd2 6a01 	vldr	s13, [r2, #4]
 8006a2c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8006a30:	3801      	subs	r0, #1
 8006a32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006a36:	ed82 7a00 	vstr	s14, [r2]
 8006a3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a3e:	edc2 7a01 	vstr	s15, [r2, #4]
 8006a42:	e798      	b.n	8006976 <__kernel_rem_pio2f+0x3d2>
 8006a44:	edd3 7a00 	vldr	s15, [r3]
 8006a48:	edd3 6a01 	vldr	s13, [r3, #4]
 8006a4c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8006a50:	3a01      	subs	r2, #1
 8006a52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006a56:	ed83 7a00 	vstr	s14, [r3]
 8006a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a5e:	edc3 7a01 	vstr	s15, [r3, #4]
 8006a62:	e78d      	b.n	8006980 <__kernel_rem_pio2f+0x3dc>
 8006a64:	ed33 7a01 	vldmdb	r3!, {s14}
 8006a68:	3c01      	subs	r4, #1
 8006a6a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006a6e:	e78f      	b.n	8006990 <__kernel_rem_pio2f+0x3ec>
 8006a70:	eef1 6a66 	vneg.f32	s13, s13
 8006a74:	eeb1 7a47 	vneg.f32	s14, s14
 8006a78:	edc7 6a00 	vstr	s13, [r7]
 8006a7c:	ed87 7a01 	vstr	s14, [r7, #4]
 8006a80:	eef1 7a67 	vneg.f32	s15, s15
 8006a84:	e790      	b.n	80069a8 <__kernel_rem_pio2f+0x404>
 8006a86:	bf00      	nop

08006a88 <scalbnf>:
 8006a88:	ee10 3a10 	vmov	r3, s0
 8006a8c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8006a90:	d02b      	beq.n	8006aea <scalbnf+0x62>
 8006a92:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8006a96:	d302      	bcc.n	8006a9e <scalbnf+0x16>
 8006a98:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006a9c:	4770      	bx	lr
 8006a9e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8006aa2:	d123      	bne.n	8006aec <scalbnf+0x64>
 8006aa4:	4b24      	ldr	r3, [pc, #144]	@ (8006b38 <scalbnf+0xb0>)
 8006aa6:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8006b3c <scalbnf+0xb4>
 8006aaa:	4298      	cmp	r0, r3
 8006aac:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006ab0:	db17      	blt.n	8006ae2 <scalbnf+0x5a>
 8006ab2:	ee10 3a10 	vmov	r3, s0
 8006ab6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006aba:	3a19      	subs	r2, #25
 8006abc:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8006ac0:	4288      	cmp	r0, r1
 8006ac2:	dd15      	ble.n	8006af0 <scalbnf+0x68>
 8006ac4:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8006b40 <scalbnf+0xb8>
 8006ac8:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8006b44 <scalbnf+0xbc>
 8006acc:	ee10 3a10 	vmov	r3, s0
 8006ad0:	eeb0 7a67 	vmov.f32	s14, s15
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	bfb8      	it	lt
 8006ad8:	eef0 7a66 	vmovlt.f32	s15, s13
 8006adc:	ee27 0a87 	vmul.f32	s0, s15, s14
 8006ae0:	4770      	bx	lr
 8006ae2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8006b48 <scalbnf+0xc0>
 8006ae6:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006aea:	4770      	bx	lr
 8006aec:	0dd2      	lsrs	r2, r2, #23
 8006aee:	e7e5      	b.n	8006abc <scalbnf+0x34>
 8006af0:	4410      	add	r0, r2
 8006af2:	28fe      	cmp	r0, #254	@ 0xfe
 8006af4:	dce6      	bgt.n	8006ac4 <scalbnf+0x3c>
 8006af6:	2800      	cmp	r0, #0
 8006af8:	dd06      	ble.n	8006b08 <scalbnf+0x80>
 8006afa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006afe:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8006b02:	ee00 3a10 	vmov	s0, r3
 8006b06:	4770      	bx	lr
 8006b08:	f110 0f16 	cmn.w	r0, #22
 8006b0c:	da09      	bge.n	8006b22 <scalbnf+0x9a>
 8006b0e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8006b48 <scalbnf+0xc0>
 8006b12:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8006b4c <scalbnf+0xc4>
 8006b16:	ee10 3a10 	vmov	r3, s0
 8006b1a:	eeb0 7a67 	vmov.f32	s14, s15
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	e7d9      	b.n	8006ad6 <scalbnf+0x4e>
 8006b22:	3019      	adds	r0, #25
 8006b24:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006b28:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8006b2c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8006b50 <scalbnf+0xc8>
 8006b30:	ee07 3a90 	vmov	s15, r3
 8006b34:	e7d7      	b.n	8006ae6 <scalbnf+0x5e>
 8006b36:	bf00      	nop
 8006b38:	ffff3cb0 	.word	0xffff3cb0
 8006b3c:	4c000000 	.word	0x4c000000
 8006b40:	7149f2ca 	.word	0x7149f2ca
 8006b44:	f149f2ca 	.word	0xf149f2ca
 8006b48:	0da24260 	.word	0x0da24260
 8006b4c:	8da24260 	.word	0x8da24260
 8006b50:	33000000 	.word	0x33000000

08006b54 <floorf>:
 8006b54:	ee10 3a10 	vmov	r3, s0
 8006b58:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006b5c:	3a7f      	subs	r2, #127	@ 0x7f
 8006b5e:	2a16      	cmp	r2, #22
 8006b60:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006b64:	dc2b      	bgt.n	8006bbe <floorf+0x6a>
 8006b66:	2a00      	cmp	r2, #0
 8006b68:	da12      	bge.n	8006b90 <floorf+0x3c>
 8006b6a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8006bd0 <floorf+0x7c>
 8006b6e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006b72:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b7a:	dd06      	ble.n	8006b8a <floorf+0x36>
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	da24      	bge.n	8006bca <floorf+0x76>
 8006b80:	2900      	cmp	r1, #0
 8006b82:	4b14      	ldr	r3, [pc, #80]	@ (8006bd4 <floorf+0x80>)
 8006b84:	bf08      	it	eq
 8006b86:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8006b8a:	ee00 3a10 	vmov	s0, r3
 8006b8e:	4770      	bx	lr
 8006b90:	4911      	ldr	r1, [pc, #68]	@ (8006bd8 <floorf+0x84>)
 8006b92:	4111      	asrs	r1, r2
 8006b94:	420b      	tst	r3, r1
 8006b96:	d0fa      	beq.n	8006b8e <floorf+0x3a>
 8006b98:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8006bd0 <floorf+0x7c>
 8006b9c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006ba0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ba8:	ddef      	ble.n	8006b8a <floorf+0x36>
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	bfbe      	ittt	lt
 8006bae:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8006bb2:	fa40 f202 	asrlt.w	r2, r0, r2
 8006bb6:	189b      	addlt	r3, r3, r2
 8006bb8:	ea23 0301 	bic.w	r3, r3, r1
 8006bbc:	e7e5      	b.n	8006b8a <floorf+0x36>
 8006bbe:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8006bc2:	d3e4      	bcc.n	8006b8e <floorf+0x3a>
 8006bc4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006bc8:	4770      	bx	lr
 8006bca:	2300      	movs	r3, #0
 8006bcc:	e7dd      	b.n	8006b8a <floorf+0x36>
 8006bce:	bf00      	nop
 8006bd0:	7149f2ca 	.word	0x7149f2ca
 8006bd4:	bf800000 	.word	0xbf800000
 8006bd8:	007fffff 	.word	0x007fffff

08006bdc <_init>:
 8006bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bde:	bf00      	nop
 8006be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006be2:	bc08      	pop	{r3}
 8006be4:	469e      	mov	lr, r3
 8006be6:	4770      	bx	lr

08006be8 <_fini>:
 8006be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bea:	bf00      	nop
 8006bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bee:	bc08      	pop	{r3}
 8006bf0:	469e      	mov	lr, r3
 8006bf2:	4770      	bx	lr
