
Selective Noise Cancelling Headphones.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c18  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  08006de8  08006de8  00007de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800723c  0800723c  00009468  2**0
                  CONTENTS
  4 .ARM          00000008  0800723c  0800723c  0000823c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007244  08007244  00009468  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007244  08007244  00008244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007248  08007248  00008248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000468  20000000  0800724c  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005f0  20000468  080076b4  00009468  2**2
                  ALLOC
 10 ._user_heap_stack 0000fa00  20000a58  080076b4  00009a58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009468  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ada  00000000  00000000  00009498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b45  00000000  00000000  00019f72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001100  00000000  00000000  0001cab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d2e  00000000  00000000  0001dbb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003934  00000000  00000000  0001e8e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015070  00000000  00000000  0002221a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d676d  00000000  00000000  0003728a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010d9f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000510c  00000000  00000000  0010da3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  00112b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000468 	.word	0x20000468
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006dd0 	.word	0x08006dd0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000046c 	.word	0x2000046c
 800020c:	08006dd0 	.word	0x08006dd0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_dmul>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002be:	bf1d      	ittte	ne
 80002c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002c4:	ea94 0f0c 	teqne	r4, ip
 80002c8:	ea95 0f0c 	teqne	r5, ip
 80002cc:	f000 f8de 	bleq	800048c <__aeabi_dmul+0x1dc>
 80002d0:	442c      	add	r4, r5
 80002d2:	ea81 0603 	eor.w	r6, r1, r3
 80002d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002e2:	bf18      	it	ne
 80002e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002f0:	d038      	beq.n	8000364 <__aeabi_dmul+0xb4>
 80002f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002f6:	f04f 0500 	mov.w	r5, #0
 80002fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002fe:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000302:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000306:	f04f 0600 	mov.w	r6, #0
 800030a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800030e:	f09c 0f00 	teq	ip, #0
 8000312:	bf18      	it	ne
 8000314:	f04e 0e01 	orrne.w	lr, lr, #1
 8000318:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800031c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000320:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000324:	d204      	bcs.n	8000330 <__aeabi_dmul+0x80>
 8000326:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800032a:	416d      	adcs	r5, r5
 800032c:	eb46 0606 	adc.w	r6, r6, r6
 8000330:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000334:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000338:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800033c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000340:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000344:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000348:	bf88      	it	hi
 800034a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800034e:	d81e      	bhi.n	800038e <__aeabi_dmul+0xde>
 8000350:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000368:	ea46 0101 	orr.w	r1, r6, r1
 800036c:	ea40 0002 	orr.w	r0, r0, r2
 8000370:	ea81 0103 	eor.w	r1, r1, r3
 8000374:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000378:	bfc2      	ittt	gt
 800037a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800037e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000382:	bd70      	popgt	{r4, r5, r6, pc}
 8000384:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000388:	f04f 0e00 	mov.w	lr, #0
 800038c:	3c01      	subs	r4, #1
 800038e:	f300 80ab 	bgt.w	80004e8 <__aeabi_dmul+0x238>
 8000392:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000396:	bfde      	ittt	le
 8000398:	2000      	movle	r0, #0
 800039a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800039e:	bd70      	pople	{r4, r5, r6, pc}
 80003a0:	f1c4 0400 	rsb	r4, r4, #0
 80003a4:	3c20      	subs	r4, #32
 80003a6:	da35      	bge.n	8000414 <__aeabi_dmul+0x164>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc1b      	bgt.n	80003e4 <__aeabi_dmul+0x134>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0520 	rsb	r5, r4, #32
 80003b4:	fa00 f305 	lsl.w	r3, r0, r5
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f205 	lsl.w	r2, r1, r5
 80003c0:	ea40 0002 	orr.w	r0, r0, r2
 80003c4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d0:	fa21 f604 	lsr.w	r6, r1, r4
 80003d4:	eb42 0106 	adc.w	r1, r2, r6
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 040c 	rsb	r4, r4, #12
 80003e8:	f1c4 0520 	rsb	r5, r4, #32
 80003ec:	fa00 f304 	lsl.w	r3, r0, r4
 80003f0:	fa20 f005 	lsr.w	r0, r0, r5
 80003f4:	fa01 f204 	lsl.w	r2, r1, r4
 80003f8:	ea40 0002 	orr.w	r0, r0, r2
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000400:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000404:	f141 0100 	adc.w	r1, r1, #0
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 0520 	rsb	r5, r4, #32
 8000418:	fa00 f205 	lsl.w	r2, r0, r5
 800041c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000420:	fa20 f304 	lsr.w	r3, r0, r4
 8000424:	fa01 f205 	lsl.w	r2, r1, r5
 8000428:	ea43 0302 	orr.w	r3, r3, r2
 800042c:	fa21 f004 	lsr.w	r0, r1, r4
 8000430:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000434:	fa21 f204 	lsr.w	r2, r1, r4
 8000438:	ea20 0002 	bic.w	r0, r0, r2
 800043c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000440:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000444:	bf08      	it	eq
 8000446:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f094 0f00 	teq	r4, #0
 8000450:	d10f      	bne.n	8000472 <__aeabi_dmul+0x1c2>
 8000452:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000456:	0040      	lsls	r0, r0, #1
 8000458:	eb41 0101 	adc.w	r1, r1, r1
 800045c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000460:	bf08      	it	eq
 8000462:	3c01      	subeq	r4, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1a6>
 8000466:	ea41 0106 	orr.w	r1, r1, r6
 800046a:	f095 0f00 	teq	r5, #0
 800046e:	bf18      	it	ne
 8000470:	4770      	bxne	lr
 8000472:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	eb43 0303 	adc.w	r3, r3, r3
 800047c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000480:	bf08      	it	eq
 8000482:	3d01      	subeq	r5, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1c6>
 8000486:	ea43 0306 	orr.w	r3, r3, r6
 800048a:	4770      	bx	lr
 800048c:	ea94 0f0c 	teq	r4, ip
 8000490:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000494:	bf18      	it	ne
 8000496:	ea95 0f0c 	teqne	r5, ip
 800049a:	d00c      	beq.n	80004b6 <__aeabi_dmul+0x206>
 800049c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004a0:	bf18      	it	ne
 80004a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a6:	d1d1      	bne.n	800044c <__aeabi_dmul+0x19c>
 80004a8:	ea81 0103 	eor.w	r1, r1, r3
 80004ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004b0:	f04f 0000 	mov.w	r0, #0
 80004b4:	bd70      	pop	{r4, r5, r6, pc}
 80004b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ba:	bf06      	itte	eq
 80004bc:	4610      	moveq	r0, r2
 80004be:	4619      	moveq	r1, r3
 80004c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c4:	d019      	beq.n	80004fa <__aeabi_dmul+0x24a>
 80004c6:	ea94 0f0c 	teq	r4, ip
 80004ca:	d102      	bne.n	80004d2 <__aeabi_dmul+0x222>
 80004cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004d0:	d113      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004d2:	ea95 0f0c 	teq	r5, ip
 80004d6:	d105      	bne.n	80004e4 <__aeabi_dmul+0x234>
 80004d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004dc:	bf1c      	itt	ne
 80004de:	4610      	movne	r0, r2
 80004e0:	4619      	movne	r1, r3
 80004e2:	d10a      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004e4:	ea81 0103 	eor.w	r1, r1, r3
 80004e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ec:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
 80004fa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004fe:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000502:	bd70      	pop	{r4, r5, r6, pc}

08000504 <__aeabi_drsub>:
 8000504:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000508:	e002      	b.n	8000510 <__adddf3>
 800050a:	bf00      	nop

0800050c <__aeabi_dsub>:
 800050c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000510 <__adddf3>:
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000516:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800051a:	ea94 0f05 	teq	r4, r5
 800051e:	bf08      	it	eq
 8000520:	ea90 0f02 	teqeq	r0, r2
 8000524:	bf1f      	itttt	ne
 8000526:	ea54 0c00 	orrsne.w	ip, r4, r0
 800052a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000536:	f000 80e2 	beq.w	80006fe <__adddf3+0x1ee>
 800053a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000542:	bfb8      	it	lt
 8000544:	426d      	neglt	r5, r5
 8000546:	dd0c      	ble.n	8000562 <__adddf3+0x52>
 8000548:	442c      	add	r4, r5
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	ea82 0000 	eor.w	r0, r2, r0
 8000556:	ea83 0101 	eor.w	r1, r3, r1
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	2d36      	cmp	r5, #54	@ 0x36
 8000564:	bf88      	it	hi
 8000566:	bd30      	pophi	{r4, r5, pc}
 8000568:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800056c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000570:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000578:	d002      	beq.n	8000580 <__adddf3+0x70>
 800057a:	4240      	negs	r0, r0
 800057c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000580:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000584:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800058c:	d002      	beq.n	8000594 <__adddf3+0x84>
 800058e:	4252      	negs	r2, r2
 8000590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000594:	ea94 0f05 	teq	r4, r5
 8000598:	f000 80a7 	beq.w	80006ea <__adddf3+0x1da>
 800059c:	f1a4 0401 	sub.w	r4, r4, #1
 80005a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a4:	db0d      	blt.n	80005c2 <__adddf3+0xb2>
 80005a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005aa:	fa22 f205 	lsr.w	r2, r2, r5
 80005ae:	1880      	adds	r0, r0, r2
 80005b0:	f141 0100 	adc.w	r1, r1, #0
 80005b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b8:	1880      	adds	r0, r0, r2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	4159      	adcs	r1, r3
 80005c0:	e00e      	b.n	80005e0 <__adddf3+0xd0>
 80005c2:	f1a5 0520 	sub.w	r5, r5, #32
 80005c6:	f10e 0e20 	add.w	lr, lr, #32
 80005ca:	2a01      	cmp	r2, #1
 80005cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d0:	bf28      	it	cs
 80005d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d6:	fa43 f305 	asr.w	r3, r3, r5
 80005da:	18c0      	adds	r0, r0, r3
 80005dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	d507      	bpl.n	80005f6 <__adddf3+0xe6>
 80005e6:	f04f 0e00 	mov.w	lr, #0
 80005ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005fa:	d31b      	bcc.n	8000634 <__adddf3+0x124>
 80005fc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000600:	d30c      	bcc.n	800061c <__adddf3+0x10c>
 8000602:	0849      	lsrs	r1, r1, #1
 8000604:	ea5f 0030 	movs.w	r0, r0, rrx
 8000608:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800060c:	f104 0401 	add.w	r4, r4, #1
 8000610:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000614:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000618:	f080 809a 	bcs.w	8000750 <__adddf3+0x240>
 800061c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	ea41 0105 	orr.w	r1, r1, r5
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000638:	4140      	adcs	r0, r0
 800063a:	eb41 0101 	adc.w	r1, r1, r1
 800063e:	3c01      	subs	r4, #1
 8000640:	bf28      	it	cs
 8000642:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000646:	d2e9      	bcs.n	800061c <__adddf3+0x10c>
 8000648:	f091 0f00 	teq	r1, #0
 800064c:	bf04      	itt	eq
 800064e:	4601      	moveq	r1, r0
 8000650:	2000      	moveq	r0, #0
 8000652:	fab1 f381 	clz	r3, r1
 8000656:	bf08      	it	eq
 8000658:	3320      	addeq	r3, #32
 800065a:	f1a3 030b 	sub.w	r3, r3, #11
 800065e:	f1b3 0220 	subs.w	r2, r3, #32
 8000662:	da0c      	bge.n	800067e <__adddf3+0x16e>
 8000664:	320c      	adds	r2, #12
 8000666:	dd08      	ble.n	800067a <__adddf3+0x16a>
 8000668:	f102 0c14 	add.w	ip, r2, #20
 800066c:	f1c2 020c 	rsb	r2, r2, #12
 8000670:	fa01 f00c 	lsl.w	r0, r1, ip
 8000674:	fa21 f102 	lsr.w	r1, r1, r2
 8000678:	e00c      	b.n	8000694 <__adddf3+0x184>
 800067a:	f102 0214 	add.w	r2, r2, #20
 800067e:	bfd8      	it	le
 8000680:	f1c2 0c20 	rsble	ip, r2, #32
 8000684:	fa01 f102 	lsl.w	r1, r1, r2
 8000688:	fa20 fc0c 	lsr.w	ip, r0, ip
 800068c:	bfdc      	itt	le
 800068e:	ea41 010c 	orrle.w	r1, r1, ip
 8000692:	4090      	lslle	r0, r2
 8000694:	1ae4      	subs	r4, r4, r3
 8000696:	bfa2      	ittt	ge
 8000698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800069c:	4329      	orrge	r1, r5
 800069e:	bd30      	popge	{r4, r5, pc}
 80006a0:	ea6f 0404 	mvn.w	r4, r4
 80006a4:	3c1f      	subs	r4, #31
 80006a6:	da1c      	bge.n	80006e2 <__adddf3+0x1d2>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc0e      	bgt.n	80006ca <__adddf3+0x1ba>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0220 	rsb	r2, r4, #32
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f302 	lsl.w	r3, r1, r2
 80006bc:	ea40 0003 	orr.w	r0, r0, r3
 80006c0:	fa21 f304 	lsr.w	r3, r1, r4
 80006c4:	ea45 0103 	orr.w	r1, r5, r3
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f1c4 040c 	rsb	r4, r4, #12
 80006ce:	f1c4 0220 	rsb	r2, r4, #32
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 f304 	lsl.w	r3, r1, r4
 80006da:	ea40 0003 	orr.w	r0, r0, r3
 80006de:	4629      	mov	r1, r5
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	fa21 f004 	lsr.w	r0, r1, r4
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f094 0f00 	teq	r4, #0
 80006ee:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006f2:	bf06      	itte	eq
 80006f4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006f8:	3401      	addeq	r4, #1
 80006fa:	3d01      	subne	r5, #1
 80006fc:	e74e      	b.n	800059c <__adddf3+0x8c>
 80006fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000702:	bf18      	it	ne
 8000704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000708:	d029      	beq.n	800075e <__adddf3+0x24e>
 800070a:	ea94 0f05 	teq	r4, r5
 800070e:	bf08      	it	eq
 8000710:	ea90 0f02 	teqeq	r0, r2
 8000714:	d005      	beq.n	8000722 <__adddf3+0x212>
 8000716:	ea54 0c00 	orrs.w	ip, r4, r0
 800071a:	bf04      	itt	eq
 800071c:	4619      	moveq	r1, r3
 800071e:	4610      	moveq	r0, r2
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	ea91 0f03 	teq	r1, r3
 8000726:	bf1e      	ittt	ne
 8000728:	2100      	movne	r1, #0
 800072a:	2000      	movne	r0, #0
 800072c:	bd30      	popne	{r4, r5, pc}
 800072e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000732:	d105      	bne.n	8000740 <__adddf3+0x230>
 8000734:	0040      	lsls	r0, r0, #1
 8000736:	4149      	adcs	r1, r1
 8000738:	bf28      	it	cs
 800073a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000744:	bf3c      	itt	cc
 8000746:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800074a:	bd30      	popcc	{r4, r5, pc}
 800074c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000750:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000754:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000762:	bf1a      	itte	ne
 8000764:	4619      	movne	r1, r3
 8000766:	4610      	movne	r0, r2
 8000768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800076c:	bf1c      	itt	ne
 800076e:	460b      	movne	r3, r1
 8000770:	4602      	movne	r2, r0
 8000772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000776:	bf06      	itte	eq
 8000778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800077c:	ea91 0f03 	teqeq	r1, r3
 8000780:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	bf00      	nop

08000788 <__aeabi_ui2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800079c:	f04f 0500 	mov.w	r5, #0
 80007a0:	f04f 0100 	mov.w	r1, #0
 80007a4:	e750      	b.n	8000648 <__adddf3+0x138>
 80007a6:	bf00      	nop

080007a8 <__aeabi_i2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007bc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007c0:	bf48      	it	mi
 80007c2:	4240      	negmi	r0, r0
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	e73e      	b.n	8000648 <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_f2d>:
 80007cc:	0042      	lsls	r2, r0, #1
 80007ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007da:	bf1f      	itttt	ne
 80007dc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007e0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007e4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007e8:	4770      	bxne	lr
 80007ea:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ee:	bf08      	it	eq
 80007f0:	4770      	bxeq	lr
 80007f2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007f6:	bf04      	itt	eq
 80007f8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007fc:	4770      	bxeq	lr
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000804:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000808:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800080c:	e71c      	b.n	8000648 <__adddf3+0x138>
 800080e:	bf00      	nop

08000810 <__aeabi_ul2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f04f 0500 	mov.w	r5, #0
 800081e:	e00a      	b.n	8000836 <__aeabi_l2d+0x16>

08000820 <__aeabi_l2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800082e:	d502      	bpl.n	8000836 <__aeabi_l2d+0x16>
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800083a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800083e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000842:	f43f aed8 	beq.w	80005f6 <__adddf3+0xe6>
 8000846:	f04f 0203 	mov.w	r2, #3
 800084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084e:	bf18      	it	ne
 8000850:	3203      	addne	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	fa00 fc03 	lsl.w	ip, r0, r3
 8000866:	fa20 f002 	lsr.w	r0, r0, r2
 800086a:	fa01 fe03 	lsl.w	lr, r1, r3
 800086e:	ea40 000e 	orr.w	r0, r0, lr
 8000872:	fa21 f102 	lsr.w	r1, r1, r2
 8000876:	4414      	add	r4, r2
 8000878:	e6bd      	b.n	80005f6 <__adddf3+0xe6>
 800087a:	bf00      	nop

0800087c <__aeabi_d2f>:
 800087c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000880:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000884:	bf24      	itt	cs
 8000886:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800088a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800088e:	d90d      	bls.n	80008ac <__aeabi_d2f+0x30>
 8000890:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000894:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000898:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800089c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80008a0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008a4:	bf08      	it	eq
 80008a6:	f020 0001 	biceq.w	r0, r0, #1
 80008aa:	4770      	bx	lr
 80008ac:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80008b0:	d121      	bne.n	80008f6 <__aeabi_d2f+0x7a>
 80008b2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80008b6:	bfbc      	itt	lt
 80008b8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80008bc:	4770      	bxlt	lr
 80008be:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008c2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008c6:	f1c2 0218 	rsb	r2, r2, #24
 80008ca:	f1c2 0c20 	rsb	ip, r2, #32
 80008ce:	fa10 f30c 	lsls.w	r3, r0, ip
 80008d2:	fa20 f002 	lsr.w	r0, r0, r2
 80008d6:	bf18      	it	ne
 80008d8:	f040 0001 	orrne.w	r0, r0, #1
 80008dc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008e0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008e4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008e8:	ea40 000c 	orr.w	r0, r0, ip
 80008ec:	fa23 f302 	lsr.w	r3, r3, r2
 80008f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008f4:	e7cc      	b.n	8000890 <__aeabi_d2f+0x14>
 80008f6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008fa:	d107      	bne.n	800090c <__aeabi_d2f+0x90>
 80008fc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000900:	bf1e      	ittt	ne
 8000902:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000906:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800090a:	4770      	bxne	lr
 800090c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000910:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000914:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop

0800091c <__aeabi_uldivmod>:
 800091c:	b953      	cbnz	r3, 8000934 <__aeabi_uldivmod+0x18>
 800091e:	b94a      	cbnz	r2, 8000934 <__aeabi_uldivmod+0x18>
 8000920:	2900      	cmp	r1, #0
 8000922:	bf08      	it	eq
 8000924:	2800      	cmpeq	r0, #0
 8000926:	bf1c      	itt	ne
 8000928:	f04f 31ff 	movne.w	r1, #4294967295
 800092c:	f04f 30ff 	movne.w	r0, #4294967295
 8000930:	f000 b96a 	b.w	8000c08 <__aeabi_idiv0>
 8000934:	f1ad 0c08 	sub.w	ip, sp, #8
 8000938:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800093c:	f000 f806 	bl	800094c <__udivmoddi4>
 8000940:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000944:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000948:	b004      	add	sp, #16
 800094a:	4770      	bx	lr

0800094c <__udivmoddi4>:
 800094c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000950:	9d08      	ldr	r5, [sp, #32]
 8000952:	460c      	mov	r4, r1
 8000954:	2b00      	cmp	r3, #0
 8000956:	d14e      	bne.n	80009f6 <__udivmoddi4+0xaa>
 8000958:	4694      	mov	ip, r2
 800095a:	458c      	cmp	ip, r1
 800095c:	4686      	mov	lr, r0
 800095e:	fab2 f282 	clz	r2, r2
 8000962:	d962      	bls.n	8000a2a <__udivmoddi4+0xde>
 8000964:	b14a      	cbz	r2, 800097a <__udivmoddi4+0x2e>
 8000966:	f1c2 0320 	rsb	r3, r2, #32
 800096a:	4091      	lsls	r1, r2
 800096c:	fa20 f303 	lsr.w	r3, r0, r3
 8000970:	fa0c fc02 	lsl.w	ip, ip, r2
 8000974:	4319      	orrs	r1, r3
 8000976:	fa00 fe02 	lsl.w	lr, r0, r2
 800097a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800097e:	fa1f f68c 	uxth.w	r6, ip
 8000982:	fbb1 f4f7 	udiv	r4, r1, r7
 8000986:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800098a:	fb07 1114 	mls	r1, r7, r4, r1
 800098e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000992:	fb04 f106 	mul.w	r1, r4, r6
 8000996:	4299      	cmp	r1, r3
 8000998:	d90a      	bls.n	80009b0 <__udivmoddi4+0x64>
 800099a:	eb1c 0303 	adds.w	r3, ip, r3
 800099e:	f104 30ff 	add.w	r0, r4, #4294967295
 80009a2:	f080 8112 	bcs.w	8000bca <__udivmoddi4+0x27e>
 80009a6:	4299      	cmp	r1, r3
 80009a8:	f240 810f 	bls.w	8000bca <__udivmoddi4+0x27e>
 80009ac:	3c02      	subs	r4, #2
 80009ae:	4463      	add	r3, ip
 80009b0:	1a59      	subs	r1, r3, r1
 80009b2:	fa1f f38e 	uxth.w	r3, lr
 80009b6:	fbb1 f0f7 	udiv	r0, r1, r7
 80009ba:	fb07 1110 	mls	r1, r7, r0, r1
 80009be:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009c2:	fb00 f606 	mul.w	r6, r0, r6
 80009c6:	429e      	cmp	r6, r3
 80009c8:	d90a      	bls.n	80009e0 <__udivmoddi4+0x94>
 80009ca:	eb1c 0303 	adds.w	r3, ip, r3
 80009ce:	f100 31ff 	add.w	r1, r0, #4294967295
 80009d2:	f080 80fc 	bcs.w	8000bce <__udivmoddi4+0x282>
 80009d6:	429e      	cmp	r6, r3
 80009d8:	f240 80f9 	bls.w	8000bce <__udivmoddi4+0x282>
 80009dc:	4463      	add	r3, ip
 80009de:	3802      	subs	r0, #2
 80009e0:	1b9b      	subs	r3, r3, r6
 80009e2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80009e6:	2100      	movs	r1, #0
 80009e8:	b11d      	cbz	r5, 80009f2 <__udivmoddi4+0xa6>
 80009ea:	40d3      	lsrs	r3, r2
 80009ec:	2200      	movs	r2, #0
 80009ee:	e9c5 3200 	strd	r3, r2, [r5]
 80009f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009f6:	428b      	cmp	r3, r1
 80009f8:	d905      	bls.n	8000a06 <__udivmoddi4+0xba>
 80009fa:	b10d      	cbz	r5, 8000a00 <__udivmoddi4+0xb4>
 80009fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000a00:	2100      	movs	r1, #0
 8000a02:	4608      	mov	r0, r1
 8000a04:	e7f5      	b.n	80009f2 <__udivmoddi4+0xa6>
 8000a06:	fab3 f183 	clz	r1, r3
 8000a0a:	2900      	cmp	r1, #0
 8000a0c:	d146      	bne.n	8000a9c <__udivmoddi4+0x150>
 8000a0e:	42a3      	cmp	r3, r4
 8000a10:	d302      	bcc.n	8000a18 <__udivmoddi4+0xcc>
 8000a12:	4290      	cmp	r0, r2
 8000a14:	f0c0 80f0 	bcc.w	8000bf8 <__udivmoddi4+0x2ac>
 8000a18:	1a86      	subs	r6, r0, r2
 8000a1a:	eb64 0303 	sbc.w	r3, r4, r3
 8000a1e:	2001      	movs	r0, #1
 8000a20:	2d00      	cmp	r5, #0
 8000a22:	d0e6      	beq.n	80009f2 <__udivmoddi4+0xa6>
 8000a24:	e9c5 6300 	strd	r6, r3, [r5]
 8000a28:	e7e3      	b.n	80009f2 <__udivmoddi4+0xa6>
 8000a2a:	2a00      	cmp	r2, #0
 8000a2c:	f040 8090 	bne.w	8000b50 <__udivmoddi4+0x204>
 8000a30:	eba1 040c 	sub.w	r4, r1, ip
 8000a34:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a38:	fa1f f78c 	uxth.w	r7, ip
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a46:	fb08 4416 	mls	r4, r8, r6, r4
 8000a4a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a4e:	fb07 f006 	mul.w	r0, r7, r6
 8000a52:	4298      	cmp	r0, r3
 8000a54:	d908      	bls.n	8000a68 <__udivmoddi4+0x11c>
 8000a56:	eb1c 0303 	adds.w	r3, ip, r3
 8000a5a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a5e:	d202      	bcs.n	8000a66 <__udivmoddi4+0x11a>
 8000a60:	4298      	cmp	r0, r3
 8000a62:	f200 80cd 	bhi.w	8000c00 <__udivmoddi4+0x2b4>
 8000a66:	4626      	mov	r6, r4
 8000a68:	1a1c      	subs	r4, r3, r0
 8000a6a:	fa1f f38e 	uxth.w	r3, lr
 8000a6e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a72:	fb08 4410 	mls	r4, r8, r0, r4
 8000a76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a7a:	fb00 f707 	mul.w	r7, r0, r7
 8000a7e:	429f      	cmp	r7, r3
 8000a80:	d908      	bls.n	8000a94 <__udivmoddi4+0x148>
 8000a82:	eb1c 0303 	adds.w	r3, ip, r3
 8000a86:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a8a:	d202      	bcs.n	8000a92 <__udivmoddi4+0x146>
 8000a8c:	429f      	cmp	r7, r3
 8000a8e:	f200 80b0 	bhi.w	8000bf2 <__udivmoddi4+0x2a6>
 8000a92:	4620      	mov	r0, r4
 8000a94:	1bdb      	subs	r3, r3, r7
 8000a96:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a9a:	e7a5      	b.n	80009e8 <__udivmoddi4+0x9c>
 8000a9c:	f1c1 0620 	rsb	r6, r1, #32
 8000aa0:	408b      	lsls	r3, r1
 8000aa2:	fa22 f706 	lsr.w	r7, r2, r6
 8000aa6:	431f      	orrs	r7, r3
 8000aa8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000aac:	fa04 f301 	lsl.w	r3, r4, r1
 8000ab0:	ea43 030c 	orr.w	r3, r3, ip
 8000ab4:	40f4      	lsrs	r4, r6
 8000ab6:	fa00 f801 	lsl.w	r8, r0, r1
 8000aba:	0c38      	lsrs	r0, r7, #16
 8000abc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ac0:	fbb4 fef0 	udiv	lr, r4, r0
 8000ac4:	fa1f fc87 	uxth.w	ip, r7
 8000ac8:	fb00 441e 	mls	r4, r0, lr, r4
 8000acc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ad0:	fb0e f90c 	mul.w	r9, lr, ip
 8000ad4:	45a1      	cmp	r9, r4
 8000ad6:	fa02 f201 	lsl.w	r2, r2, r1
 8000ada:	d90a      	bls.n	8000af2 <__udivmoddi4+0x1a6>
 8000adc:	193c      	adds	r4, r7, r4
 8000ade:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000ae2:	f080 8084 	bcs.w	8000bee <__udivmoddi4+0x2a2>
 8000ae6:	45a1      	cmp	r9, r4
 8000ae8:	f240 8081 	bls.w	8000bee <__udivmoddi4+0x2a2>
 8000aec:	f1ae 0e02 	sub.w	lr, lr, #2
 8000af0:	443c      	add	r4, r7
 8000af2:	eba4 0409 	sub.w	r4, r4, r9
 8000af6:	fa1f f983 	uxth.w	r9, r3
 8000afa:	fbb4 f3f0 	udiv	r3, r4, r0
 8000afe:	fb00 4413 	mls	r4, r0, r3, r4
 8000b02:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b06:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b0a:	45a4      	cmp	ip, r4
 8000b0c:	d907      	bls.n	8000b1e <__udivmoddi4+0x1d2>
 8000b0e:	193c      	adds	r4, r7, r4
 8000b10:	f103 30ff 	add.w	r0, r3, #4294967295
 8000b14:	d267      	bcs.n	8000be6 <__udivmoddi4+0x29a>
 8000b16:	45a4      	cmp	ip, r4
 8000b18:	d965      	bls.n	8000be6 <__udivmoddi4+0x29a>
 8000b1a:	3b02      	subs	r3, #2
 8000b1c:	443c      	add	r4, r7
 8000b1e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000b22:	fba0 9302 	umull	r9, r3, r0, r2
 8000b26:	eba4 040c 	sub.w	r4, r4, ip
 8000b2a:	429c      	cmp	r4, r3
 8000b2c:	46ce      	mov	lr, r9
 8000b2e:	469c      	mov	ip, r3
 8000b30:	d351      	bcc.n	8000bd6 <__udivmoddi4+0x28a>
 8000b32:	d04e      	beq.n	8000bd2 <__udivmoddi4+0x286>
 8000b34:	b155      	cbz	r5, 8000b4c <__udivmoddi4+0x200>
 8000b36:	ebb8 030e 	subs.w	r3, r8, lr
 8000b3a:	eb64 040c 	sbc.w	r4, r4, ip
 8000b3e:	fa04 f606 	lsl.w	r6, r4, r6
 8000b42:	40cb      	lsrs	r3, r1
 8000b44:	431e      	orrs	r6, r3
 8000b46:	40cc      	lsrs	r4, r1
 8000b48:	e9c5 6400 	strd	r6, r4, [r5]
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	e750      	b.n	80009f2 <__udivmoddi4+0xa6>
 8000b50:	f1c2 0320 	rsb	r3, r2, #32
 8000b54:	fa20 f103 	lsr.w	r1, r0, r3
 8000b58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b5c:	fa24 f303 	lsr.w	r3, r4, r3
 8000b60:	4094      	lsls	r4, r2
 8000b62:	430c      	orrs	r4, r1
 8000b64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b68:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b6c:	fa1f f78c 	uxth.w	r7, ip
 8000b70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b74:	fb08 3110 	mls	r1, r8, r0, r3
 8000b78:	0c23      	lsrs	r3, r4, #16
 8000b7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b7e:	fb00 f107 	mul.w	r1, r0, r7
 8000b82:	4299      	cmp	r1, r3
 8000b84:	d908      	bls.n	8000b98 <__udivmoddi4+0x24c>
 8000b86:	eb1c 0303 	adds.w	r3, ip, r3
 8000b8a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000b8e:	d22c      	bcs.n	8000bea <__udivmoddi4+0x29e>
 8000b90:	4299      	cmp	r1, r3
 8000b92:	d92a      	bls.n	8000bea <__udivmoddi4+0x29e>
 8000b94:	3802      	subs	r0, #2
 8000b96:	4463      	add	r3, ip
 8000b98:	1a5b      	subs	r3, r3, r1
 8000b9a:	b2a4      	uxth	r4, r4
 8000b9c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ba0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ba4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba8:	fb01 f307 	mul.w	r3, r1, r7
 8000bac:	42a3      	cmp	r3, r4
 8000bae:	d908      	bls.n	8000bc2 <__udivmoddi4+0x276>
 8000bb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bb4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000bb8:	d213      	bcs.n	8000be2 <__udivmoddi4+0x296>
 8000bba:	42a3      	cmp	r3, r4
 8000bbc:	d911      	bls.n	8000be2 <__udivmoddi4+0x296>
 8000bbe:	3902      	subs	r1, #2
 8000bc0:	4464      	add	r4, ip
 8000bc2:	1ae4      	subs	r4, r4, r3
 8000bc4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000bc8:	e739      	b.n	8000a3e <__udivmoddi4+0xf2>
 8000bca:	4604      	mov	r4, r0
 8000bcc:	e6f0      	b.n	80009b0 <__udivmoddi4+0x64>
 8000bce:	4608      	mov	r0, r1
 8000bd0:	e706      	b.n	80009e0 <__udivmoddi4+0x94>
 8000bd2:	45c8      	cmp	r8, r9
 8000bd4:	d2ae      	bcs.n	8000b34 <__udivmoddi4+0x1e8>
 8000bd6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000bda:	eb63 0c07 	sbc.w	ip, r3, r7
 8000bde:	3801      	subs	r0, #1
 8000be0:	e7a8      	b.n	8000b34 <__udivmoddi4+0x1e8>
 8000be2:	4631      	mov	r1, r6
 8000be4:	e7ed      	b.n	8000bc2 <__udivmoddi4+0x276>
 8000be6:	4603      	mov	r3, r0
 8000be8:	e799      	b.n	8000b1e <__udivmoddi4+0x1d2>
 8000bea:	4630      	mov	r0, r6
 8000bec:	e7d4      	b.n	8000b98 <__udivmoddi4+0x24c>
 8000bee:	46d6      	mov	lr, sl
 8000bf0:	e77f      	b.n	8000af2 <__udivmoddi4+0x1a6>
 8000bf2:	4463      	add	r3, ip
 8000bf4:	3802      	subs	r0, #2
 8000bf6:	e74d      	b.n	8000a94 <__udivmoddi4+0x148>
 8000bf8:	4606      	mov	r6, r0
 8000bfa:	4623      	mov	r3, r4
 8000bfc:	4608      	mov	r0, r1
 8000bfe:	e70f      	b.n	8000a20 <__udivmoddi4+0xd4>
 8000c00:	3e02      	subs	r6, #2
 8000c02:	4463      	add	r3, ip
 8000c04:	e730      	b.n	8000a68 <__udivmoddi4+0x11c>
 8000c06:	bf00      	nop

08000c08 <__aeabi_idiv0>:
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <Delay_Init>:
#include "Delay.h"
#include <stdint.h>



void Delay_Init(Delay *dly, float delayTime_ms, float mix, float feedback, float sampleRate_Hz) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b088      	sub	sp, #32
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6178      	str	r0, [r7, #20]
 8000c14:	ed87 0a04 	vstr	s0, [r7, #16]
 8000c18:	edc7 0a03 	vstr	s1, [r7, #12]
 8000c1c:	ed87 1a02 	vstr	s2, [r7, #8]
 8000c20:	edc7 1a01 	vstr	s3, [r7, #4]

	// set delay line length
	Delay_SetLength(dly, delayTime_ms, sampleRate_Hz);
 8000c24:	edd7 0a01 	vldr	s1, [r7, #4]
 8000c28:	ed97 0a04 	vldr	s0, [r7, #16]
 8000c2c:	6978      	ldr	r0, [r7, #20]
 8000c2e:	f000 f87f 	bl	8000d30 <Delay_SetLength>

	// store delay setting
	dly->mix = mix;
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	68fa      	ldr	r2, [r7, #12]
 8000c36:	601a      	str	r2, [r3, #0]
	dly->feedback = feedback;
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	68ba      	ldr	r2, [r7, #8]
 8000c3c:	605a      	str	r2, [r3, #4]

	// clear delay line circular buffer, reset index
	dly->lineIndex = 0;
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	2200      	movs	r2, #0
 8000c42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

	for (uint32_t n = 0; n < DELAY_MAX_LINE_LENGTH; n++) {
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
 8000c4a:	e00a      	b.n	8000c62 <Delay_Init+0x56>
		dly->line[n] = 0.0f;
 8000c4c:	697a      	ldr	r2, [r7, #20]
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	3302      	adds	r3, #2
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	4413      	add	r3, r2
 8000c56:	f04f 0200 	mov.w	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
	for (uint32_t n = 0; n < DELAY_MAX_LINE_LENGTH; n++) {
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	61fb      	str	r3, [r7, #28]
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	2b1d      	cmp	r3, #29
 8000c66:	d9f1      	bls.n	8000c4c <Delay_Init+0x40>
	}

	// clear output
	dly->out = 0.0f;
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	f04f 0200 	mov.w	r2, #0
 8000c6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8000c72:	bf00      	nop
 8000c74:	3720      	adds	r7, #32
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <Delay_Update>:

float Delay_Update(Delay *dly, float inp){
 8000c7a:	b480      	push	{r7}
 8000c7c:	b085      	sub	sp, #20
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
 8000c82:	ed87 0a00 	vstr	s0, [r7]
	// get current delay line output
	float delayLineOutput = dly->line[dly->lineIndex];
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000c8c:	687a      	ldr	r2, [r7, #4]
 8000c8e:	3302      	adds	r3, #2
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	4413      	add	r3, r2
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	60fb      	str	r3, [r7, #12]

	// compute current delay line input
	float delayLineInput = inp + dly->feedback*delayLineOutput;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	ed93 7a01 	vldr	s14, [r3, #4]
 8000c9e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ca6:	ed97 7a00 	vldr	s14, [r7]
 8000caa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cae:	edc7 7a02 	vstr	s15, [r7, #8]

	//store in delay line circular buffer
	dly->line[dly->lineIndex] = delayLineInput;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000cb8:	687a      	ldr	r2, [r7, #4]
 8000cba:	3302      	adds	r3, #2
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	4413      	add	r3, r2
 8000cc0:	68ba      	ldr	r2, [r7, #8]
 8000cc2:	601a      	str	r2, [r3, #0]

	// increment delay line index
	dly->lineIndex++;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000cca:	1c5a      	adds	r2, r3, #1
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	if (dly->lineIndex >= dly->lineLength) {
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	d303      	bcc.n	8000cea <Delay_Update+0x70>
		dly->lineIndex = 0;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	}

	dly->out = (1.0f - dly->mix) * inp + dly->mix * delayLineOutput;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	edd3 7a00 	vldr	s15, [r3]
 8000cf0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000cf4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000cf8:	edd7 7a00 	vldr	s15, [r7]
 8000cfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	edd3 6a00 	vldr	s13, [r3]
 8000d06:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	edc3 7a22 	vstr	s15, [r3, #136]	@ 0x88
	else if (dly->out < -1.0) {
		dly->out = -1.0f;
	}
	*/

	return dly->out;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d1e:	ee07 3a90 	vmov	s15, r3

}
 8000d22:	eeb0 0a67 	vmov.f32	s0, s15
 8000d26:	3714      	adds	r7, #20
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <Delay_SetLength>:
void Delay_SetLength(Delay *dly, float delayTime_ms, float sampleRate_Hz) {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	ed87 0a02 	vstr	s0, [r7, #8]
 8000d3c:	edc7 0a01 	vstr	s1, [r7, #4]
	float testFloat = 0.001f * delayTime_ms * (float)(sampleRate_Hz);
 8000d40:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d44:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8000dc8 <Delay_SetLength+0x98>
 8000d48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d4c:	ed97 7a01 	vldr	s14, [r7, #4]
 8000d50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d54:	edc7 7a05 	vstr	s15, [r7, #20]
	printf("delay time %d \n", (int32_t)(delayTime_ms));
 8000d58:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d60:	ee17 1a90 	vmov	r1, s15
 8000d64:	4819      	ldr	r0, [pc, #100]	@ (8000dcc <Delay_SetLength+0x9c>)
 8000d66:	f004 fd13 	bl	8005790 <iprintf>
	printf("freq %d \n", (int32_t)(sampleRate_Hz));
 8000d6a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d72:	ee17 1a90 	vmov	r1, s15
 8000d76:	4816      	ldr	r0, [pc, #88]	@ (8000dd0 <Delay_SetLength+0xa0>)
 8000d78:	f004 fd0a 	bl	8005790 <iprintf>
	dly->lineLength = (uint32_t)(0.001f * delayTime_ms * (float)(sampleRate_Hz));
 8000d7c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d80:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8000dc8 <Delay_SetLength+0x98>
 8000d84:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d88:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d94:	ee17 2a90 	vmov	r2, s15
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	printf("line length: %d \n", (int)(dly->lineLength));
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000da4:	4619      	mov	r1, r3
 8000da6:	480b      	ldr	r0, [pc, #44]	@ (8000dd4 <Delay_SetLength+0xa4>)
 8000da8:	f004 fcf2 	bl	8005790 <iprintf>
	if (dly->lineLength > DELAY_MAX_LINE_LENGTH) {
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000db2:	2b1e      	cmp	r3, #30
 8000db4:	d903      	bls.n	8000dbe <Delay_SetLength+0x8e>
		dly->lineLength = DELAY_MAX_LINE_LENGTH;
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	221e      	movs	r2, #30
 8000dba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	}
}
 8000dbe:	bf00      	nop
 8000dc0:	3718      	adds	r7, #24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	3a83126f 	.word	0x3a83126f
 8000dcc:	08006de8 	.word	0x08006de8
 8000dd0:	08006df8 	.word	0x08006df8
 8000dd4:	08006e04 	.word	0x08006e04

08000dd8 <LowPass_FirstOrder_Init>:
 *      Author: joeln
 */

#include "LowPass_FirstOrder.h"

void LowPass_FirstOrder_Init(LowPass_FirstOrder *filt, float fc_Hz, float fs_Hz) {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	ed87 0a02 	vstr	s0, [r7, #8]
 8000de4:	edc7 0a01 	vstr	s1, [r7, #4]
	filt->fs_Hz = fs_Hz = fs_Hz;
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	60da      	str	r2, [r3, #12]

	LowPass_FirstOrder_SetCutoff(filt, fc_Hz);
 8000dee:	ed97 0a02 	vldr	s0, [r7, #8]
 8000df2:	68f8      	ldr	r0, [r7, #12]
 8000df4:	f000 f808 	bl	8000e08 <LowPass_FirstOrder_SetCutoff>

	filt->out = 0.0f;
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	f04f 0200 	mov.w	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
}
 8000e00:	bf00      	nop
 8000e02:	3710      	adds	r7, #16
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <LowPass_FirstOrder_SetCutoff>:

void LowPass_FirstOrder_SetCutoff(LowPass_FirstOrder *filt, float fc_Hz) {
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	ed87 0a00 	vstr	s0, [r7]
	if ( fc_Hz > (0.5f * filt->fs_Hz)) {
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	edd3 7a03 	vldr	s15, [r3, #12]
 8000e1a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000e1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e22:	ed97 7a00 	vldr	s14, [r7]
 8000e26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e2e:	dd09      	ble.n	8000e44 <LowPass_FirstOrder_SetCutoff+0x3c>
		fc_Hz = 0.5f * filt->fs_Hz;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	edd3 7a03 	vldr	s15, [r3, #12]
 8000e36:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000e3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e3e:	edc7 7a00 	vstr	s15, [r7]
 8000e42:	e009      	b.n	8000e58 <LowPass_FirstOrder_SetCutoff+0x50>
	}
	else if (fc_Hz < 0.0f) {
 8000e44:	edd7 7a00 	vldr	s15, [r7]
 8000e48:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e50:	d502      	bpl.n	8000e58 <LowPass_FirstOrder_SetCutoff+0x50>
		fc_Hz = 0.0f;
 8000e52:	f04f 0300 	mov.w	r3, #0
 8000e56:	603b      	str	r3, [r7, #0]
	}

	// compute and store filter coefficient
	float alpha = 6.28318530718f * fc_Hz / filt->fs_Hz; // alpha = 2 * pi * fc / fs
 8000e58:	edd7 7a00 	vldr	s15, [r7]
 8000e5c:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8000eb4 <LowPass_FirstOrder_SetCutoff+0xac>
 8000e60:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	ed93 7a03 	vldr	s14, [r3, #12]
 8000e6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e6e:	edc7 7a03 	vstr	s15, [r7, #12]

	filt->coeff[0] = alpha / (1.0f + alpha);
 8000e72:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000e7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000e7e:	edd7 6a03 	vldr	s13, [r7, #12]
 8000e82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	edc3 7a01 	vstr	s15, [r3, #4]
	filt->coeff[1] = 1.0f / (1.0f + alpha);
 8000e8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e90:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000e94:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000e98:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000e9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8000ea6:	bf00      	nop
 8000ea8:	3714      	adds	r7, #20
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	40c90fdb 	.word	0x40c90fdb

08000eb8 <LowPass_FirstOrder_Update>:

float LowPass_FirstOrder_Update(LowPass_FirstOrder *filt, float inp) {
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	ed87 0a00 	vstr	s0, [r7]
	filt->out = filt->coeff[0] * inp + filt->coeff[1] * filt->out;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	ed93 7a01 	vldr	s14, [r3, #4]
 8000eca:	edd7 7a00 	vldr	s15, [r7]
 8000ece:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	edd3 6a02 	vldr	s13, [r3, #8]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	edd3 7a00 	vldr	s15, [r3]
 8000ede:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ee2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	edc3 7a00 	vstr	s15, [r3]

	if (filt->out > 1.0f) {
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	edd3 7a00 	vldr	s15, [r3]
 8000ef2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000ef6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000efe:	dd04      	ble.n	8000f0a <LowPass_FirstOrder_Update+0x52>
		filt->out = 1.0f;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	e00c      	b.n	8000f24 <LowPass_FirstOrder_Update+0x6c>
	}
	else if (filt->out < -1.0f) {
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	edd3 7a00 	vldr	s15, [r3]
 8000f10:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8000f14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f1c:	d502      	bpl.n	8000f24 <LowPass_FirstOrder_Update+0x6c>
		filt->out = -1.0f;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a06      	ldr	r2, [pc, #24]	@ (8000f3c <LowPass_FirstOrder_Update+0x84>)
 8000f22:	601a      	str	r2, [r3, #0]
	}

	return filt->out;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	ee07 3a90 	vmov	s15, r3
}
 8000f2c:	eeb0 0a67 	vmov.f32	s0, s15
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	bf800000 	.word	0xbf800000

08000f40 <EQ_init>:
#include "PeakingFilter.h"


//Function for initalizing filter
void EQ_init(EQ *filt, float fs)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	ed87 0a00 	vstr	s0, [r7]
    filt->T = 1.0f/fs;
 8000f4c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000f50:	ed97 7a00 	vldr	s14, [r7]
 8000f54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	edc3 7a00 	vstr	s15, [r3]

    //clear input and output
    for(uint8_t n = 0; n<3; n++)
 8000f5e:	2300      	movs	r3, #0
 8000f60:	73fb      	strb	r3, [r7, #15]
 8000f62:	e012      	b.n	8000f8a <EQ_init+0x4a>
    {
        filt->x[n] = 0.0f;
 8000f64:	7bfb      	ldrb	r3, [r7, #15]
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	4413      	add	r3, r2
 8000f6c:	3304      	adds	r3, #4
 8000f6e:	f04f 0200 	mov.w	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
        filt->y[n] = 0.0f;
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	3304      	adds	r3, #4
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	f04f 0200 	mov.w	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
    for(uint8_t n = 0; n<3; n++)
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	3301      	adds	r3, #1
 8000f88:	73fb      	strb	r3, [r7, #15]
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d9e9      	bls.n	8000f64 <EQ_init+0x24>
    }

    //call function to set parameters
    EQ_setParam(filt, 1.0f, 1.0f, 0.0f);
 8000f90:	ed9f 1a06 	vldr	s2, [pc, #24]	@ 8000fac <EQ_init+0x6c>
 8000f94:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8000f98:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f000 f807 	bl	8000fb0 <EQ_setParam>
}
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	00000000 	.word	0x00000000

08000fb0 <EQ_setParam>:
//T, center freq, gain, bandwidth
void EQ_setParam(EQ *filt, float fc, float g, float bw)
{
 8000fb0:	b5b0      	push	{r4, r5, r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	ed87 0a02 	vstr	s0, [r7, #8]
 8000fbc:	edc7 0a01 	vstr	s1, [r7, #4]
 8000fc0:	ed87 1a00 	vstr	s2, [r7]
    float wc = 2.0f*tanf(M_PI*fc*filt->T);
 8000fc4:	68b8      	ldr	r0, [r7, #8]
 8000fc6:	f7ff fc01 	bl	80007cc <__aeabi_f2d>
 8000fca:	a35b      	add	r3, pc, #364	@ (adr r3, 8001138 <EQ_setParam+0x188>)
 8000fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd0:	f7ff f96e 	bl	80002b0 <__aeabi_dmul>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	4614      	mov	r4, r2
 8000fda:	461d      	mov	r5, r3
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff fbf3 	bl	80007cc <__aeabi_f2d>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	4620      	mov	r0, r4
 8000fec:	4629      	mov	r1, r5
 8000fee:	f7ff f95f 	bl	80002b0 <__aeabi_dmul>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	4610      	mov	r0, r2
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f7ff fc3f 	bl	800087c <__aeabi_d2f>
 8000ffe:	4603      	mov	r3, r0
 8001000:	ee00 3a10 	vmov	s0, r3
 8001004:	f005 f984 	bl	8006310 <tanf>
 8001008:	eef0 7a40 	vmov.f32	s15, s0
 800100c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001010:	edc7 7a05 	vstr	s15, [r7, #20]
    float Q = fc/bw;
 8001014:	edd7 6a02 	vldr	s13, [r7, #8]
 8001018:	ed97 7a00 	vldr	s14, [r7]
 800101c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001020:	edc7 7a04 	vstr	s15, [r7, #16]

    filt->a[0] = 4 + 2*(g/Q)*wc + (wc)*(wc);
 8001024:	edd7 6a01 	vldr	s13, [r7, #4]
 8001028:	ed97 7a04 	vldr	s14, [r7, #16]
 800102c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001030:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001034:	edd7 7a05 	vldr	s15, [r7, #20]
 8001038:	ee67 7a27 	vmul.f32	s15, s14, s15
 800103c:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001040:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001044:	edd7 7a05 	vldr	s15, [r7, #20]
 8001048:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800104c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	edc3 7a07 	vstr	s15, [r3, #28]
    filt->a[1] = 2*(wc)*(wc) - 8;
 8001056:	edd7 7a05 	vldr	s15, [r7, #20]
 800105a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800105e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001066:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 800106a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	edc3 7a08 	vstr	s15, [r3, #32]
    filt->a[2] = 4 - 2*(g/Q)*wc + (wc)*(wc);
 8001074:	edd7 6a01 	vldr	s13, [r7, #4]
 8001078:	ed97 7a04 	vldr	s14, [r7, #16]
 800107c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001080:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001084:	edd7 7a05 	vldr	s15, [r7, #20]
 8001088:	ee67 7a27 	vmul.f32	s15, s14, s15
 800108c:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001090:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001094:	edd7 7a05 	vldr	s15, [r7, #20]
 8001098:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800109c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    filt->b[0] = 4 + 2*(1/Q)*wc + (wc)*(wc);
 80010a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80010aa:	ed97 7a04 	vldr	s14, [r7, #16]
 80010ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010b2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80010b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80010ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010be:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80010c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80010c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80010ca:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80010ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    filt->b[1] = -(2*(wc)*(wc) - 8);
 80010d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80010dc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80010e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80010e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010e8:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 80010ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010f0:	eef1 7a67 	vneg.f32	s15, s15
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    filt->b[2] = -(4 - 2*(1/Q)*wc + (wc)*(wc));
 80010fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80010fe:	ed97 7a04 	vldr	s14, [r7, #16]
 8001102:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001106:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800110a:	edd7 7a05 	vldr	s15, [r7, #20]
 800110e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001112:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001116:	ee37 7a67 	vsub.f32	s14, s14, s15
 800111a:	edd7 7a05 	vldr	s15, [r7, #20]
 800111e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001122:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001126:	eef1 7a67 	vneg.f32	s15, s15
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
}
 8001130:	bf00      	nop
 8001132:	3718      	adds	r7, #24
 8001134:	46bd      	mov	sp, r7
 8001136:	bdb0      	pop	{r4, r5, r7, pc}
 8001138:	54442d18 	.word	0x54442d18
 800113c:	400921fb 	.word	0x400921fb

08001140 <EQ_filter>:

float EQ_filter(EQ *filt, float in)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	ed87 0a00 	vstr	s0, [r7]
    //shift
    filt->x[2] = filt->x[1];
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	689a      	ldr	r2, [r3, #8]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	60da      	str	r2, [r3, #12]
    filt->x[1] = filt->x[0];
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685a      	ldr	r2, [r3, #4]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	609a      	str	r2, [r3, #8]
    filt->x[0] = in;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	683a      	ldr	r2, [r7, #0]
 8001160:	605a      	str	r2, [r3, #4]

    filt->y[2] = filt->y[1];
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	695a      	ldr	r2, [r3, #20]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	619a      	str	r2, [r3, #24]
    filt->y[1] = filt->y[0];
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	691a      	ldr	r2, [r3, #16]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	615a      	str	r2, [r3, #20]

    filt->y[0] = (1/filt->b[0])*((filt->a[0]*filt->x[0] + filt->a[1]*filt->x[1] + filt->a[2]*filt->x[2]) + (filt->b[1]*filt->y[1] + filt->b[2]*filt->y[2]));
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001178:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800117c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	edd3 6a07 	vldr	s13, [r3, #28]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	edd3 7a01 	vldr	s15, [r3, #4]
 800118c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	ed93 6a08 	vldr	s12, [r3, #32]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	edd3 7a02 	vldr	s15, [r3, #8]
 800119c:	ee66 7a27 	vmul.f32	s15, s12, s15
 80011a0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	ed93 6a09 	vldr	s12, [r3, #36]	@ 0x24
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	edd3 7a03 	vldr	s15, [r3, #12]
 80011b0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80011b4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	ed93 6a0b 	vldr	s12, [r3, #44]	@ 0x2c
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	edd3 7a05 	vldr	s15, [r3, #20]
 80011c4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	edd3 5a0c 	vldr	s11, [r3, #48]	@ 0x30
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	edd3 7a06 	vldr	s15, [r3, #24]
 80011d4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80011d8:	ee76 7a27 	vadd.f32	s15, s12, s15
 80011dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80011e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	edc3 7a04 	vstr	s15, [r3, #16]

    return (filt->y[0]);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	691b      	ldr	r3, [r3, #16]
 80011ee:	ee07 3a90 	vmov	s15, r3
}
 80011f2:	eeb0 0a67 	vmov.f32	s0, s15
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <HAL_I2S_RxHalfCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */



void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	inBufPtr = &inData[0];
 8001208:	4b05      	ldr	r3, [pc, #20]	@ (8001220 <HAL_I2S_RxHalfCpltCallback+0x20>)
 800120a:	4a06      	ldr	r2, [pc, #24]	@ (8001224 <HAL_I2S_RxHalfCpltCallback+0x24>)
 800120c:	601a      	str	r2, [r3, #0]
	dataReadyFlag = 1;
 800120e:	4b06      	ldr	r3, [pc, #24]	@ (8001228 <HAL_I2S_RxHalfCpltCallback+0x28>)
 8001210:	2201      	movs	r2, #1
 8001212:	801a      	strh	r2, [r3, #0]


}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	200007e4 	.word	0x200007e4
 8001224:	200006e4 	.word	0x200006e4
 8001228:	200007ea 	.word	0x200007ea

0800122c <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
	inBufPtr = &inData[BUFFER_SIZE/2];
 8001234:	4b05      	ldr	r3, [pc, #20]	@ (800124c <HAL_I2S_RxCpltCallback+0x20>)
 8001236:	4a06      	ldr	r2, [pc, #24]	@ (8001250 <HAL_I2S_RxCpltCallback+0x24>)
 8001238:	601a      	str	r2, [r3, #0]
	dataReadyFlag = 1;
 800123a:	4b06      	ldr	r3, [pc, #24]	@ (8001254 <HAL_I2S_RxCpltCallback+0x28>)
 800123c:	2201      	movs	r2, #1
 800123e:	801a      	strh	r2, [r3, #0]
}
 8001240:	bf00      	nop
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	200007e4 	.word	0x200007e4
 8001250:	20000764 	.word	0x20000764
 8001254:	200007ea 	.word	0x200007ea

08001258 <processData>:

}



void processData(LowPass_FirstOrder *lpFilt, HighPass_FirstOrder *hpFilt) {
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
	int16_t rightInverted;
	uint16_t leftInvertedShift;
	uint16_t rightInvertedShift;


	for (uint8_t n = 0; n < (BUFFER_SIZE/2) - 1; n += 2) {
 8001262:	2300      	movs	r3, #0
 8001264:	73fb      	strb	r3, [r7, #15]
 8001266:	e0d7      	b.n	8001418 <processData+0x1c0>

		left = (inBufPtr[n] * INT16_TO_FLOAT);
 8001268:	4b70      	ldr	r3, [pc, #448]	@ (800142c <processData+0x1d4>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	7bfb      	ldrb	r3, [r7, #15]
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	4413      	add	r3, r2
 8001272:	881b      	ldrh	r3, [r3, #0]
 8001274:	b21b      	sxth	r3, r3
 8001276:	ee07 3a90 	vmov	s15, r3
 800127a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800127e:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8001430 <processData+0x1d8>
 8001282:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001286:	4b6b      	ldr	r3, [pc, #428]	@ (8001434 <processData+0x1dc>)
 8001288:	edc3 7a00 	vstr	s15, [r3]


		if (left > 1.0f) {
 800128c:	4b69      	ldr	r3, [pc, #420]	@ (8001434 <processData+0x1dc>)
 800128e:	edd3 7a00 	vldr	s15, [r3]
 8001292:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001296:	eef4 7ac7 	vcmpe.f32	s15, s14
 800129a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129e:	dd04      	ble.n	80012aa <processData+0x52>
			left = 1.0f;
 80012a0:	4b64      	ldr	r3, [pc, #400]	@ (8001434 <processData+0x1dc>)
 80012a2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	e00c      	b.n	80012c4 <processData+0x6c>
		}
		else if (left < -1.0f) {
 80012aa:	4b62      	ldr	r3, [pc, #392]	@ (8001434 <processData+0x1dc>)
 80012ac:	edd3 7a00 	vldr	s15, [r3]
 80012b0:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80012b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012bc:	d502      	bpl.n	80012c4 <processData+0x6c>
			left = -1;
 80012be:	4b5d      	ldr	r3, [pc, #372]	@ (8001434 <processData+0x1dc>)
 80012c0:	4a5d      	ldr	r2, [pc, #372]	@ (8001438 <processData+0x1e0>)
 80012c2:	601a      	str	r2, [r3, #0]

		}

		right = (inBufPtr[n+1] * INT16_TO_FLOAT);
 80012c4:	4b59      	ldr	r3, [pc, #356]	@ (800142c <processData+0x1d4>)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	7bfb      	ldrb	r3, [r7, #15]
 80012ca:	3301      	adds	r3, #1
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	4413      	add	r3, r2
 80012d0:	881b      	ldrh	r3, [r3, #0]
 80012d2:	b21b      	sxth	r3, r3
 80012d4:	ee07 3a90 	vmov	s15, r3
 80012d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012dc:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8001430 <processData+0x1d8>
 80012e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012e4:	4b55      	ldr	r3, [pc, #340]	@ (800143c <processData+0x1e4>)
 80012e6:	edc3 7a00 	vstr	s15, [r3]

		rightDelayed = Delay_Update(&dly, right);
 80012ea:	4b54      	ldr	r3, [pc, #336]	@ (800143c <processData+0x1e4>)
 80012ec:	edd3 7a00 	vldr	s15, [r3]
 80012f0:	eeb0 0a67 	vmov.f32	s0, s15
 80012f4:	4852      	ldr	r0, [pc, #328]	@ (8001440 <processData+0x1e8>)
 80012f6:	f7ff fcc0 	bl	8000c7a <Delay_Update>
 80012fa:	eef0 7a40 	vmov.f32	s15, s0
 80012fe:	4b51      	ldr	r3, [pc, #324]	@ (8001444 <processData+0x1ec>)
 8001300:	edc3 7a00 	vstr	s15, [r3]

		if (rightDelayed > 1.0f) {
 8001304:	4b4f      	ldr	r3, [pc, #316]	@ (8001444 <processData+0x1ec>)
 8001306:	edd3 7a00 	vldr	s15, [r3]
 800130a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800130e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001316:	dd04      	ble.n	8001322 <processData+0xca>
			rightDelayed = 1.0f;
 8001318:	4b4a      	ldr	r3, [pc, #296]	@ (8001444 <processData+0x1ec>)
 800131a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	e00c      	b.n	800133c <processData+0xe4>
		}
		else if (rightDelayed < -1.0f) {
 8001322:	4b48      	ldr	r3, [pc, #288]	@ (8001444 <processData+0x1ec>)
 8001324:	edd3 7a00 	vldr	s15, [r3]
 8001328:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800132c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001334:	d502      	bpl.n	800133c <processData+0xe4>
			rightDelayed = -1;
 8001336:	4b43      	ldr	r3, [pc, #268]	@ (8001444 <processData+0x1ec>)
 8001338:	4a3f      	ldr	r2, [pc, #252]	@ (8001438 <processData+0x1e0>)
 800133a:	601a      	str	r2, [r3, #0]
		}

		out = left - rightDelayed;
 800133c:	4b3d      	ldr	r3, [pc, #244]	@ (8001434 <processData+0x1dc>)
 800133e:	ed93 7a00 	vldr	s14, [r3]
 8001342:	4b40      	ldr	r3, [pc, #256]	@ (8001444 <processData+0x1ec>)
 8001344:	edd3 7a00 	vldr	s15, [r3]
 8001348:	ee77 7a67 	vsub.f32	s15, s14, s15
 800134c:	4b3e      	ldr	r3, [pc, #248]	@ (8001448 <processData+0x1f0>)
 800134e:	edc3 7a00 	vstr	s15, [r3]



		out = LowPass_FirstOrder_Update(lpFilt, out);
 8001352:	4b3d      	ldr	r3, [pc, #244]	@ (8001448 <processData+0x1f0>)
 8001354:	edd3 7a00 	vldr	s15, [r3]
 8001358:	eeb0 0a67 	vmov.f32	s0, s15
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7ff fdab 	bl	8000eb8 <LowPass_FirstOrder_Update>
 8001362:	eef0 7a40 	vmov.f32	s15, s0
 8001366:	4b38      	ldr	r3, [pc, #224]	@ (8001448 <processData+0x1f0>)
 8001368:	edc3 7a00 	vstr	s15, [r3]
		out = EQ_filter(&eq, out);
 800136c:	4b36      	ldr	r3, [pc, #216]	@ (8001448 <processData+0x1f0>)
 800136e:	edd3 7a00 	vldr	s15, [r3]
 8001372:	eeb0 0a67 	vmov.f32	s0, s15
 8001376:	4835      	ldr	r0, [pc, #212]	@ (800144c <processData+0x1f4>)
 8001378:	f7ff fee2 	bl	8001140 <EQ_filter>
 800137c:	eef0 7a40 	vmov.f32	s15, s0
 8001380:	4b31      	ldr	r3, [pc, #196]	@ (8001448 <processData+0x1f0>)
 8001382:	edc3 7a00 	vstr	s15, [r3]
		out = out * VOLUME;
 8001386:	4b30      	ldr	r3, [pc, #192]	@ (8001448 <processData+0x1f0>)
 8001388:	edd3 7a00 	vldr	s15, [r3]
 800138c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001450 <processData+0x1f8>
 8001390:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001394:	4b2c      	ldr	r3, [pc, #176]	@ (8001448 <processData+0x1f0>)
 8001396:	edc3 7a00 	vstr	s15, [r3]

		if (out > 1.0f) {
 800139a:	4b2b      	ldr	r3, [pc, #172]	@ (8001448 <processData+0x1f0>)
 800139c:	edd3 7a00 	vldr	s15, [r3]
 80013a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80013a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ac:	dd04      	ble.n	80013b8 <processData+0x160>
			out = 1.0f;
 80013ae:	4b26      	ldr	r3, [pc, #152]	@ (8001448 <processData+0x1f0>)
 80013b0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	e00c      	b.n	80013d2 <processData+0x17a>
		}
		else if (out < -1.0f) {
 80013b8:	4b23      	ldr	r3, [pc, #140]	@ (8001448 <processData+0x1f0>)
 80013ba:	edd3 7a00 	vldr	s15, [r3]
 80013be:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80013c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ca:	d502      	bpl.n	80013d2 <processData+0x17a>
			out = -1;
 80013cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001448 <processData+0x1f0>)
 80013ce:	4a1a      	ldr	r2, [pc, #104]	@ (8001438 <processData+0x1e0>)
 80013d0:	601a      	str	r2, [r3, #0]
		}


		dac_value = (uint16_t)(((int32_t)(out * 2047.0f)) + 2048);
 80013d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001448 <processData+0x1f0>)
 80013d4:	edd3 7a00 	vldr	s15, [r3]
 80013d8:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001454 <processData+0x1fc>
 80013dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013e4:	ee17 3a90 	vmov	r3, s15
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	4b19      	ldr	r3, [pc, #100]	@ (8001458 <processData+0x200>)
 80013f2:	801a      	strh	r2, [r3, #0]

		if (dac_value > 4095) {
 80013f4:	4b18      	ldr	r3, [pc, #96]	@ (8001458 <processData+0x200>)
 80013f6:	881b      	ldrh	r3, [r3, #0]
 80013f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80013fc:	d302      	bcc.n	8001404 <processData+0x1ac>
			out = 4095;
 80013fe:	4b12      	ldr	r3, [pc, #72]	@ (8001448 <processData+0x1f0>)
 8001400:	4a16      	ldr	r2, [pc, #88]	@ (800145c <processData+0x204>)
 8001402:	601a      	str	r2, [r3, #0]
		}

		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, dac_value);
 8001404:	4b14      	ldr	r3, [pc, #80]	@ (8001458 <processData+0x200>)
 8001406:	881b      	ldrh	r3, [r3, #0]
 8001408:	2200      	movs	r2, #0
 800140a:	2110      	movs	r1, #16
 800140c:	4814      	ldr	r0, [pc, #80]	@ (8001460 <processData+0x208>)
 800140e:	f001 f8cc 	bl	80025aa <HAL_DAC_SetValue>
	for (uint8_t n = 0; n < (BUFFER_SIZE/2) - 1; n += 2) {
 8001412:	7bfb      	ldrb	r3, [r7, #15]
 8001414:	3302      	adds	r3, #2
 8001416:	73fb      	strb	r3, [r7, #15]
 8001418:	7bfb      	ldrb	r3, [r7, #15]
 800141a:	2b3e      	cmp	r3, #62	@ 0x3e
 800141c:	f67f af24 	bls.w	8001268 <processData+0x10>

	}



}
 8001420:	bf00      	nop
 8001422:	bf00      	nop
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	200007e4 	.word	0x200007e4
 8001430:	38000000 	.word	0x38000000
 8001434:	200008ac 	.word	0x200008ac
 8001438:	bf800000 	.word	0xbf800000
 800143c:	200008b0 	.word	0x200008b0
 8001440:	20000820 	.word	0x20000820
 8001444:	200008b4 	.word	0x200008b4
 8001448:	200008b8 	.word	0x200008b8
 800144c:	200007ec 	.word	0x200007ec
 8001450:	42480000 	.word	0x42480000
 8001454:	44ffe000 	.word	0x44ffe000
 8001458:	200007e8 	.word	0x200007e8
 800145c:	457ff000 	.word	0x457ff000
 8001460:	20000484 	.word	0x20000484

08001464 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800146a:	f000 ff01 	bl	8002270 <HAL_Init>
  // HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800146e:	f000 f871 	bl	8001554 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001472:	f000 f8dd 	bl	8001630 <PeriphCommonClock_Config>
  //HAL_NVIC_EnableIRQ(SysTick_IRQn);

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001476:	f000 fa15 	bl	80018a4 <MX_GPIO_Init>
  MX_DMA_Init();
 800147a:	f000 f9e3 	bl	8001844 <MX_DMA_Init>
  MX_DAC_Init();
 800147e:	f000 f8ff 	bl	8001680 <MX_DAC_Init>
  MX_I2C3_Init();
 8001482:	f000 f927 	bl	80016d4 <MX_I2C3_Init>
  MX_I2S3_Init();
 8001486:	f000 f9af 	bl	80017e8 <MX_I2S3_Init>
  MX_I2S2_Init();
 800148a:	f000 f97f 	bl	800178c <MX_I2S2_Init>
  MX_I2S1_Init();
 800148e:	f000 f94f 	bl	8001730 <MX_I2S1_Init>
 *
 */


  //DWT_Init();
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8001492:	2110      	movs	r1, #16
 8001494:	4823      	ldr	r0, [pc, #140]	@ (8001524 <main+0xc0>)
 8001496:	f001 f831 	bl	80024fc <HAL_DAC_Start>
  HAL_I2S_Receive_DMA(&hi2s3, (uint16_t *)inData, BUFFER_SIZE);
 800149a:	2280      	movs	r2, #128	@ 0x80
 800149c:	4922      	ldr	r1, [pc, #136]	@ (8001528 <main+0xc4>)
 800149e:	4823      	ldr	r0, [pc, #140]	@ (800152c <main+0xc8>)
 80014a0:	f002 f860 	bl	8003564 <HAL_I2S_Receive_DMA>

  // 500 hz: delay = 1 ms
  float delayTime = 0.4081632653;;
 80014a4:	4b22      	ldr	r3, [pc, #136]	@ (8001530 <main+0xcc>)
 80014a6:	60fb      	str	r3, [r7, #12]
  Delay_Init(&dly, delayTime, 1, 0, SAMPLING_RATE);
 80014a8:	eddf 1a22 	vldr	s3, [pc, #136]	@ 8001534 <main+0xd0>
 80014ac:	ed9f 1a22 	vldr	s2, [pc, #136]	@ 8001538 <main+0xd4>
 80014b0:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80014b4:	ed97 0a03 	vldr	s0, [r7, #12]
 80014b8:	4820      	ldr	r0, [pc, #128]	@ (800153c <main+0xd8>)
 80014ba:	f7ff fba7 	bl	8000c0c <Delay_Init>



  LowPass_FirstOrder *lpFilt = (LowPass_FirstOrder*)malloc(sizeof(LowPass_FirstOrder));
 80014be:	2010      	movs	r0, #16
 80014c0:	f003 ffee 	bl	80054a0 <malloc>
 80014c4:	4603      	mov	r3, r0
 80014c6:	60bb      	str	r3, [r7, #8]
  HighPass_FirstOrder *hpFilt = (HighPass_FirstOrder*)malloc(sizeof(HighPass_FirstOrder));
 80014c8:	2010      	movs	r0, #16
 80014ca:	f003 ffe9 	bl	80054a0 <malloc>
 80014ce:	4603      	mov	r3, r0
 80014d0:	607b      	str	r3, [r7, #4]

  if (!lpFilt || !hpFilt) {
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d002      	beq.n	80014de <main+0x7a>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d101      	bne.n	80014e2 <main+0x7e>
      Error_Handler();  // Or handle it gracefully
 80014de:	f000 fa4e 	bl	800197e <Error_Handler>
  }

  LowPass_FirstOrder_Init(lpFilt, 2000.0f, SAMPLING_RATE);
 80014e2:	eddf 0a14 	vldr	s1, [pc, #80]	@ 8001534 <main+0xd0>
 80014e6:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 8001540 <main+0xdc>
 80014ea:	68b8      	ldr	r0, [r7, #8]
 80014ec:	f7ff fc74 	bl	8000dd8 <LowPass_FirstOrder_Init>
  EQ_init(&eq, SAMPLING_RATE);
 80014f0:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 8001534 <main+0xd0>
 80014f4:	4813      	ldr	r0, [pc, #76]	@ (8001544 <main+0xe0>)
 80014f6:	f7ff fd23 	bl	8000f40 <EQ_init>
  EQ_setParam(&eq, 200, 5, 80);
 80014fa:	ed9f 1a13 	vldr	s2, [pc, #76]	@ 8001548 <main+0xe4>
 80014fe:	eef1 0a04 	vmov.f32	s1, #20	@ 0x40a00000  5.0
 8001502:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 800154c <main+0xe8>
 8001506:	480f      	ldr	r0, [pc, #60]	@ (8001544 <main+0xe0>)
 8001508:	f7ff fd52 	bl	8000fb0 <EQ_setParam>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	   if (dataReadyFlag) {
 800150c:	4b10      	ldr	r3, [pc, #64]	@ (8001550 <main+0xec>)
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d0fb      	beq.n	800150c <main+0xa8>
		   dataReadyFlag = 0;
 8001514:	4b0e      	ldr	r3, [pc, #56]	@ (8001550 <main+0xec>)
 8001516:	2200      	movs	r2, #0
 8001518:	801a      	strh	r2, [r3, #0]
		   processData(lpFilt, hpFilt);
 800151a:	6879      	ldr	r1, [r7, #4]
 800151c:	68b8      	ldr	r0, [r7, #8]
 800151e:	f7ff fe9b 	bl	8001258 <processData>
	   if (dataReadyFlag) {
 8001522:	e7f3      	b.n	800150c <main+0xa8>
 8001524:	20000484 	.word	0x20000484
 8001528:	200006e4 	.word	0x200006e4
 800152c:	200005dc 	.word	0x200005dc
 8001530:	3ed0fac7 	.word	0x3ed0fac7
 8001534:	473b8000 	.word	0x473b8000
 8001538:	00000000 	.word	0x00000000
 800153c:	20000820 	.word	0x20000820
 8001540:	44fa0000 	.word	0x44fa0000
 8001544:	200007ec 	.word	0x200007ec
 8001548:	42a00000 	.word	0x42a00000
 800154c:	43480000 	.word	0x43480000
 8001550:	200007ea 	.word	0x200007ea

08001554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b094      	sub	sp, #80	@ 0x50
 8001558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800155a:	f107 031c 	add.w	r3, r7, #28
 800155e:	2234      	movs	r2, #52	@ 0x34
 8001560:	2100      	movs	r1, #0
 8001562:	4618      	mov	r0, r3
 8001564:	f004 f969 	bl	800583a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001568:	f107 0308 	add.w	r3, r7, #8
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001578:	2300      	movs	r3, #0
 800157a:	607b      	str	r3, [r7, #4]
 800157c:	4b2a      	ldr	r3, [pc, #168]	@ (8001628 <SystemClock_Config+0xd4>)
 800157e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001580:	4a29      	ldr	r2, [pc, #164]	@ (8001628 <SystemClock_Config+0xd4>)
 8001582:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001586:	6413      	str	r3, [r2, #64]	@ 0x40
 8001588:	4b27      	ldr	r3, [pc, #156]	@ (8001628 <SystemClock_Config+0xd4>)
 800158a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001590:	607b      	str	r3, [r7, #4]
 8001592:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001594:	2300      	movs	r3, #0
 8001596:	603b      	str	r3, [r7, #0]
 8001598:	4b24      	ldr	r3, [pc, #144]	@ (800162c <SystemClock_Config+0xd8>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80015a0:	4a22      	ldr	r2, [pc, #136]	@ (800162c <SystemClock_Config+0xd8>)
 80015a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015a6:	6013      	str	r3, [r2, #0]
 80015a8:	4b20      	ldr	r3, [pc, #128]	@ (800162c <SystemClock_Config+0xd8>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80015b0:	603b      	str	r3, [r7, #0]
 80015b2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015b4:	2301      	movs	r3, #1
 80015b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015bc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015be:	2302      	movs	r3, #2
 80015c0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015c2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80015c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 13;
 80015c8:	230d      	movs	r3, #13
 80015ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 50;
 80015cc:	2332      	movs	r3, #50	@ 0x32
 80015ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015d0:	2302      	movs	r3, #2
 80015d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015d4:	2304      	movs	r3, #4
 80015d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80015d8:	2302      	movs	r3, #2
 80015da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015dc:	f107 031c 	add.w	r3, r7, #28
 80015e0:	4618      	mov	r0, r3
 80015e2:	f003 fa1d 	bl	8004a20 <HAL_RCC_OscConfig>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80015ec:	f000 f9c7 	bl	800197e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015f0:	230f      	movs	r3, #15
 80015f2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015f4:	2302      	movs	r3, #2
 80015f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015f8:	2300      	movs	r3, #0
 80015fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001600:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001602:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001606:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001608:	f107 0308 	add.w	r3, r7, #8
 800160c:	2101      	movs	r1, #1
 800160e:	4618      	mov	r0, r3
 8001610:	f002 f9b0 	bl	8003974 <HAL_RCC_ClockConfig>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800161a:	f000 f9b0 	bl	800197e <Error_Handler>
  }
}
 800161e:	bf00      	nop
 8001620:	3750      	adds	r7, #80	@ 0x50
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40023800 	.word	0x40023800
 800162c:	40007000 	.word	0x40007000

08001630 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b098      	sub	sp, #96	@ 0x60
 8001634:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001636:	1d3b      	adds	r3, r7, #4
 8001638:	225c      	movs	r2, #92	@ 0x5c
 800163a:	2100      	movs	r1, #0
 800163c:	4618      	mov	r0, r3
 800163e:	f004 f8fc 	bl	800583a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1|RCC_PERIPHCLK_I2S_APB2;
 8001642:	2303      	movs	r3, #3
 8001644:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8001646:	2332      	movs	r3, #50	@ 0x32
 8001648:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLI2SP_DIV2;
 800164a:	2302      	movs	r3, #2
 800164c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 13;
 800164e:	230d      	movs	r3, #13
 8001650:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001652:	2302      	movs	r3, #2
 8001654:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001656:	2302      	movs	r3, #2
 8001658:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 800165a:	2301      	movs	r3, #1
 800165c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.I2sApb2ClockSelection = RCC_I2SAPB2CLKSOURCE_PLLI2S;
 800165e:	2300      	movs	r3, #0
 8001660:	643b      	str	r3, [r7, #64]	@ 0x40
  PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 8001662:	2300      	movs	r3, #0
 8001664:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001666:	1d3b      	adds	r3, r7, #4
 8001668:	4618      	mov	r0, r3
 800166a:	f002 fabb 	bl	8003be4 <HAL_RCCEx_PeriphCLKConfig>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <PeriphCommonClock_Config+0x48>
  {
    Error_Handler();
 8001674:	f000 f983 	bl	800197e <Error_Handler>
  }
}
 8001678:	bf00      	nop
 800167a:	3760      	adds	r7, #96	@ 0x60
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001686:	463b      	mov	r3, r7
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800168e:	4b0f      	ldr	r3, [pc, #60]	@ (80016cc <MX_DAC_Init+0x4c>)
 8001690:	4a0f      	ldr	r2, [pc, #60]	@ (80016d0 <MX_DAC_Init+0x50>)
 8001692:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001694:	480d      	ldr	r0, [pc, #52]	@ (80016cc <MX_DAC_Init+0x4c>)
 8001696:	f000 ff0f 	bl	80024b8 <HAL_DAC_Init>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80016a0:	f000 f96d 	bl	800197e <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80016a4:	2300      	movs	r3, #0
 80016a6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80016a8:	2300      	movs	r3, #0
 80016aa:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80016ac:	463b      	mov	r3, r7
 80016ae:	2210      	movs	r2, #16
 80016b0:	4619      	mov	r1, r3
 80016b2:	4806      	ldr	r0, [pc, #24]	@ (80016cc <MX_DAC_Init+0x4c>)
 80016b4:	f000 ffa3 	bl	80025fe <HAL_DAC_ConfigChannel>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80016be:	f000 f95e 	bl	800197e <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000484 	.word	0x20000484
 80016d0:	40007400 	.word	0x40007400

080016d4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80016d8:	4b12      	ldr	r3, [pc, #72]	@ (8001724 <MX_I2C3_Init+0x50>)
 80016da:	4a13      	ldr	r2, [pc, #76]	@ (8001728 <MX_I2C3_Init+0x54>)
 80016dc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80016de:	4b11      	ldr	r3, [pc, #68]	@ (8001724 <MX_I2C3_Init+0x50>)
 80016e0:	4a12      	ldr	r2, [pc, #72]	@ (800172c <MX_I2C3_Init+0x58>)
 80016e2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001724 <MX_I2C3_Init+0x50>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80016ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001724 <MX_I2C3_Init+0x50>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001724 <MX_I2C3_Init+0x50>)
 80016f2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80016f6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001724 <MX_I2C3_Init+0x50>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80016fe:	4b09      	ldr	r3, [pc, #36]	@ (8001724 <MX_I2C3_Init+0x50>)
 8001700:	2200      	movs	r2, #0
 8001702:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001704:	4b07      	ldr	r3, [pc, #28]	@ (8001724 <MX_I2C3_Init+0x50>)
 8001706:	2200      	movs	r2, #0
 8001708:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800170a:	4b06      	ldr	r3, [pc, #24]	@ (8001724 <MX_I2C3_Init+0x50>)
 800170c:	2200      	movs	r2, #0
 800170e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001710:	4804      	ldr	r0, [pc, #16]	@ (8001724 <MX_I2C3_Init+0x50>)
 8001712:	f001 fceb 	bl	80030ec <HAL_I2C_Init>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800171c:	f000 f92f 	bl	800197e <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001720:	bf00      	nop
 8001722:	bd80      	pop	{r7, pc}
 8001724:	200004f8 	.word	0x200004f8
 8001728:	40005c00 	.word	0x40005c00
 800172c:	000186a0 	.word	0x000186a0

08001730 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8001734:	4b13      	ldr	r3, [pc, #76]	@ (8001784 <MX_I2S1_Init+0x54>)
 8001736:	4a14      	ldr	r2, [pc, #80]	@ (8001788 <MX_I2S1_Init+0x58>)
 8001738:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
 800173a:	4b12      	ldr	r3, [pc, #72]	@ (8001784 <MX_I2S1_Init+0x54>)
 800173c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001740:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8001742:	4b10      	ldr	r3, [pc, #64]	@ (8001784 <MX_I2S1_Init+0x54>)
 8001744:	2200      	movs	r2, #0
 8001746:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8001748:	4b0e      	ldr	r3, [pc, #56]	@ (8001784 <MX_I2S1_Init+0x54>)
 800174a:	2201      	movs	r2, #1
 800174c:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800174e:	4b0d      	ldr	r3, [pc, #52]	@ (8001784 <MX_I2S1_Init+0x54>)
 8001750:	2200      	movs	r2, #0
 8001752:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8001754:	4b0b      	ldr	r3, [pc, #44]	@ (8001784 <MX_I2S1_Init+0x54>)
 8001756:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800175a:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 800175c:	4b09      	ldr	r3, [pc, #36]	@ (8001784 <MX_I2S1_Init+0x54>)
 800175e:	2200      	movs	r2, #0
 8001760:	619a      	str	r2, [r3, #24]
  hi2s1.Init.ClockSource = I2S_CLOCK_PLL;
 8001762:	4b08      	ldr	r3, [pc, #32]	@ (8001784 <MX_I2S1_Init+0x54>)
 8001764:	2200      	movs	r2, #0
 8001766:	61da      	str	r2, [r3, #28]
  hi2s1.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001768:	4b06      	ldr	r3, [pc, #24]	@ (8001784 <MX_I2S1_Init+0x54>)
 800176a:	2200      	movs	r2, #0
 800176c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 800176e:	4805      	ldr	r0, [pc, #20]	@ (8001784 <MX_I2S1_Init+0x54>)
 8001770:	f001 fe00 	bl	8003374 <HAL_I2S_Init>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_I2S1_Init+0x4e>
  {
    Error_Handler();
 800177a:	f000 f900 	bl	800197e <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	2000054c 	.word	0x2000054c
 8001788:	40013000 	.word	0x40013000

0800178c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001790:	4b13      	ldr	r3, [pc, #76]	@ (80017e0 <MX_I2S2_Init+0x54>)
 8001792:	4a14      	ldr	r2, [pc, #80]	@ (80017e4 <MX_I2S2_Init+0x58>)
 8001794:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8001796:	4b12      	ldr	r3, [pc, #72]	@ (80017e0 <MX_I2S2_Init+0x54>)
 8001798:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800179c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800179e:	4b10      	ldr	r3, [pc, #64]	@ (80017e0 <MX_I2S2_Init+0x54>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 80017a4:	4b0e      	ldr	r3, [pc, #56]	@ (80017e0 <MX_I2S2_Init+0x54>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80017aa:	4b0d      	ldr	r3, [pc, #52]	@ (80017e0 <MX_I2S2_Init+0x54>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80017b0:	4b0b      	ldr	r3, [pc, #44]	@ (80017e0 <MX_I2S2_Init+0x54>)
 80017b2:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80017b6:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80017b8:	4b09      	ldr	r3, [pc, #36]	@ (80017e0 <MX_I2S2_Init+0x54>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80017be:	4b08      	ldr	r3, [pc, #32]	@ (80017e0 <MX_I2S2_Init+0x54>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80017c4:	4b06      	ldr	r3, [pc, #24]	@ (80017e0 <MX_I2S2_Init+0x54>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80017ca:	4805      	ldr	r0, [pc, #20]	@ (80017e0 <MX_I2S2_Init+0x54>)
 80017cc:	f001 fdd2 	bl	8003374 <HAL_I2S_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 80017d6:	f000 f8d2 	bl	800197e <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000594 	.word	0x20000594
 80017e4:	40003800 	.word	0x40003800

080017e8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80017ec:	4b13      	ldr	r3, [pc, #76]	@ (800183c <MX_I2S3_Init+0x54>)
 80017ee:	4a14      	ldr	r2, [pc, #80]	@ (8001840 <MX_I2S3_Init+0x58>)
 80017f0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_RX;
 80017f2:	4b12      	ldr	r3, [pc, #72]	@ (800183c <MX_I2S3_Init+0x54>)
 80017f4:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80017f8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80017fa:	4b10      	ldr	r3, [pc, #64]	@ (800183c <MX_I2S3_Init+0x54>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8001800:	4b0e      	ldr	r3, [pc, #56]	@ (800183c <MX_I2S3_Init+0x54>)
 8001802:	2201      	movs	r2, #1
 8001804:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001806:	4b0d      	ldr	r3, [pc, #52]	@ (800183c <MX_I2S3_Init+0x54>)
 8001808:	2200      	movs	r2, #0
 800180a:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 800180c:	4b0b      	ldr	r3, [pc, #44]	@ (800183c <MX_I2S3_Init+0x54>)
 800180e:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8001812:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001814:	4b09      	ldr	r3, [pc, #36]	@ (800183c <MX_I2S3_Init+0x54>)
 8001816:	2200      	movs	r2, #0
 8001818:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800181a:	4b08      	ldr	r3, [pc, #32]	@ (800183c <MX_I2S3_Init+0x54>)
 800181c:	2200      	movs	r2, #0
 800181e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001820:	4b06      	ldr	r3, [pc, #24]	@ (800183c <MX_I2S3_Init+0x54>)
 8001822:	2200      	movs	r2, #0
 8001824:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001826:	4805      	ldr	r0, [pc, #20]	@ (800183c <MX_I2S3_Init+0x54>)
 8001828:	f001 fda4 	bl	8003374 <HAL_I2S_Init>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001832:	f000 f8a4 	bl	800197e <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	200005dc 	.word	0x200005dc
 8001840:	40003c00 	.word	0x40003c00

08001844 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	607b      	str	r3, [r7, #4]
 800184e:	4b14      	ldr	r3, [pc, #80]	@ (80018a0 <MX_DMA_Init+0x5c>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001852:	4a13      	ldr	r2, [pc, #76]	@ (80018a0 <MX_DMA_Init+0x5c>)
 8001854:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001858:	6313      	str	r3, [r2, #48]	@ 0x30
 800185a:	4b11      	ldr	r3, [pc, #68]	@ (80018a0 <MX_DMA_Init+0x5c>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001862:	607b      	str	r3, [r7, #4]
 8001864:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001866:	2200      	movs	r2, #0
 8001868:	2100      	movs	r1, #0
 800186a:	200b      	movs	r0, #11
 800186c:	f000 fdfa 	bl	8002464 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001870:	200b      	movs	r0, #11
 8001872:	f000 fe13 	bl	800249c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001876:	2200      	movs	r2, #0
 8001878:	2100      	movs	r1, #0
 800187a:	200e      	movs	r0, #14
 800187c:	f000 fdf2 	bl	8002464 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001880:	200e      	movs	r0, #14
 8001882:	f000 fe0b 	bl	800249c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001886:	2200      	movs	r2, #0
 8001888:	2100      	movs	r1, #0
 800188a:	2011      	movs	r0, #17
 800188c:	f000 fdea 	bl	8002464 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001890:	2011      	movs	r0, #17
 8001892:	f000 fe03 	bl	800249c <HAL_NVIC_EnableIRQ>

}
 8001896:	bf00      	nop
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40023800 	.word	0x40023800

080018a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08a      	sub	sp, #40	@ 0x28
 80018a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018aa:	f107 0314 	add.w	r3, r7, #20
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	605a      	str	r2, [r3, #4]
 80018b4:	609a      	str	r2, [r3, #8]
 80018b6:	60da      	str	r2, [r3, #12]
 80018b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	613b      	str	r3, [r7, #16]
 80018be:	4b26      	ldr	r3, [pc, #152]	@ (8001958 <MX_GPIO_Init+0xb4>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c2:	4a25      	ldr	r2, [pc, #148]	@ (8001958 <MX_GPIO_Init+0xb4>)
 80018c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ca:	4b23      	ldr	r3, [pc, #140]	@ (8001958 <MX_GPIO_Init+0xb4>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018d2:	613b      	str	r3, [r7, #16]
 80018d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	4b1f      	ldr	r3, [pc, #124]	@ (8001958 <MX_GPIO_Init+0xb4>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018de:	4a1e      	ldr	r2, [pc, #120]	@ (8001958 <MX_GPIO_Init+0xb4>)
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001958 <MX_GPIO_Init+0xb4>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	60bb      	str	r3, [r7, #8]
 80018f6:	4b18      	ldr	r3, [pc, #96]	@ (8001958 <MX_GPIO_Init+0xb4>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fa:	4a17      	ldr	r2, [pc, #92]	@ (8001958 <MX_GPIO_Init+0xb4>)
 80018fc:	f043 0302 	orr.w	r3, r3, #2
 8001900:	6313      	str	r3, [r2, #48]	@ 0x30
 8001902:	4b15      	ldr	r3, [pc, #84]	@ (8001958 <MX_GPIO_Init+0xb4>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	60bb      	str	r3, [r7, #8]
 800190c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	607b      	str	r3, [r7, #4]
 8001912:	4b11      	ldr	r3, [pc, #68]	@ (8001958 <MX_GPIO_Init+0xb4>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001916:	4a10      	ldr	r2, [pc, #64]	@ (8001958 <MX_GPIO_Init+0xb4>)
 8001918:	f043 0304 	orr.w	r3, r3, #4
 800191c:	6313      	str	r3, [r2, #48]	@ 0x30
 800191e:	4b0e      	ldr	r3, [pc, #56]	@ (8001958 <MX_GPIO_Init+0xb4>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001922:	f003 0304 	and.w	r3, r3, #4
 8001926:	607b      	str	r3, [r7, #4]
 8001928:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800192a:	2200      	movs	r2, #0
 800192c:	2140      	movs	r1, #64	@ 0x40
 800192e:	480b      	ldr	r0, [pc, #44]	@ (800195c <MX_GPIO_Init+0xb8>)
 8001930:	f001 fbc2 	bl	80030b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001934:	2340      	movs	r3, #64	@ 0x40
 8001936:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001938:	2301      	movs	r3, #1
 800193a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001940:	2300      	movs	r3, #0
 8001942:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001944:	f107 0314 	add.w	r3, r7, #20
 8001948:	4619      	mov	r1, r3
 800194a:	4804      	ldr	r0, [pc, #16]	@ (800195c <MX_GPIO_Init+0xb8>)
 800194c:	f001 fa20 	bl	8002d90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001950:	bf00      	nop
 8001952:	3728      	adds	r7, #40	@ 0x28
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40023800 	.word	0x40023800
 800195c:	40020800 	.word	0x40020800

08001960 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001970:	d101      	bne.n	8001976 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001972:	f000 fc9f 	bl	80022b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800197e:	b480      	push	{r7}
 8001980:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001982:	b672      	cpsid	i
}
 8001984:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001986:	bf00      	nop
 8001988:	e7fd      	b.n	8001986 <Error_Handler+0x8>
	...

0800198c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	607b      	str	r3, [r7, #4]
 8001996:	4b10      	ldr	r3, [pc, #64]	@ (80019d8 <HAL_MspInit+0x4c>)
 8001998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800199a:	4a0f      	ldr	r2, [pc, #60]	@ (80019d8 <HAL_MspInit+0x4c>)
 800199c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80019a2:	4b0d      	ldr	r3, [pc, #52]	@ (80019d8 <HAL_MspInit+0x4c>)
 80019a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019aa:	607b      	str	r3, [r7, #4]
 80019ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	603b      	str	r3, [r7, #0]
 80019b2:	4b09      	ldr	r3, [pc, #36]	@ (80019d8 <HAL_MspInit+0x4c>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b6:	4a08      	ldr	r2, [pc, #32]	@ (80019d8 <HAL_MspInit+0x4c>)
 80019b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80019be:	4b06      	ldr	r3, [pc, #24]	@ (80019d8 <HAL_MspInit+0x4c>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019c6:	603b      	str	r3, [r7, #0]
 80019c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	40023800 	.word	0x40023800

080019dc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08a      	sub	sp, #40	@ 0x28
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e4:	f107 0314 	add.w	r3, r7, #20
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a30      	ldr	r2, [pc, #192]	@ (8001abc <HAL_DAC_MspInit+0xe0>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d159      	bne.n	8001ab2 <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	613b      	str	r3, [r7, #16]
 8001a02:	4b2f      	ldr	r3, [pc, #188]	@ (8001ac0 <HAL_DAC_MspInit+0xe4>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a06:	4a2e      	ldr	r2, [pc, #184]	@ (8001ac0 <HAL_DAC_MspInit+0xe4>)
 8001a08:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001a0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a0e:	4b2c      	ldr	r3, [pc, #176]	@ (8001ac0 <HAL_DAC_MspInit+0xe4>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a12:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001a16:	613b      	str	r3, [r7, #16]
 8001a18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	4b28      	ldr	r3, [pc, #160]	@ (8001ac0 <HAL_DAC_MspInit+0xe4>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a22:	4a27      	ldr	r2, [pc, #156]	@ (8001ac0 <HAL_DAC_MspInit+0xe4>)
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a2a:	4b25      	ldr	r3, [pc, #148]	@ (8001ac0 <HAL_DAC_MspInit+0xe4>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a36:	2320      	movs	r3, #32
 8001a38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a42:	f107 0314 	add.w	r3, r7, #20
 8001a46:	4619      	mov	r1, r3
 8001a48:	481e      	ldr	r0, [pc, #120]	@ (8001ac4 <HAL_DAC_MspInit+0xe8>)
 8001a4a:	f001 f9a1 	bl	8002d90 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 8001a4e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ac8 <HAL_DAC_MspInit+0xec>)
 8001a50:	4a1e      	ldr	r2, [pc, #120]	@ (8001acc <HAL_DAC_MspInit+0xf0>)
 8001a52:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 8001a54:	4b1c      	ldr	r3, [pc, #112]	@ (8001ac8 <HAL_DAC_MspInit+0xec>)
 8001a56:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001a5a:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a5c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ac8 <HAL_DAC_MspInit+0xec>)
 8001a5e:	2240      	movs	r2, #64	@ 0x40
 8001a60:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a62:	4b19      	ldr	r3, [pc, #100]	@ (8001ac8 <HAL_DAC_MspInit+0xec>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 8001a68:	4b17      	ldr	r3, [pc, #92]	@ (8001ac8 <HAL_DAC_MspInit+0xec>)
 8001a6a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a6e:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a70:	4b15      	ldr	r3, [pc, #84]	@ (8001ac8 <HAL_DAC_MspInit+0xec>)
 8001a72:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001a76:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a78:	4b13      	ldr	r3, [pc, #76]	@ (8001ac8 <HAL_DAC_MspInit+0xec>)
 8001a7a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a7e:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 8001a80:	4b11      	ldr	r3, [pc, #68]	@ (8001ac8 <HAL_DAC_MspInit+0xec>)
 8001a82:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a86:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_HIGH;
 8001a88:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac8 <HAL_DAC_MspInit+0xec>)
 8001a8a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001a8e:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a90:	4b0d      	ldr	r3, [pc, #52]	@ (8001ac8 <HAL_DAC_MspInit+0xec>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 8001a96:	480c      	ldr	r0, [pc, #48]	@ (8001ac8 <HAL_DAC_MspInit+0xec>)
 8001a98:	f000 fe0a 	bl	80026b0 <HAL_DMA_Init>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8001aa2:	f7ff ff6c 	bl	800197e <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac2);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a07      	ldr	r2, [pc, #28]	@ (8001ac8 <HAL_DAC_MspInit+0xec>)
 8001aaa:	60da      	str	r2, [r3, #12]
 8001aac:	4a06      	ldr	r2, [pc, #24]	@ (8001ac8 <HAL_DAC_MspInit+0xec>)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END DAC_MspInit 1 */

  }

}
 8001ab2:	bf00      	nop
 8001ab4:	3728      	adds	r7, #40	@ 0x28
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40007400 	.word	0x40007400
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	40020000 	.word	0x40020000
 8001ac8:	20000498 	.word	0x20000498
 8001acc:	400260a0 	.word	0x400260a0

08001ad0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b08a      	sub	sp, #40	@ 0x28
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad8:	f107 0314 	add.w	r3, r7, #20
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a29      	ldr	r2, [pc, #164]	@ (8001b94 <HAL_I2C_MspInit+0xc4>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d14b      	bne.n	8001b8a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	613b      	str	r3, [r7, #16]
 8001af6:	4b28      	ldr	r3, [pc, #160]	@ (8001b98 <HAL_I2C_MspInit+0xc8>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afa:	4a27      	ldr	r2, [pc, #156]	@ (8001b98 <HAL_I2C_MspInit+0xc8>)
 8001afc:	f043 0304 	orr.w	r3, r3, #4
 8001b00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b02:	4b25      	ldr	r3, [pc, #148]	@ (8001b98 <HAL_I2C_MspInit+0xc8>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b06:	f003 0304 	and.w	r3, r3, #4
 8001b0a:	613b      	str	r3, [r7, #16]
 8001b0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	4b21      	ldr	r3, [pc, #132]	@ (8001b98 <HAL_I2C_MspInit+0xc8>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b16:	4a20      	ldr	r2, [pc, #128]	@ (8001b98 <HAL_I2C_MspInit+0xc8>)
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b1e:	4b1e      	ldr	r3, [pc, #120]	@ (8001b98 <HAL_I2C_MspInit+0xc8>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b2a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b30:	2312      	movs	r3, #18
 8001b32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b3c:	2304      	movs	r3, #4
 8001b3e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b40:	f107 0314 	add.w	r3, r7, #20
 8001b44:	4619      	mov	r1, r3
 8001b46:	4815      	ldr	r0, [pc, #84]	@ (8001b9c <HAL_I2C_MspInit+0xcc>)
 8001b48:	f001 f922 	bl	8002d90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b52:	2312      	movs	r3, #18
 8001b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b5e:	2304      	movs	r3, #4
 8001b60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b62:	f107 0314 	add.w	r3, r7, #20
 8001b66:	4619      	mov	r1, r3
 8001b68:	480d      	ldr	r0, [pc, #52]	@ (8001ba0 <HAL_I2C_MspInit+0xd0>)
 8001b6a:	f001 f911 	bl	8002d90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60bb      	str	r3, [r7, #8]
 8001b72:	4b09      	ldr	r3, [pc, #36]	@ (8001b98 <HAL_I2C_MspInit+0xc8>)
 8001b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b76:	4a08      	ldr	r2, [pc, #32]	@ (8001b98 <HAL_I2C_MspInit+0xc8>)
 8001b78:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001b7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b7e:	4b06      	ldr	r3, [pc, #24]	@ (8001b98 <HAL_I2C_MspInit+0xc8>)
 8001b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001b86:	60bb      	str	r3, [r7, #8]
 8001b88:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8001b8a:	bf00      	nop
 8001b8c:	3728      	adds	r7, #40	@ 0x28
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40005c00 	.word	0x40005c00
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	40020800 	.word	0x40020800
 8001ba0:	40020000 	.word	0x40020000

08001ba4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b090      	sub	sp, #64	@ 0x40
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
 8001bba:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI1)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a59      	ldr	r2, [pc, #356]	@ (8001d28 <HAL_I2S_MspInit+0x184>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d14b      	bne.n	8001c5e <HAL_I2S_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bca:	4b58      	ldr	r3, [pc, #352]	@ (8001d2c <HAL_I2S_MspInit+0x188>)
 8001bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bce:	4a57      	ldr	r2, [pc, #348]	@ (8001d2c <HAL_I2S_MspInit+0x188>)
 8001bd0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001bd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bd6:	4b55      	ldr	r3, [pc, #340]	@ (8001d2c <HAL_I2S_MspInit+0x188>)
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bde:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001be6:	4b51      	ldr	r3, [pc, #324]	@ (8001d2c <HAL_I2S_MspInit+0x188>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bea:	4a50      	ldr	r2, [pc, #320]	@ (8001d2c <HAL_I2S_MspInit+0x188>)
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bf2:	4b4e      	ldr	r3, [pc, #312]	@ (8001d2c <HAL_I2S_MspInit+0x188>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	623b      	str	r3, [r7, #32]
 8001c02:	4b4a      	ldr	r3, [pc, #296]	@ (8001d2c <HAL_I2S_MspInit+0x188>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c06:	4a49      	ldr	r2, [pc, #292]	@ (8001d2c <HAL_I2S_MspInit+0x188>)
 8001c08:	f043 0302 	orr.w	r3, r3, #2
 8001c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c0e:	4b47      	ldr	r3, [pc, #284]	@ (8001d2c <HAL_I2S_MspInit+0x188>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	623b      	str	r3, [r7, #32]
 8001c18:	6a3b      	ldr	r3, [r7, #32]
    /**I2S1 GPIO Configuration
    PA15     ------> I2S1_WS
    PB3     ------> I2S1_CK
    PB5     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c20:	2302      	movs	r3, #2
 8001c22:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c24:	2300      	movs	r3, #0
 8001c26:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c2c:	2305      	movs	r3, #5
 8001c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c30:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c34:	4619      	mov	r1, r3
 8001c36:	483e      	ldr	r0, [pc, #248]	@ (8001d30 <HAL_I2S_MspInit+0x18c>)
 8001c38:	f001 f8aa 	bl	8002d90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001c3c:	2328      	movs	r3, #40	@ 0x28
 8001c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c40:	2302      	movs	r3, #2
 8001c42:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c44:	2300      	movs	r3, #0
 8001c46:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c4c:	2305      	movs	r3, #5
 8001c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c50:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c54:	4619      	mov	r1, r3
 8001c56:	4837      	ldr	r0, [pc, #220]	@ (8001d34 <HAL_I2S_MspInit+0x190>)
 8001c58:	f001 f89a 	bl	8002d90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001c5c:	e112      	b.n	8001e84 <HAL_I2S_MspInit+0x2e0>
  else if(hi2s->Instance==SPI2)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a35      	ldr	r2, [pc, #212]	@ (8001d38 <HAL_I2S_MspInit+0x194>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d16d      	bne.n	8001d44 <HAL_I2S_MspInit+0x1a0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001c68:	2300      	movs	r3, #0
 8001c6a:	61fb      	str	r3, [r7, #28]
 8001c6c:	4b2f      	ldr	r3, [pc, #188]	@ (8001d2c <HAL_I2S_MspInit+0x188>)
 8001c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c70:	4a2e      	ldr	r2, [pc, #184]	@ (8001d2c <HAL_I2S_MspInit+0x188>)
 8001c72:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c76:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c78:	4b2c      	ldr	r3, [pc, #176]	@ (8001d2c <HAL_I2S_MspInit+0x188>)
 8001c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c80:	61fb      	str	r3, [r7, #28]
 8001c82:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c84:	2300      	movs	r3, #0
 8001c86:	61bb      	str	r3, [r7, #24]
 8001c88:	4b28      	ldr	r3, [pc, #160]	@ (8001d2c <HAL_I2S_MspInit+0x188>)
 8001c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8c:	4a27      	ldr	r2, [pc, #156]	@ (8001d2c <HAL_I2S_MspInit+0x188>)
 8001c8e:	f043 0302 	orr.w	r3, r3, #2
 8001c92:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c94:	4b25      	ldr	r3, [pc, #148]	@ (8001d2c <HAL_I2S_MspInit+0x188>)
 8001c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	61bb      	str	r3, [r7, #24]
 8001c9e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001ca0:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8001ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001cb2:	2305      	movs	r3, #5
 8001cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cba:	4619      	mov	r1, r3
 8001cbc:	481d      	ldr	r0, [pc, #116]	@ (8001d34 <HAL_I2S_MspInit+0x190>)
 8001cbe:	f001 f867 	bl	8002d90 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001cc2:	4b1e      	ldr	r3, [pc, #120]	@ (8001d3c <HAL_I2S_MspInit+0x198>)
 8001cc4:	4a1e      	ldr	r2, [pc, #120]	@ (8001d40 <HAL_I2S_MspInit+0x19c>)
 8001cc6:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8001cc8:	4b1c      	ldr	r3, [pc, #112]	@ (8001d3c <HAL_I2S_MspInit+0x198>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cce:	4b1b      	ldr	r3, [pc, #108]	@ (8001d3c <HAL_I2S_MspInit+0x198>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cd4:	4b19      	ldr	r3, [pc, #100]	@ (8001d3c <HAL_I2S_MspInit+0x198>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001cda:	4b18      	ldr	r3, [pc, #96]	@ (8001d3c <HAL_I2S_MspInit+0x198>)
 8001cdc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ce0:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ce2:	4b16      	ldr	r3, [pc, #88]	@ (8001d3c <HAL_I2S_MspInit+0x198>)
 8001ce4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ce8:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001cea:	4b14      	ldr	r3, [pc, #80]	@ (8001d3c <HAL_I2S_MspInit+0x198>)
 8001cec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cf0:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8001cf2:	4b12      	ldr	r3, [pc, #72]	@ (8001d3c <HAL_I2S_MspInit+0x198>)
 8001cf4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cf8:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001cfa:	4b10      	ldr	r3, [pc, #64]	@ (8001d3c <HAL_I2S_MspInit+0x198>)
 8001cfc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d00:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d02:	4b0e      	ldr	r3, [pc, #56]	@ (8001d3c <HAL_I2S_MspInit+0x198>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001d08:	480c      	ldr	r0, [pc, #48]	@ (8001d3c <HAL_I2S_MspInit+0x198>)
 8001d0a:	f000 fcd1 	bl	80026b0 <HAL_DMA_Init>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <HAL_I2S_MspInit+0x174>
      Error_Handler();
 8001d14:	f7ff fe33 	bl	800197e <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a08      	ldr	r2, [pc, #32]	@ (8001d3c <HAL_I2S_MspInit+0x198>)
 8001d1c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001d1e:	4a07      	ldr	r2, [pc, #28]	@ (8001d3c <HAL_I2S_MspInit+0x198>)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001d24:	e0ae      	b.n	8001e84 <HAL_I2S_MspInit+0x2e0>
 8001d26:	bf00      	nop
 8001d28:	40013000 	.word	0x40013000
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40020000 	.word	0x40020000
 8001d34:	40020400 	.word	0x40020400
 8001d38:	40003800 	.word	0x40003800
 8001d3c:	20000624 	.word	0x20000624
 8001d40:	40026058 	.word	0x40026058
  else if(hi2s->Instance==SPI3)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a50      	ldr	r2, [pc, #320]	@ (8001e8c <HAL_I2S_MspInit+0x2e8>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	f040 809a 	bne.w	8001e84 <HAL_I2S_MspInit+0x2e0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]
 8001d54:	4b4e      	ldr	r3, [pc, #312]	@ (8001e90 <HAL_I2S_MspInit+0x2ec>)
 8001d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d58:	4a4d      	ldr	r2, [pc, #308]	@ (8001e90 <HAL_I2S_MspInit+0x2ec>)
 8001d5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d60:	4b4b      	ldr	r3, [pc, #300]	@ (8001e90 <HAL_I2S_MspInit+0x2ec>)
 8001d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d68:	617b      	str	r3, [r7, #20]
 8001d6a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	613b      	str	r3, [r7, #16]
 8001d70:	4b47      	ldr	r3, [pc, #284]	@ (8001e90 <HAL_I2S_MspInit+0x2ec>)
 8001d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d74:	4a46      	ldr	r2, [pc, #280]	@ (8001e90 <HAL_I2S_MspInit+0x2ec>)
 8001d76:	f043 0301 	orr.w	r3, r3, #1
 8001d7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d7c:	4b44      	ldr	r3, [pc, #272]	@ (8001e90 <HAL_I2S_MspInit+0x2ec>)
 8001d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	613b      	str	r3, [r7, #16]
 8001d86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d88:	2300      	movs	r3, #0
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	4b40      	ldr	r3, [pc, #256]	@ (8001e90 <HAL_I2S_MspInit+0x2ec>)
 8001d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d90:	4a3f      	ldr	r2, [pc, #252]	@ (8001e90 <HAL_I2S_MspInit+0x2ec>)
 8001d92:	f043 0302 	orr.w	r3, r3, #2
 8001d96:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d98:	4b3d      	ldr	r3, [pc, #244]	@ (8001e90 <HAL_I2S_MspInit+0x2ec>)
 8001d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001da4:	2300      	movs	r3, #0
 8001da6:	60bb      	str	r3, [r7, #8]
 8001da8:	4b39      	ldr	r3, [pc, #228]	@ (8001e90 <HAL_I2S_MspInit+0x2ec>)
 8001daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dac:	4a38      	ldr	r2, [pc, #224]	@ (8001e90 <HAL_I2S_MspInit+0x2ec>)
 8001dae:	f043 0304 	orr.w	r3, r3, #4
 8001db2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001db4:	4b36      	ldr	r3, [pc, #216]	@ (8001e90 <HAL_I2S_MspInit+0x2ec>)
 8001db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	60bb      	str	r3, [r7, #8]
 8001dbe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001dc0:	2310      	movs	r3, #16
 8001dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001dd0:	2306      	movs	r3, #6
 8001dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001dd8:	4619      	mov	r1, r3
 8001dda:	482e      	ldr	r0, [pc, #184]	@ (8001e94 <HAL_I2S_MspInit+0x2f0>)
 8001ddc:	f000 ffd8 	bl	8002d90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001de0:	2301      	movs	r3, #1
 8001de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de4:	2302      	movs	r3, #2
 8001de6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dec:	2300      	movs	r3, #0
 8001dee:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001df0:	2307      	movs	r3, #7
 8001df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4827      	ldr	r0, [pc, #156]	@ (8001e98 <HAL_I2S_MspInit+0x2f4>)
 8001dfc:	f000 ffc8 	bl	8002d90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e06:	2302      	movs	r3, #2
 8001e08:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e12:	2306      	movs	r3, #6
 8001e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	481f      	ldr	r0, [pc, #124]	@ (8001e9c <HAL_I2S_MspInit+0x2f8>)
 8001e1e:	f000 ffb7 	bl	8002d90 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 8001e22:	4b1f      	ldr	r3, [pc, #124]	@ (8001ea0 <HAL_I2S_MspInit+0x2fc>)
 8001e24:	4a1f      	ldr	r2, [pc, #124]	@ (8001ea4 <HAL_I2S_MspInit+0x300>)
 8001e26:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 8001e28:	4b1d      	ldr	r3, [pc, #116]	@ (8001ea0 <HAL_I2S_MspInit+0x2fc>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e2e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ea0 <HAL_I2S_MspInit+0x2fc>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e34:	4b1a      	ldr	r3, [pc, #104]	@ (8001ea0 <HAL_I2S_MspInit+0x2fc>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e3a:	4b19      	ldr	r3, [pc, #100]	@ (8001ea0 <HAL_I2S_MspInit+0x2fc>)
 8001e3c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e40:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e42:	4b17      	ldr	r3, [pc, #92]	@ (8001ea0 <HAL_I2S_MspInit+0x2fc>)
 8001e44:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001e48:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e4a:	4b15      	ldr	r3, [pc, #84]	@ (8001ea0 <HAL_I2S_MspInit+0x2fc>)
 8001e4c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e50:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 8001e52:	4b13      	ldr	r3, [pc, #76]	@ (8001ea0 <HAL_I2S_MspInit+0x2fc>)
 8001e54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e58:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001e5a:	4b11      	ldr	r3, [pc, #68]	@ (8001ea0 <HAL_I2S_MspInit+0x2fc>)
 8001e5c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e60:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e62:	4b0f      	ldr	r3, [pc, #60]	@ (8001ea0 <HAL_I2S_MspInit+0x2fc>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8001e68:	480d      	ldr	r0, [pc, #52]	@ (8001ea0 <HAL_I2S_MspInit+0x2fc>)
 8001e6a:	f000 fc21 	bl	80026b0 <HAL_DMA_Init>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <HAL_I2S_MspInit+0x2d4>
      Error_Handler();
 8001e74:	f7ff fd83 	bl	800197e <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi3_rx);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a09      	ldr	r2, [pc, #36]	@ (8001ea0 <HAL_I2S_MspInit+0x2fc>)
 8001e7c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001e7e:	4a08      	ldr	r2, [pc, #32]	@ (8001ea0 <HAL_I2S_MspInit+0x2fc>)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001e84:	bf00      	nop
 8001e86:	3740      	adds	r7, #64	@ 0x40
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40003c00 	.word	0x40003c00
 8001e90:	40023800 	.word	0x40023800
 8001e94:	40020000 	.word	0x40020000
 8001e98:	40020400 	.word	0x40020400
 8001e9c:	40020800 	.word	0x40020800
 8001ea0:	20000684 	.word	0x20000684
 8001ea4:	40026010 	.word	0x40026010

08001ea8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b08e      	sub	sp, #56	@ 0x38
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001eb8:	2300      	movs	r3, #0
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	4b34      	ldr	r3, [pc, #208]	@ (8001f90 <HAL_InitTick+0xe8>)
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec0:	4a33      	ldr	r2, [pc, #204]	@ (8001f90 <HAL_InitTick+0xe8>)
 8001ec2:	f043 0301 	orr.w	r3, r3, #1
 8001ec6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ec8:	4b31      	ldr	r3, [pc, #196]	@ (8001f90 <HAL_InitTick+0xe8>)
 8001eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ed4:	f107 0210 	add.w	r2, r7, #16
 8001ed8:	f107 0314 	add.w	r3, r7, #20
 8001edc:	4611      	mov	r1, r2
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f001 fe4e 	bl	8003b80 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001ee4:	6a3b      	ldr	r3, [r7, #32]
 8001ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d103      	bne.n	8001ef6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001eee:	f001 fe33 	bl	8003b58 <HAL_RCC_GetPCLK1Freq>
 8001ef2:	6378      	str	r0, [r7, #52]	@ 0x34
 8001ef4:	e004      	b.n	8001f00 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001ef6:	f001 fe2f 	bl	8003b58 <HAL_RCC_GetPCLK1Freq>
 8001efa:	4603      	mov	r3, r0
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f02:	4a24      	ldr	r2, [pc, #144]	@ (8001f94 <HAL_InitTick+0xec>)
 8001f04:	fba2 2303 	umull	r2, r3, r2, r3
 8001f08:	0c9b      	lsrs	r3, r3, #18
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001f0e:	4b22      	ldr	r3, [pc, #136]	@ (8001f98 <HAL_InitTick+0xf0>)
 8001f10:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f14:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001f16:	4b20      	ldr	r3, [pc, #128]	@ (8001f98 <HAL_InitTick+0xf0>)
 8001f18:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f1c:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001f1e:	4a1e      	ldr	r2, [pc, #120]	@ (8001f98 <HAL_InitTick+0xf0>)
 8001f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f22:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001f24:	4b1c      	ldr	r3, [pc, #112]	@ (8001f98 <HAL_InitTick+0xf0>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f2a:	4b1b      	ldr	r3, [pc, #108]	@ (8001f98 <HAL_InitTick+0xf0>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f30:	4b19      	ldr	r3, [pc, #100]	@ (8001f98 <HAL_InitTick+0xf0>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001f36:	4818      	ldr	r0, [pc, #96]	@ (8001f98 <HAL_InitTick+0xf0>)
 8001f38:	f003 f810 	bl	8004f5c <HAL_TIM_Base_Init>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001f42:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d11b      	bne.n	8001f82 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001f4a:	4813      	ldr	r0, [pc, #76]	@ (8001f98 <HAL_InitTick+0xf0>)
 8001f4c:	f003 f860 	bl	8005010 <HAL_TIM_Base_Start_IT>
 8001f50:	4603      	mov	r3, r0
 8001f52:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001f56:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d111      	bne.n	8001f82 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f5e:	201c      	movs	r0, #28
 8001f60:	f000 fa9c 	bl	800249c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b0f      	cmp	r3, #15
 8001f68:	d808      	bhi.n	8001f7c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	6879      	ldr	r1, [r7, #4]
 8001f6e:	201c      	movs	r0, #28
 8001f70:	f000 fa78 	bl	8002464 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f74:	4a09      	ldr	r2, [pc, #36]	@ (8001f9c <HAL_InitTick+0xf4>)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6013      	str	r3, [r2, #0]
 8001f7a:	e002      	b.n	8001f82 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001f82:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3738      	adds	r7, #56	@ 0x38
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40023800 	.word	0x40023800
 8001f94:	431bde83 	.word	0x431bde83
 8001f98:	200008bc 	.word	0x200008bc
 8001f9c:	20000404 	.word	0x20000404

08001fa0 <check_stack_overflow2>:
/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */



void check_stack_overflow2() {
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
    if (stack2[0] != STACK_PATTERN2) {
 8001fa4:	4b04      	ldr	r3, [pc, #16]	@ (8001fb8 <check_stack_overflow2+0x18>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a04      	ldr	r2, [pc, #16]	@ (8001fbc <check_stack_overflow2+0x1c>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d001      	beq.n	8001fb2 <check_stack_overflow2+0x12>
        // Stack overflow detected
        Error_Handler();
 8001fae:	f7ff fce6 	bl	800197e <Error_Handler>
    }
}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20000000 	.word	0x20000000
 8001fbc:	deaddead 	.word	0xdeaddead

08001fc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fc4:	bf00      	nop
 8001fc6:	e7fd      	b.n	8001fc4 <NMI_Handler+0x4>

08001fc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	check_stack_overflow2();
 8001fcc:	f7ff ffe8 	bl	8001fa0 <check_stack_overflow2>
	//check_stack_overflow();
    __asm volatile (
 8001fd0:	f01e 0f04 	tst.w	lr, #4
 8001fd4:	bf0c      	ite	eq
 8001fd6:	f3ef 8008 	mrseq	r0, MSP
 8001fda:	f3ef 8009 	mrsne	r0, PSP
 8001fde:	f000 b853 	b.w	8002088 <HardFault_HandlerC>
        "MRSNE r0, PSP \n"
        "B HardFault_HandlerC \n"
    );

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fe2:	bf00      	nop
 8001fe4:	e7fd      	b.n	8001fe2 <HardFault_Handler+0x1a>

08001fe6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fea:	bf00      	nop
 8001fec:	e7fd      	b.n	8001fea <MemManage_Handler+0x4>

08001fee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ff2:	bf00      	nop
 8001ff4:	e7fd      	b.n	8001ff2 <BusFault_Handler+0x4>

08001ff6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ffa:	bf00      	nop
 8001ffc:	e7fd      	b.n	8001ffa <UsageFault_Handler+0x4>

08001ffe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ffe:	b480      	push	{r7}
 8002000:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002002:	bf00      	nop
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800201a:	b480      	push	{r7}
 800201c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800202c:	bf00      	nop
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
	...

08002038 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 800203c:	4802      	ldr	r0, [pc, #8]	@ (8002048 <DMA1_Stream0_IRQHandler+0x10>)
 800203e:	f000 fc3d 	bl	80028bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */
  // fault

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	20000684 	.word	0x20000684

0800204c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002050:	4802      	ldr	r0, [pc, #8]	@ (800205c <DMA1_Stream3_IRQHandler+0x10>)
 8002052:	f000 fc33 	bl	80028bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20000624 	.word	0x20000624

08002060 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 8002064:	4802      	ldr	r0, [pc, #8]	@ (8002070 <DMA1_Stream6_IRQHandler+0x10>)
 8002066:	f000 fc29 	bl	80028bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800206a:	bf00      	nop
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	20000498 	.word	0x20000498

08002074 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002078:	4802      	ldr	r0, [pc, #8]	@ (8002084 <TIM2_IRQHandler+0x10>)
 800207a:	f003 f839 	bl	80050f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800207e:	bf00      	nop
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	200008bc 	.word	0x200008bc

08002088 <HardFault_HandlerC>:

/* USER CODE BEGIN 1 */

void HardFault_HandlerC(StackFrame *frame)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
    volatile uint32_t fault_addr = SCB->BFAR;
 8002090:	4b06      	ldr	r3, [pc, #24]	@ (80020ac <HardFault_HandlerC+0x24>)
 8002092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002094:	60fb      	str	r3, [r7, #12]
    volatile uint32_t faulting_pc = frame->pc; // Address of the faulting instruction
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	60bb      	str	r3, [r7, #8]

    // Set breakpoint here to inspect `faulting_pc` and `fault_addr`
    __asm("BKPT #0");
 800209c:	be00      	bkpt	0x0000
}
 800209e:	bf00      	nop
 80020a0:	3714      	adds	r7, #20
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	e000ed00 	.word	0xe000ed00

080020b0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020bc:	2300      	movs	r3, #0
 80020be:	617b      	str	r3, [r7, #20]
 80020c0:	e00a      	b.n	80020d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020c2:	f3af 8000 	nop.w
 80020c6:	4601      	mov	r1, r0
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	1c5a      	adds	r2, r3, #1
 80020cc:	60ba      	str	r2, [r7, #8]
 80020ce:	b2ca      	uxtb	r2, r1
 80020d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	3301      	adds	r3, #1
 80020d6:	617b      	str	r3, [r7, #20]
 80020d8:	697a      	ldr	r2, [r7, #20]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	429a      	cmp	r2, r3
 80020de:	dbf0      	blt.n	80020c2 <_read+0x12>
  }

  return len;
 80020e0:	687b      	ldr	r3, [r7, #4]
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3718      	adds	r7, #24
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b086      	sub	sp, #24
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	60f8      	str	r0, [r7, #12]
 80020f2:	60b9      	str	r1, [r7, #8]
 80020f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020f6:	2300      	movs	r3, #0
 80020f8:	617b      	str	r3, [r7, #20]
 80020fa:	e009      	b.n	8002110 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	1c5a      	adds	r2, r3, #1
 8002100:	60ba      	str	r2, [r7, #8]
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	3301      	adds	r3, #1
 800210e:	617b      	str	r3, [r7, #20]
 8002110:	697a      	ldr	r2, [r7, #20]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	429a      	cmp	r2, r3
 8002116:	dbf1      	blt.n	80020fc <_write+0x12>
  }
  return len;
 8002118:	687b      	ldr	r3, [r7, #4]
}
 800211a:	4618      	mov	r0, r3
 800211c:	3718      	adds	r7, #24
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <_close>:

int _close(int file)
{
 8002122:	b480      	push	{r7}
 8002124:	b083      	sub	sp, #12
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800212a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800212e:	4618      	mov	r0, r3
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800213a:	b480      	push	{r7}
 800213c:	b083      	sub	sp, #12
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
 8002142:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800214a:	605a      	str	r2, [r3, #4]
  return 0;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <_isatty>:

int _isatty(int file)
{
 800215a:	b480      	push	{r7}
 800215c:	b083      	sub	sp, #12
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002162:	2301      	movs	r3, #1
}
 8002164:	4618      	mov	r0, r3
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3714      	adds	r7, #20
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
	...

0800218c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002194:	4a14      	ldr	r2, [pc, #80]	@ (80021e8 <_sbrk+0x5c>)
 8002196:	4b15      	ldr	r3, [pc, #84]	@ (80021ec <_sbrk+0x60>)
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021a0:	4b13      	ldr	r3, [pc, #76]	@ (80021f0 <_sbrk+0x64>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d102      	bne.n	80021ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021a8:	4b11      	ldr	r3, [pc, #68]	@ (80021f0 <_sbrk+0x64>)
 80021aa:	4a12      	ldr	r2, [pc, #72]	@ (80021f4 <_sbrk+0x68>)
 80021ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021ae:	4b10      	ldr	r3, [pc, #64]	@ (80021f0 <_sbrk+0x64>)
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4413      	add	r3, r2
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d207      	bcs.n	80021cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021bc:	f003 fb9c 	bl	80058f8 <__errno>
 80021c0:	4603      	mov	r3, r0
 80021c2:	220c      	movs	r2, #12
 80021c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021c6:	f04f 33ff 	mov.w	r3, #4294967295
 80021ca:	e009      	b.n	80021e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021cc:	4b08      	ldr	r3, [pc, #32]	@ (80021f0 <_sbrk+0x64>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021d2:	4b07      	ldr	r3, [pc, #28]	@ (80021f0 <_sbrk+0x64>)
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4413      	add	r3, r2
 80021da:	4a05      	ldr	r2, [pc, #20]	@ (80021f0 <_sbrk+0x64>)
 80021dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021de:	68fb      	ldr	r3, [r7, #12]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3718      	adds	r7, #24
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	20020000 	.word	0x20020000
 80021ec:	00007d00 	.word	0x00007d00
 80021f0:	20000904 	.word	0x20000904
 80021f4:	20000a58 	.word	0x20000a58

080021f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021fc:	4b06      	ldr	r3, [pc, #24]	@ (8002218 <SystemInit+0x20>)
 80021fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002202:	4a05      	ldr	r2, [pc, #20]	@ (8002218 <SystemInit+0x20>)
 8002204:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002208:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800220c:	bf00      	nop
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	e000ed00 	.word	0xe000ed00

0800221c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800221c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002254 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002220:	f7ff ffea 	bl	80021f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002224:	480c      	ldr	r0, [pc, #48]	@ (8002258 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002226:	490d      	ldr	r1, [pc, #52]	@ (800225c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002228:	4a0d      	ldr	r2, [pc, #52]	@ (8002260 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800222a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800222c:	e002      	b.n	8002234 <LoopCopyDataInit>

0800222e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800222e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002230:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002232:	3304      	adds	r3, #4

08002234 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002234:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002236:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002238:	d3f9      	bcc.n	800222e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800223a:	4a0a      	ldr	r2, [pc, #40]	@ (8002264 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800223c:	4c0a      	ldr	r4, [pc, #40]	@ (8002268 <LoopFillZerobss+0x22>)
  movs r3, #0
 800223e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002240:	e001      	b.n	8002246 <LoopFillZerobss>

08002242 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002242:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002244:	3204      	adds	r2, #4

08002246 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002246:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002248:	d3fb      	bcc.n	8002242 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800224a:	f003 fb5b 	bl	8005904 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800224e:	f7ff f909 	bl	8001464 <main>
  bx  lr    
 8002252:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002254:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002258:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800225c:	20000468 	.word	0x20000468
  ldr r2, =_sidata
 8002260:	0800724c 	.word	0x0800724c
  ldr r2, =_sbss
 8002264:	20000468 	.word	0x20000468
  ldr r4, =_ebss
 8002268:	20000a58 	.word	0x20000a58

0800226c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800226c:	e7fe      	b.n	800226c <ADC_IRQHandler>
	...

08002270 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002274:	4b0e      	ldr	r3, [pc, #56]	@ (80022b0 <HAL_Init+0x40>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a0d      	ldr	r2, [pc, #52]	@ (80022b0 <HAL_Init+0x40>)
 800227a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800227e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002280:	4b0b      	ldr	r3, [pc, #44]	@ (80022b0 <HAL_Init+0x40>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a0a      	ldr	r2, [pc, #40]	@ (80022b0 <HAL_Init+0x40>)
 8002286:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800228a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800228c:	4b08      	ldr	r3, [pc, #32]	@ (80022b0 <HAL_Init+0x40>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a07      	ldr	r2, [pc, #28]	@ (80022b0 <HAL_Init+0x40>)
 8002292:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002296:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002298:	2003      	movs	r0, #3
 800229a:	f000 f8d8 	bl	800244e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800229e:	200f      	movs	r0, #15
 80022a0:	f7ff fe02 	bl	8001ea8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022a4:	f7ff fb72 	bl	800198c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40023c00 	.word	0x40023c00

080022b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022b8:	4b06      	ldr	r3, [pc, #24]	@ (80022d4 <HAL_IncTick+0x20>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	461a      	mov	r2, r3
 80022be:	4b06      	ldr	r3, [pc, #24]	@ (80022d8 <HAL_IncTick+0x24>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4413      	add	r3, r2
 80022c4:	4a04      	ldr	r2, [pc, #16]	@ (80022d8 <HAL_IncTick+0x24>)
 80022c6:	6013      	str	r3, [r2, #0]
}
 80022c8:	bf00      	nop
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	20000408 	.word	0x20000408
 80022d8:	20000908 	.word	0x20000908

080022dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  return uwTick;
 80022e0:	4b03      	ldr	r3, [pc, #12]	@ (80022f0 <HAL_GetTick+0x14>)
 80022e2:	681b      	ldr	r3, [r3, #0]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	20000908 	.word	0x20000908

080022f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002304:	4b0c      	ldr	r3, [pc, #48]	@ (8002338 <__NVIC_SetPriorityGrouping+0x44>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002310:	4013      	ands	r3, r2
 8002312:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800231c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002320:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002324:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002326:	4a04      	ldr	r2, [pc, #16]	@ (8002338 <__NVIC_SetPriorityGrouping+0x44>)
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	60d3      	str	r3, [r2, #12]
}
 800232c:	bf00      	nop
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	e000ed00 	.word	0xe000ed00

0800233c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002340:	4b04      	ldr	r3, [pc, #16]	@ (8002354 <__NVIC_GetPriorityGrouping+0x18>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	0a1b      	lsrs	r3, r3, #8
 8002346:	f003 0307 	and.w	r3, r3, #7
}
 800234a:	4618      	mov	r0, r3
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	e000ed00 	.word	0xe000ed00

08002358 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002366:	2b00      	cmp	r3, #0
 8002368:	db0b      	blt.n	8002382 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800236a:	79fb      	ldrb	r3, [r7, #7]
 800236c:	f003 021f 	and.w	r2, r3, #31
 8002370:	4907      	ldr	r1, [pc, #28]	@ (8002390 <__NVIC_EnableIRQ+0x38>)
 8002372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002376:	095b      	lsrs	r3, r3, #5
 8002378:	2001      	movs	r0, #1
 800237a:	fa00 f202 	lsl.w	r2, r0, r2
 800237e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	e000e100 	.word	0xe000e100

08002394 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	6039      	str	r1, [r7, #0]
 800239e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	db0a      	blt.n	80023be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	490c      	ldr	r1, [pc, #48]	@ (80023e0 <__NVIC_SetPriority+0x4c>)
 80023ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b2:	0112      	lsls	r2, r2, #4
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	440b      	add	r3, r1
 80023b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023bc:	e00a      	b.n	80023d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	b2da      	uxtb	r2, r3
 80023c2:	4908      	ldr	r1, [pc, #32]	@ (80023e4 <__NVIC_SetPriority+0x50>)
 80023c4:	79fb      	ldrb	r3, [r7, #7]
 80023c6:	f003 030f 	and.w	r3, r3, #15
 80023ca:	3b04      	subs	r3, #4
 80023cc:	0112      	lsls	r2, r2, #4
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	440b      	add	r3, r1
 80023d2:	761a      	strb	r2, [r3, #24]
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	e000e100 	.word	0xe000e100
 80023e4:	e000ed00 	.word	0xe000ed00

080023e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b089      	sub	sp, #36	@ 0x24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	f1c3 0307 	rsb	r3, r3, #7
 8002402:	2b04      	cmp	r3, #4
 8002404:	bf28      	it	cs
 8002406:	2304      	movcs	r3, #4
 8002408:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	3304      	adds	r3, #4
 800240e:	2b06      	cmp	r3, #6
 8002410:	d902      	bls.n	8002418 <NVIC_EncodePriority+0x30>
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	3b03      	subs	r3, #3
 8002416:	e000      	b.n	800241a <NVIC_EncodePriority+0x32>
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800241c:	f04f 32ff 	mov.w	r2, #4294967295
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43da      	mvns	r2, r3
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	401a      	ands	r2, r3
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002430:	f04f 31ff 	mov.w	r1, #4294967295
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	fa01 f303 	lsl.w	r3, r1, r3
 800243a:	43d9      	mvns	r1, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002440:	4313      	orrs	r3, r2
         );
}
 8002442:	4618      	mov	r0, r3
 8002444:	3724      	adds	r7, #36	@ 0x24
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr

0800244e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b082      	sub	sp, #8
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7ff ff4c 	bl	80022f4 <__NVIC_SetPriorityGrouping>
}
 800245c:	bf00      	nop
 800245e:	3708      	adds	r7, #8
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	4603      	mov	r3, r0
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
 8002470:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002472:	2300      	movs	r3, #0
 8002474:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002476:	f7ff ff61 	bl	800233c <__NVIC_GetPriorityGrouping>
 800247a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	68b9      	ldr	r1, [r7, #8]
 8002480:	6978      	ldr	r0, [r7, #20]
 8002482:	f7ff ffb1 	bl	80023e8 <NVIC_EncodePriority>
 8002486:	4602      	mov	r2, r0
 8002488:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800248c:	4611      	mov	r1, r2
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff ff80 	bl	8002394 <__NVIC_SetPriority>
}
 8002494:	bf00      	nop
 8002496:	3718      	adds	r7, #24
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff ff54 	bl	8002358 <__NVIC_EnableIRQ>
}
 80024b0:	bf00      	nop
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e014      	b.n	80024f4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	791b      	ldrb	r3, [r3, #4]
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d105      	bne.n	80024e0 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7ff fa7e 	bl	80019dc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2202      	movs	r2, #2
 80024e4:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d101      	bne.n	8002510 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e046      	b.n	800259e <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	795b      	ldrb	r3, [r3, #5]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d101      	bne.n	800251c <HAL_DAC_Start+0x20>
 8002518:	2302      	movs	r3, #2
 800251a:	e040      	b.n	800259e <HAL_DAC_Start+0xa2>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2202      	movs	r2, #2
 8002526:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6819      	ldr	r1, [r3, #0]
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	f003 0310 	and.w	r3, r3, #16
 8002534:	2201      	movs	r2, #1
 8002536:	409a      	lsls	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	430a      	orrs	r2, r1
 800253e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10f      	bne.n	8002566 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8002550:	2b3c      	cmp	r3, #60	@ 0x3c
 8002552:	d11d      	bne.n	8002590 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	685a      	ldr	r2, [r3, #4]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f042 0201 	orr.w	r2, r2, #1
 8002562:	605a      	str	r2, [r3, #4]
 8002564:	e014      	b.n	8002590 <HAL_DAC_Start+0x94>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	f003 0310 	and.w	r3, r3, #16
 8002576:	213c      	movs	r1, #60	@ 0x3c
 8002578:	fa01 f303 	lsl.w	r3, r1, r3
 800257c:	429a      	cmp	r2, r3
 800257e:	d107      	bne.n	8002590 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	685a      	ldr	r2, [r3, #4]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f042 0202 	orr.w	r2, r2, #2
 800258e:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80025aa:	b480      	push	{r7}
 80025ac:	b087      	sub	sp, #28
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	60f8      	str	r0, [r7, #12]
 80025b2:	60b9      	str	r1, [r7, #8]
 80025b4:	607a      	str	r2, [r7, #4]
 80025b6:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80025b8:	2300      	movs	r3, #0
 80025ba:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e015      	b.n	80025f2 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d105      	bne.n	80025de <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4413      	add	r3, r2
 80025d8:	3308      	adds	r3, #8
 80025da:	617b      	str	r3, [r7, #20]
 80025dc:	e004      	b.n	80025e8 <HAL_DAC_SetValue+0x3e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80025de:	697a      	ldr	r2, [r7, #20]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4413      	add	r3, r2
 80025e4:	3314      	adds	r3, #20
 80025e6:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	461a      	mov	r2, r3
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	371c      	adds	r7, #28
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80025fe:	b480      	push	{r7}
 8002600:	b089      	sub	sp, #36	@ 0x24
 8002602:	af00      	add	r7, sp, #0
 8002604:	60f8      	str	r0, [r7, #12]
 8002606:	60b9      	str	r1, [r7, #8]
 8002608:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800260a:	2300      	movs	r3, #0
 800260c:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d002      	beq.n	800261a <HAL_DAC_ConfigChannel+0x1c>
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e042      	b.n	80026a4 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	795b      	ldrb	r3, [r3, #5]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d101      	bne.n	800262a <HAL_DAC_ConfigChannel+0x2c>
 8002626:	2302      	movs	r3, #2
 8002628:	e03c      	b.n	80026a4 <HAL_DAC_ConfigChannel+0xa6>
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2201      	movs	r2, #1
 800262e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2202      	movs	r2, #2
 8002634:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f003 0310 	and.w	r3, r3, #16
 8002644:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 800264c:	43db      	mvns	r3, r3
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4013      	ands	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	4313      	orrs	r3, r2
 800265e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f003 0310 	and.w	r3, r3, #16
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	6819      	ldr	r1, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f003 0310 	and.w	r3, r3, #16
 8002686:	22c0      	movs	r2, #192	@ 0xc0
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	43da      	mvns	r2, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	400a      	ands	r2, r1
 8002694:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2201      	movs	r2, #1
 800269a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80026a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3724      	adds	r7, #36	@ 0x24
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026b8:	2300      	movs	r3, #0
 80026ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80026bc:	f7ff fe0e 	bl	80022dc <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d101      	bne.n	80026cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e099      	b.n	8002800 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2202      	movs	r2, #2
 80026d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0201 	bic.w	r2, r2, #1
 80026ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026ec:	e00f      	b.n	800270e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026ee:	f7ff fdf5 	bl	80022dc <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b05      	cmp	r3, #5
 80026fa:	d908      	bls.n	800270e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2220      	movs	r2, #32
 8002700:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2203      	movs	r2, #3
 8002706:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e078      	b.n	8002800 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1e8      	bne.n	80026ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002724:	697a      	ldr	r2, [r7, #20]
 8002726:	4b38      	ldr	r3, [pc, #224]	@ (8002808 <HAL_DMA_Init+0x158>)
 8002728:	4013      	ands	r3, r2
 800272a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685a      	ldr	r2, [r3, #4]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800273a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002746:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002752:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a1b      	ldr	r3, [r3, #32]
 8002758:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	4313      	orrs	r3, r2
 800275e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002764:	2b04      	cmp	r3, #4
 8002766:	d107      	bne.n	8002778 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002770:	4313      	orrs	r3, r2
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	4313      	orrs	r3, r2
 8002776:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	f023 0307 	bic.w	r3, r3, #7
 800278e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002794:	697a      	ldr	r2, [r7, #20]
 8002796:	4313      	orrs	r3, r2
 8002798:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800279e:	2b04      	cmp	r3, #4
 80027a0:	d117      	bne.n	80027d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00e      	beq.n	80027d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f000 fa6f 	bl	8002c98 <DMA_CheckFifoParam>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d008      	beq.n	80027d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2240      	movs	r2, #64	@ 0x40
 80027c4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80027ce:	2301      	movs	r3, #1
 80027d0:	e016      	b.n	8002800 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 fa26 	bl	8002c2c <DMA_CalcBaseAndBitshift>
 80027e0:	4603      	mov	r3, r0
 80027e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027e8:	223f      	movs	r2, #63	@ 0x3f
 80027ea:	409a      	lsls	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3718      	adds	r7, #24
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	f010803f 	.word	0xf010803f

0800280c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
 8002818:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800281a:	2300      	movs	r3, #0
 800281c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002822:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800282a:	2b01      	cmp	r3, #1
 800282c:	d101      	bne.n	8002832 <HAL_DMA_Start_IT+0x26>
 800282e:	2302      	movs	r3, #2
 8002830:	e040      	b.n	80028b4 <HAL_DMA_Start_IT+0xa8>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b01      	cmp	r3, #1
 8002844:	d12f      	bne.n	80028a6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2202      	movs	r2, #2
 800284a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	68b9      	ldr	r1, [r7, #8]
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f000 f9b8 	bl	8002bd0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002864:	223f      	movs	r2, #63	@ 0x3f
 8002866:	409a      	lsls	r2, r3
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f042 0216 	orr.w	r2, r2, #22
 800287a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002880:	2b00      	cmp	r3, #0
 8002882:	d007      	beq.n	8002894 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f042 0208 	orr.w	r2, r2, #8
 8002892:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 0201 	orr.w	r2, r2, #1
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	e005      	b.n	80028b2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80028ae:	2302      	movs	r3, #2
 80028b0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80028b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3718      	adds	r7, #24
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80028c4:	2300      	movs	r3, #0
 80028c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80028c8:	4b8e      	ldr	r3, [pc, #568]	@ (8002b04 <HAL_DMA_IRQHandler+0x248>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a8e      	ldr	r2, [pc, #568]	@ (8002b08 <HAL_DMA_IRQHandler+0x24c>)
 80028ce:	fba2 2303 	umull	r2, r3, r2, r3
 80028d2:	0a9b      	lsrs	r3, r3, #10
 80028d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028e6:	2208      	movs	r2, #8
 80028e8:	409a      	lsls	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	4013      	ands	r3, r2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d01a      	beq.n	8002928 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0304 	and.w	r3, r3, #4
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d013      	beq.n	8002928 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f022 0204 	bic.w	r2, r2, #4
 800290e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002914:	2208      	movs	r2, #8
 8002916:	409a      	lsls	r2, r3
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002920:	f043 0201 	orr.w	r2, r3, #1
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800292c:	2201      	movs	r2, #1
 800292e:	409a      	lsls	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4013      	ands	r3, r2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d012      	beq.n	800295e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00b      	beq.n	800295e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800294a:	2201      	movs	r2, #1
 800294c:	409a      	lsls	r2, r3
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002956:	f043 0202 	orr.w	r2, r3, #2
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002962:	2204      	movs	r2, #4
 8002964:	409a      	lsls	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	4013      	ands	r3, r2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d012      	beq.n	8002994 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00b      	beq.n	8002994 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002980:	2204      	movs	r2, #4
 8002982:	409a      	lsls	r2, r3
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800298c:	f043 0204 	orr.w	r2, r3, #4
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002998:	2210      	movs	r2, #16
 800299a:	409a      	lsls	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	4013      	ands	r3, r2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d043      	beq.n	8002a2c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0308 	and.w	r3, r3, #8
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d03c      	beq.n	8002a2c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029b6:	2210      	movs	r2, #16
 80029b8:	409a      	lsls	r2, r3
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d018      	beq.n	80029fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d108      	bne.n	80029ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d024      	beq.n	8002a2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	4798      	blx	r3
 80029ea:	e01f      	b.n	8002a2c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d01b      	beq.n	8002a2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	4798      	blx	r3
 80029fc:	e016      	b.n	8002a2c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d107      	bne.n	8002a1c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f022 0208 	bic.w	r2, r2, #8
 8002a1a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d003      	beq.n	8002a2c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a30:	2220      	movs	r2, #32
 8002a32:	409a      	lsls	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	4013      	ands	r3, r2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f000 808f 	beq.w	8002b5c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0310 	and.w	r3, r3, #16
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f000 8087 	beq.w	8002b5c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a52:	2220      	movs	r2, #32
 8002a54:	409a      	lsls	r2, r3
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b05      	cmp	r3, #5
 8002a64:	d136      	bne.n	8002ad4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 0216 	bic.w	r2, r2, #22
 8002a74:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	695a      	ldr	r2, [r3, #20]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a84:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d103      	bne.n	8002a96 <HAL_DMA_IRQHandler+0x1da>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d007      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 0208 	bic.w	r2, r2, #8
 8002aa4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aaa:	223f      	movs	r2, #63	@ 0x3f
 8002aac:	409a      	lsls	r2, r3
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d07e      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	4798      	blx	r3
        }
        return;
 8002ad2:	e079      	b.n	8002bc8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d01d      	beq.n	8002b1e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10d      	bne.n	8002b0c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d031      	beq.n	8002b5c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	4798      	blx	r3
 8002b00:	e02c      	b.n	8002b5c <HAL_DMA_IRQHandler+0x2a0>
 8002b02:	bf00      	nop
 8002b04:	20000400 	.word	0x20000400
 8002b08:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d023      	beq.n	8002b5c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	4798      	blx	r3
 8002b1c:	e01e      	b.n	8002b5c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d10f      	bne.n	8002b4c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f022 0210 	bic.w	r2, r2, #16
 8002b3a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d003      	beq.n	8002b5c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d032      	beq.n	8002bca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d022      	beq.n	8002bb6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2205      	movs	r2, #5
 8002b74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f022 0201 	bic.w	r2, r2, #1
 8002b86:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	60bb      	str	r3, [r7, #8]
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d307      	bcc.n	8002ba4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1f2      	bne.n	8002b88 <HAL_DMA_IRQHandler+0x2cc>
 8002ba2:	e000      	b.n	8002ba6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002ba4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d005      	beq.n	8002bca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	4798      	blx	r3
 8002bc6:	e000      	b.n	8002bca <HAL_DMA_IRQHandler+0x30e>
        return;
 8002bc8:	bf00      	nop
    }
  }
}
 8002bca:	3718      	adds	r7, #24
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
 8002bdc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002bec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	2b40      	cmp	r3, #64	@ 0x40
 8002bfc:	d108      	bne.n	8002c10 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68ba      	ldr	r2, [r7, #8]
 8002c0c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002c0e:	e007      	b.n	8002c20 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68ba      	ldr	r2, [r7, #8]
 8002c16:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	60da      	str	r2, [r3, #12]
}
 8002c20:	bf00      	nop
 8002c22:	3714      	adds	r7, #20
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	3b10      	subs	r3, #16
 8002c3c:	4a14      	ldr	r2, [pc, #80]	@ (8002c90 <DMA_CalcBaseAndBitshift+0x64>)
 8002c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c42:	091b      	lsrs	r3, r3, #4
 8002c44:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c46:	4a13      	ldr	r2, [pc, #76]	@ (8002c94 <DMA_CalcBaseAndBitshift+0x68>)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	461a      	mov	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2b03      	cmp	r3, #3
 8002c58:	d909      	bls.n	8002c6e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002c62:	f023 0303 	bic.w	r3, r3, #3
 8002c66:	1d1a      	adds	r2, r3, #4
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	659a      	str	r2, [r3, #88]	@ 0x58
 8002c6c:	e007      	b.n	8002c7e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002c76:	f023 0303 	bic.w	r3, r3, #3
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3714      	adds	r7, #20
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	aaaaaaab 	.word	0xaaaaaaab
 8002c94:	08006e30 	.word	0x08006e30

08002c98 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ca8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d11f      	bne.n	8002cf2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	2b03      	cmp	r3, #3
 8002cb6:	d856      	bhi.n	8002d66 <DMA_CheckFifoParam+0xce>
 8002cb8:	a201      	add	r2, pc, #4	@ (adr r2, 8002cc0 <DMA_CheckFifoParam+0x28>)
 8002cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cbe:	bf00      	nop
 8002cc0:	08002cd1 	.word	0x08002cd1
 8002cc4:	08002ce3 	.word	0x08002ce3
 8002cc8:	08002cd1 	.word	0x08002cd1
 8002ccc:	08002d67 	.word	0x08002d67
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d046      	beq.n	8002d6a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ce0:	e043      	b.n	8002d6a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002cea:	d140      	bne.n	8002d6e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cf0:	e03d      	b.n	8002d6e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cfa:	d121      	bne.n	8002d40 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	2b03      	cmp	r3, #3
 8002d00:	d837      	bhi.n	8002d72 <DMA_CheckFifoParam+0xda>
 8002d02:	a201      	add	r2, pc, #4	@ (adr r2, 8002d08 <DMA_CheckFifoParam+0x70>)
 8002d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d08:	08002d19 	.word	0x08002d19
 8002d0c:	08002d1f 	.word	0x08002d1f
 8002d10:	08002d19 	.word	0x08002d19
 8002d14:	08002d31 	.word	0x08002d31
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d1c:	e030      	b.n	8002d80 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d22:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d025      	beq.n	8002d76 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d2e:	e022      	b.n	8002d76 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d34:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d38:	d11f      	bne.n	8002d7a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d3e:	e01c      	b.n	8002d7a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d903      	bls.n	8002d4e <DMA_CheckFifoParam+0xb6>
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	2b03      	cmp	r3, #3
 8002d4a:	d003      	beq.n	8002d54 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d4c:	e018      	b.n	8002d80 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	73fb      	strb	r3, [r7, #15]
      break;
 8002d52:	e015      	b.n	8002d80 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d58:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00e      	beq.n	8002d7e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	73fb      	strb	r3, [r7, #15]
      break;
 8002d64:	e00b      	b.n	8002d7e <DMA_CheckFifoParam+0xe6>
      break;
 8002d66:	bf00      	nop
 8002d68:	e00a      	b.n	8002d80 <DMA_CheckFifoParam+0xe8>
      break;
 8002d6a:	bf00      	nop
 8002d6c:	e008      	b.n	8002d80 <DMA_CheckFifoParam+0xe8>
      break;
 8002d6e:	bf00      	nop
 8002d70:	e006      	b.n	8002d80 <DMA_CheckFifoParam+0xe8>
      break;
 8002d72:	bf00      	nop
 8002d74:	e004      	b.n	8002d80 <DMA_CheckFifoParam+0xe8>
      break;
 8002d76:	bf00      	nop
 8002d78:	e002      	b.n	8002d80 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d7a:	bf00      	nop
 8002d7c:	e000      	b.n	8002d80 <DMA_CheckFifoParam+0xe8>
      break;
 8002d7e:	bf00      	nop
    }
  } 
  
  return status; 
 8002d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3714      	adds	r7, #20
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop

08002d90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b089      	sub	sp, #36	@ 0x24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002da2:	2300      	movs	r3, #0
 8002da4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002da6:	2300      	movs	r3, #0
 8002da8:	61fb      	str	r3, [r7, #28]
 8002daa:	e165      	b.n	8003078 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002dac:	2201      	movs	r2, #1
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	f040 8154 	bne.w	8003072 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f003 0303 	and.w	r3, r3, #3
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d005      	beq.n	8002de2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d130      	bne.n	8002e44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	2203      	movs	r2, #3
 8002dee:	fa02 f303 	lsl.w	r3, r2, r3
 8002df2:	43db      	mvns	r3, r3
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	4013      	ands	r3, r2
 8002df8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	68da      	ldr	r2, [r3, #12]
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	fa02 f303 	lsl.w	r3, r2, r3
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e18:	2201      	movs	r2, #1
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	43db      	mvns	r3, r3
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	4013      	ands	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	091b      	lsrs	r3, r3, #4
 8002e2e:	f003 0201 	and.w	r2, r3, #1
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f003 0303 	and.w	r3, r3, #3
 8002e4c:	2b03      	cmp	r3, #3
 8002e4e:	d017      	beq.n	8002e80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	2203      	movs	r2, #3
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	43db      	mvns	r3, r3
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	4013      	ands	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f003 0303 	and.w	r3, r3, #3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d123      	bne.n	8002ed4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	08da      	lsrs	r2, r3, #3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	3208      	adds	r2, #8
 8002e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	f003 0307 	and.w	r3, r3, #7
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	220f      	movs	r2, #15
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	4013      	ands	r3, r2
 8002eae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	691a      	ldr	r2, [r3, #16]
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	f003 0307 	and.w	r3, r3, #7
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	08da      	lsrs	r2, r3, #3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	3208      	adds	r2, #8
 8002ece:	69b9      	ldr	r1, [r7, #24]
 8002ed0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	2203      	movs	r2, #3
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	69ba      	ldr	r2, [r7, #24]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f003 0203 	and.w	r2, r3, #3
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f000 80ae 	beq.w	8003072 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f16:	2300      	movs	r3, #0
 8002f18:	60fb      	str	r3, [r7, #12]
 8002f1a:	4b5d      	ldr	r3, [pc, #372]	@ (8003090 <HAL_GPIO_Init+0x300>)
 8002f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f1e:	4a5c      	ldr	r2, [pc, #368]	@ (8003090 <HAL_GPIO_Init+0x300>)
 8002f20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f24:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f26:	4b5a      	ldr	r3, [pc, #360]	@ (8003090 <HAL_GPIO_Init+0x300>)
 8002f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f2e:	60fb      	str	r3, [r7, #12]
 8002f30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f32:	4a58      	ldr	r2, [pc, #352]	@ (8003094 <HAL_GPIO_Init+0x304>)
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	089b      	lsrs	r3, r3, #2
 8002f38:	3302      	adds	r3, #2
 8002f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	f003 0303 	and.w	r3, r3, #3
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	220f      	movs	r2, #15
 8002f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4e:	43db      	mvns	r3, r3
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	4013      	ands	r3, r2
 8002f54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a4f      	ldr	r2, [pc, #316]	@ (8003098 <HAL_GPIO_Init+0x308>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d025      	beq.n	8002faa <HAL_GPIO_Init+0x21a>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a4e      	ldr	r2, [pc, #312]	@ (800309c <HAL_GPIO_Init+0x30c>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d01f      	beq.n	8002fa6 <HAL_GPIO_Init+0x216>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a4d      	ldr	r2, [pc, #308]	@ (80030a0 <HAL_GPIO_Init+0x310>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d019      	beq.n	8002fa2 <HAL_GPIO_Init+0x212>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a4c      	ldr	r2, [pc, #304]	@ (80030a4 <HAL_GPIO_Init+0x314>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d013      	beq.n	8002f9e <HAL_GPIO_Init+0x20e>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a4b      	ldr	r2, [pc, #300]	@ (80030a8 <HAL_GPIO_Init+0x318>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d00d      	beq.n	8002f9a <HAL_GPIO_Init+0x20a>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a4a      	ldr	r2, [pc, #296]	@ (80030ac <HAL_GPIO_Init+0x31c>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d007      	beq.n	8002f96 <HAL_GPIO_Init+0x206>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a49      	ldr	r2, [pc, #292]	@ (80030b0 <HAL_GPIO_Init+0x320>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d101      	bne.n	8002f92 <HAL_GPIO_Init+0x202>
 8002f8e:	2306      	movs	r3, #6
 8002f90:	e00c      	b.n	8002fac <HAL_GPIO_Init+0x21c>
 8002f92:	2307      	movs	r3, #7
 8002f94:	e00a      	b.n	8002fac <HAL_GPIO_Init+0x21c>
 8002f96:	2305      	movs	r3, #5
 8002f98:	e008      	b.n	8002fac <HAL_GPIO_Init+0x21c>
 8002f9a:	2304      	movs	r3, #4
 8002f9c:	e006      	b.n	8002fac <HAL_GPIO_Init+0x21c>
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e004      	b.n	8002fac <HAL_GPIO_Init+0x21c>
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	e002      	b.n	8002fac <HAL_GPIO_Init+0x21c>
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e000      	b.n	8002fac <HAL_GPIO_Init+0x21c>
 8002faa:	2300      	movs	r3, #0
 8002fac:	69fa      	ldr	r2, [r7, #28]
 8002fae:	f002 0203 	and.w	r2, r2, #3
 8002fb2:	0092      	lsls	r2, r2, #2
 8002fb4:	4093      	lsls	r3, r2
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fbc:	4935      	ldr	r1, [pc, #212]	@ (8003094 <HAL_GPIO_Init+0x304>)
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	089b      	lsrs	r3, r3, #2
 8002fc2:	3302      	adds	r3, #2
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fca:	4b3a      	ldr	r3, [pc, #232]	@ (80030b4 <HAL_GPIO_Init+0x324>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	43db      	mvns	r3, r3
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d003      	beq.n	8002fee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fee:	4a31      	ldr	r2, [pc, #196]	@ (80030b4 <HAL_GPIO_Init+0x324>)
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ff4:	4b2f      	ldr	r3, [pc, #188]	@ (80030b4 <HAL_GPIO_Init+0x324>)
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	43db      	mvns	r3, r3
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	4013      	ands	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d003      	beq.n	8003018 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	4313      	orrs	r3, r2
 8003016:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003018:	4a26      	ldr	r2, [pc, #152]	@ (80030b4 <HAL_GPIO_Init+0x324>)
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800301e:	4b25      	ldr	r3, [pc, #148]	@ (80030b4 <HAL_GPIO_Init+0x324>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	43db      	mvns	r3, r3
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	4013      	ands	r3, r2
 800302c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d003      	beq.n	8003042 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	4313      	orrs	r3, r2
 8003040:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003042:	4a1c      	ldr	r2, [pc, #112]	@ (80030b4 <HAL_GPIO_Init+0x324>)
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003048:	4b1a      	ldr	r3, [pc, #104]	@ (80030b4 <HAL_GPIO_Init+0x324>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	43db      	mvns	r3, r3
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	4013      	ands	r3, r2
 8003056:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d003      	beq.n	800306c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	4313      	orrs	r3, r2
 800306a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800306c:	4a11      	ldr	r2, [pc, #68]	@ (80030b4 <HAL_GPIO_Init+0x324>)
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	3301      	adds	r3, #1
 8003076:	61fb      	str	r3, [r7, #28]
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	2b0f      	cmp	r3, #15
 800307c:	f67f ae96 	bls.w	8002dac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003080:	bf00      	nop
 8003082:	bf00      	nop
 8003084:	3724      	adds	r7, #36	@ 0x24
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	40023800 	.word	0x40023800
 8003094:	40013800 	.word	0x40013800
 8003098:	40020000 	.word	0x40020000
 800309c:	40020400 	.word	0x40020400
 80030a0:	40020800 	.word	0x40020800
 80030a4:	40020c00 	.word	0x40020c00
 80030a8:	40021000 	.word	0x40021000
 80030ac:	40021400 	.word	0x40021400
 80030b0:	40021800 	.word	0x40021800
 80030b4:	40013c00 	.word	0x40013c00

080030b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	460b      	mov	r3, r1
 80030c2:	807b      	strh	r3, [r7, #2]
 80030c4:	4613      	mov	r3, r2
 80030c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030c8:	787b      	ldrb	r3, [r7, #1]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d003      	beq.n	80030d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030ce:	887a      	ldrh	r2, [r7, #2]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030d4:	e003      	b.n	80030de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030d6:	887b      	ldrh	r3, [r7, #2]
 80030d8:	041a      	lsls	r2, r3, #16
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	619a      	str	r2, [r3, #24]
}
 80030de:	bf00      	nop
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
	...

080030ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e12b      	b.n	8003356 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d106      	bne.n	8003118 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f7fe fcdc 	bl	8001ad0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2224      	movs	r2, #36	@ 0x24
 800311c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 0201 	bic.w	r2, r2, #1
 800312e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800313e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800314e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003150:	f000 fd02 	bl	8003b58 <HAL_RCC_GetPCLK1Freq>
 8003154:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	4a81      	ldr	r2, [pc, #516]	@ (8003360 <HAL_I2C_Init+0x274>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d807      	bhi.n	8003170 <HAL_I2C_Init+0x84>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	4a80      	ldr	r2, [pc, #512]	@ (8003364 <HAL_I2C_Init+0x278>)
 8003164:	4293      	cmp	r3, r2
 8003166:	bf94      	ite	ls
 8003168:	2301      	movls	r3, #1
 800316a:	2300      	movhi	r3, #0
 800316c:	b2db      	uxtb	r3, r3
 800316e:	e006      	b.n	800317e <HAL_I2C_Init+0x92>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	4a7d      	ldr	r2, [pc, #500]	@ (8003368 <HAL_I2C_Init+0x27c>)
 8003174:	4293      	cmp	r3, r2
 8003176:	bf94      	ite	ls
 8003178:	2301      	movls	r3, #1
 800317a:	2300      	movhi	r3, #0
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e0e7      	b.n	8003356 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	4a78      	ldr	r2, [pc, #480]	@ (800336c <HAL_I2C_Init+0x280>)
 800318a:	fba2 2303 	umull	r2, r3, r2, r3
 800318e:	0c9b      	lsrs	r3, r3, #18
 8003190:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68ba      	ldr	r2, [r7, #8]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	4a6a      	ldr	r2, [pc, #424]	@ (8003360 <HAL_I2C_Init+0x274>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d802      	bhi.n	80031c0 <HAL_I2C_Init+0xd4>
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	3301      	adds	r3, #1
 80031be:	e009      	b.n	80031d4 <HAL_I2C_Init+0xe8>
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80031c6:	fb02 f303 	mul.w	r3, r2, r3
 80031ca:	4a69      	ldr	r2, [pc, #420]	@ (8003370 <HAL_I2C_Init+0x284>)
 80031cc:	fba2 2303 	umull	r2, r3, r2, r3
 80031d0:	099b      	lsrs	r3, r3, #6
 80031d2:	3301      	adds	r3, #1
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	6812      	ldr	r2, [r2, #0]
 80031d8:	430b      	orrs	r3, r1
 80031da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	69db      	ldr	r3, [r3, #28]
 80031e2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80031e6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	495c      	ldr	r1, [pc, #368]	@ (8003360 <HAL_I2C_Init+0x274>)
 80031f0:	428b      	cmp	r3, r1
 80031f2:	d819      	bhi.n	8003228 <HAL_I2C_Init+0x13c>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	1e59      	subs	r1, r3, #1
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8003202:	1c59      	adds	r1, r3, #1
 8003204:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003208:	400b      	ands	r3, r1
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00a      	beq.n	8003224 <HAL_I2C_Init+0x138>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	1e59      	subs	r1, r3, #1
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	fbb1 f3f3 	udiv	r3, r1, r3
 800321c:	3301      	adds	r3, #1
 800321e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003222:	e051      	b.n	80032c8 <HAL_I2C_Init+0x1dc>
 8003224:	2304      	movs	r3, #4
 8003226:	e04f      	b.n	80032c8 <HAL_I2C_Init+0x1dc>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d111      	bne.n	8003254 <HAL_I2C_Init+0x168>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	1e58      	subs	r0, r3, #1
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6859      	ldr	r1, [r3, #4]
 8003238:	460b      	mov	r3, r1
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	440b      	add	r3, r1
 800323e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003242:	3301      	adds	r3, #1
 8003244:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003248:	2b00      	cmp	r3, #0
 800324a:	bf0c      	ite	eq
 800324c:	2301      	moveq	r3, #1
 800324e:	2300      	movne	r3, #0
 8003250:	b2db      	uxtb	r3, r3
 8003252:	e012      	b.n	800327a <HAL_I2C_Init+0x18e>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	1e58      	subs	r0, r3, #1
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6859      	ldr	r1, [r3, #4]
 800325c:	460b      	mov	r3, r1
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	440b      	add	r3, r1
 8003262:	0099      	lsls	r1, r3, #2
 8003264:	440b      	add	r3, r1
 8003266:	fbb0 f3f3 	udiv	r3, r0, r3
 800326a:	3301      	adds	r3, #1
 800326c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003270:	2b00      	cmp	r3, #0
 8003272:	bf0c      	ite	eq
 8003274:	2301      	moveq	r3, #1
 8003276:	2300      	movne	r3, #0
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <HAL_I2C_Init+0x196>
 800327e:	2301      	movs	r3, #1
 8003280:	e022      	b.n	80032c8 <HAL_I2C_Init+0x1dc>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10e      	bne.n	80032a8 <HAL_I2C_Init+0x1bc>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	1e58      	subs	r0, r3, #1
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6859      	ldr	r1, [r3, #4]
 8003292:	460b      	mov	r3, r1
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	440b      	add	r3, r1
 8003298:	fbb0 f3f3 	udiv	r3, r0, r3
 800329c:	3301      	adds	r3, #1
 800329e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032a6:	e00f      	b.n	80032c8 <HAL_I2C_Init+0x1dc>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	1e58      	subs	r0, r3, #1
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6859      	ldr	r1, [r3, #4]
 80032b0:	460b      	mov	r3, r1
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	440b      	add	r3, r1
 80032b6:	0099      	lsls	r1, r3, #2
 80032b8:	440b      	add	r3, r1
 80032ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80032be:	3301      	adds	r3, #1
 80032c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80032c8:	6879      	ldr	r1, [r7, #4]
 80032ca:	6809      	ldr	r1, [r1, #0]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	69da      	ldr	r2, [r3, #28]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a1b      	ldr	r3, [r3, #32]
 80032e2:	431a      	orrs	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	430a      	orrs	r2, r1
 80032ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80032f6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	6911      	ldr	r1, [r2, #16]
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	68d2      	ldr	r2, [r2, #12]
 8003302:	4311      	orrs	r1, r2
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	6812      	ldr	r2, [r2, #0]
 8003308:	430b      	orrs	r3, r1
 800330a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	695a      	ldr	r2, [r3, #20]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	431a      	orrs	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	430a      	orrs	r2, r1
 8003326:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0201 	orr.w	r2, r2, #1
 8003336:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2220      	movs	r2, #32
 8003342:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	000186a0 	.word	0x000186a0
 8003364:	001e847f 	.word	0x001e847f
 8003368:	003d08ff 	.word	0x003d08ff
 800336c:	431bde83 	.word	0x431bde83
 8003370:	10624dd3 	.word	0x10624dd3

08003374 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b088      	sub	sp, #32
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e0e1      	b.n	800354a <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d109      	bne.n	80033a6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a6d      	ldr	r2, [pc, #436]	@ (8003554 <HAL_I2S_Init+0x1e0>)
 800339e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f7fe fbff 	bl	8001ba4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2202      	movs	r2, #2
 80033aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	69db      	ldr	r3, [r3, #28]
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	6812      	ldr	r2, [r2, #0]
 80033b8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80033bc:	f023 030f 	bic.w	r3, r3, #15
 80033c0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2202      	movs	r2, #2
 80033c8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d06f      	beq.n	80034b2 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d102      	bne.n	80033e0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80033da:	2310      	movs	r3, #16
 80033dc:	617b      	str	r3, [r7, #20]
 80033de:	e001      	b.n	80033e4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80033e0:	2320      	movs	r3, #32
 80033e2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	2b20      	cmp	r3, #32
 80033ea:	d802      	bhi.n	80033f2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a58      	ldr	r2, [pc, #352]	@ (8003558 <HAL_I2S_Init+0x1e4>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d004      	beq.n	8003406 <HAL_I2S_Init+0x92>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a56      	ldr	r2, [pc, #344]	@ (800355c <HAL_I2S_Init+0x1e8>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d104      	bne.n	8003410 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8003406:	2001      	movs	r0, #1
 8003408:	f000 ff16 	bl	8004238 <HAL_RCCEx_GetPeriphCLKFreq>
 800340c:	60f8      	str	r0, [r7, #12]
 800340e:	e003      	b.n	8003418 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8003410:	2002      	movs	r0, #2
 8003412:	f000 ff11 	bl	8004238 <HAL_RCCEx_GetPeriphCLKFreq>
 8003416:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003420:	d125      	bne.n	800346e <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d010      	beq.n	800344c <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	fbb2 f2f3 	udiv	r2, r2, r3
 8003434:	4613      	mov	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4413      	add	r3, r2
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	461a      	mov	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	fbb2 f3f3 	udiv	r3, r2, r3
 8003446:	3305      	adds	r3, #5
 8003448:	613b      	str	r3, [r7, #16]
 800344a:	e01f      	b.n	800348c <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	fbb2 f2f3 	udiv	r2, r2, r3
 8003456:	4613      	mov	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4413      	add	r3, r2
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	461a      	mov	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	695b      	ldr	r3, [r3, #20]
 8003464:	fbb2 f3f3 	udiv	r3, r2, r3
 8003468:	3305      	adds	r3, #5
 800346a:	613b      	str	r3, [r7, #16]
 800346c:	e00e      	b.n	800348c <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	fbb2 f2f3 	udiv	r2, r2, r3
 8003476:	4613      	mov	r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	4413      	add	r3, r2
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	461a      	mov	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	695b      	ldr	r3, [r3, #20]
 8003484:	fbb2 f3f3 	udiv	r3, r2, r3
 8003488:	3305      	adds	r3, #5
 800348a:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	4a34      	ldr	r2, [pc, #208]	@ (8003560 <HAL_I2S_Init+0x1ec>)
 8003490:	fba2 2303 	umull	r2, r3, r2, r3
 8003494:	08db      	lsrs	r3, r3, #3
 8003496:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80034a0:	693a      	ldr	r2, [r7, #16]
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	085b      	lsrs	r3, r3, #1
 80034a8:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	021b      	lsls	r3, r3, #8
 80034ae:	61bb      	str	r3, [r7, #24]
 80034b0:	e003      	b.n	80034ba <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80034b2:	2302      	movs	r3, #2
 80034b4:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80034b6:	2300      	movs	r3, #0
 80034b8:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d902      	bls.n	80034c6 <HAL_I2S_Init+0x152>
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	2bff      	cmp	r3, #255	@ 0xff
 80034c4:	d907      	bls.n	80034d6 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ca:	f043 0210 	orr.w	r2, r3, #16
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e039      	b.n	800354a <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	691a      	ldr	r2, [r3, #16]
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	ea42 0103 	orr.w	r1, r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	69fa      	ldr	r2, [r7, #28]
 80034e6:	430a      	orrs	r2, r1
 80034e8:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	69db      	ldr	r3, [r3, #28]
 80034f0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80034f4:	f023 030f 	bic.w	r3, r3, #15
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	6851      	ldr	r1, [r2, #4]
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	6892      	ldr	r2, [r2, #8]
 8003500:	4311      	orrs	r1, r2
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	68d2      	ldr	r2, [r2, #12]
 8003506:	4311      	orrs	r1, r2
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	6992      	ldr	r2, [r2, #24]
 800350c:	430a      	orrs	r2, r1
 800350e:	431a      	orrs	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003518:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	2b30      	cmp	r3, #48	@ 0x30
 8003520:	d003      	beq.n	800352a <HAL_I2S_Init+0x1b6>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	2bb0      	cmp	r3, #176	@ 0xb0
 8003528:	d107      	bne.n	800353a <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	69da      	ldr	r2, [r3, #28]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003538:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3720      	adds	r7, #32
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	08003861 	.word	0x08003861
 8003558:	40003800 	.word	0x40003800
 800355c:	40003c00 	.word	0x40003c00
 8003560:	cccccccd 	.word	0xcccccccd

08003564 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b086      	sub	sp, #24
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	4613      	mov	r3, r2
 8003570:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d002      	beq.n	800357e <HAL_I2S_Receive_DMA+0x1a>
 8003578:	88fb      	ldrh	r3, [r7, #6]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e09d      	b.n	80036be <HAL_I2S_Receive_DMA+0x15a>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b01      	cmp	r3, #1
 800358c:	d001      	beq.n	8003592 <HAL_I2S_Receive_DMA+0x2e>
  {
    return HAL_BUSY;
 800358e:	2302      	movs	r3, #2
 8003590:	e095      	b.n	80036be <HAL_I2S_Receive_DMA+0x15a>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b01      	cmp	r3, #1
 800359c:	d101      	bne.n	80035a2 <HAL_I2S_Receive_DMA+0x3e>
 800359e:	2302      	movs	r3, #2
 80035a0:	e08d      	b.n	80036be <HAL_I2S_Receive_DMA+0x15a>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2204      	movs	r2, #4
 80035ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pRxBuffPtr = pData;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	68ba      	ldr	r2, [r7, #8]
 80035bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	f003 0307 	and.w	r3, r3, #7
 80035c8:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	2b03      	cmp	r3, #3
 80035ce:	d002      	beq.n	80035d6 <HAL_I2S_Receive_DMA+0x72>
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	2b05      	cmp	r3, #5
 80035d4:	d10a      	bne.n	80035ec <HAL_I2S_Receive_DMA+0x88>
  {
    hi2s->RxXferSize = (Size << 1U);
 80035d6:	88fb      	ldrh	r3, [r7, #6]
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	b29a      	uxth	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = (Size << 1U);
 80035e0:	88fb      	ldrh	r3, [r7, #6]
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	865a      	strh	r2, [r3, #50]	@ 0x32
 80035ea:	e005      	b.n	80035f8 <HAL_I2S_Receive_DMA+0x94>
  }
  else
  {
    hi2s->RxXferSize = Size;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	88fa      	ldrh	r2, [r7, #6]
 80035f0:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = Size;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	88fa      	ldrh	r2, [r7, #6]
 80035f6:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035fc:	4a32      	ldr	r2, [pc, #200]	@ (80036c8 <HAL_I2S_Receive_DMA+0x164>)
 80035fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003604:	4a31      	ldr	r2, [pc, #196]	@ (80036cc <HAL_I2S_Receive_DMA+0x168>)
 8003606:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800360c:	4a30      	ldr	r2, [pc, #192]	@ (80036d0 <HAL_I2S_Receive_DMA+0x16c>)
 800360e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	69db      	ldr	r3, [r3, #28]
 8003616:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800361a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800361e:	d10a      	bne.n	8003636 <HAL_I2S_Receive_DMA+0xd2>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003620:	2300      	movs	r3, #0
 8003622:	613b      	str	r3, [r7, #16]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	613b      	str	r3, [r7, #16]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	613b      	str	r3, [r7, #16]
 8003634:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	330c      	adds	r3, #12
 8003640:	4619      	mov	r1, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003646:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800364c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800364e:	f7ff f8dd 	bl	800280c <HAL_DMA_Start_IT>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00f      	beq.n	8003678 <HAL_I2S_Receive_DMA+0x114>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800365c:	f043 0208 	orr.w	r2, r3, #8
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e022      	b.n	80036be <HAL_I2S_Receive_DMA+0x15a>
  }

  __HAL_UNLOCK(hi2s);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b00      	cmp	r3, #0
 800368c:	d107      	bne.n	800369e <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f042 0201 	orr.w	r2, r2, #1
 800369c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	69db      	ldr	r3, [r3, #28]
 80036a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d107      	bne.n	80036bc <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	69da      	ldr	r2, [r3, #28]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80036ba:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3718      	adds	r7, #24
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	0800373f 	.word	0x0800373f
 80036cc:	080036fd 	.word	0x080036fd
 80036d0:	0800375b 	.word	0x0800375b

080036d4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003708:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	69db      	ldr	r3, [r3, #28]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10e      	bne.n	8003730 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 0201 	bic.w	r2, r2, #1
 8003720:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	865a      	strh	r2, [r3, #50]	@ 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f7fd fd7b 	bl	800122c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003736:	bf00      	nop
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b084      	sub	sp, #16
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800374a:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f7fd fd57 	bl	8001200 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003752:	bf00      	nop
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b084      	sub	sp, #16
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003766:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	685a      	ldr	r2, [r3, #4]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 0203 	bic.w	r2, r2, #3
 8003776:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003790:	f043 0208 	orr.w	r2, r3, #8
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003798:	68f8      	ldr	r0, [r7, #12]
 800379a:	f7ff ffa5 	bl	80036e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800379e:	bf00      	nop
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b082      	sub	sp, #8
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b2:	881a      	ldrh	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037be:	1c9a      	adds	r2, r3, #2
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	3b01      	subs	r3, #1
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10e      	bne.n	80037fa <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	685a      	ldr	r2, [r3, #4]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80037ea:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f7ff ff6d 	bl	80036d4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80037fa:	bf00      	nop
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003802:	b580      	push	{r7, lr}
 8003804:	b082      	sub	sp, #8
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68da      	ldr	r2, [r3, #12]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003814:	b292      	uxth	r2, r2
 8003816:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800381c:	1c9a      	adds	r2, r3, #2
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003826:	b29b      	uxth	r3, r3
 8003828:	3b01      	subs	r3, #1
 800382a:	b29a      	uxth	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003834:	b29b      	uxth	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10e      	bne.n	8003858 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	685a      	ldr	r2, [r3, #4]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003848:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7fd fcea 	bl	800122c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003858:	bf00      	nop
 800385a:	3708      	adds	r7, #8
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b04      	cmp	r3, #4
 800387a:	d13a      	bne.n	80038f2 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b01      	cmp	r3, #1
 8003884:	d109      	bne.n	800389a <I2S_IRQHandler+0x3a>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003890:	2b40      	cmp	r3, #64	@ 0x40
 8003892:	d102      	bne.n	800389a <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f7ff ffb4 	bl	8003802 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038a0:	2b40      	cmp	r3, #64	@ 0x40
 80038a2:	d126      	bne.n	80038f2 <I2S_IRQHandler+0x92>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f003 0320 	and.w	r3, r3, #32
 80038ae:	2b20      	cmp	r3, #32
 80038b0:	d11f      	bne.n	80038f2 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	685a      	ldr	r2, [r3, #4]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80038c0:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80038c2:	2300      	movs	r3, #0
 80038c4:	613b      	str	r3, [r7, #16]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	613b      	str	r3, [r7, #16]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	613b      	str	r3, [r7, #16]
 80038d6:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038e4:	f043 0202 	orr.w	r2, r3, #2
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f7ff fefb 	bl	80036e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b03      	cmp	r3, #3
 80038fc:	d136      	bne.n	800396c <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b02      	cmp	r3, #2
 8003906:	d109      	bne.n	800391c <I2S_IRQHandler+0xbc>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003912:	2b80      	cmp	r3, #128	@ 0x80
 8003914:	d102      	bne.n	800391c <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f7ff ff45 	bl	80037a6 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	f003 0308 	and.w	r3, r3, #8
 8003922:	2b08      	cmp	r3, #8
 8003924:	d122      	bne.n	800396c <I2S_IRQHandler+0x10c>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f003 0320 	and.w	r3, r3, #32
 8003930:	2b20      	cmp	r3, #32
 8003932:	d11b      	bne.n	800396c <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685a      	ldr	r2, [r3, #4]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003942:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003944:	2300      	movs	r3, #0
 8003946:	60fb      	str	r3, [r7, #12]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	60fb      	str	r3, [r7, #12]
 8003950:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800395e:	f043 0204 	orr.w	r2, r3, #4
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7ff febe 	bl	80036e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800396c:	bf00      	nop
 800396e:	3718      	adds	r7, #24
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d101      	bne.n	8003988 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e0cc      	b.n	8003b22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003988:	4b68      	ldr	r3, [pc, #416]	@ (8003b2c <HAL_RCC_ClockConfig+0x1b8>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 030f 	and.w	r3, r3, #15
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	429a      	cmp	r2, r3
 8003994:	d90c      	bls.n	80039b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003996:	4b65      	ldr	r3, [pc, #404]	@ (8003b2c <HAL_RCC_ClockConfig+0x1b8>)
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	b2d2      	uxtb	r2, r2
 800399c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800399e:	4b63      	ldr	r3, [pc, #396]	@ (8003b2c <HAL_RCC_ClockConfig+0x1b8>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 030f 	and.w	r3, r3, #15
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d001      	beq.n	80039b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e0b8      	b.n	8003b22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0302 	and.w	r3, r3, #2
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d020      	beq.n	80039fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0304 	and.w	r3, r3, #4
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d005      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039c8:	4b59      	ldr	r3, [pc, #356]	@ (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	4a58      	ldr	r2, [pc, #352]	@ (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 80039ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80039d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0308 	and.w	r3, r3, #8
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d005      	beq.n	80039ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039e0:	4b53      	ldr	r3, [pc, #332]	@ (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	4a52      	ldr	r2, [pc, #328]	@ (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 80039e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80039ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039ec:	4b50      	ldr	r3, [pc, #320]	@ (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	494d      	ldr	r1, [pc, #308]	@ (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d044      	beq.n	8003a94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d107      	bne.n	8003a22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a12:	4b47      	ldr	r3, [pc, #284]	@ (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d119      	bne.n	8003a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e07f      	b.n	8003b22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d003      	beq.n	8003a32 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a2e:	2b03      	cmp	r3, #3
 8003a30:	d107      	bne.n	8003a42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a32:	4b3f      	ldr	r3, [pc, #252]	@ (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d109      	bne.n	8003a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e06f      	b.n	8003b22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a42:	4b3b      	ldr	r3, [pc, #236]	@ (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e067      	b.n	8003b22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a52:	4b37      	ldr	r3, [pc, #220]	@ (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f023 0203 	bic.w	r2, r3, #3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	4934      	ldr	r1, [pc, #208]	@ (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a64:	f7fe fc3a 	bl	80022dc <HAL_GetTick>
 8003a68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a6a:	e00a      	b.n	8003a82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a6c:	f7fe fc36 	bl	80022dc <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e04f      	b.n	8003b22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a82:	4b2b      	ldr	r3, [pc, #172]	@ (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f003 020c 	and.w	r2, r3, #12
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d1eb      	bne.n	8003a6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a94:	4b25      	ldr	r3, [pc, #148]	@ (8003b2c <HAL_RCC_ClockConfig+0x1b8>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 030f 	and.w	r3, r3, #15
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d20c      	bcs.n	8003abc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aa2:	4b22      	ldr	r3, [pc, #136]	@ (8003b2c <HAL_RCC_ClockConfig+0x1b8>)
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	b2d2      	uxtb	r2, r2
 8003aa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aaa:	4b20      	ldr	r3, [pc, #128]	@ (8003b2c <HAL_RCC_ClockConfig+0x1b8>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 030f 	and.w	r3, r3, #15
 8003ab2:	683a      	ldr	r2, [r7, #0]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d001      	beq.n	8003abc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e032      	b.n	8003b22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0304 	and.w	r3, r3, #4
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d008      	beq.n	8003ada <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ac8:	4b19      	ldr	r3, [pc, #100]	@ (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	4916      	ldr	r1, [pc, #88]	@ (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0308 	and.w	r3, r3, #8
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d009      	beq.n	8003afa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ae6:	4b12      	ldr	r3, [pc, #72]	@ (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	490e      	ldr	r1, [pc, #56]	@ (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003afa:	f000 fde7 	bl	80046cc <HAL_RCC_GetSysClockFreq>
 8003afe:	4602      	mov	r2, r0
 8003b00:	4b0b      	ldr	r3, [pc, #44]	@ (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	091b      	lsrs	r3, r3, #4
 8003b06:	f003 030f 	and.w	r3, r3, #15
 8003b0a:	490a      	ldr	r1, [pc, #40]	@ (8003b34 <HAL_RCC_ClockConfig+0x1c0>)
 8003b0c:	5ccb      	ldrb	r3, [r1, r3]
 8003b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b12:	4a09      	ldr	r2, [pc, #36]	@ (8003b38 <HAL_RCC_ClockConfig+0x1c4>)
 8003b14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003b16:	4b09      	ldr	r3, [pc, #36]	@ (8003b3c <HAL_RCC_ClockConfig+0x1c8>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7fe f9c4 	bl	8001ea8 <HAL_InitTick>

  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	40023c00 	.word	0x40023c00
 8003b30:	40023800 	.word	0x40023800
 8003b34:	08006e18 	.word	0x08006e18
 8003b38:	20000400 	.word	0x20000400
 8003b3c:	20000404 	.word	0x20000404

08003b40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b44:	4b03      	ldr	r3, [pc, #12]	@ (8003b54 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b46:	681b      	ldr	r3, [r3, #0]
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	20000400 	.word	0x20000400

08003b58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b5c:	f7ff fff0 	bl	8003b40 <HAL_RCC_GetHCLKFreq>
 8003b60:	4602      	mov	r2, r0
 8003b62:	4b05      	ldr	r3, [pc, #20]	@ (8003b78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	0a9b      	lsrs	r3, r3, #10
 8003b68:	f003 0307 	and.w	r3, r3, #7
 8003b6c:	4903      	ldr	r1, [pc, #12]	@ (8003b7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b6e:	5ccb      	ldrb	r3, [r1, r3]
 8003b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	40023800 	.word	0x40023800
 8003b7c:	08006e28 	.word	0x08006e28

08003b80 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	220f      	movs	r2, #15
 8003b8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003b90:	4b12      	ldr	r3, [pc, #72]	@ (8003bdc <HAL_RCC_GetClockConfig+0x5c>)
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f003 0203 	and.w	r2, r3, #3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8003bdc <HAL_RCC_GetClockConfig+0x5c>)
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8003bdc <HAL_RCC_GetClockConfig+0x5c>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003bb4:	4b09      	ldr	r3, [pc, #36]	@ (8003bdc <HAL_RCC_GetClockConfig+0x5c>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	08db      	lsrs	r3, r3, #3
 8003bba:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003bc2:	4b07      	ldr	r3, [pc, #28]	@ (8003be0 <HAL_RCC_GetClockConfig+0x60>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 020f 	and.w	r2, r3, #15
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	601a      	str	r2, [r3, #0]
}
 8003bce:	bf00      	nop
 8003bd0:	370c      	adds	r7, #12
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	40023800 	.word	0x40023800
 8003be0:	40023c00 	.word	0x40023c00

08003be4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b08c      	sub	sp, #48	@ 0x30
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bec:	2300      	movs	r3, #0
 8003bee:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003c00:	2300      	movs	r3, #0
 8003c02:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003c04:	2300      	movs	r3, #0
 8003c06:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d010      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003c1c:	4b6f      	ldr	r3, [pc, #444]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c22:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c2a:	496c      	ldr	r1, [pc, #432]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d010      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003c4a:	4b64      	ldr	r3, [pc, #400]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c50:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c58:	4960      	ldr	r1, [pc, #384]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d101      	bne.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0304 	and.w	r3, r3, #4
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d017      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c78:	4b58      	ldr	r3, [pc, #352]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c7e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c86:	4955      	ldr	r1, [pc, #340]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c96:	d101      	bne.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d101      	bne.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0308 	and.w	r3, r3, #8
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d017      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003cb4:	4b49      	ldr	r3, [pc, #292]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003cb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003cba:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cc2:	4946      	ldr	r1, [pc, #280]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cd2:	d101      	bne.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d101      	bne.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0320 	and.w	r3, r3, #32
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f000 808a 	beq.w	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60bb      	str	r3, [r7, #8]
 8003cf6:	4b39      	ldr	r3, [pc, #228]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfa:	4a38      	ldr	r2, [pc, #224]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003cfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d00:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d02:	4b36      	ldr	r3, [pc, #216]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d0a:	60bb      	str	r3, [r7, #8]
 8003d0c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003d0e:	4b34      	ldr	r3, [pc, #208]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a33      	ldr	r2, [pc, #204]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003d14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d18:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d1a:	f7fe fadf 	bl	80022dc <HAL_GetTick>
 8003d1e:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003d20:	e008      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d22:	f7fe fadb 	bl	80022dc <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d901      	bls.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e278      	b.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003d34:	4b2a      	ldr	r3, [pc, #168]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d0f0      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d40:	4b26      	ldr	r3, [pc, #152]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d48:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d4a:	6a3b      	ldr	r3, [r7, #32]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d02f      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d54:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d58:	6a3a      	ldr	r2, [r7, #32]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d028      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d5e:	4b1f      	ldr	r3, [pc, #124]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d66:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d68:	4b1e      	ldr	r3, [pc, #120]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d6e:	4b1d      	ldr	r3, [pc, #116]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003d74:	4a19      	ldr	r2, [pc, #100]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d76:	6a3b      	ldr	r3, [r7, #32]
 8003d78:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d7a:	4b18      	ldr	r3, [pc, #96]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d114      	bne.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003d86:	f7fe faa9 	bl	80022dc <HAL_GetTick>
 8003d8a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d8c:	e00a      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d8e:	f7fe faa5 	bl	80022dc <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d901      	bls.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e240      	b.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003da4:	4b0d      	ldr	r3, [pc, #52]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003da6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003da8:	f003 0302 	and.w	r3, r3, #2
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d0ee      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003db8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003dbc:	d114      	bne.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003dbe:	4b07      	ldr	r3, [pc, #28]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dca:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003dce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dd2:	4902      	ldr	r1, [pc, #8]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	608b      	str	r3, [r1, #8]
 8003dd8:	e00c      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003dda:	bf00      	nop
 8003ddc:	40023800 	.word	0x40023800
 8003de0:	40007000 	.word	0x40007000
 8003de4:	42470e40 	.word	0x42470e40
 8003de8:	4b4a      	ldr	r3, [pc, #296]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	4a49      	ldr	r2, [pc, #292]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003dee:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003df2:	6093      	str	r3, [r2, #8]
 8003df4:	4b47      	ldr	r3, [pc, #284]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003df6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e00:	4944      	ldr	r1, [pc, #272]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0310 	and.w	r3, r3, #16
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d004      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003e18:	4b3f      	ldr	r3, [pc, #252]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003e1a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00a      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003e28:	4b3a      	ldr	r3, [pc, #232]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e2e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e36:	4937      	ldr	r1, [pc, #220]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00a      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e4a:	4b32      	ldr	r3, [pc, #200]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e50:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e58:	492e      	ldr	r1, [pc, #184]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d011      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003e6c:	4b29      	ldr	r3, [pc, #164]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e72:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e7a:	4926      	ldr	r1, [pc, #152]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e8a:	d101      	bne.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00a      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003e9c:	4b1d      	ldr	r3, [pc, #116]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ea2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eaa:	491a      	ldr	r1, [pc, #104]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d011      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003ebe:	4b15      	ldr	r3, [pc, #84]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ec0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ec4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ecc:	4911      	ldr	r1, [pc, #68]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ed8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003edc:	d101      	bne.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d005      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ef0:	f040 80ff 	bne.w	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003ef4:	4b09      	ldr	r3, [pc, #36]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003efa:	f7fe f9ef 	bl	80022dc <HAL_GetTick>
 8003efe:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f00:	e00e      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f02:	f7fe f9eb 	bl	80022dc <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d907      	bls.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e188      	b.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003f14:	40023800 	.word	0x40023800
 8003f18:	424711e0 	.word	0x424711e0
 8003f1c:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f20:	4b7e      	ldr	r3, [pc, #504]	@ (800411c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1ea      	bne.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d003      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d009      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d028      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d124      	bne.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003f54:	4b71      	ldr	r3, [pc, #452]	@ (800411c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f5a:	0c1b      	lsrs	r3, r3, #16
 8003f5c:	f003 0303 	and.w	r3, r3, #3
 8003f60:	3301      	adds	r3, #1
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003f66:	4b6d      	ldr	r3, [pc, #436]	@ (800411c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f6c:	0e1b      	lsrs	r3, r3, #24
 8003f6e:	f003 030f 	and.w	r3, r3, #15
 8003f72:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	019b      	lsls	r3, r3, #6
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	085b      	lsrs	r3, r3, #1
 8003f84:	3b01      	subs	r3, #1
 8003f86:	041b      	lsls	r3, r3, #16
 8003f88:	431a      	orrs	r2, r3
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	061b      	lsls	r3, r3, #24
 8003f8e:	431a      	orrs	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	695b      	ldr	r3, [r3, #20]
 8003f94:	071b      	lsls	r3, r3, #28
 8003f96:	4961      	ldr	r1, [pc, #388]	@ (800411c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0304 	and.w	r3, r3, #4
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d004      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fb2:	d00a      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d035      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fc4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fc8:	d130      	bne.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003fca:	4b54      	ldr	r3, [pc, #336]	@ (800411c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003fcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fd0:	0c1b      	lsrs	r3, r3, #16
 8003fd2:	f003 0303 	and.w	r3, r3, #3
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003fdc:	4b4f      	ldr	r3, [pc, #316]	@ (800411c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003fde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fe2:	0f1b      	lsrs	r3, r3, #28
 8003fe4:	f003 0307 	and.w	r3, r3, #7
 8003fe8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685a      	ldr	r2, [r3, #4]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	019b      	lsls	r3, r3, #6
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	085b      	lsrs	r3, r3, #1
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	041b      	lsls	r3, r3, #16
 8003ffe:	431a      	orrs	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	061b      	lsls	r3, r3, #24
 8004006:	431a      	orrs	r2, r3
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	071b      	lsls	r3, r3, #28
 800400c:	4943      	ldr	r1, [pc, #268]	@ (800411c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800400e:	4313      	orrs	r3, r2
 8004010:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004014:	4b41      	ldr	r3, [pc, #260]	@ (800411c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004016:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800401a:	f023 021f 	bic.w	r2, r3, #31
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004022:	3b01      	subs	r3, #1
 8004024:	493d      	ldr	r1, [pc, #244]	@ (800411c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004026:	4313      	orrs	r3, r2
 8004028:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004034:	2b00      	cmp	r3, #0
 8004036:	d029      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800403c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004040:	d124      	bne.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004042:	4b36      	ldr	r3, [pc, #216]	@ (800411c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004044:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004048:	0c1b      	lsrs	r3, r3, #16
 800404a:	f003 0303 	and.w	r3, r3, #3
 800404e:	3301      	adds	r3, #1
 8004050:	005b      	lsls	r3, r3, #1
 8004052:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004054:	4b31      	ldr	r3, [pc, #196]	@ (800411c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004056:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800405a:	0f1b      	lsrs	r3, r3, #28
 800405c:	f003 0307 	and.w	r3, r3, #7
 8004060:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685a      	ldr	r2, [r3, #4]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	019b      	lsls	r3, r3, #6
 800406c:	431a      	orrs	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	085b      	lsrs	r3, r3, #1
 8004074:	3b01      	subs	r3, #1
 8004076:	041b      	lsls	r3, r3, #16
 8004078:	431a      	orrs	r2, r3
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	061b      	lsls	r3, r3, #24
 800407e:	431a      	orrs	r2, r3
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	071b      	lsls	r3, r3, #28
 8004084:	4925      	ldr	r1, [pc, #148]	@ (800411c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004086:	4313      	orrs	r3, r2
 8004088:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004094:	2b00      	cmp	r3, #0
 8004096:	d016      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685a      	ldr	r2, [r3, #4]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	019b      	lsls	r3, r3, #6
 80040a2:	431a      	orrs	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	085b      	lsrs	r3, r3, #1
 80040aa:	3b01      	subs	r3, #1
 80040ac:	041b      	lsls	r3, r3, #16
 80040ae:	431a      	orrs	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	061b      	lsls	r3, r3, #24
 80040b6:	431a      	orrs	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	695b      	ldr	r3, [r3, #20]
 80040bc:	071b      	lsls	r3, r3, #28
 80040be:	4917      	ldr	r1, [pc, #92]	@ (800411c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80040c6:	4b16      	ldr	r3, [pc, #88]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80040c8:	2201      	movs	r2, #1
 80040ca:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80040cc:	f7fe f906 	bl	80022dc <HAL_GetTick>
 80040d0:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80040d2:	e008      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80040d4:	f7fe f902 	bl	80022dc <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d901      	bls.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e09f      	b.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80040e6:	4b0d      	ldr	r3, [pc, #52]	@ (800411c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d0f0      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 80040f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	f040 8095 	bne.w	8004224 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80040fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004100:	f7fe f8ec 	bl	80022dc <HAL_GetTick>
 8004104:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004106:	e00f      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004108:	f7fe f8e8 	bl	80022dc <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d908      	bls.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e085      	b.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800411a:	bf00      	nop
 800411c:	40023800 	.word	0x40023800
 8004120:	42470068 	.word	0x42470068
 8004124:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004128:	4b41      	ldr	r3, [pc, #260]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004130:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004134:	d0e8      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0304 	and.w	r3, r3, #4
 800413e:	2b00      	cmp	r3, #0
 8004140:	d003      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004146:	2b00      	cmp	r3, #0
 8004148:	d009      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004152:	2b00      	cmp	r3, #0
 8004154:	d02b      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800415a:	2b00      	cmp	r3, #0
 800415c:	d127      	bne.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800415e:	4b34      	ldr	r3, [pc, #208]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004160:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004164:	0c1b      	lsrs	r3, r3, #16
 8004166:	f003 0303 	and.w	r3, r3, #3
 800416a:	3301      	adds	r3, #1
 800416c:	005b      	lsls	r3, r3, #1
 800416e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	699a      	ldr	r2, [r3, #24]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	69db      	ldr	r3, [r3, #28]
 8004178:	019b      	lsls	r3, r3, #6
 800417a:	431a      	orrs	r2, r3
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	085b      	lsrs	r3, r3, #1
 8004180:	3b01      	subs	r3, #1
 8004182:	041b      	lsls	r3, r3, #16
 8004184:	431a      	orrs	r2, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800418a:	061b      	lsls	r3, r3, #24
 800418c:	4928      	ldr	r1, [pc, #160]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800418e:	4313      	orrs	r3, r2
 8004190:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004194:	4b26      	ldr	r3, [pc, #152]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004196:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800419a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041a2:	3b01      	subs	r3, #1
 80041a4:	021b      	lsls	r3, r3, #8
 80041a6:	4922      	ldr	r1, [pc, #136]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d01d      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80041c2:	d118      	bne.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80041c4:	4b1a      	ldr	r3, [pc, #104]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80041c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ca:	0e1b      	lsrs	r3, r3, #24
 80041cc:	f003 030f 	and.w	r3, r3, #15
 80041d0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	699a      	ldr	r2, [r3, #24]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	69db      	ldr	r3, [r3, #28]
 80041da:	019b      	lsls	r3, r3, #6
 80041dc:	431a      	orrs	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	085b      	lsrs	r3, r3, #1
 80041e4:	3b01      	subs	r3, #1
 80041e6:	041b      	lsls	r3, r3, #16
 80041e8:	431a      	orrs	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	061b      	lsls	r3, r3, #24
 80041ee:	4910      	ldr	r1, [pc, #64]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80041f6:	4b0f      	ldr	r3, [pc, #60]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80041f8:	2201      	movs	r2, #1
 80041fa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80041fc:	f7fe f86e 	bl	80022dc <HAL_GetTick>
 8004200:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004202:	e008      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004204:	f7fe f86a 	bl	80022dc <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b02      	cmp	r3, #2
 8004210:	d901      	bls.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e007      	b.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004216:	4b06      	ldr	r3, [pc, #24]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800421e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004222:	d1ef      	bne.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3730      	adds	r7, #48	@ 0x30
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	40023800 	.word	0x40023800
 8004234:	42470070 	.word	0x42470070

08004238 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004238:	b480      	push	{r7}
 800423a:	b089      	sub	sp, #36	@ 0x24
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 8004240:	2300      	movs	r3, #0
 8004242:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004244:	2300      	movs	r3, #0
 8004246:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004248:	2300      	movs	r3, #0
 800424a:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 800424c:	2300      	movs	r3, #0
 800424e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004250:	2300      	movs	r3, #0
 8004252:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004254:	2300      	movs	r3, #0
 8004256:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	3b01      	subs	r3, #1
 800425c:	2b07      	cmp	r3, #7
 800425e:	f200 8224 	bhi.w	80046aa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8004262:	a201      	add	r2, pc, #4	@ (adr r2, 8004268 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8004264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004268:	0800446b 	.word	0x0800446b
 800426c:	08004595 	.word	0x08004595
 8004270:	080046ab 	.word	0x080046ab
 8004274:	08004289 	.word	0x08004289
 8004278:	080046ab 	.word	0x080046ab
 800427c:	080046ab 	.word	0x080046ab
 8004280:	080046ab 	.word	0x080046ab
 8004284:	08004289 	.word	0x08004289
  {
    case RCC_PERIPHCLK_SAI1:
    case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 8004288:	4ba8      	ldr	r3, [pc, #672]	@ (800452c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800428a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800428e:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
 8004296:	613b      	str	r3, [r7, #16]
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800429e:	f000 80d6 	beq.w	800444e <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80042a8:	f200 80dd 	bhi.w	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80042b2:	f000 809f 	beq.w	80043f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80042bc:	f200 80d3 	bhi.w	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042c6:	d05b      	beq.n	8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042ce:	f200 80ca 	bhi.w	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80042d8:	f000 80b6 	beq.w	8004448 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80042e2:	f200 80c0 	bhi.w	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80042ec:	f000 8082 	beq.w	80043f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80042f6:	f200 80b6 	bhi.w	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d004      	beq.n	800430a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004306:	d03b      	beq.n	8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
        default :
        {
          break;
 8004308:	e0ad      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800430a:	4b88      	ldr	r3, [pc, #544]	@ (800452c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d109      	bne.n	800432a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 8004316:	4b85      	ldr	r3, [pc, #532]	@ (800452c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004318:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800431c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004320:	4a83      	ldr	r2, [pc, #524]	@ (8004530 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004322:	fbb2 f3f3 	udiv	r3, r2, r3
 8004326:	61bb      	str	r3, [r7, #24]
 8004328:	e008      	b.n	800433c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 800432a:	4b80      	ldr	r3, [pc, #512]	@ (800452c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800432c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004330:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004334:	4a7f      	ldr	r2, [pc, #508]	@ (8004534 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004336:	fbb2 f3f3 	udiv	r3, r2, r3
 800433a:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 800433c:	4b7b      	ldr	r3, [pc, #492]	@ (800452c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800433e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004342:	0e1b      	lsrs	r3, r3, #24
 8004344:	f003 030f 	and.w	r3, r3, #15
 8004348:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U)) / (tmpreg1);
 800434a:	4b78      	ldr	r3, [pc, #480]	@ (800452c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800434c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004350:	099b      	lsrs	r3, r3, #6
 8004352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004356:	69ba      	ldr	r2, [r7, #24]
 8004358:	fb03 f202 	mul.w	r2, r3, r2
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004362:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8004364:	4b71      	ldr	r3, [pc, #452]	@ (800452c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004366:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800436a:	0a1b      	lsrs	r3, r3, #8
 800436c:	f003 031f 	and.w	r3, r3, #31
 8004370:	3301      	adds	r3, #1
 8004372:	617b      	str	r3, [r7, #20]
          frequency = frequency / (tmpreg1);
 8004374:	69fa      	ldr	r2, [r7, #28]
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	fbb2 f3f3 	udiv	r3, r2, r3
 800437c:	61fb      	str	r3, [r7, #28]
          break;
 800437e:	e073      	b.n	8004468 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004380:	4b6a      	ldr	r3, [pc, #424]	@ (800452c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d109      	bne.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800438c:	4b67      	ldr	r3, [pc, #412]	@ (800452c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800438e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004392:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004396:	4a66      	ldr	r2, [pc, #408]	@ (8004530 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004398:	fbb2 f3f3 	udiv	r3, r2, r3
 800439c:	61bb      	str	r3, [r7, #24]
 800439e:	e008      	b.n	80043b2 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 80043a0:	4b62      	ldr	r3, [pc, #392]	@ (800452c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80043a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80043aa:	4a62      	ldr	r2, [pc, #392]	@ (8004534 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80043ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b0:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 80043b2:	4b5e      	ldr	r3, [pc, #376]	@ (800452c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80043b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043b8:	0e1b      	lsrs	r3, r3, #24
 80043ba:	f003 030f 	and.w	r3, r3, #15
 80043be:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg1);
 80043c0:	4b5a      	ldr	r3, [pc, #360]	@ (800452c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80043c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043c6:	099b      	lsrs	r3, r3, #6
 80043c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	fb03 f202 	mul.w	r2, r3, r2
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d8:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 80043da:	4b54      	ldr	r3, [pc, #336]	@ (800452c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80043dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043e0:	f003 031f 	and.w	r3, r3, #31
 80043e4:	3301      	adds	r3, #1
 80043e6:	617b      	str	r3, [r7, #20]
          frequency = frequency / (tmpreg1);
 80043e8:	69fa      	ldr	r2, [r7, #28]
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f0:	61fb      	str	r3, [r7, #28]
          break;
 80043f2:	e039      	b.n	8004468 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80043f4:	4b4d      	ldr	r3, [pc, #308]	@ (800452c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d108      	bne.n	8004412 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004400:	4b4a      	ldr	r3, [pc, #296]	@ (800452c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004408:	4a49      	ldr	r2, [pc, #292]	@ (8004530 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800440a:	fbb2 f3f3 	udiv	r3, r2, r3
 800440e:	61bb      	str	r3, [r7, #24]
 8004410:	e007      	b.n	8004422 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004412:	4b46      	ldr	r3, [pc, #280]	@ (800452c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800441a:	4a46      	ldr	r2, [pc, #280]	@ (8004534 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800441c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004420:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 8004422:	4b42      	ldr	r3, [pc, #264]	@ (800452c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	0f1b      	lsrs	r3, r3, #28
 8004428:	f003 0307 	and.w	r3, r3, #7
 800442c:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U)) / (tmpreg1);
 800442e:	4b3f      	ldr	r3, [pc, #252]	@ (800452c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	099b      	lsrs	r3, r3, #6
 8004434:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	fb03 f202 	mul.w	r2, r3, r2
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	fbb2 f3f3 	udiv	r3, r2, r3
 8004444:	61fb      	str	r3, [r7, #28]
          break;
 8004446:	e00f      	b.n	8004468 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 8004448:	4b3b      	ldr	r3, [pc, #236]	@ (8004538 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800444a:	61fb      	str	r3, [r7, #28]
          break;
 800444c:	e00c      	b.n	8004468 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800444e:	4b37      	ldr	r3, [pc, #220]	@ (800452c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d102      	bne.n	8004460 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 800445a:	4b35      	ldr	r3, [pc, #212]	@ (8004530 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800445c:	61fb      	str	r3, [r7, #28]
          break;
 800445e:	e003      	b.n	8004468 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 8004460:	4b34      	ldr	r3, [pc, #208]	@ (8004534 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004462:	61fb      	str	r3, [r7, #28]
          break;
 8004464:	e000      	b.n	8004468 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 8004466:	bf00      	nop
        }
      }
      break;
 8004468:	e120      	b.n	80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    }
    case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 800446a:	4b30      	ldr	r3, [pc, #192]	@ (800452c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800446c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004470:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8004474:	60fb      	str	r3, [r7, #12]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 800447c:	d079      	beq.n	8004572 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 8004484:	f200 8082 	bhi.w	800458c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800448e:	d03c      	beq.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004496:	d879      	bhi.n	800458c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d006      	beq.n	80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80044a4:	d172      	bne.n	800458c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80044a6:	4b24      	ldr	r3, [pc, #144]	@ (8004538 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80044a8:	61fb      	str	r3, [r7, #28]
          break;
 80044aa:	e072      	b.n	8004592 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
        case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80044ac:	4b1f      	ldr	r3, [pc, #124]	@ (800452c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044b8:	d109      	bne.n	80044ce <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80044ba:	4b1c      	ldr	r3, [pc, #112]	@ (800452c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80044bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044c4:	4a1b      	ldr	r2, [pc, #108]	@ (8004534 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80044c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ca:	61bb      	str	r3, [r7, #24]
 80044cc:	e008      	b.n	80044e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80044ce:	4b17      	ldr	r3, [pc, #92]	@ (800452c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80044d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044d8:	4a15      	ldr	r2, [pc, #84]	@ (8004530 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80044da:	fbb2 f3f3 	udiv	r3, r2, r3
 80044de:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80044e0:	4b12      	ldr	r3, [pc, #72]	@ (800452c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80044e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044e6:	099b      	lsrs	r3, r3, #6
 80044e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	fb02 f303 	mul.w	r3, r2, r3
 80044f2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80044f4:	4b0d      	ldr	r3, [pc, #52]	@ (800452c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80044f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044fa:	0f1b      	lsrs	r3, r3, #28
 80044fc:	f003 0307 	and.w	r3, r3, #7
 8004500:	68ba      	ldr	r2, [r7, #8]
 8004502:	fbb2 f3f3 	udiv	r3, r2, r3
 8004506:	61fb      	str	r3, [r7, #28]
          break;
 8004508:	e043      	b.n	8004592 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
        case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800450a:	4b08      	ldr	r3, [pc, #32]	@ (800452c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004512:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004516:	d111      	bne.n	800453c <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004518:	4b04      	ldr	r3, [pc, #16]	@ (800452c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004520:	4a04      	ldr	r2, [pc, #16]	@ (8004534 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004522:	fbb2 f3f3 	udiv	r3, r2, r3
 8004526:	61bb      	str	r3, [r7, #24]
 8004528:	e010      	b.n	800454c <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 800452a:	bf00      	nop
 800452c:	40023800 	.word	0x40023800
 8004530:	00f42400 	.word	0x00f42400
 8004534:	018cba80 	.word	0x018cba80
 8004538:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800453c:	4b5f      	ldr	r3, [pc, #380]	@ (80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004544:	4a5e      	ldr	r2, [pc, #376]	@ (80046c0 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8004546:	fbb2 f3f3 	udiv	r3, r2, r3
 800454a:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 800454c:	4b5b      	ldr	r3, [pc, #364]	@ (80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	099b      	lsrs	r3, r3, #6
 8004552:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	fb02 f303 	mul.w	r3, r2, r3
 800455c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 800455e:	4b57      	ldr	r3, [pc, #348]	@ (80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	0f1b      	lsrs	r3, r3, #28
 8004564:	f003 0307 	and.w	r3, r3, #7
 8004568:	68ba      	ldr	r2, [r7, #8]
 800456a:	fbb2 f3f3 	udiv	r3, r2, r3
 800456e:	61fb      	str	r3, [r7, #28]
          break;
 8004570:	e00f      	b.n	8004592 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
        case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004572:	4b52      	ldr	r3, [pc, #328]	@ (80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800457a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800457e:	d102      	bne.n	8004586 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 8004580:	4b50      	ldr	r3, [pc, #320]	@ (80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8004582:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8004584:	e005      	b.n	8004592 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 8004586:	4b4e      	ldr	r3, [pc, #312]	@ (80046c0 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8004588:	61fb      	str	r3, [r7, #28]
          break;
 800458a:	e002      	b.n	8004592 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 800458c:	2300      	movs	r3, #0
 800458e:	61fb      	str	r3, [r7, #28]
          break;
 8004590:	bf00      	nop
        }
      }
      break;
 8004592:	e08b      	b.n	80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    }
    case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8004594:	4b49      	ldr	r3, [pc, #292]	@ (80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004596:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800459a:	f003 53c0 	and.w	r3, r3, #402653184	@ 0x18000000
 800459e:	60fb      	str	r3, [r7, #12]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80045a6:	d06f      	beq.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80045ae:	d878      	bhi.n	80046a2 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80045b6:	d03c      	beq.n	8004632 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80045be:	d870      	bhi.n	80046a2 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d006      	beq.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045cc:	d169      	bne.n	80046a2 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80045ce:	4b3e      	ldr	r3, [pc, #248]	@ (80046c8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>)
 80045d0:	61fb      	str	r3, [r7, #28]
          break;
 80045d2:	e069      	b.n	80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
        case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80045d4:	4b39      	ldr	r3, [pc, #228]	@ (80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045e0:	d109      	bne.n	80045f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80045e2:	4b36      	ldr	r3, [pc, #216]	@ (80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80045e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80045ec:	4a35      	ldr	r2, [pc, #212]	@ (80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 80045ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f2:	61bb      	str	r3, [r7, #24]
 80045f4:	e008      	b.n	8004608 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80045f6:	4b31      	ldr	r3, [pc, #196]	@ (80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80045f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004600:	4a2f      	ldr	r2, [pc, #188]	@ (80046c0 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8004602:	fbb2 f3f3 	udiv	r3, r2, r3
 8004606:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004608:	4b2c      	ldr	r3, [pc, #176]	@ (80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800460a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800460e:	099b      	lsrs	r3, r3, #6
 8004610:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	fb02 f303 	mul.w	r3, r2, r3
 800461a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800461c:	4b27      	ldr	r3, [pc, #156]	@ (80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800461e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004622:	0f1b      	lsrs	r3, r3, #28
 8004624:	f003 0307 	and.w	r3, r3, #7
 8004628:	68ba      	ldr	r2, [r7, #8]
 800462a:	fbb2 f3f3 	udiv	r3, r2, r3
 800462e:	61fb      	str	r3, [r7, #28]
          break;
 8004630:	e03a      	b.n	80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
        case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004632:	4b22      	ldr	r3, [pc, #136]	@ (80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800463a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800463e:	d108      	bne.n	8004652 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004640:	4b1e      	ldr	r3, [pc, #120]	@ (80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004648:	4a1e      	ldr	r2, [pc, #120]	@ (80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 800464a:	fbb2 f3f3 	udiv	r3, r2, r3
 800464e:	61bb      	str	r3, [r7, #24]
 8004650:	e007      	b.n	8004662 <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004652:	4b1a      	ldr	r3, [pc, #104]	@ (80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800465a:	4a19      	ldr	r2, [pc, #100]	@ (80046c0 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 800465c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004660:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8004662:	4b16      	ldr	r3, [pc, #88]	@ (80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	099b      	lsrs	r3, r3, #6
 8004668:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	fb02 f303 	mul.w	r3, r2, r3
 8004672:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8004674:	4b11      	ldr	r3, [pc, #68]	@ (80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	0f1b      	lsrs	r3, r3, #28
 800467a:	f003 0307 	and.w	r3, r3, #7
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	fbb2 f3f3 	udiv	r3, r2, r3
 8004684:	61fb      	str	r3, [r7, #28]
          break;
 8004686:	e00f      	b.n	80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
        case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004688:	4b0c      	ldr	r3, [pc, #48]	@ (80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004690:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004694:	d102      	bne.n	800469c <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 8004696:	4b0b      	ldr	r3, [pc, #44]	@ (80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8004698:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 800469a:	e005      	b.n	80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 800469c:	4b08      	ldr	r3, [pc, #32]	@ (80046c0 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 800469e:	61fb      	str	r3, [r7, #28]
          break;
 80046a0:	e002      	b.n	80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80046a2:	2300      	movs	r3, #0
 80046a4:	61fb      	str	r3, [r7, #28]
          break;
 80046a6:	bf00      	nop
        }
      }
      break;
 80046a8:	e000      	b.n	80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    }
    default:
    {
      break;
 80046aa:	bf00      	nop
    }
  }
  return frequency;
 80046ac:	69fb      	ldr	r3, [r7, #28]
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3724      	adds	r7, #36	@ 0x24
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	40023800 	.word	0x40023800
 80046c0:	00f42400 	.word	0x00f42400
 80046c4:	018cba80 	.word	0x018cba80
 80046c8:	00bb8000 	.word	0x00bb8000

080046cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046d0:	b0a6      	sub	sp, #152	@ 0x98
 80046d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80046d4:	2300      	movs	r3, #0
 80046d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80046da:	2300      	movs	r3, #0
 80046dc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80046e0:	2300      	movs	r3, #0
 80046e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80046e6:	2300      	movs	r3, #0
 80046e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80046ec:	2300      	movs	r3, #0
 80046ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046f2:	4bc8      	ldr	r3, [pc, #800]	@ (8004a14 <HAL_RCC_GetSysClockFreq+0x348>)
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f003 030c 	and.w	r3, r3, #12
 80046fa:	2b0c      	cmp	r3, #12
 80046fc:	f200 817e 	bhi.w	80049fc <HAL_RCC_GetSysClockFreq+0x330>
 8004700:	a201      	add	r2, pc, #4	@ (adr r2, 8004708 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004706:	bf00      	nop
 8004708:	0800473d 	.word	0x0800473d
 800470c:	080049fd 	.word	0x080049fd
 8004710:	080049fd 	.word	0x080049fd
 8004714:	080049fd 	.word	0x080049fd
 8004718:	08004745 	.word	0x08004745
 800471c:	080049fd 	.word	0x080049fd
 8004720:	080049fd 	.word	0x080049fd
 8004724:	080049fd 	.word	0x080049fd
 8004728:	0800474d 	.word	0x0800474d
 800472c:	080049fd 	.word	0x080049fd
 8004730:	080049fd 	.word	0x080049fd
 8004734:	080049fd 	.word	0x080049fd
 8004738:	080048b7 	.word	0x080048b7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800473c:	4bb6      	ldr	r3, [pc, #728]	@ (8004a18 <HAL_RCC_GetSysClockFreq+0x34c>)
 800473e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004742:	e15f      	b.n	8004a04 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004744:	4bb5      	ldr	r3, [pc, #724]	@ (8004a1c <HAL_RCC_GetSysClockFreq+0x350>)
 8004746:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800474a:	e15b      	b.n	8004a04 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800474c:	4bb1      	ldr	r3, [pc, #708]	@ (8004a14 <HAL_RCC_GetSysClockFreq+0x348>)
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004754:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004758:	4bae      	ldr	r3, [pc, #696]	@ (8004a14 <HAL_RCC_GetSysClockFreq+0x348>)
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d031      	beq.n	80047c8 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004764:	4bab      	ldr	r3, [pc, #684]	@ (8004a14 <HAL_RCC_GetSysClockFreq+0x348>)
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	099b      	lsrs	r3, r3, #6
 800476a:	2200      	movs	r2, #0
 800476c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800476e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004770:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004776:	663b      	str	r3, [r7, #96]	@ 0x60
 8004778:	2300      	movs	r3, #0
 800477a:	667b      	str	r3, [r7, #100]	@ 0x64
 800477c:	4ba7      	ldr	r3, [pc, #668]	@ (8004a1c <HAL_RCC_GetSysClockFreq+0x350>)
 800477e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004782:	462a      	mov	r2, r5
 8004784:	fb03 f202 	mul.w	r2, r3, r2
 8004788:	2300      	movs	r3, #0
 800478a:	4621      	mov	r1, r4
 800478c:	fb01 f303 	mul.w	r3, r1, r3
 8004790:	4413      	add	r3, r2
 8004792:	4aa2      	ldr	r2, [pc, #648]	@ (8004a1c <HAL_RCC_GetSysClockFreq+0x350>)
 8004794:	4621      	mov	r1, r4
 8004796:	fba1 1202 	umull	r1, r2, r1, r2
 800479a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800479c:	460a      	mov	r2, r1
 800479e:	67ba      	str	r2, [r7, #120]	@ 0x78
 80047a0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80047a2:	4413      	add	r3, r2
 80047a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80047a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047aa:	2200      	movs	r2, #0
 80047ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 80047ae:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80047b0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80047b4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80047b8:	f7fc f8b0 	bl	800091c <__aeabi_uldivmod>
 80047bc:	4602      	mov	r2, r0
 80047be:	460b      	mov	r3, r1
 80047c0:	4613      	mov	r3, r2
 80047c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80047c6:	e064      	b.n	8004892 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047c8:	4b92      	ldr	r3, [pc, #584]	@ (8004a14 <HAL_RCC_GetSysClockFreq+0x348>)
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	099b      	lsrs	r3, r3, #6
 80047ce:	2200      	movs	r2, #0
 80047d0:	653b      	str	r3, [r7, #80]	@ 0x50
 80047d2:	657a      	str	r2, [r7, #84]	@ 0x54
 80047d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047dc:	2300      	movs	r3, #0
 80047de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047e0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80047e4:	4622      	mov	r2, r4
 80047e6:	462b      	mov	r3, r5
 80047e8:	f04f 0000 	mov.w	r0, #0
 80047ec:	f04f 0100 	mov.w	r1, #0
 80047f0:	0159      	lsls	r1, r3, #5
 80047f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047f6:	0150      	lsls	r0, r2, #5
 80047f8:	4602      	mov	r2, r0
 80047fa:	460b      	mov	r3, r1
 80047fc:	4621      	mov	r1, r4
 80047fe:	1a51      	subs	r1, r2, r1
 8004800:	6139      	str	r1, [r7, #16]
 8004802:	4629      	mov	r1, r5
 8004804:	eb63 0301 	sbc.w	r3, r3, r1
 8004808:	617b      	str	r3, [r7, #20]
 800480a:	f04f 0200 	mov.w	r2, #0
 800480e:	f04f 0300 	mov.w	r3, #0
 8004812:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004816:	4659      	mov	r1, fp
 8004818:	018b      	lsls	r3, r1, #6
 800481a:	4651      	mov	r1, sl
 800481c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004820:	4651      	mov	r1, sl
 8004822:	018a      	lsls	r2, r1, #6
 8004824:	4651      	mov	r1, sl
 8004826:	ebb2 0801 	subs.w	r8, r2, r1
 800482a:	4659      	mov	r1, fp
 800482c:	eb63 0901 	sbc.w	r9, r3, r1
 8004830:	f04f 0200 	mov.w	r2, #0
 8004834:	f04f 0300 	mov.w	r3, #0
 8004838:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800483c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004840:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004844:	4690      	mov	r8, r2
 8004846:	4699      	mov	r9, r3
 8004848:	4623      	mov	r3, r4
 800484a:	eb18 0303 	adds.w	r3, r8, r3
 800484e:	60bb      	str	r3, [r7, #8]
 8004850:	462b      	mov	r3, r5
 8004852:	eb49 0303 	adc.w	r3, r9, r3
 8004856:	60fb      	str	r3, [r7, #12]
 8004858:	f04f 0200 	mov.w	r2, #0
 800485c:	f04f 0300 	mov.w	r3, #0
 8004860:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004864:	4629      	mov	r1, r5
 8004866:	028b      	lsls	r3, r1, #10
 8004868:	4621      	mov	r1, r4
 800486a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800486e:	4621      	mov	r1, r4
 8004870:	028a      	lsls	r2, r1, #10
 8004872:	4610      	mov	r0, r2
 8004874:	4619      	mov	r1, r3
 8004876:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800487a:	2200      	movs	r2, #0
 800487c:	643b      	str	r3, [r7, #64]	@ 0x40
 800487e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004880:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004884:	f7fc f84a 	bl	800091c <__aeabi_uldivmod>
 8004888:	4602      	mov	r2, r0
 800488a:	460b      	mov	r3, r1
 800488c:	4613      	mov	r3, r2
 800488e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004892:	4b60      	ldr	r3, [pc, #384]	@ (8004a14 <HAL_RCC_GetSysClockFreq+0x348>)
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	0c1b      	lsrs	r3, r3, #16
 8004898:	f003 0303 	and.w	r3, r3, #3
 800489c:	3301      	adds	r3, #1
 800489e:	005b      	lsls	r3, r3, #1
 80048a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 80048a4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80048a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80048ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80048b4:	e0a6      	b.n	8004a04 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048b6:	4b57      	ldr	r3, [pc, #348]	@ (8004a14 <HAL_RCC_GetSysClockFreq+0x348>)
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048c2:	4b54      	ldr	r3, [pc, #336]	@ (8004a14 <HAL_RCC_GetSysClockFreq+0x348>)
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d02a      	beq.n	8004924 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048ce:	4b51      	ldr	r3, [pc, #324]	@ (8004a14 <HAL_RCC_GetSysClockFreq+0x348>)
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	099b      	lsrs	r3, r3, #6
 80048d4:	2200      	movs	r2, #0
 80048d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80048d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80048da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80048e0:	2100      	movs	r1, #0
 80048e2:	4b4e      	ldr	r3, [pc, #312]	@ (8004a1c <HAL_RCC_GetSysClockFreq+0x350>)
 80048e4:	fb03 f201 	mul.w	r2, r3, r1
 80048e8:	2300      	movs	r3, #0
 80048ea:	fb00 f303 	mul.w	r3, r0, r3
 80048ee:	4413      	add	r3, r2
 80048f0:	4a4a      	ldr	r2, [pc, #296]	@ (8004a1c <HAL_RCC_GetSysClockFreq+0x350>)
 80048f2:	fba0 1202 	umull	r1, r2, r0, r2
 80048f6:	677a      	str	r2, [r7, #116]	@ 0x74
 80048f8:	460a      	mov	r2, r1
 80048fa:	673a      	str	r2, [r7, #112]	@ 0x70
 80048fc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80048fe:	4413      	add	r3, r2
 8004900:	677b      	str	r3, [r7, #116]	@ 0x74
 8004902:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004906:	2200      	movs	r2, #0
 8004908:	633b      	str	r3, [r7, #48]	@ 0x30
 800490a:	637a      	str	r2, [r7, #52]	@ 0x34
 800490c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004910:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8004914:	f7fc f802 	bl	800091c <__aeabi_uldivmod>
 8004918:	4602      	mov	r2, r0
 800491a:	460b      	mov	r3, r1
 800491c:	4613      	mov	r3, r2
 800491e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004922:	e05b      	b.n	80049dc <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004924:	4b3b      	ldr	r3, [pc, #236]	@ (8004a14 <HAL_RCC_GetSysClockFreq+0x348>)
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	099b      	lsrs	r3, r3, #6
 800492a:	2200      	movs	r2, #0
 800492c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800492e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004936:	623b      	str	r3, [r7, #32]
 8004938:	2300      	movs	r3, #0
 800493a:	627b      	str	r3, [r7, #36]	@ 0x24
 800493c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004940:	4642      	mov	r2, r8
 8004942:	464b      	mov	r3, r9
 8004944:	f04f 0000 	mov.w	r0, #0
 8004948:	f04f 0100 	mov.w	r1, #0
 800494c:	0159      	lsls	r1, r3, #5
 800494e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004952:	0150      	lsls	r0, r2, #5
 8004954:	4602      	mov	r2, r0
 8004956:	460b      	mov	r3, r1
 8004958:	4641      	mov	r1, r8
 800495a:	ebb2 0a01 	subs.w	sl, r2, r1
 800495e:	4649      	mov	r1, r9
 8004960:	eb63 0b01 	sbc.w	fp, r3, r1
 8004964:	f04f 0200 	mov.w	r2, #0
 8004968:	f04f 0300 	mov.w	r3, #0
 800496c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004970:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004974:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004978:	ebb2 040a 	subs.w	r4, r2, sl
 800497c:	eb63 050b 	sbc.w	r5, r3, fp
 8004980:	f04f 0200 	mov.w	r2, #0
 8004984:	f04f 0300 	mov.w	r3, #0
 8004988:	00eb      	lsls	r3, r5, #3
 800498a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800498e:	00e2      	lsls	r2, r4, #3
 8004990:	4614      	mov	r4, r2
 8004992:	461d      	mov	r5, r3
 8004994:	4643      	mov	r3, r8
 8004996:	18e3      	adds	r3, r4, r3
 8004998:	603b      	str	r3, [r7, #0]
 800499a:	464b      	mov	r3, r9
 800499c:	eb45 0303 	adc.w	r3, r5, r3
 80049a0:	607b      	str	r3, [r7, #4]
 80049a2:	f04f 0200 	mov.w	r2, #0
 80049a6:	f04f 0300 	mov.w	r3, #0
 80049aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049ae:	4629      	mov	r1, r5
 80049b0:	028b      	lsls	r3, r1, #10
 80049b2:	4621      	mov	r1, r4
 80049b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049b8:	4621      	mov	r1, r4
 80049ba:	028a      	lsls	r2, r1, #10
 80049bc:	4610      	mov	r0, r2
 80049be:	4619      	mov	r1, r3
 80049c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049c4:	2200      	movs	r2, #0
 80049c6:	61bb      	str	r3, [r7, #24]
 80049c8:	61fa      	str	r2, [r7, #28]
 80049ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049ce:	f7fb ffa5 	bl	800091c <__aeabi_uldivmod>
 80049d2:	4602      	mov	r2, r0
 80049d4:	460b      	mov	r3, r1
 80049d6:	4613      	mov	r3, r2
 80049d8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80049dc:	4b0d      	ldr	r3, [pc, #52]	@ (8004a14 <HAL_RCC_GetSysClockFreq+0x348>)
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	0f1b      	lsrs	r3, r3, #28
 80049e2:	f003 0307 	and.w	r3, r3, #7
 80049e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 80049ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80049ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80049f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80049fa:	e003      	b.n	8004a04 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049fc:	4b06      	ldr	r3, [pc, #24]	@ (8004a18 <HAL_RCC_GetSysClockFreq+0x34c>)
 80049fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004a02:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a04:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3798      	adds	r7, #152	@ 0x98
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a12:	bf00      	nop
 8004a14:	40023800 	.word	0x40023800
 8004a18:	00f42400 	.word	0x00f42400
 8004a1c:	018cba80 	.word	0x018cba80

08004a20 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b086      	sub	sp, #24
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e28d      	b.n	8004f4e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f000 8083 	beq.w	8004b46 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004a40:	4b94      	ldr	r3, [pc, #592]	@ (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f003 030c 	and.w	r3, r3, #12
 8004a48:	2b04      	cmp	r3, #4
 8004a4a:	d019      	beq.n	8004a80 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004a4c:	4b91      	ldr	r3, [pc, #580]	@ (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f003 030c 	and.w	r3, r3, #12
        || \
 8004a54:	2b08      	cmp	r3, #8
 8004a56:	d106      	bne.n	8004a66 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004a58:	4b8e      	ldr	r3, [pc, #568]	@ (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a60:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a64:	d00c      	beq.n	8004a80 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a66:	4b8b      	ldr	r3, [pc, #556]	@ (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004a6e:	2b0c      	cmp	r3, #12
 8004a70:	d112      	bne.n	8004a98 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a72:	4b88      	ldr	r3, [pc, #544]	@ (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a7e:	d10b      	bne.n	8004a98 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a80:	4b84      	ldr	r3, [pc, #528]	@ (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d05b      	beq.n	8004b44 <HAL_RCC_OscConfig+0x124>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d157      	bne.n	8004b44 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e25a      	b.n	8004f4e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004aa0:	d106      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x90>
 8004aa2:	4b7c      	ldr	r3, [pc, #496]	@ (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a7b      	ldr	r2, [pc, #492]	@ (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004aa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004aac:	6013      	str	r3, [r2, #0]
 8004aae:	e01d      	b.n	8004aec <HAL_RCC_OscConfig+0xcc>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ab8:	d10c      	bne.n	8004ad4 <HAL_RCC_OscConfig+0xb4>
 8004aba:	4b76      	ldr	r3, [pc, #472]	@ (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a75      	ldr	r2, [pc, #468]	@ (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004ac0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ac4:	6013      	str	r3, [r2, #0]
 8004ac6:	4b73      	ldr	r3, [pc, #460]	@ (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a72      	ldr	r2, [pc, #456]	@ (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004acc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ad0:	6013      	str	r3, [r2, #0]
 8004ad2:	e00b      	b.n	8004aec <HAL_RCC_OscConfig+0xcc>
 8004ad4:	4b6f      	ldr	r3, [pc, #444]	@ (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a6e      	ldr	r2, [pc, #440]	@ (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004ada:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ade:	6013      	str	r3, [r2, #0]
 8004ae0:	4b6c      	ldr	r3, [pc, #432]	@ (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a6b      	ldr	r2, [pc, #428]	@ (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004ae6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004aea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d013      	beq.n	8004b1c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af4:	f7fd fbf2 	bl	80022dc <HAL_GetTick>
 8004af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004afa:	e008      	b.n	8004b0e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004afc:	f7fd fbee 	bl	80022dc <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	2b64      	cmp	r3, #100	@ 0x64
 8004b08:	d901      	bls.n	8004b0e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e21f      	b.n	8004f4e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b0e:	4b61      	ldr	r3, [pc, #388]	@ (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d0f0      	beq.n	8004afc <HAL_RCC_OscConfig+0xdc>
 8004b1a:	e014      	b.n	8004b46 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b1c:	f7fd fbde 	bl	80022dc <HAL_GetTick>
 8004b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b22:	e008      	b.n	8004b36 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b24:	f7fd fbda 	bl	80022dc <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	2b64      	cmp	r3, #100	@ 0x64
 8004b30:	d901      	bls.n	8004b36 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e20b      	b.n	8004f4e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b36:	4b57      	ldr	r3, [pc, #348]	@ (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1f0      	bne.n	8004b24 <HAL_RCC_OscConfig+0x104>
 8004b42:	e000      	b.n	8004b46 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0302 	and.w	r3, r3, #2
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d06f      	beq.n	8004c32 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004b52:	4b50      	ldr	r3, [pc, #320]	@ (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f003 030c 	and.w	r3, r3, #12
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d017      	beq.n	8004b8e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004b5e:	4b4d      	ldr	r3, [pc, #308]	@ (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f003 030c 	and.w	r3, r3, #12
        || \
 8004b66:	2b08      	cmp	r3, #8
 8004b68:	d105      	bne.n	8004b76 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004b6a:	4b4a      	ldr	r3, [pc, #296]	@ (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00b      	beq.n	8004b8e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b76:	4b47      	ldr	r3, [pc, #284]	@ (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004b7e:	2b0c      	cmp	r3, #12
 8004b80:	d11c      	bne.n	8004bbc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b82:	4b44      	ldr	r3, [pc, #272]	@ (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d116      	bne.n	8004bbc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b8e:	4b41      	ldr	r3, [pc, #260]	@ (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0302 	and.w	r3, r3, #2
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d005      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x186>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d001      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e1d3      	b.n	8004f4e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ba6:	4b3b      	ldr	r3, [pc, #236]	@ (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	4937      	ldr	r1, [pc, #220]	@ (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bba:	e03a      	b.n	8004c32 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d020      	beq.n	8004c06 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bc4:	4b34      	ldr	r3, [pc, #208]	@ (8004c98 <HAL_RCC_OscConfig+0x278>)
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bca:	f7fd fb87 	bl	80022dc <HAL_GetTick>
 8004bce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bd0:	e008      	b.n	8004be4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bd2:	f7fd fb83 	bl	80022dc <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d901      	bls.n	8004be4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e1b4      	b.n	8004f4e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004be4:	4b2b      	ldr	r3, [pc, #172]	@ (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0302 	and.w	r3, r3, #2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d0f0      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bf0:	4b28      	ldr	r3, [pc, #160]	@ (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	00db      	lsls	r3, r3, #3
 8004bfe:	4925      	ldr	r1, [pc, #148]	@ (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004c00:	4313      	orrs	r3, r2
 8004c02:	600b      	str	r3, [r1, #0]
 8004c04:	e015      	b.n	8004c32 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c06:	4b24      	ldr	r3, [pc, #144]	@ (8004c98 <HAL_RCC_OscConfig+0x278>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c0c:	f7fd fb66 	bl	80022dc <HAL_GetTick>
 8004c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c12:	e008      	b.n	8004c26 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c14:	f7fd fb62 	bl	80022dc <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d901      	bls.n	8004c26 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e193      	b.n	8004f4e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c26:	4b1b      	ldr	r3, [pc, #108]	@ (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d1f0      	bne.n	8004c14 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0308 	and.w	r3, r3, #8
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d036      	beq.n	8004cac <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d016      	beq.n	8004c74 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c46:	4b15      	ldr	r3, [pc, #84]	@ (8004c9c <HAL_RCC_OscConfig+0x27c>)
 8004c48:	2201      	movs	r2, #1
 8004c4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c4c:	f7fd fb46 	bl	80022dc <HAL_GetTick>
 8004c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c52:	e008      	b.n	8004c66 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c54:	f7fd fb42 	bl	80022dc <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d901      	bls.n	8004c66 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e173      	b.n	8004f4e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c66:	4b0b      	ldr	r3, [pc, #44]	@ (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004c68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c6a:	f003 0302 	and.w	r3, r3, #2
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d0f0      	beq.n	8004c54 <HAL_RCC_OscConfig+0x234>
 8004c72:	e01b      	b.n	8004cac <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c74:	4b09      	ldr	r3, [pc, #36]	@ (8004c9c <HAL_RCC_OscConfig+0x27c>)
 8004c76:	2200      	movs	r2, #0
 8004c78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c7a:	f7fd fb2f 	bl	80022dc <HAL_GetTick>
 8004c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c80:	e00e      	b.n	8004ca0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c82:	f7fd fb2b 	bl	80022dc <HAL_GetTick>
 8004c86:	4602      	mov	r2, r0
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d907      	bls.n	8004ca0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e15c      	b.n	8004f4e <HAL_RCC_OscConfig+0x52e>
 8004c94:	40023800 	.word	0x40023800
 8004c98:	42470000 	.word	0x42470000
 8004c9c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ca0:	4b8a      	ldr	r3, [pc, #552]	@ (8004ecc <HAL_RCC_OscConfig+0x4ac>)
 8004ca2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ca4:	f003 0302 	and.w	r3, r3, #2
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1ea      	bne.n	8004c82 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0304 	and.w	r3, r3, #4
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	f000 8097 	beq.w	8004de8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cbe:	4b83      	ldr	r3, [pc, #524]	@ (8004ecc <HAL_RCC_OscConfig+0x4ac>)
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d10f      	bne.n	8004cea <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cca:	2300      	movs	r3, #0
 8004ccc:	60bb      	str	r3, [r7, #8]
 8004cce:	4b7f      	ldr	r3, [pc, #508]	@ (8004ecc <HAL_RCC_OscConfig+0x4ac>)
 8004cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd2:	4a7e      	ldr	r2, [pc, #504]	@ (8004ecc <HAL_RCC_OscConfig+0x4ac>)
 8004cd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004cda:	4b7c      	ldr	r3, [pc, #496]	@ (8004ecc <HAL_RCC_OscConfig+0x4ac>)
 8004cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ce2:	60bb      	str	r3, [r7, #8]
 8004ce4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cea:	4b79      	ldr	r3, [pc, #484]	@ (8004ed0 <HAL_RCC_OscConfig+0x4b0>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d118      	bne.n	8004d28 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cf6:	4b76      	ldr	r3, [pc, #472]	@ (8004ed0 <HAL_RCC_OscConfig+0x4b0>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a75      	ldr	r2, [pc, #468]	@ (8004ed0 <HAL_RCC_OscConfig+0x4b0>)
 8004cfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d02:	f7fd faeb 	bl	80022dc <HAL_GetTick>
 8004d06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d08:	e008      	b.n	8004d1c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d0a:	f7fd fae7 	bl	80022dc <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d901      	bls.n	8004d1c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e118      	b.n	8004f4e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d1c:	4b6c      	ldr	r3, [pc, #432]	@ (8004ed0 <HAL_RCC_OscConfig+0x4b0>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d0f0      	beq.n	8004d0a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d106      	bne.n	8004d3e <HAL_RCC_OscConfig+0x31e>
 8004d30:	4b66      	ldr	r3, [pc, #408]	@ (8004ecc <HAL_RCC_OscConfig+0x4ac>)
 8004d32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d34:	4a65      	ldr	r2, [pc, #404]	@ (8004ecc <HAL_RCC_OscConfig+0x4ac>)
 8004d36:	f043 0301 	orr.w	r3, r3, #1
 8004d3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d3c:	e01c      	b.n	8004d78 <HAL_RCC_OscConfig+0x358>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	2b05      	cmp	r3, #5
 8004d44:	d10c      	bne.n	8004d60 <HAL_RCC_OscConfig+0x340>
 8004d46:	4b61      	ldr	r3, [pc, #388]	@ (8004ecc <HAL_RCC_OscConfig+0x4ac>)
 8004d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d4a:	4a60      	ldr	r2, [pc, #384]	@ (8004ecc <HAL_RCC_OscConfig+0x4ac>)
 8004d4c:	f043 0304 	orr.w	r3, r3, #4
 8004d50:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d52:	4b5e      	ldr	r3, [pc, #376]	@ (8004ecc <HAL_RCC_OscConfig+0x4ac>)
 8004d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d56:	4a5d      	ldr	r2, [pc, #372]	@ (8004ecc <HAL_RCC_OscConfig+0x4ac>)
 8004d58:	f043 0301 	orr.w	r3, r3, #1
 8004d5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d5e:	e00b      	b.n	8004d78 <HAL_RCC_OscConfig+0x358>
 8004d60:	4b5a      	ldr	r3, [pc, #360]	@ (8004ecc <HAL_RCC_OscConfig+0x4ac>)
 8004d62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d64:	4a59      	ldr	r2, [pc, #356]	@ (8004ecc <HAL_RCC_OscConfig+0x4ac>)
 8004d66:	f023 0301 	bic.w	r3, r3, #1
 8004d6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d6c:	4b57      	ldr	r3, [pc, #348]	@ (8004ecc <HAL_RCC_OscConfig+0x4ac>)
 8004d6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d70:	4a56      	ldr	r2, [pc, #344]	@ (8004ecc <HAL_RCC_OscConfig+0x4ac>)
 8004d72:	f023 0304 	bic.w	r3, r3, #4
 8004d76:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d015      	beq.n	8004dac <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d80:	f7fd faac 	bl	80022dc <HAL_GetTick>
 8004d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d86:	e00a      	b.n	8004d9e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d88:	f7fd faa8 	bl	80022dc <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d901      	bls.n	8004d9e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e0d7      	b.n	8004f4e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d9e:	4b4b      	ldr	r3, [pc, #300]	@ (8004ecc <HAL_RCC_OscConfig+0x4ac>)
 8004da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004da2:	f003 0302 	and.w	r3, r3, #2
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d0ee      	beq.n	8004d88 <HAL_RCC_OscConfig+0x368>
 8004daa:	e014      	b.n	8004dd6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dac:	f7fd fa96 	bl	80022dc <HAL_GetTick>
 8004db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004db2:	e00a      	b.n	8004dca <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004db4:	f7fd fa92 	bl	80022dc <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d901      	bls.n	8004dca <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e0c1      	b.n	8004f4e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dca:	4b40      	ldr	r3, [pc, #256]	@ (8004ecc <HAL_RCC_OscConfig+0x4ac>)
 8004dcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1ee      	bne.n	8004db4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004dd6:	7dfb      	ldrb	r3, [r7, #23]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d105      	bne.n	8004de8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ddc:	4b3b      	ldr	r3, [pc, #236]	@ (8004ecc <HAL_RCC_OscConfig+0x4ac>)
 8004dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de0:	4a3a      	ldr	r2, [pc, #232]	@ (8004ecc <HAL_RCC_OscConfig+0x4ac>)
 8004de2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004de6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f000 80ad 	beq.w	8004f4c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004df2:	4b36      	ldr	r3, [pc, #216]	@ (8004ecc <HAL_RCC_OscConfig+0x4ac>)
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f003 030c 	and.w	r3, r3, #12
 8004dfa:	2b08      	cmp	r3, #8
 8004dfc:	d060      	beq.n	8004ec0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	699b      	ldr	r3, [r3, #24]
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d145      	bne.n	8004e92 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e06:	4b33      	ldr	r3, [pc, #204]	@ (8004ed4 <HAL_RCC_OscConfig+0x4b4>)
 8004e08:	2200      	movs	r2, #0
 8004e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e0c:	f7fd fa66 	bl	80022dc <HAL_GetTick>
 8004e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e12:	e008      	b.n	8004e26 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e14:	f7fd fa62 	bl	80022dc <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e093      	b.n	8004f4e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e26:	4b29      	ldr	r3, [pc, #164]	@ (8004ecc <HAL_RCC_OscConfig+0x4ac>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1f0      	bne.n	8004e14 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	69da      	ldr	r2, [r3, #28]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e40:	019b      	lsls	r3, r3, #6
 8004e42:	431a      	orrs	r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e48:	085b      	lsrs	r3, r3, #1
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	041b      	lsls	r3, r3, #16
 8004e4e:	431a      	orrs	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e54:	061b      	lsls	r3, r3, #24
 8004e56:	431a      	orrs	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e5c:	071b      	lsls	r3, r3, #28
 8004e5e:	491b      	ldr	r1, [pc, #108]	@ (8004ecc <HAL_RCC_OscConfig+0x4ac>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e64:	4b1b      	ldr	r3, [pc, #108]	@ (8004ed4 <HAL_RCC_OscConfig+0x4b4>)
 8004e66:	2201      	movs	r2, #1
 8004e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e6a:	f7fd fa37 	bl	80022dc <HAL_GetTick>
 8004e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e70:	e008      	b.n	8004e84 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e72:	f7fd fa33 	bl	80022dc <HAL_GetTick>
 8004e76:	4602      	mov	r2, r0
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d901      	bls.n	8004e84 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	e064      	b.n	8004f4e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e84:	4b11      	ldr	r3, [pc, #68]	@ (8004ecc <HAL_RCC_OscConfig+0x4ac>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d0f0      	beq.n	8004e72 <HAL_RCC_OscConfig+0x452>
 8004e90:	e05c      	b.n	8004f4c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e92:	4b10      	ldr	r3, [pc, #64]	@ (8004ed4 <HAL_RCC_OscConfig+0x4b4>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e98:	f7fd fa20 	bl	80022dc <HAL_GetTick>
 8004e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e9e:	e008      	b.n	8004eb2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ea0:	f7fd fa1c 	bl	80022dc <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e04d      	b.n	8004f4e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eb2:	4b06      	ldr	r3, [pc, #24]	@ (8004ecc <HAL_RCC_OscConfig+0x4ac>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1f0      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x480>
 8004ebe:	e045      	b.n	8004f4c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	699b      	ldr	r3, [r3, #24]
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d107      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e040      	b.n	8004f4e <HAL_RCC_OscConfig+0x52e>
 8004ecc:	40023800 	.word	0x40023800
 8004ed0:	40007000 	.word	0x40007000
 8004ed4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ed8:	4b1f      	ldr	r3, [pc, #124]	@ (8004f58 <HAL_RCC_OscConfig+0x538>)
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d030      	beq.n	8004f48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d129      	bne.n	8004f48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d122      	bne.n	8004f48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004f08:	4013      	ands	r3, r2
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d119      	bne.n	8004f48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f1e:	085b      	lsrs	r3, r3, #1
 8004f20:	3b01      	subs	r3, #1
 8004f22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d10f      	bne.n	8004f48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d107      	bne.n	8004f48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f42:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d001      	beq.n	8004f4c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e000      	b.n	8004f4e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3718      	adds	r7, #24
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	40023800 	.word	0x40023800

08004f5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b082      	sub	sp, #8
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d101      	bne.n	8004f6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e041      	b.n	8004ff2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d106      	bne.n	8004f88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 f839 	bl	8004ffa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	3304      	adds	r3, #4
 8004f98:	4619      	mov	r1, r3
 8004f9a:	4610      	mov	r0, r2
 8004f9c:	f000 f9c0 	bl	8005320 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3708      	adds	r7, #8
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004ffa:	b480      	push	{r7}
 8004ffc:	b083      	sub	sp, #12
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005002:	bf00      	nop
 8005004:	370c      	adds	r7, #12
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
	...

08005010 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005010:	b480      	push	{r7}
 8005012:	b085      	sub	sp, #20
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800501e:	b2db      	uxtb	r3, r3
 8005020:	2b01      	cmp	r3, #1
 8005022:	d001      	beq.n	8005028 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e04e      	b.n	80050c6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2202      	movs	r2, #2
 800502c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68da      	ldr	r2, [r3, #12]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f042 0201 	orr.w	r2, r2, #1
 800503e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a23      	ldr	r2, [pc, #140]	@ (80050d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d022      	beq.n	8005090 <HAL_TIM_Base_Start_IT+0x80>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005052:	d01d      	beq.n	8005090 <HAL_TIM_Base_Start_IT+0x80>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a1f      	ldr	r2, [pc, #124]	@ (80050d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d018      	beq.n	8005090 <HAL_TIM_Base_Start_IT+0x80>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a1e      	ldr	r2, [pc, #120]	@ (80050dc <HAL_TIM_Base_Start_IT+0xcc>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d013      	beq.n	8005090 <HAL_TIM_Base_Start_IT+0x80>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a1c      	ldr	r2, [pc, #112]	@ (80050e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d00e      	beq.n	8005090 <HAL_TIM_Base_Start_IT+0x80>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a1b      	ldr	r2, [pc, #108]	@ (80050e4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d009      	beq.n	8005090 <HAL_TIM_Base_Start_IT+0x80>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a19      	ldr	r2, [pc, #100]	@ (80050e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d004      	beq.n	8005090 <HAL_TIM_Base_Start_IT+0x80>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a18      	ldr	r2, [pc, #96]	@ (80050ec <HAL_TIM_Base_Start_IT+0xdc>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d111      	bne.n	80050b4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f003 0307 	and.w	r3, r3, #7
 800509a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2b06      	cmp	r3, #6
 80050a0:	d010      	beq.n	80050c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f042 0201 	orr.w	r2, r2, #1
 80050b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050b2:	e007      	b.n	80050c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f042 0201 	orr.w	r2, r2, #1
 80050c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3714      	adds	r7, #20
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	40010000 	.word	0x40010000
 80050d8:	40000400 	.word	0x40000400
 80050dc:	40000800 	.word	0x40000800
 80050e0:	40000c00 	.word	0x40000c00
 80050e4:	40010400 	.word	0x40010400
 80050e8:	40014000 	.word	0x40014000
 80050ec:	40001800 	.word	0x40001800

080050f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	f003 0302 	and.w	r3, r3, #2
 800510e:	2b00      	cmp	r3, #0
 8005110:	d020      	beq.n	8005154 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f003 0302 	and.w	r3, r3, #2
 8005118:	2b00      	cmp	r3, #0
 800511a:	d01b      	beq.n	8005154 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f06f 0202 	mvn.w	r2, #2
 8005124:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2201      	movs	r2, #1
 800512a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	699b      	ldr	r3, [r3, #24]
 8005132:	f003 0303 	and.w	r3, r3, #3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d003      	beq.n	8005142 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 f8d2 	bl	80052e4 <HAL_TIM_IC_CaptureCallback>
 8005140:	e005      	b.n	800514e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f8c4 	bl	80052d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 f8d5 	bl	80052f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	f003 0304 	and.w	r3, r3, #4
 800515a:	2b00      	cmp	r3, #0
 800515c:	d020      	beq.n	80051a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f003 0304 	and.w	r3, r3, #4
 8005164:	2b00      	cmp	r3, #0
 8005166:	d01b      	beq.n	80051a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f06f 0204 	mvn.w	r2, #4
 8005170:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2202      	movs	r2, #2
 8005176:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005182:	2b00      	cmp	r3, #0
 8005184:	d003      	beq.n	800518e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f8ac 	bl	80052e4 <HAL_TIM_IC_CaptureCallback>
 800518c:	e005      	b.n	800519a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 f89e 	bl	80052d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 f8af 	bl	80052f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	f003 0308 	and.w	r3, r3, #8
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d020      	beq.n	80051ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f003 0308 	and.w	r3, r3, #8
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d01b      	beq.n	80051ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f06f 0208 	mvn.w	r2, #8
 80051bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2204      	movs	r2, #4
 80051c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	69db      	ldr	r3, [r3, #28]
 80051ca:	f003 0303 	and.w	r3, r3, #3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d003      	beq.n	80051da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 f886 	bl	80052e4 <HAL_TIM_IC_CaptureCallback>
 80051d8:	e005      	b.n	80051e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 f878 	bl	80052d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 f889 	bl	80052f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	f003 0310 	and.w	r3, r3, #16
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d020      	beq.n	8005238 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f003 0310 	and.w	r3, r3, #16
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d01b      	beq.n	8005238 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f06f 0210 	mvn.w	r2, #16
 8005208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2208      	movs	r2, #8
 800520e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	69db      	ldr	r3, [r3, #28]
 8005216:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800521a:	2b00      	cmp	r3, #0
 800521c:	d003      	beq.n	8005226 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 f860 	bl	80052e4 <HAL_TIM_IC_CaptureCallback>
 8005224:	e005      	b.n	8005232 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 f852 	bl	80052d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 f863 	bl	80052f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	f003 0301 	and.w	r3, r3, #1
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00c      	beq.n	800525c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f003 0301 	and.w	r3, r3, #1
 8005248:	2b00      	cmp	r3, #0
 800524a:	d007      	beq.n	800525c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f06f 0201 	mvn.w	r2, #1
 8005254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f7fc fb82 	bl	8001960 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00c      	beq.n	8005280 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800526c:	2b00      	cmp	r3, #0
 800526e:	d007      	beq.n	8005280 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 f906 	bl	800548c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00c      	beq.n	80052a4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005290:	2b00      	cmp	r3, #0
 8005292:	d007      	beq.n	80052a4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800529c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 f834 	bl	800530c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	f003 0320 	and.w	r3, r3, #32
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00c      	beq.n	80052c8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f003 0320 	and.w	r3, r3, #32
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d007      	beq.n	80052c8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f06f 0220 	mvn.w	r2, #32
 80052c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f8d8 	bl	8005478 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052c8:	bf00      	nop
 80052ca:	3710      	adds	r7, #16
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052d8:	bf00      	nop
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052ec:	bf00      	nop
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005300:	bf00      	nop
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005314:	bf00      	nop
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a46      	ldr	r2, [pc, #280]	@ (800544c <TIM_Base_SetConfig+0x12c>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d013      	beq.n	8005360 <TIM_Base_SetConfig+0x40>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800533e:	d00f      	beq.n	8005360 <TIM_Base_SetConfig+0x40>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a43      	ldr	r2, [pc, #268]	@ (8005450 <TIM_Base_SetConfig+0x130>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d00b      	beq.n	8005360 <TIM_Base_SetConfig+0x40>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a42      	ldr	r2, [pc, #264]	@ (8005454 <TIM_Base_SetConfig+0x134>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d007      	beq.n	8005360 <TIM_Base_SetConfig+0x40>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a41      	ldr	r2, [pc, #260]	@ (8005458 <TIM_Base_SetConfig+0x138>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d003      	beq.n	8005360 <TIM_Base_SetConfig+0x40>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a40      	ldr	r2, [pc, #256]	@ (800545c <TIM_Base_SetConfig+0x13c>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d108      	bne.n	8005372 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005366:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	4313      	orrs	r3, r2
 8005370:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a35      	ldr	r2, [pc, #212]	@ (800544c <TIM_Base_SetConfig+0x12c>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d02b      	beq.n	80053d2 <TIM_Base_SetConfig+0xb2>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005380:	d027      	beq.n	80053d2 <TIM_Base_SetConfig+0xb2>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a32      	ldr	r2, [pc, #200]	@ (8005450 <TIM_Base_SetConfig+0x130>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d023      	beq.n	80053d2 <TIM_Base_SetConfig+0xb2>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a31      	ldr	r2, [pc, #196]	@ (8005454 <TIM_Base_SetConfig+0x134>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d01f      	beq.n	80053d2 <TIM_Base_SetConfig+0xb2>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a30      	ldr	r2, [pc, #192]	@ (8005458 <TIM_Base_SetConfig+0x138>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d01b      	beq.n	80053d2 <TIM_Base_SetConfig+0xb2>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a2f      	ldr	r2, [pc, #188]	@ (800545c <TIM_Base_SetConfig+0x13c>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d017      	beq.n	80053d2 <TIM_Base_SetConfig+0xb2>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a2e      	ldr	r2, [pc, #184]	@ (8005460 <TIM_Base_SetConfig+0x140>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d013      	beq.n	80053d2 <TIM_Base_SetConfig+0xb2>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a2d      	ldr	r2, [pc, #180]	@ (8005464 <TIM_Base_SetConfig+0x144>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d00f      	beq.n	80053d2 <TIM_Base_SetConfig+0xb2>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a2c      	ldr	r2, [pc, #176]	@ (8005468 <TIM_Base_SetConfig+0x148>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d00b      	beq.n	80053d2 <TIM_Base_SetConfig+0xb2>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a2b      	ldr	r2, [pc, #172]	@ (800546c <TIM_Base_SetConfig+0x14c>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d007      	beq.n	80053d2 <TIM_Base_SetConfig+0xb2>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a2a      	ldr	r2, [pc, #168]	@ (8005470 <TIM_Base_SetConfig+0x150>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d003      	beq.n	80053d2 <TIM_Base_SetConfig+0xb2>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a29      	ldr	r2, [pc, #164]	@ (8005474 <TIM_Base_SetConfig+0x154>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d108      	bne.n	80053e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	689a      	ldr	r2, [r3, #8]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a10      	ldr	r2, [pc, #64]	@ (800544c <TIM_Base_SetConfig+0x12c>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d003      	beq.n	8005418 <TIM_Base_SetConfig+0xf8>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a12      	ldr	r2, [pc, #72]	@ (800545c <TIM_Base_SetConfig+0x13c>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d103      	bne.n	8005420 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	691a      	ldr	r2, [r3, #16]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	f003 0301 	and.w	r3, r3, #1
 800542e:	2b01      	cmp	r3, #1
 8005430:	d105      	bne.n	800543e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	f023 0201 	bic.w	r2, r3, #1
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	611a      	str	r2, [r3, #16]
  }
}
 800543e:	bf00      	nop
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	40010000 	.word	0x40010000
 8005450:	40000400 	.word	0x40000400
 8005454:	40000800 	.word	0x40000800
 8005458:	40000c00 	.word	0x40000c00
 800545c:	40010400 	.word	0x40010400
 8005460:	40014000 	.word	0x40014000
 8005464:	40014400 	.word	0x40014400
 8005468:	40014800 	.word	0x40014800
 800546c:	40001800 	.word	0x40001800
 8005470:	40001c00 	.word	0x40001c00
 8005474:	40002000 	.word	0x40002000

08005478 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005480:	bf00      	nop
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005494:	bf00      	nop
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <malloc>:
 80054a0:	4b02      	ldr	r3, [pc, #8]	@ (80054ac <malloc+0xc>)
 80054a2:	4601      	mov	r1, r0
 80054a4:	6818      	ldr	r0, [r3, #0]
 80054a6:	f000 b825 	b.w	80054f4 <_malloc_r>
 80054aa:	bf00      	nop
 80054ac:	20000418 	.word	0x20000418

080054b0 <sbrk_aligned>:
 80054b0:	b570      	push	{r4, r5, r6, lr}
 80054b2:	4e0f      	ldr	r6, [pc, #60]	@ (80054f0 <sbrk_aligned+0x40>)
 80054b4:	460c      	mov	r4, r1
 80054b6:	6831      	ldr	r1, [r6, #0]
 80054b8:	4605      	mov	r5, r0
 80054ba:	b911      	cbnz	r1, 80054c2 <sbrk_aligned+0x12>
 80054bc:	f000 f9fa 	bl	80058b4 <_sbrk_r>
 80054c0:	6030      	str	r0, [r6, #0]
 80054c2:	4621      	mov	r1, r4
 80054c4:	4628      	mov	r0, r5
 80054c6:	f000 f9f5 	bl	80058b4 <_sbrk_r>
 80054ca:	1c43      	adds	r3, r0, #1
 80054cc:	d103      	bne.n	80054d6 <sbrk_aligned+0x26>
 80054ce:	f04f 34ff 	mov.w	r4, #4294967295
 80054d2:	4620      	mov	r0, r4
 80054d4:	bd70      	pop	{r4, r5, r6, pc}
 80054d6:	1cc4      	adds	r4, r0, #3
 80054d8:	f024 0403 	bic.w	r4, r4, #3
 80054dc:	42a0      	cmp	r0, r4
 80054de:	d0f8      	beq.n	80054d2 <sbrk_aligned+0x22>
 80054e0:	1a21      	subs	r1, r4, r0
 80054e2:	4628      	mov	r0, r5
 80054e4:	f000 f9e6 	bl	80058b4 <_sbrk_r>
 80054e8:	3001      	adds	r0, #1
 80054ea:	d1f2      	bne.n	80054d2 <sbrk_aligned+0x22>
 80054ec:	e7ef      	b.n	80054ce <sbrk_aligned+0x1e>
 80054ee:	bf00      	nop
 80054f0:	2000090c 	.word	0x2000090c

080054f4 <_malloc_r>:
 80054f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054f8:	1ccd      	adds	r5, r1, #3
 80054fa:	f025 0503 	bic.w	r5, r5, #3
 80054fe:	3508      	adds	r5, #8
 8005500:	2d0c      	cmp	r5, #12
 8005502:	bf38      	it	cc
 8005504:	250c      	movcc	r5, #12
 8005506:	2d00      	cmp	r5, #0
 8005508:	4606      	mov	r6, r0
 800550a:	db01      	blt.n	8005510 <_malloc_r+0x1c>
 800550c:	42a9      	cmp	r1, r5
 800550e:	d904      	bls.n	800551a <_malloc_r+0x26>
 8005510:	230c      	movs	r3, #12
 8005512:	6033      	str	r3, [r6, #0]
 8005514:	2000      	movs	r0, #0
 8005516:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800551a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80055f0 <_malloc_r+0xfc>
 800551e:	f000 f869 	bl	80055f4 <__malloc_lock>
 8005522:	f8d8 3000 	ldr.w	r3, [r8]
 8005526:	461c      	mov	r4, r3
 8005528:	bb44      	cbnz	r4, 800557c <_malloc_r+0x88>
 800552a:	4629      	mov	r1, r5
 800552c:	4630      	mov	r0, r6
 800552e:	f7ff ffbf 	bl	80054b0 <sbrk_aligned>
 8005532:	1c43      	adds	r3, r0, #1
 8005534:	4604      	mov	r4, r0
 8005536:	d158      	bne.n	80055ea <_malloc_r+0xf6>
 8005538:	f8d8 4000 	ldr.w	r4, [r8]
 800553c:	4627      	mov	r7, r4
 800553e:	2f00      	cmp	r7, #0
 8005540:	d143      	bne.n	80055ca <_malloc_r+0xd6>
 8005542:	2c00      	cmp	r4, #0
 8005544:	d04b      	beq.n	80055de <_malloc_r+0xea>
 8005546:	6823      	ldr	r3, [r4, #0]
 8005548:	4639      	mov	r1, r7
 800554a:	4630      	mov	r0, r6
 800554c:	eb04 0903 	add.w	r9, r4, r3
 8005550:	f000 f9b0 	bl	80058b4 <_sbrk_r>
 8005554:	4581      	cmp	r9, r0
 8005556:	d142      	bne.n	80055de <_malloc_r+0xea>
 8005558:	6821      	ldr	r1, [r4, #0]
 800555a:	1a6d      	subs	r5, r5, r1
 800555c:	4629      	mov	r1, r5
 800555e:	4630      	mov	r0, r6
 8005560:	f7ff ffa6 	bl	80054b0 <sbrk_aligned>
 8005564:	3001      	adds	r0, #1
 8005566:	d03a      	beq.n	80055de <_malloc_r+0xea>
 8005568:	6823      	ldr	r3, [r4, #0]
 800556a:	442b      	add	r3, r5
 800556c:	6023      	str	r3, [r4, #0]
 800556e:	f8d8 3000 	ldr.w	r3, [r8]
 8005572:	685a      	ldr	r2, [r3, #4]
 8005574:	bb62      	cbnz	r2, 80055d0 <_malloc_r+0xdc>
 8005576:	f8c8 7000 	str.w	r7, [r8]
 800557a:	e00f      	b.n	800559c <_malloc_r+0xa8>
 800557c:	6822      	ldr	r2, [r4, #0]
 800557e:	1b52      	subs	r2, r2, r5
 8005580:	d420      	bmi.n	80055c4 <_malloc_r+0xd0>
 8005582:	2a0b      	cmp	r2, #11
 8005584:	d917      	bls.n	80055b6 <_malloc_r+0xc2>
 8005586:	1961      	adds	r1, r4, r5
 8005588:	42a3      	cmp	r3, r4
 800558a:	6025      	str	r5, [r4, #0]
 800558c:	bf18      	it	ne
 800558e:	6059      	strne	r1, [r3, #4]
 8005590:	6863      	ldr	r3, [r4, #4]
 8005592:	bf08      	it	eq
 8005594:	f8c8 1000 	streq.w	r1, [r8]
 8005598:	5162      	str	r2, [r4, r5]
 800559a:	604b      	str	r3, [r1, #4]
 800559c:	4630      	mov	r0, r6
 800559e:	f000 f82f 	bl	8005600 <__malloc_unlock>
 80055a2:	f104 000b 	add.w	r0, r4, #11
 80055a6:	1d23      	adds	r3, r4, #4
 80055a8:	f020 0007 	bic.w	r0, r0, #7
 80055ac:	1ac2      	subs	r2, r0, r3
 80055ae:	bf1c      	itt	ne
 80055b0:	1a1b      	subne	r3, r3, r0
 80055b2:	50a3      	strne	r3, [r4, r2]
 80055b4:	e7af      	b.n	8005516 <_malloc_r+0x22>
 80055b6:	6862      	ldr	r2, [r4, #4]
 80055b8:	42a3      	cmp	r3, r4
 80055ba:	bf0c      	ite	eq
 80055bc:	f8c8 2000 	streq.w	r2, [r8]
 80055c0:	605a      	strne	r2, [r3, #4]
 80055c2:	e7eb      	b.n	800559c <_malloc_r+0xa8>
 80055c4:	4623      	mov	r3, r4
 80055c6:	6864      	ldr	r4, [r4, #4]
 80055c8:	e7ae      	b.n	8005528 <_malloc_r+0x34>
 80055ca:	463c      	mov	r4, r7
 80055cc:	687f      	ldr	r7, [r7, #4]
 80055ce:	e7b6      	b.n	800553e <_malloc_r+0x4a>
 80055d0:	461a      	mov	r2, r3
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	42a3      	cmp	r3, r4
 80055d6:	d1fb      	bne.n	80055d0 <_malloc_r+0xdc>
 80055d8:	2300      	movs	r3, #0
 80055da:	6053      	str	r3, [r2, #4]
 80055dc:	e7de      	b.n	800559c <_malloc_r+0xa8>
 80055de:	230c      	movs	r3, #12
 80055e0:	6033      	str	r3, [r6, #0]
 80055e2:	4630      	mov	r0, r6
 80055e4:	f000 f80c 	bl	8005600 <__malloc_unlock>
 80055e8:	e794      	b.n	8005514 <_malloc_r+0x20>
 80055ea:	6005      	str	r5, [r0, #0]
 80055ec:	e7d6      	b.n	800559c <_malloc_r+0xa8>
 80055ee:	bf00      	nop
 80055f0:	20000910 	.word	0x20000910

080055f4 <__malloc_lock>:
 80055f4:	4801      	ldr	r0, [pc, #4]	@ (80055fc <__malloc_lock+0x8>)
 80055f6:	f000 b9aa 	b.w	800594e <__retarget_lock_acquire_recursive>
 80055fa:	bf00      	nop
 80055fc:	20000a54 	.word	0x20000a54

08005600 <__malloc_unlock>:
 8005600:	4801      	ldr	r0, [pc, #4]	@ (8005608 <__malloc_unlock+0x8>)
 8005602:	f000 b9a5 	b.w	8005950 <__retarget_lock_release_recursive>
 8005606:	bf00      	nop
 8005608:	20000a54 	.word	0x20000a54

0800560c <std>:
 800560c:	2300      	movs	r3, #0
 800560e:	b510      	push	{r4, lr}
 8005610:	4604      	mov	r4, r0
 8005612:	e9c0 3300 	strd	r3, r3, [r0]
 8005616:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800561a:	6083      	str	r3, [r0, #8]
 800561c:	8181      	strh	r1, [r0, #12]
 800561e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005620:	81c2      	strh	r2, [r0, #14]
 8005622:	6183      	str	r3, [r0, #24]
 8005624:	4619      	mov	r1, r3
 8005626:	2208      	movs	r2, #8
 8005628:	305c      	adds	r0, #92	@ 0x5c
 800562a:	f000 f906 	bl	800583a <memset>
 800562e:	4b0d      	ldr	r3, [pc, #52]	@ (8005664 <std+0x58>)
 8005630:	6263      	str	r3, [r4, #36]	@ 0x24
 8005632:	4b0d      	ldr	r3, [pc, #52]	@ (8005668 <std+0x5c>)
 8005634:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005636:	4b0d      	ldr	r3, [pc, #52]	@ (800566c <std+0x60>)
 8005638:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800563a:	4b0d      	ldr	r3, [pc, #52]	@ (8005670 <std+0x64>)
 800563c:	6323      	str	r3, [r4, #48]	@ 0x30
 800563e:	4b0d      	ldr	r3, [pc, #52]	@ (8005674 <std+0x68>)
 8005640:	6224      	str	r4, [r4, #32]
 8005642:	429c      	cmp	r4, r3
 8005644:	d006      	beq.n	8005654 <std+0x48>
 8005646:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800564a:	4294      	cmp	r4, r2
 800564c:	d002      	beq.n	8005654 <std+0x48>
 800564e:	33d0      	adds	r3, #208	@ 0xd0
 8005650:	429c      	cmp	r4, r3
 8005652:	d105      	bne.n	8005660 <std+0x54>
 8005654:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800565c:	f000 b976 	b.w	800594c <__retarget_lock_init_recursive>
 8005660:	bd10      	pop	{r4, pc}
 8005662:	bf00      	nop
 8005664:	080057b5 	.word	0x080057b5
 8005668:	080057d7 	.word	0x080057d7
 800566c:	0800580f 	.word	0x0800580f
 8005670:	08005833 	.word	0x08005833
 8005674:	20000914 	.word	0x20000914

08005678 <stdio_exit_handler>:
 8005678:	4a02      	ldr	r2, [pc, #8]	@ (8005684 <stdio_exit_handler+0xc>)
 800567a:	4903      	ldr	r1, [pc, #12]	@ (8005688 <stdio_exit_handler+0x10>)
 800567c:	4803      	ldr	r0, [pc, #12]	@ (800568c <stdio_exit_handler+0x14>)
 800567e:	f000 b869 	b.w	8005754 <_fwalk_sglue>
 8005682:	bf00      	nop
 8005684:	2000040c 	.word	0x2000040c
 8005688:	08006091 	.word	0x08006091
 800568c:	2000041c 	.word	0x2000041c

08005690 <cleanup_stdio>:
 8005690:	6841      	ldr	r1, [r0, #4]
 8005692:	4b0c      	ldr	r3, [pc, #48]	@ (80056c4 <cleanup_stdio+0x34>)
 8005694:	4299      	cmp	r1, r3
 8005696:	b510      	push	{r4, lr}
 8005698:	4604      	mov	r4, r0
 800569a:	d001      	beq.n	80056a0 <cleanup_stdio+0x10>
 800569c:	f000 fcf8 	bl	8006090 <_fflush_r>
 80056a0:	68a1      	ldr	r1, [r4, #8]
 80056a2:	4b09      	ldr	r3, [pc, #36]	@ (80056c8 <cleanup_stdio+0x38>)
 80056a4:	4299      	cmp	r1, r3
 80056a6:	d002      	beq.n	80056ae <cleanup_stdio+0x1e>
 80056a8:	4620      	mov	r0, r4
 80056aa:	f000 fcf1 	bl	8006090 <_fflush_r>
 80056ae:	68e1      	ldr	r1, [r4, #12]
 80056b0:	4b06      	ldr	r3, [pc, #24]	@ (80056cc <cleanup_stdio+0x3c>)
 80056b2:	4299      	cmp	r1, r3
 80056b4:	d004      	beq.n	80056c0 <cleanup_stdio+0x30>
 80056b6:	4620      	mov	r0, r4
 80056b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056bc:	f000 bce8 	b.w	8006090 <_fflush_r>
 80056c0:	bd10      	pop	{r4, pc}
 80056c2:	bf00      	nop
 80056c4:	20000914 	.word	0x20000914
 80056c8:	2000097c 	.word	0x2000097c
 80056cc:	200009e4 	.word	0x200009e4

080056d0 <global_stdio_init.part.0>:
 80056d0:	b510      	push	{r4, lr}
 80056d2:	4b0b      	ldr	r3, [pc, #44]	@ (8005700 <global_stdio_init.part.0+0x30>)
 80056d4:	4c0b      	ldr	r4, [pc, #44]	@ (8005704 <global_stdio_init.part.0+0x34>)
 80056d6:	4a0c      	ldr	r2, [pc, #48]	@ (8005708 <global_stdio_init.part.0+0x38>)
 80056d8:	601a      	str	r2, [r3, #0]
 80056da:	4620      	mov	r0, r4
 80056dc:	2200      	movs	r2, #0
 80056de:	2104      	movs	r1, #4
 80056e0:	f7ff ff94 	bl	800560c <std>
 80056e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80056e8:	2201      	movs	r2, #1
 80056ea:	2109      	movs	r1, #9
 80056ec:	f7ff ff8e 	bl	800560c <std>
 80056f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80056f4:	2202      	movs	r2, #2
 80056f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056fa:	2112      	movs	r1, #18
 80056fc:	f7ff bf86 	b.w	800560c <std>
 8005700:	20000a4c 	.word	0x20000a4c
 8005704:	20000914 	.word	0x20000914
 8005708:	08005679 	.word	0x08005679

0800570c <__sfp_lock_acquire>:
 800570c:	4801      	ldr	r0, [pc, #4]	@ (8005714 <__sfp_lock_acquire+0x8>)
 800570e:	f000 b91e 	b.w	800594e <__retarget_lock_acquire_recursive>
 8005712:	bf00      	nop
 8005714:	20000a55 	.word	0x20000a55

08005718 <__sfp_lock_release>:
 8005718:	4801      	ldr	r0, [pc, #4]	@ (8005720 <__sfp_lock_release+0x8>)
 800571a:	f000 b919 	b.w	8005950 <__retarget_lock_release_recursive>
 800571e:	bf00      	nop
 8005720:	20000a55 	.word	0x20000a55

08005724 <__sinit>:
 8005724:	b510      	push	{r4, lr}
 8005726:	4604      	mov	r4, r0
 8005728:	f7ff fff0 	bl	800570c <__sfp_lock_acquire>
 800572c:	6a23      	ldr	r3, [r4, #32]
 800572e:	b11b      	cbz	r3, 8005738 <__sinit+0x14>
 8005730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005734:	f7ff bff0 	b.w	8005718 <__sfp_lock_release>
 8005738:	4b04      	ldr	r3, [pc, #16]	@ (800574c <__sinit+0x28>)
 800573a:	6223      	str	r3, [r4, #32]
 800573c:	4b04      	ldr	r3, [pc, #16]	@ (8005750 <__sinit+0x2c>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1f5      	bne.n	8005730 <__sinit+0xc>
 8005744:	f7ff ffc4 	bl	80056d0 <global_stdio_init.part.0>
 8005748:	e7f2      	b.n	8005730 <__sinit+0xc>
 800574a:	bf00      	nop
 800574c:	08005691 	.word	0x08005691
 8005750:	20000a4c 	.word	0x20000a4c

08005754 <_fwalk_sglue>:
 8005754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005758:	4607      	mov	r7, r0
 800575a:	4688      	mov	r8, r1
 800575c:	4614      	mov	r4, r2
 800575e:	2600      	movs	r6, #0
 8005760:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005764:	f1b9 0901 	subs.w	r9, r9, #1
 8005768:	d505      	bpl.n	8005776 <_fwalk_sglue+0x22>
 800576a:	6824      	ldr	r4, [r4, #0]
 800576c:	2c00      	cmp	r4, #0
 800576e:	d1f7      	bne.n	8005760 <_fwalk_sglue+0xc>
 8005770:	4630      	mov	r0, r6
 8005772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005776:	89ab      	ldrh	r3, [r5, #12]
 8005778:	2b01      	cmp	r3, #1
 800577a:	d907      	bls.n	800578c <_fwalk_sglue+0x38>
 800577c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005780:	3301      	adds	r3, #1
 8005782:	d003      	beq.n	800578c <_fwalk_sglue+0x38>
 8005784:	4629      	mov	r1, r5
 8005786:	4638      	mov	r0, r7
 8005788:	47c0      	blx	r8
 800578a:	4306      	orrs	r6, r0
 800578c:	3568      	adds	r5, #104	@ 0x68
 800578e:	e7e9      	b.n	8005764 <_fwalk_sglue+0x10>

08005790 <iprintf>:
 8005790:	b40f      	push	{r0, r1, r2, r3}
 8005792:	b507      	push	{r0, r1, r2, lr}
 8005794:	4906      	ldr	r1, [pc, #24]	@ (80057b0 <iprintf+0x20>)
 8005796:	ab04      	add	r3, sp, #16
 8005798:	6808      	ldr	r0, [r1, #0]
 800579a:	f853 2b04 	ldr.w	r2, [r3], #4
 800579e:	6881      	ldr	r1, [r0, #8]
 80057a0:	9301      	str	r3, [sp, #4]
 80057a2:	f000 f94b 	bl	8005a3c <_vfiprintf_r>
 80057a6:	b003      	add	sp, #12
 80057a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80057ac:	b004      	add	sp, #16
 80057ae:	4770      	bx	lr
 80057b0:	20000418 	.word	0x20000418

080057b4 <__sread>:
 80057b4:	b510      	push	{r4, lr}
 80057b6:	460c      	mov	r4, r1
 80057b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057bc:	f000 f868 	bl	8005890 <_read_r>
 80057c0:	2800      	cmp	r0, #0
 80057c2:	bfab      	itete	ge
 80057c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80057c6:	89a3      	ldrhlt	r3, [r4, #12]
 80057c8:	181b      	addge	r3, r3, r0
 80057ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80057ce:	bfac      	ite	ge
 80057d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80057d2:	81a3      	strhlt	r3, [r4, #12]
 80057d4:	bd10      	pop	{r4, pc}

080057d6 <__swrite>:
 80057d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057da:	461f      	mov	r7, r3
 80057dc:	898b      	ldrh	r3, [r1, #12]
 80057de:	05db      	lsls	r3, r3, #23
 80057e0:	4605      	mov	r5, r0
 80057e2:	460c      	mov	r4, r1
 80057e4:	4616      	mov	r6, r2
 80057e6:	d505      	bpl.n	80057f4 <__swrite+0x1e>
 80057e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057ec:	2302      	movs	r3, #2
 80057ee:	2200      	movs	r2, #0
 80057f0:	f000 f83c 	bl	800586c <_lseek_r>
 80057f4:	89a3      	ldrh	r3, [r4, #12]
 80057f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80057fe:	81a3      	strh	r3, [r4, #12]
 8005800:	4632      	mov	r2, r6
 8005802:	463b      	mov	r3, r7
 8005804:	4628      	mov	r0, r5
 8005806:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800580a:	f000 b863 	b.w	80058d4 <_write_r>

0800580e <__sseek>:
 800580e:	b510      	push	{r4, lr}
 8005810:	460c      	mov	r4, r1
 8005812:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005816:	f000 f829 	bl	800586c <_lseek_r>
 800581a:	1c43      	adds	r3, r0, #1
 800581c:	89a3      	ldrh	r3, [r4, #12]
 800581e:	bf15      	itete	ne
 8005820:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005822:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005826:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800582a:	81a3      	strheq	r3, [r4, #12]
 800582c:	bf18      	it	ne
 800582e:	81a3      	strhne	r3, [r4, #12]
 8005830:	bd10      	pop	{r4, pc}

08005832 <__sclose>:
 8005832:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005836:	f000 b809 	b.w	800584c <_close_r>

0800583a <memset>:
 800583a:	4402      	add	r2, r0
 800583c:	4603      	mov	r3, r0
 800583e:	4293      	cmp	r3, r2
 8005840:	d100      	bne.n	8005844 <memset+0xa>
 8005842:	4770      	bx	lr
 8005844:	f803 1b01 	strb.w	r1, [r3], #1
 8005848:	e7f9      	b.n	800583e <memset+0x4>
	...

0800584c <_close_r>:
 800584c:	b538      	push	{r3, r4, r5, lr}
 800584e:	4d06      	ldr	r5, [pc, #24]	@ (8005868 <_close_r+0x1c>)
 8005850:	2300      	movs	r3, #0
 8005852:	4604      	mov	r4, r0
 8005854:	4608      	mov	r0, r1
 8005856:	602b      	str	r3, [r5, #0]
 8005858:	f7fc fc63 	bl	8002122 <_close>
 800585c:	1c43      	adds	r3, r0, #1
 800585e:	d102      	bne.n	8005866 <_close_r+0x1a>
 8005860:	682b      	ldr	r3, [r5, #0]
 8005862:	b103      	cbz	r3, 8005866 <_close_r+0x1a>
 8005864:	6023      	str	r3, [r4, #0]
 8005866:	bd38      	pop	{r3, r4, r5, pc}
 8005868:	20000a50 	.word	0x20000a50

0800586c <_lseek_r>:
 800586c:	b538      	push	{r3, r4, r5, lr}
 800586e:	4d07      	ldr	r5, [pc, #28]	@ (800588c <_lseek_r+0x20>)
 8005870:	4604      	mov	r4, r0
 8005872:	4608      	mov	r0, r1
 8005874:	4611      	mov	r1, r2
 8005876:	2200      	movs	r2, #0
 8005878:	602a      	str	r2, [r5, #0]
 800587a:	461a      	mov	r2, r3
 800587c:	f7fc fc78 	bl	8002170 <_lseek>
 8005880:	1c43      	adds	r3, r0, #1
 8005882:	d102      	bne.n	800588a <_lseek_r+0x1e>
 8005884:	682b      	ldr	r3, [r5, #0]
 8005886:	b103      	cbz	r3, 800588a <_lseek_r+0x1e>
 8005888:	6023      	str	r3, [r4, #0]
 800588a:	bd38      	pop	{r3, r4, r5, pc}
 800588c:	20000a50 	.word	0x20000a50

08005890 <_read_r>:
 8005890:	b538      	push	{r3, r4, r5, lr}
 8005892:	4d07      	ldr	r5, [pc, #28]	@ (80058b0 <_read_r+0x20>)
 8005894:	4604      	mov	r4, r0
 8005896:	4608      	mov	r0, r1
 8005898:	4611      	mov	r1, r2
 800589a:	2200      	movs	r2, #0
 800589c:	602a      	str	r2, [r5, #0]
 800589e:	461a      	mov	r2, r3
 80058a0:	f7fc fc06 	bl	80020b0 <_read>
 80058a4:	1c43      	adds	r3, r0, #1
 80058a6:	d102      	bne.n	80058ae <_read_r+0x1e>
 80058a8:	682b      	ldr	r3, [r5, #0]
 80058aa:	b103      	cbz	r3, 80058ae <_read_r+0x1e>
 80058ac:	6023      	str	r3, [r4, #0]
 80058ae:	bd38      	pop	{r3, r4, r5, pc}
 80058b0:	20000a50 	.word	0x20000a50

080058b4 <_sbrk_r>:
 80058b4:	b538      	push	{r3, r4, r5, lr}
 80058b6:	4d06      	ldr	r5, [pc, #24]	@ (80058d0 <_sbrk_r+0x1c>)
 80058b8:	2300      	movs	r3, #0
 80058ba:	4604      	mov	r4, r0
 80058bc:	4608      	mov	r0, r1
 80058be:	602b      	str	r3, [r5, #0]
 80058c0:	f7fc fc64 	bl	800218c <_sbrk>
 80058c4:	1c43      	adds	r3, r0, #1
 80058c6:	d102      	bne.n	80058ce <_sbrk_r+0x1a>
 80058c8:	682b      	ldr	r3, [r5, #0]
 80058ca:	b103      	cbz	r3, 80058ce <_sbrk_r+0x1a>
 80058cc:	6023      	str	r3, [r4, #0]
 80058ce:	bd38      	pop	{r3, r4, r5, pc}
 80058d0:	20000a50 	.word	0x20000a50

080058d4 <_write_r>:
 80058d4:	b538      	push	{r3, r4, r5, lr}
 80058d6:	4d07      	ldr	r5, [pc, #28]	@ (80058f4 <_write_r+0x20>)
 80058d8:	4604      	mov	r4, r0
 80058da:	4608      	mov	r0, r1
 80058dc:	4611      	mov	r1, r2
 80058de:	2200      	movs	r2, #0
 80058e0:	602a      	str	r2, [r5, #0]
 80058e2:	461a      	mov	r2, r3
 80058e4:	f7fc fc01 	bl	80020ea <_write>
 80058e8:	1c43      	adds	r3, r0, #1
 80058ea:	d102      	bne.n	80058f2 <_write_r+0x1e>
 80058ec:	682b      	ldr	r3, [r5, #0]
 80058ee:	b103      	cbz	r3, 80058f2 <_write_r+0x1e>
 80058f0:	6023      	str	r3, [r4, #0]
 80058f2:	bd38      	pop	{r3, r4, r5, pc}
 80058f4:	20000a50 	.word	0x20000a50

080058f8 <__errno>:
 80058f8:	4b01      	ldr	r3, [pc, #4]	@ (8005900 <__errno+0x8>)
 80058fa:	6818      	ldr	r0, [r3, #0]
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	20000418 	.word	0x20000418

08005904 <__libc_init_array>:
 8005904:	b570      	push	{r4, r5, r6, lr}
 8005906:	4d0d      	ldr	r5, [pc, #52]	@ (800593c <__libc_init_array+0x38>)
 8005908:	4c0d      	ldr	r4, [pc, #52]	@ (8005940 <__libc_init_array+0x3c>)
 800590a:	1b64      	subs	r4, r4, r5
 800590c:	10a4      	asrs	r4, r4, #2
 800590e:	2600      	movs	r6, #0
 8005910:	42a6      	cmp	r6, r4
 8005912:	d109      	bne.n	8005928 <__libc_init_array+0x24>
 8005914:	4d0b      	ldr	r5, [pc, #44]	@ (8005944 <__libc_init_array+0x40>)
 8005916:	4c0c      	ldr	r4, [pc, #48]	@ (8005948 <__libc_init_array+0x44>)
 8005918:	f001 fa5a 	bl	8006dd0 <_init>
 800591c:	1b64      	subs	r4, r4, r5
 800591e:	10a4      	asrs	r4, r4, #2
 8005920:	2600      	movs	r6, #0
 8005922:	42a6      	cmp	r6, r4
 8005924:	d105      	bne.n	8005932 <__libc_init_array+0x2e>
 8005926:	bd70      	pop	{r4, r5, r6, pc}
 8005928:	f855 3b04 	ldr.w	r3, [r5], #4
 800592c:	4798      	blx	r3
 800592e:	3601      	adds	r6, #1
 8005930:	e7ee      	b.n	8005910 <__libc_init_array+0xc>
 8005932:	f855 3b04 	ldr.w	r3, [r5], #4
 8005936:	4798      	blx	r3
 8005938:	3601      	adds	r6, #1
 800593a:	e7f2      	b.n	8005922 <__libc_init_array+0x1e>
 800593c:	08007244 	.word	0x08007244
 8005940:	08007244 	.word	0x08007244
 8005944:	08007244 	.word	0x08007244
 8005948:	08007248 	.word	0x08007248

0800594c <__retarget_lock_init_recursive>:
 800594c:	4770      	bx	lr

0800594e <__retarget_lock_acquire_recursive>:
 800594e:	4770      	bx	lr

08005950 <__retarget_lock_release_recursive>:
 8005950:	4770      	bx	lr
	...

08005954 <_free_r>:
 8005954:	b538      	push	{r3, r4, r5, lr}
 8005956:	4605      	mov	r5, r0
 8005958:	2900      	cmp	r1, #0
 800595a:	d041      	beq.n	80059e0 <_free_r+0x8c>
 800595c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005960:	1f0c      	subs	r4, r1, #4
 8005962:	2b00      	cmp	r3, #0
 8005964:	bfb8      	it	lt
 8005966:	18e4      	addlt	r4, r4, r3
 8005968:	f7ff fe44 	bl	80055f4 <__malloc_lock>
 800596c:	4a1d      	ldr	r2, [pc, #116]	@ (80059e4 <_free_r+0x90>)
 800596e:	6813      	ldr	r3, [r2, #0]
 8005970:	b933      	cbnz	r3, 8005980 <_free_r+0x2c>
 8005972:	6063      	str	r3, [r4, #4]
 8005974:	6014      	str	r4, [r2, #0]
 8005976:	4628      	mov	r0, r5
 8005978:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800597c:	f7ff be40 	b.w	8005600 <__malloc_unlock>
 8005980:	42a3      	cmp	r3, r4
 8005982:	d908      	bls.n	8005996 <_free_r+0x42>
 8005984:	6820      	ldr	r0, [r4, #0]
 8005986:	1821      	adds	r1, r4, r0
 8005988:	428b      	cmp	r3, r1
 800598a:	bf01      	itttt	eq
 800598c:	6819      	ldreq	r1, [r3, #0]
 800598e:	685b      	ldreq	r3, [r3, #4]
 8005990:	1809      	addeq	r1, r1, r0
 8005992:	6021      	streq	r1, [r4, #0]
 8005994:	e7ed      	b.n	8005972 <_free_r+0x1e>
 8005996:	461a      	mov	r2, r3
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	b10b      	cbz	r3, 80059a0 <_free_r+0x4c>
 800599c:	42a3      	cmp	r3, r4
 800599e:	d9fa      	bls.n	8005996 <_free_r+0x42>
 80059a0:	6811      	ldr	r1, [r2, #0]
 80059a2:	1850      	adds	r0, r2, r1
 80059a4:	42a0      	cmp	r0, r4
 80059a6:	d10b      	bne.n	80059c0 <_free_r+0x6c>
 80059a8:	6820      	ldr	r0, [r4, #0]
 80059aa:	4401      	add	r1, r0
 80059ac:	1850      	adds	r0, r2, r1
 80059ae:	4283      	cmp	r3, r0
 80059b0:	6011      	str	r1, [r2, #0]
 80059b2:	d1e0      	bne.n	8005976 <_free_r+0x22>
 80059b4:	6818      	ldr	r0, [r3, #0]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	6053      	str	r3, [r2, #4]
 80059ba:	4408      	add	r0, r1
 80059bc:	6010      	str	r0, [r2, #0]
 80059be:	e7da      	b.n	8005976 <_free_r+0x22>
 80059c0:	d902      	bls.n	80059c8 <_free_r+0x74>
 80059c2:	230c      	movs	r3, #12
 80059c4:	602b      	str	r3, [r5, #0]
 80059c6:	e7d6      	b.n	8005976 <_free_r+0x22>
 80059c8:	6820      	ldr	r0, [r4, #0]
 80059ca:	1821      	adds	r1, r4, r0
 80059cc:	428b      	cmp	r3, r1
 80059ce:	bf04      	itt	eq
 80059d0:	6819      	ldreq	r1, [r3, #0]
 80059d2:	685b      	ldreq	r3, [r3, #4]
 80059d4:	6063      	str	r3, [r4, #4]
 80059d6:	bf04      	itt	eq
 80059d8:	1809      	addeq	r1, r1, r0
 80059da:	6021      	streq	r1, [r4, #0]
 80059dc:	6054      	str	r4, [r2, #4]
 80059de:	e7ca      	b.n	8005976 <_free_r+0x22>
 80059e0:	bd38      	pop	{r3, r4, r5, pc}
 80059e2:	bf00      	nop
 80059e4:	20000910 	.word	0x20000910

080059e8 <__sfputc_r>:
 80059e8:	6893      	ldr	r3, [r2, #8]
 80059ea:	3b01      	subs	r3, #1
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	b410      	push	{r4}
 80059f0:	6093      	str	r3, [r2, #8]
 80059f2:	da08      	bge.n	8005a06 <__sfputc_r+0x1e>
 80059f4:	6994      	ldr	r4, [r2, #24]
 80059f6:	42a3      	cmp	r3, r4
 80059f8:	db01      	blt.n	80059fe <__sfputc_r+0x16>
 80059fa:	290a      	cmp	r1, #10
 80059fc:	d103      	bne.n	8005a06 <__sfputc_r+0x1e>
 80059fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a02:	f000 bb6d 	b.w	80060e0 <__swbuf_r>
 8005a06:	6813      	ldr	r3, [r2, #0]
 8005a08:	1c58      	adds	r0, r3, #1
 8005a0a:	6010      	str	r0, [r2, #0]
 8005a0c:	7019      	strb	r1, [r3, #0]
 8005a0e:	4608      	mov	r0, r1
 8005a10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a14:	4770      	bx	lr

08005a16 <__sfputs_r>:
 8005a16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a18:	4606      	mov	r6, r0
 8005a1a:	460f      	mov	r7, r1
 8005a1c:	4614      	mov	r4, r2
 8005a1e:	18d5      	adds	r5, r2, r3
 8005a20:	42ac      	cmp	r4, r5
 8005a22:	d101      	bne.n	8005a28 <__sfputs_r+0x12>
 8005a24:	2000      	movs	r0, #0
 8005a26:	e007      	b.n	8005a38 <__sfputs_r+0x22>
 8005a28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a2c:	463a      	mov	r2, r7
 8005a2e:	4630      	mov	r0, r6
 8005a30:	f7ff ffda 	bl	80059e8 <__sfputc_r>
 8005a34:	1c43      	adds	r3, r0, #1
 8005a36:	d1f3      	bne.n	8005a20 <__sfputs_r+0xa>
 8005a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005a3c <_vfiprintf_r>:
 8005a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a40:	460d      	mov	r5, r1
 8005a42:	b09d      	sub	sp, #116	@ 0x74
 8005a44:	4614      	mov	r4, r2
 8005a46:	4698      	mov	r8, r3
 8005a48:	4606      	mov	r6, r0
 8005a4a:	b118      	cbz	r0, 8005a54 <_vfiprintf_r+0x18>
 8005a4c:	6a03      	ldr	r3, [r0, #32]
 8005a4e:	b90b      	cbnz	r3, 8005a54 <_vfiprintf_r+0x18>
 8005a50:	f7ff fe68 	bl	8005724 <__sinit>
 8005a54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005a56:	07d9      	lsls	r1, r3, #31
 8005a58:	d405      	bmi.n	8005a66 <_vfiprintf_r+0x2a>
 8005a5a:	89ab      	ldrh	r3, [r5, #12]
 8005a5c:	059a      	lsls	r2, r3, #22
 8005a5e:	d402      	bmi.n	8005a66 <_vfiprintf_r+0x2a>
 8005a60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005a62:	f7ff ff74 	bl	800594e <__retarget_lock_acquire_recursive>
 8005a66:	89ab      	ldrh	r3, [r5, #12]
 8005a68:	071b      	lsls	r3, r3, #28
 8005a6a:	d501      	bpl.n	8005a70 <_vfiprintf_r+0x34>
 8005a6c:	692b      	ldr	r3, [r5, #16]
 8005a6e:	b99b      	cbnz	r3, 8005a98 <_vfiprintf_r+0x5c>
 8005a70:	4629      	mov	r1, r5
 8005a72:	4630      	mov	r0, r6
 8005a74:	f000 fb72 	bl	800615c <__swsetup_r>
 8005a78:	b170      	cbz	r0, 8005a98 <_vfiprintf_r+0x5c>
 8005a7a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005a7c:	07dc      	lsls	r4, r3, #31
 8005a7e:	d504      	bpl.n	8005a8a <_vfiprintf_r+0x4e>
 8005a80:	f04f 30ff 	mov.w	r0, #4294967295
 8005a84:	b01d      	add	sp, #116	@ 0x74
 8005a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a8a:	89ab      	ldrh	r3, [r5, #12]
 8005a8c:	0598      	lsls	r0, r3, #22
 8005a8e:	d4f7      	bmi.n	8005a80 <_vfiprintf_r+0x44>
 8005a90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005a92:	f7ff ff5d 	bl	8005950 <__retarget_lock_release_recursive>
 8005a96:	e7f3      	b.n	8005a80 <_vfiprintf_r+0x44>
 8005a98:	2300      	movs	r3, #0
 8005a9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a9c:	2320      	movs	r3, #32
 8005a9e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005aa2:	f8cd 800c 	str.w	r8, [sp, #12]
 8005aa6:	2330      	movs	r3, #48	@ 0x30
 8005aa8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005c58 <_vfiprintf_r+0x21c>
 8005aac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005ab0:	f04f 0901 	mov.w	r9, #1
 8005ab4:	4623      	mov	r3, r4
 8005ab6:	469a      	mov	sl, r3
 8005ab8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005abc:	b10a      	cbz	r2, 8005ac2 <_vfiprintf_r+0x86>
 8005abe:	2a25      	cmp	r2, #37	@ 0x25
 8005ac0:	d1f9      	bne.n	8005ab6 <_vfiprintf_r+0x7a>
 8005ac2:	ebba 0b04 	subs.w	fp, sl, r4
 8005ac6:	d00b      	beq.n	8005ae0 <_vfiprintf_r+0xa4>
 8005ac8:	465b      	mov	r3, fp
 8005aca:	4622      	mov	r2, r4
 8005acc:	4629      	mov	r1, r5
 8005ace:	4630      	mov	r0, r6
 8005ad0:	f7ff ffa1 	bl	8005a16 <__sfputs_r>
 8005ad4:	3001      	adds	r0, #1
 8005ad6:	f000 80a7 	beq.w	8005c28 <_vfiprintf_r+0x1ec>
 8005ada:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005adc:	445a      	add	r2, fp
 8005ade:	9209      	str	r2, [sp, #36]	@ 0x24
 8005ae0:	f89a 3000 	ldrb.w	r3, [sl]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	f000 809f 	beq.w	8005c28 <_vfiprintf_r+0x1ec>
 8005aea:	2300      	movs	r3, #0
 8005aec:	f04f 32ff 	mov.w	r2, #4294967295
 8005af0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005af4:	f10a 0a01 	add.w	sl, sl, #1
 8005af8:	9304      	str	r3, [sp, #16]
 8005afa:	9307      	str	r3, [sp, #28]
 8005afc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005b00:	931a      	str	r3, [sp, #104]	@ 0x68
 8005b02:	4654      	mov	r4, sl
 8005b04:	2205      	movs	r2, #5
 8005b06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b0a:	4853      	ldr	r0, [pc, #332]	@ (8005c58 <_vfiprintf_r+0x21c>)
 8005b0c:	f7fa fb80 	bl	8000210 <memchr>
 8005b10:	9a04      	ldr	r2, [sp, #16]
 8005b12:	b9d8      	cbnz	r0, 8005b4c <_vfiprintf_r+0x110>
 8005b14:	06d1      	lsls	r1, r2, #27
 8005b16:	bf44      	itt	mi
 8005b18:	2320      	movmi	r3, #32
 8005b1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b1e:	0713      	lsls	r3, r2, #28
 8005b20:	bf44      	itt	mi
 8005b22:	232b      	movmi	r3, #43	@ 0x2b
 8005b24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b28:	f89a 3000 	ldrb.w	r3, [sl]
 8005b2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b2e:	d015      	beq.n	8005b5c <_vfiprintf_r+0x120>
 8005b30:	9a07      	ldr	r2, [sp, #28]
 8005b32:	4654      	mov	r4, sl
 8005b34:	2000      	movs	r0, #0
 8005b36:	f04f 0c0a 	mov.w	ip, #10
 8005b3a:	4621      	mov	r1, r4
 8005b3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b40:	3b30      	subs	r3, #48	@ 0x30
 8005b42:	2b09      	cmp	r3, #9
 8005b44:	d94b      	bls.n	8005bde <_vfiprintf_r+0x1a2>
 8005b46:	b1b0      	cbz	r0, 8005b76 <_vfiprintf_r+0x13a>
 8005b48:	9207      	str	r2, [sp, #28]
 8005b4a:	e014      	b.n	8005b76 <_vfiprintf_r+0x13a>
 8005b4c:	eba0 0308 	sub.w	r3, r0, r8
 8005b50:	fa09 f303 	lsl.w	r3, r9, r3
 8005b54:	4313      	orrs	r3, r2
 8005b56:	9304      	str	r3, [sp, #16]
 8005b58:	46a2      	mov	sl, r4
 8005b5a:	e7d2      	b.n	8005b02 <_vfiprintf_r+0xc6>
 8005b5c:	9b03      	ldr	r3, [sp, #12]
 8005b5e:	1d19      	adds	r1, r3, #4
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	9103      	str	r1, [sp, #12]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	bfbb      	ittet	lt
 8005b68:	425b      	neglt	r3, r3
 8005b6a:	f042 0202 	orrlt.w	r2, r2, #2
 8005b6e:	9307      	strge	r3, [sp, #28]
 8005b70:	9307      	strlt	r3, [sp, #28]
 8005b72:	bfb8      	it	lt
 8005b74:	9204      	strlt	r2, [sp, #16]
 8005b76:	7823      	ldrb	r3, [r4, #0]
 8005b78:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b7a:	d10a      	bne.n	8005b92 <_vfiprintf_r+0x156>
 8005b7c:	7863      	ldrb	r3, [r4, #1]
 8005b7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b80:	d132      	bne.n	8005be8 <_vfiprintf_r+0x1ac>
 8005b82:	9b03      	ldr	r3, [sp, #12]
 8005b84:	1d1a      	adds	r2, r3, #4
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	9203      	str	r2, [sp, #12]
 8005b8a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005b8e:	3402      	adds	r4, #2
 8005b90:	9305      	str	r3, [sp, #20]
 8005b92:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005c68 <_vfiprintf_r+0x22c>
 8005b96:	7821      	ldrb	r1, [r4, #0]
 8005b98:	2203      	movs	r2, #3
 8005b9a:	4650      	mov	r0, sl
 8005b9c:	f7fa fb38 	bl	8000210 <memchr>
 8005ba0:	b138      	cbz	r0, 8005bb2 <_vfiprintf_r+0x176>
 8005ba2:	9b04      	ldr	r3, [sp, #16]
 8005ba4:	eba0 000a 	sub.w	r0, r0, sl
 8005ba8:	2240      	movs	r2, #64	@ 0x40
 8005baa:	4082      	lsls	r2, r0
 8005bac:	4313      	orrs	r3, r2
 8005bae:	3401      	adds	r4, #1
 8005bb0:	9304      	str	r3, [sp, #16]
 8005bb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bb6:	4829      	ldr	r0, [pc, #164]	@ (8005c5c <_vfiprintf_r+0x220>)
 8005bb8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005bbc:	2206      	movs	r2, #6
 8005bbe:	f7fa fb27 	bl	8000210 <memchr>
 8005bc2:	2800      	cmp	r0, #0
 8005bc4:	d03f      	beq.n	8005c46 <_vfiprintf_r+0x20a>
 8005bc6:	4b26      	ldr	r3, [pc, #152]	@ (8005c60 <_vfiprintf_r+0x224>)
 8005bc8:	bb1b      	cbnz	r3, 8005c12 <_vfiprintf_r+0x1d6>
 8005bca:	9b03      	ldr	r3, [sp, #12]
 8005bcc:	3307      	adds	r3, #7
 8005bce:	f023 0307 	bic.w	r3, r3, #7
 8005bd2:	3308      	adds	r3, #8
 8005bd4:	9303      	str	r3, [sp, #12]
 8005bd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bd8:	443b      	add	r3, r7
 8005bda:	9309      	str	r3, [sp, #36]	@ 0x24
 8005bdc:	e76a      	b.n	8005ab4 <_vfiprintf_r+0x78>
 8005bde:	fb0c 3202 	mla	r2, ip, r2, r3
 8005be2:	460c      	mov	r4, r1
 8005be4:	2001      	movs	r0, #1
 8005be6:	e7a8      	b.n	8005b3a <_vfiprintf_r+0xfe>
 8005be8:	2300      	movs	r3, #0
 8005bea:	3401      	adds	r4, #1
 8005bec:	9305      	str	r3, [sp, #20]
 8005bee:	4619      	mov	r1, r3
 8005bf0:	f04f 0c0a 	mov.w	ip, #10
 8005bf4:	4620      	mov	r0, r4
 8005bf6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005bfa:	3a30      	subs	r2, #48	@ 0x30
 8005bfc:	2a09      	cmp	r2, #9
 8005bfe:	d903      	bls.n	8005c08 <_vfiprintf_r+0x1cc>
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d0c6      	beq.n	8005b92 <_vfiprintf_r+0x156>
 8005c04:	9105      	str	r1, [sp, #20]
 8005c06:	e7c4      	b.n	8005b92 <_vfiprintf_r+0x156>
 8005c08:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c0c:	4604      	mov	r4, r0
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e7f0      	b.n	8005bf4 <_vfiprintf_r+0x1b8>
 8005c12:	ab03      	add	r3, sp, #12
 8005c14:	9300      	str	r3, [sp, #0]
 8005c16:	462a      	mov	r2, r5
 8005c18:	4b12      	ldr	r3, [pc, #72]	@ (8005c64 <_vfiprintf_r+0x228>)
 8005c1a:	a904      	add	r1, sp, #16
 8005c1c:	4630      	mov	r0, r6
 8005c1e:	f3af 8000 	nop.w
 8005c22:	4607      	mov	r7, r0
 8005c24:	1c78      	adds	r0, r7, #1
 8005c26:	d1d6      	bne.n	8005bd6 <_vfiprintf_r+0x19a>
 8005c28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c2a:	07d9      	lsls	r1, r3, #31
 8005c2c:	d405      	bmi.n	8005c3a <_vfiprintf_r+0x1fe>
 8005c2e:	89ab      	ldrh	r3, [r5, #12]
 8005c30:	059a      	lsls	r2, r3, #22
 8005c32:	d402      	bmi.n	8005c3a <_vfiprintf_r+0x1fe>
 8005c34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c36:	f7ff fe8b 	bl	8005950 <__retarget_lock_release_recursive>
 8005c3a:	89ab      	ldrh	r3, [r5, #12]
 8005c3c:	065b      	lsls	r3, r3, #25
 8005c3e:	f53f af1f 	bmi.w	8005a80 <_vfiprintf_r+0x44>
 8005c42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005c44:	e71e      	b.n	8005a84 <_vfiprintf_r+0x48>
 8005c46:	ab03      	add	r3, sp, #12
 8005c48:	9300      	str	r3, [sp, #0]
 8005c4a:	462a      	mov	r2, r5
 8005c4c:	4b05      	ldr	r3, [pc, #20]	@ (8005c64 <_vfiprintf_r+0x228>)
 8005c4e:	a904      	add	r1, sp, #16
 8005c50:	4630      	mov	r0, r6
 8005c52:	f000 f879 	bl	8005d48 <_printf_i>
 8005c56:	e7e4      	b.n	8005c22 <_vfiprintf_r+0x1e6>
 8005c58:	08006e38 	.word	0x08006e38
 8005c5c:	08006e42 	.word	0x08006e42
 8005c60:	00000000 	.word	0x00000000
 8005c64:	08005a17 	.word	0x08005a17
 8005c68:	08006e3e 	.word	0x08006e3e

08005c6c <_printf_common>:
 8005c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c70:	4616      	mov	r6, r2
 8005c72:	4698      	mov	r8, r3
 8005c74:	688a      	ldr	r2, [r1, #8]
 8005c76:	690b      	ldr	r3, [r1, #16]
 8005c78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	bfb8      	it	lt
 8005c80:	4613      	movlt	r3, r2
 8005c82:	6033      	str	r3, [r6, #0]
 8005c84:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005c88:	4607      	mov	r7, r0
 8005c8a:	460c      	mov	r4, r1
 8005c8c:	b10a      	cbz	r2, 8005c92 <_printf_common+0x26>
 8005c8e:	3301      	adds	r3, #1
 8005c90:	6033      	str	r3, [r6, #0]
 8005c92:	6823      	ldr	r3, [r4, #0]
 8005c94:	0699      	lsls	r1, r3, #26
 8005c96:	bf42      	ittt	mi
 8005c98:	6833      	ldrmi	r3, [r6, #0]
 8005c9a:	3302      	addmi	r3, #2
 8005c9c:	6033      	strmi	r3, [r6, #0]
 8005c9e:	6825      	ldr	r5, [r4, #0]
 8005ca0:	f015 0506 	ands.w	r5, r5, #6
 8005ca4:	d106      	bne.n	8005cb4 <_printf_common+0x48>
 8005ca6:	f104 0a19 	add.w	sl, r4, #25
 8005caa:	68e3      	ldr	r3, [r4, #12]
 8005cac:	6832      	ldr	r2, [r6, #0]
 8005cae:	1a9b      	subs	r3, r3, r2
 8005cb0:	42ab      	cmp	r3, r5
 8005cb2:	dc26      	bgt.n	8005d02 <_printf_common+0x96>
 8005cb4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005cb8:	6822      	ldr	r2, [r4, #0]
 8005cba:	3b00      	subs	r3, #0
 8005cbc:	bf18      	it	ne
 8005cbe:	2301      	movne	r3, #1
 8005cc0:	0692      	lsls	r2, r2, #26
 8005cc2:	d42b      	bmi.n	8005d1c <_printf_common+0xb0>
 8005cc4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005cc8:	4641      	mov	r1, r8
 8005cca:	4638      	mov	r0, r7
 8005ccc:	47c8      	blx	r9
 8005cce:	3001      	adds	r0, #1
 8005cd0:	d01e      	beq.n	8005d10 <_printf_common+0xa4>
 8005cd2:	6823      	ldr	r3, [r4, #0]
 8005cd4:	6922      	ldr	r2, [r4, #16]
 8005cd6:	f003 0306 	and.w	r3, r3, #6
 8005cda:	2b04      	cmp	r3, #4
 8005cdc:	bf02      	ittt	eq
 8005cde:	68e5      	ldreq	r5, [r4, #12]
 8005ce0:	6833      	ldreq	r3, [r6, #0]
 8005ce2:	1aed      	subeq	r5, r5, r3
 8005ce4:	68a3      	ldr	r3, [r4, #8]
 8005ce6:	bf0c      	ite	eq
 8005ce8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cec:	2500      	movne	r5, #0
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	bfc4      	itt	gt
 8005cf2:	1a9b      	subgt	r3, r3, r2
 8005cf4:	18ed      	addgt	r5, r5, r3
 8005cf6:	2600      	movs	r6, #0
 8005cf8:	341a      	adds	r4, #26
 8005cfa:	42b5      	cmp	r5, r6
 8005cfc:	d11a      	bne.n	8005d34 <_printf_common+0xc8>
 8005cfe:	2000      	movs	r0, #0
 8005d00:	e008      	b.n	8005d14 <_printf_common+0xa8>
 8005d02:	2301      	movs	r3, #1
 8005d04:	4652      	mov	r2, sl
 8005d06:	4641      	mov	r1, r8
 8005d08:	4638      	mov	r0, r7
 8005d0a:	47c8      	blx	r9
 8005d0c:	3001      	adds	r0, #1
 8005d0e:	d103      	bne.n	8005d18 <_printf_common+0xac>
 8005d10:	f04f 30ff 	mov.w	r0, #4294967295
 8005d14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d18:	3501      	adds	r5, #1
 8005d1a:	e7c6      	b.n	8005caa <_printf_common+0x3e>
 8005d1c:	18e1      	adds	r1, r4, r3
 8005d1e:	1c5a      	adds	r2, r3, #1
 8005d20:	2030      	movs	r0, #48	@ 0x30
 8005d22:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005d26:	4422      	add	r2, r4
 8005d28:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005d2c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005d30:	3302      	adds	r3, #2
 8005d32:	e7c7      	b.n	8005cc4 <_printf_common+0x58>
 8005d34:	2301      	movs	r3, #1
 8005d36:	4622      	mov	r2, r4
 8005d38:	4641      	mov	r1, r8
 8005d3a:	4638      	mov	r0, r7
 8005d3c:	47c8      	blx	r9
 8005d3e:	3001      	adds	r0, #1
 8005d40:	d0e6      	beq.n	8005d10 <_printf_common+0xa4>
 8005d42:	3601      	adds	r6, #1
 8005d44:	e7d9      	b.n	8005cfa <_printf_common+0x8e>
	...

08005d48 <_printf_i>:
 8005d48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d4c:	7e0f      	ldrb	r7, [r1, #24]
 8005d4e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005d50:	2f78      	cmp	r7, #120	@ 0x78
 8005d52:	4691      	mov	r9, r2
 8005d54:	4680      	mov	r8, r0
 8005d56:	460c      	mov	r4, r1
 8005d58:	469a      	mov	sl, r3
 8005d5a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005d5e:	d807      	bhi.n	8005d70 <_printf_i+0x28>
 8005d60:	2f62      	cmp	r7, #98	@ 0x62
 8005d62:	d80a      	bhi.n	8005d7a <_printf_i+0x32>
 8005d64:	2f00      	cmp	r7, #0
 8005d66:	f000 80d2 	beq.w	8005f0e <_printf_i+0x1c6>
 8005d6a:	2f58      	cmp	r7, #88	@ 0x58
 8005d6c:	f000 80b9 	beq.w	8005ee2 <_printf_i+0x19a>
 8005d70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d74:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005d78:	e03a      	b.n	8005df0 <_printf_i+0xa8>
 8005d7a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005d7e:	2b15      	cmp	r3, #21
 8005d80:	d8f6      	bhi.n	8005d70 <_printf_i+0x28>
 8005d82:	a101      	add	r1, pc, #4	@ (adr r1, 8005d88 <_printf_i+0x40>)
 8005d84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d88:	08005de1 	.word	0x08005de1
 8005d8c:	08005df5 	.word	0x08005df5
 8005d90:	08005d71 	.word	0x08005d71
 8005d94:	08005d71 	.word	0x08005d71
 8005d98:	08005d71 	.word	0x08005d71
 8005d9c:	08005d71 	.word	0x08005d71
 8005da0:	08005df5 	.word	0x08005df5
 8005da4:	08005d71 	.word	0x08005d71
 8005da8:	08005d71 	.word	0x08005d71
 8005dac:	08005d71 	.word	0x08005d71
 8005db0:	08005d71 	.word	0x08005d71
 8005db4:	08005ef5 	.word	0x08005ef5
 8005db8:	08005e1f 	.word	0x08005e1f
 8005dbc:	08005eaf 	.word	0x08005eaf
 8005dc0:	08005d71 	.word	0x08005d71
 8005dc4:	08005d71 	.word	0x08005d71
 8005dc8:	08005f17 	.word	0x08005f17
 8005dcc:	08005d71 	.word	0x08005d71
 8005dd0:	08005e1f 	.word	0x08005e1f
 8005dd4:	08005d71 	.word	0x08005d71
 8005dd8:	08005d71 	.word	0x08005d71
 8005ddc:	08005eb7 	.word	0x08005eb7
 8005de0:	6833      	ldr	r3, [r6, #0]
 8005de2:	1d1a      	adds	r2, r3, #4
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	6032      	str	r2, [r6, #0]
 8005de8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005dec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005df0:	2301      	movs	r3, #1
 8005df2:	e09d      	b.n	8005f30 <_printf_i+0x1e8>
 8005df4:	6833      	ldr	r3, [r6, #0]
 8005df6:	6820      	ldr	r0, [r4, #0]
 8005df8:	1d19      	adds	r1, r3, #4
 8005dfa:	6031      	str	r1, [r6, #0]
 8005dfc:	0606      	lsls	r6, r0, #24
 8005dfe:	d501      	bpl.n	8005e04 <_printf_i+0xbc>
 8005e00:	681d      	ldr	r5, [r3, #0]
 8005e02:	e003      	b.n	8005e0c <_printf_i+0xc4>
 8005e04:	0645      	lsls	r5, r0, #25
 8005e06:	d5fb      	bpl.n	8005e00 <_printf_i+0xb8>
 8005e08:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005e0c:	2d00      	cmp	r5, #0
 8005e0e:	da03      	bge.n	8005e18 <_printf_i+0xd0>
 8005e10:	232d      	movs	r3, #45	@ 0x2d
 8005e12:	426d      	negs	r5, r5
 8005e14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e18:	4859      	ldr	r0, [pc, #356]	@ (8005f80 <_printf_i+0x238>)
 8005e1a:	230a      	movs	r3, #10
 8005e1c:	e011      	b.n	8005e42 <_printf_i+0xfa>
 8005e1e:	6821      	ldr	r1, [r4, #0]
 8005e20:	6833      	ldr	r3, [r6, #0]
 8005e22:	0608      	lsls	r0, r1, #24
 8005e24:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e28:	d402      	bmi.n	8005e30 <_printf_i+0xe8>
 8005e2a:	0649      	lsls	r1, r1, #25
 8005e2c:	bf48      	it	mi
 8005e2e:	b2ad      	uxthmi	r5, r5
 8005e30:	2f6f      	cmp	r7, #111	@ 0x6f
 8005e32:	4853      	ldr	r0, [pc, #332]	@ (8005f80 <_printf_i+0x238>)
 8005e34:	6033      	str	r3, [r6, #0]
 8005e36:	bf14      	ite	ne
 8005e38:	230a      	movne	r3, #10
 8005e3a:	2308      	moveq	r3, #8
 8005e3c:	2100      	movs	r1, #0
 8005e3e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005e42:	6866      	ldr	r6, [r4, #4]
 8005e44:	60a6      	str	r6, [r4, #8]
 8005e46:	2e00      	cmp	r6, #0
 8005e48:	bfa2      	ittt	ge
 8005e4a:	6821      	ldrge	r1, [r4, #0]
 8005e4c:	f021 0104 	bicge.w	r1, r1, #4
 8005e50:	6021      	strge	r1, [r4, #0]
 8005e52:	b90d      	cbnz	r5, 8005e58 <_printf_i+0x110>
 8005e54:	2e00      	cmp	r6, #0
 8005e56:	d04b      	beq.n	8005ef0 <_printf_i+0x1a8>
 8005e58:	4616      	mov	r6, r2
 8005e5a:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e5e:	fb03 5711 	mls	r7, r3, r1, r5
 8005e62:	5dc7      	ldrb	r7, [r0, r7]
 8005e64:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e68:	462f      	mov	r7, r5
 8005e6a:	42bb      	cmp	r3, r7
 8005e6c:	460d      	mov	r5, r1
 8005e6e:	d9f4      	bls.n	8005e5a <_printf_i+0x112>
 8005e70:	2b08      	cmp	r3, #8
 8005e72:	d10b      	bne.n	8005e8c <_printf_i+0x144>
 8005e74:	6823      	ldr	r3, [r4, #0]
 8005e76:	07df      	lsls	r7, r3, #31
 8005e78:	d508      	bpl.n	8005e8c <_printf_i+0x144>
 8005e7a:	6923      	ldr	r3, [r4, #16]
 8005e7c:	6861      	ldr	r1, [r4, #4]
 8005e7e:	4299      	cmp	r1, r3
 8005e80:	bfde      	ittt	le
 8005e82:	2330      	movle	r3, #48	@ 0x30
 8005e84:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e88:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005e8c:	1b92      	subs	r2, r2, r6
 8005e8e:	6122      	str	r2, [r4, #16]
 8005e90:	f8cd a000 	str.w	sl, [sp]
 8005e94:	464b      	mov	r3, r9
 8005e96:	aa03      	add	r2, sp, #12
 8005e98:	4621      	mov	r1, r4
 8005e9a:	4640      	mov	r0, r8
 8005e9c:	f7ff fee6 	bl	8005c6c <_printf_common>
 8005ea0:	3001      	adds	r0, #1
 8005ea2:	d14a      	bne.n	8005f3a <_printf_i+0x1f2>
 8005ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ea8:	b004      	add	sp, #16
 8005eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eae:	6823      	ldr	r3, [r4, #0]
 8005eb0:	f043 0320 	orr.w	r3, r3, #32
 8005eb4:	6023      	str	r3, [r4, #0]
 8005eb6:	4833      	ldr	r0, [pc, #204]	@ (8005f84 <_printf_i+0x23c>)
 8005eb8:	2778      	movs	r7, #120	@ 0x78
 8005eba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005ebe:	6823      	ldr	r3, [r4, #0]
 8005ec0:	6831      	ldr	r1, [r6, #0]
 8005ec2:	061f      	lsls	r7, r3, #24
 8005ec4:	f851 5b04 	ldr.w	r5, [r1], #4
 8005ec8:	d402      	bmi.n	8005ed0 <_printf_i+0x188>
 8005eca:	065f      	lsls	r7, r3, #25
 8005ecc:	bf48      	it	mi
 8005ece:	b2ad      	uxthmi	r5, r5
 8005ed0:	6031      	str	r1, [r6, #0]
 8005ed2:	07d9      	lsls	r1, r3, #31
 8005ed4:	bf44      	itt	mi
 8005ed6:	f043 0320 	orrmi.w	r3, r3, #32
 8005eda:	6023      	strmi	r3, [r4, #0]
 8005edc:	b11d      	cbz	r5, 8005ee6 <_printf_i+0x19e>
 8005ede:	2310      	movs	r3, #16
 8005ee0:	e7ac      	b.n	8005e3c <_printf_i+0xf4>
 8005ee2:	4827      	ldr	r0, [pc, #156]	@ (8005f80 <_printf_i+0x238>)
 8005ee4:	e7e9      	b.n	8005eba <_printf_i+0x172>
 8005ee6:	6823      	ldr	r3, [r4, #0]
 8005ee8:	f023 0320 	bic.w	r3, r3, #32
 8005eec:	6023      	str	r3, [r4, #0]
 8005eee:	e7f6      	b.n	8005ede <_printf_i+0x196>
 8005ef0:	4616      	mov	r6, r2
 8005ef2:	e7bd      	b.n	8005e70 <_printf_i+0x128>
 8005ef4:	6833      	ldr	r3, [r6, #0]
 8005ef6:	6825      	ldr	r5, [r4, #0]
 8005ef8:	6961      	ldr	r1, [r4, #20]
 8005efa:	1d18      	adds	r0, r3, #4
 8005efc:	6030      	str	r0, [r6, #0]
 8005efe:	062e      	lsls	r6, r5, #24
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	d501      	bpl.n	8005f08 <_printf_i+0x1c0>
 8005f04:	6019      	str	r1, [r3, #0]
 8005f06:	e002      	b.n	8005f0e <_printf_i+0x1c6>
 8005f08:	0668      	lsls	r0, r5, #25
 8005f0a:	d5fb      	bpl.n	8005f04 <_printf_i+0x1bc>
 8005f0c:	8019      	strh	r1, [r3, #0]
 8005f0e:	2300      	movs	r3, #0
 8005f10:	6123      	str	r3, [r4, #16]
 8005f12:	4616      	mov	r6, r2
 8005f14:	e7bc      	b.n	8005e90 <_printf_i+0x148>
 8005f16:	6833      	ldr	r3, [r6, #0]
 8005f18:	1d1a      	adds	r2, r3, #4
 8005f1a:	6032      	str	r2, [r6, #0]
 8005f1c:	681e      	ldr	r6, [r3, #0]
 8005f1e:	6862      	ldr	r2, [r4, #4]
 8005f20:	2100      	movs	r1, #0
 8005f22:	4630      	mov	r0, r6
 8005f24:	f7fa f974 	bl	8000210 <memchr>
 8005f28:	b108      	cbz	r0, 8005f2e <_printf_i+0x1e6>
 8005f2a:	1b80      	subs	r0, r0, r6
 8005f2c:	6060      	str	r0, [r4, #4]
 8005f2e:	6863      	ldr	r3, [r4, #4]
 8005f30:	6123      	str	r3, [r4, #16]
 8005f32:	2300      	movs	r3, #0
 8005f34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f38:	e7aa      	b.n	8005e90 <_printf_i+0x148>
 8005f3a:	6923      	ldr	r3, [r4, #16]
 8005f3c:	4632      	mov	r2, r6
 8005f3e:	4649      	mov	r1, r9
 8005f40:	4640      	mov	r0, r8
 8005f42:	47d0      	blx	sl
 8005f44:	3001      	adds	r0, #1
 8005f46:	d0ad      	beq.n	8005ea4 <_printf_i+0x15c>
 8005f48:	6823      	ldr	r3, [r4, #0]
 8005f4a:	079b      	lsls	r3, r3, #30
 8005f4c:	d413      	bmi.n	8005f76 <_printf_i+0x22e>
 8005f4e:	68e0      	ldr	r0, [r4, #12]
 8005f50:	9b03      	ldr	r3, [sp, #12]
 8005f52:	4298      	cmp	r0, r3
 8005f54:	bfb8      	it	lt
 8005f56:	4618      	movlt	r0, r3
 8005f58:	e7a6      	b.n	8005ea8 <_printf_i+0x160>
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	4632      	mov	r2, r6
 8005f5e:	4649      	mov	r1, r9
 8005f60:	4640      	mov	r0, r8
 8005f62:	47d0      	blx	sl
 8005f64:	3001      	adds	r0, #1
 8005f66:	d09d      	beq.n	8005ea4 <_printf_i+0x15c>
 8005f68:	3501      	adds	r5, #1
 8005f6a:	68e3      	ldr	r3, [r4, #12]
 8005f6c:	9903      	ldr	r1, [sp, #12]
 8005f6e:	1a5b      	subs	r3, r3, r1
 8005f70:	42ab      	cmp	r3, r5
 8005f72:	dcf2      	bgt.n	8005f5a <_printf_i+0x212>
 8005f74:	e7eb      	b.n	8005f4e <_printf_i+0x206>
 8005f76:	2500      	movs	r5, #0
 8005f78:	f104 0619 	add.w	r6, r4, #25
 8005f7c:	e7f5      	b.n	8005f6a <_printf_i+0x222>
 8005f7e:	bf00      	nop
 8005f80:	08006e49 	.word	0x08006e49
 8005f84:	08006e5a 	.word	0x08006e5a

08005f88 <__sflush_r>:
 8005f88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f90:	0716      	lsls	r6, r2, #28
 8005f92:	4605      	mov	r5, r0
 8005f94:	460c      	mov	r4, r1
 8005f96:	d454      	bmi.n	8006042 <__sflush_r+0xba>
 8005f98:	684b      	ldr	r3, [r1, #4]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	dc02      	bgt.n	8005fa4 <__sflush_r+0x1c>
 8005f9e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	dd48      	ble.n	8006036 <__sflush_r+0xae>
 8005fa4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005fa6:	2e00      	cmp	r6, #0
 8005fa8:	d045      	beq.n	8006036 <__sflush_r+0xae>
 8005faa:	2300      	movs	r3, #0
 8005fac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005fb0:	682f      	ldr	r7, [r5, #0]
 8005fb2:	6a21      	ldr	r1, [r4, #32]
 8005fb4:	602b      	str	r3, [r5, #0]
 8005fb6:	d030      	beq.n	800601a <__sflush_r+0x92>
 8005fb8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005fba:	89a3      	ldrh	r3, [r4, #12]
 8005fbc:	0759      	lsls	r1, r3, #29
 8005fbe:	d505      	bpl.n	8005fcc <__sflush_r+0x44>
 8005fc0:	6863      	ldr	r3, [r4, #4]
 8005fc2:	1ad2      	subs	r2, r2, r3
 8005fc4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005fc6:	b10b      	cbz	r3, 8005fcc <__sflush_r+0x44>
 8005fc8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005fca:	1ad2      	subs	r2, r2, r3
 8005fcc:	2300      	movs	r3, #0
 8005fce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005fd0:	6a21      	ldr	r1, [r4, #32]
 8005fd2:	4628      	mov	r0, r5
 8005fd4:	47b0      	blx	r6
 8005fd6:	1c43      	adds	r3, r0, #1
 8005fd8:	89a3      	ldrh	r3, [r4, #12]
 8005fda:	d106      	bne.n	8005fea <__sflush_r+0x62>
 8005fdc:	6829      	ldr	r1, [r5, #0]
 8005fde:	291d      	cmp	r1, #29
 8005fe0:	d82b      	bhi.n	800603a <__sflush_r+0xb2>
 8005fe2:	4a2a      	ldr	r2, [pc, #168]	@ (800608c <__sflush_r+0x104>)
 8005fe4:	410a      	asrs	r2, r1
 8005fe6:	07d6      	lsls	r6, r2, #31
 8005fe8:	d427      	bmi.n	800603a <__sflush_r+0xb2>
 8005fea:	2200      	movs	r2, #0
 8005fec:	6062      	str	r2, [r4, #4]
 8005fee:	04d9      	lsls	r1, r3, #19
 8005ff0:	6922      	ldr	r2, [r4, #16]
 8005ff2:	6022      	str	r2, [r4, #0]
 8005ff4:	d504      	bpl.n	8006000 <__sflush_r+0x78>
 8005ff6:	1c42      	adds	r2, r0, #1
 8005ff8:	d101      	bne.n	8005ffe <__sflush_r+0x76>
 8005ffa:	682b      	ldr	r3, [r5, #0]
 8005ffc:	b903      	cbnz	r3, 8006000 <__sflush_r+0x78>
 8005ffe:	6560      	str	r0, [r4, #84]	@ 0x54
 8006000:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006002:	602f      	str	r7, [r5, #0]
 8006004:	b1b9      	cbz	r1, 8006036 <__sflush_r+0xae>
 8006006:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800600a:	4299      	cmp	r1, r3
 800600c:	d002      	beq.n	8006014 <__sflush_r+0x8c>
 800600e:	4628      	mov	r0, r5
 8006010:	f7ff fca0 	bl	8005954 <_free_r>
 8006014:	2300      	movs	r3, #0
 8006016:	6363      	str	r3, [r4, #52]	@ 0x34
 8006018:	e00d      	b.n	8006036 <__sflush_r+0xae>
 800601a:	2301      	movs	r3, #1
 800601c:	4628      	mov	r0, r5
 800601e:	47b0      	blx	r6
 8006020:	4602      	mov	r2, r0
 8006022:	1c50      	adds	r0, r2, #1
 8006024:	d1c9      	bne.n	8005fba <__sflush_r+0x32>
 8006026:	682b      	ldr	r3, [r5, #0]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d0c6      	beq.n	8005fba <__sflush_r+0x32>
 800602c:	2b1d      	cmp	r3, #29
 800602e:	d001      	beq.n	8006034 <__sflush_r+0xac>
 8006030:	2b16      	cmp	r3, #22
 8006032:	d11e      	bne.n	8006072 <__sflush_r+0xea>
 8006034:	602f      	str	r7, [r5, #0]
 8006036:	2000      	movs	r0, #0
 8006038:	e022      	b.n	8006080 <__sflush_r+0xf8>
 800603a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800603e:	b21b      	sxth	r3, r3
 8006040:	e01b      	b.n	800607a <__sflush_r+0xf2>
 8006042:	690f      	ldr	r7, [r1, #16]
 8006044:	2f00      	cmp	r7, #0
 8006046:	d0f6      	beq.n	8006036 <__sflush_r+0xae>
 8006048:	0793      	lsls	r3, r2, #30
 800604a:	680e      	ldr	r6, [r1, #0]
 800604c:	bf08      	it	eq
 800604e:	694b      	ldreq	r3, [r1, #20]
 8006050:	600f      	str	r7, [r1, #0]
 8006052:	bf18      	it	ne
 8006054:	2300      	movne	r3, #0
 8006056:	eba6 0807 	sub.w	r8, r6, r7
 800605a:	608b      	str	r3, [r1, #8]
 800605c:	f1b8 0f00 	cmp.w	r8, #0
 8006060:	dde9      	ble.n	8006036 <__sflush_r+0xae>
 8006062:	6a21      	ldr	r1, [r4, #32]
 8006064:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006066:	4643      	mov	r3, r8
 8006068:	463a      	mov	r2, r7
 800606a:	4628      	mov	r0, r5
 800606c:	47b0      	blx	r6
 800606e:	2800      	cmp	r0, #0
 8006070:	dc08      	bgt.n	8006084 <__sflush_r+0xfc>
 8006072:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006076:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800607a:	81a3      	strh	r3, [r4, #12]
 800607c:	f04f 30ff 	mov.w	r0, #4294967295
 8006080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006084:	4407      	add	r7, r0
 8006086:	eba8 0800 	sub.w	r8, r8, r0
 800608a:	e7e7      	b.n	800605c <__sflush_r+0xd4>
 800608c:	dfbffffe 	.word	0xdfbffffe

08006090 <_fflush_r>:
 8006090:	b538      	push	{r3, r4, r5, lr}
 8006092:	690b      	ldr	r3, [r1, #16]
 8006094:	4605      	mov	r5, r0
 8006096:	460c      	mov	r4, r1
 8006098:	b913      	cbnz	r3, 80060a0 <_fflush_r+0x10>
 800609a:	2500      	movs	r5, #0
 800609c:	4628      	mov	r0, r5
 800609e:	bd38      	pop	{r3, r4, r5, pc}
 80060a0:	b118      	cbz	r0, 80060aa <_fflush_r+0x1a>
 80060a2:	6a03      	ldr	r3, [r0, #32]
 80060a4:	b90b      	cbnz	r3, 80060aa <_fflush_r+0x1a>
 80060a6:	f7ff fb3d 	bl	8005724 <__sinit>
 80060aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d0f3      	beq.n	800609a <_fflush_r+0xa>
 80060b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80060b4:	07d0      	lsls	r0, r2, #31
 80060b6:	d404      	bmi.n	80060c2 <_fflush_r+0x32>
 80060b8:	0599      	lsls	r1, r3, #22
 80060ba:	d402      	bmi.n	80060c2 <_fflush_r+0x32>
 80060bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060be:	f7ff fc46 	bl	800594e <__retarget_lock_acquire_recursive>
 80060c2:	4628      	mov	r0, r5
 80060c4:	4621      	mov	r1, r4
 80060c6:	f7ff ff5f 	bl	8005f88 <__sflush_r>
 80060ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80060cc:	07da      	lsls	r2, r3, #31
 80060ce:	4605      	mov	r5, r0
 80060d0:	d4e4      	bmi.n	800609c <_fflush_r+0xc>
 80060d2:	89a3      	ldrh	r3, [r4, #12]
 80060d4:	059b      	lsls	r3, r3, #22
 80060d6:	d4e1      	bmi.n	800609c <_fflush_r+0xc>
 80060d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060da:	f7ff fc39 	bl	8005950 <__retarget_lock_release_recursive>
 80060de:	e7dd      	b.n	800609c <_fflush_r+0xc>

080060e0 <__swbuf_r>:
 80060e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060e2:	460e      	mov	r6, r1
 80060e4:	4614      	mov	r4, r2
 80060e6:	4605      	mov	r5, r0
 80060e8:	b118      	cbz	r0, 80060f2 <__swbuf_r+0x12>
 80060ea:	6a03      	ldr	r3, [r0, #32]
 80060ec:	b90b      	cbnz	r3, 80060f2 <__swbuf_r+0x12>
 80060ee:	f7ff fb19 	bl	8005724 <__sinit>
 80060f2:	69a3      	ldr	r3, [r4, #24]
 80060f4:	60a3      	str	r3, [r4, #8]
 80060f6:	89a3      	ldrh	r3, [r4, #12]
 80060f8:	071a      	lsls	r2, r3, #28
 80060fa:	d501      	bpl.n	8006100 <__swbuf_r+0x20>
 80060fc:	6923      	ldr	r3, [r4, #16]
 80060fe:	b943      	cbnz	r3, 8006112 <__swbuf_r+0x32>
 8006100:	4621      	mov	r1, r4
 8006102:	4628      	mov	r0, r5
 8006104:	f000 f82a 	bl	800615c <__swsetup_r>
 8006108:	b118      	cbz	r0, 8006112 <__swbuf_r+0x32>
 800610a:	f04f 37ff 	mov.w	r7, #4294967295
 800610e:	4638      	mov	r0, r7
 8006110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006112:	6823      	ldr	r3, [r4, #0]
 8006114:	6922      	ldr	r2, [r4, #16]
 8006116:	1a98      	subs	r0, r3, r2
 8006118:	6963      	ldr	r3, [r4, #20]
 800611a:	b2f6      	uxtb	r6, r6
 800611c:	4283      	cmp	r3, r0
 800611e:	4637      	mov	r7, r6
 8006120:	dc05      	bgt.n	800612e <__swbuf_r+0x4e>
 8006122:	4621      	mov	r1, r4
 8006124:	4628      	mov	r0, r5
 8006126:	f7ff ffb3 	bl	8006090 <_fflush_r>
 800612a:	2800      	cmp	r0, #0
 800612c:	d1ed      	bne.n	800610a <__swbuf_r+0x2a>
 800612e:	68a3      	ldr	r3, [r4, #8]
 8006130:	3b01      	subs	r3, #1
 8006132:	60a3      	str	r3, [r4, #8]
 8006134:	6823      	ldr	r3, [r4, #0]
 8006136:	1c5a      	adds	r2, r3, #1
 8006138:	6022      	str	r2, [r4, #0]
 800613a:	701e      	strb	r6, [r3, #0]
 800613c:	6962      	ldr	r2, [r4, #20]
 800613e:	1c43      	adds	r3, r0, #1
 8006140:	429a      	cmp	r2, r3
 8006142:	d004      	beq.n	800614e <__swbuf_r+0x6e>
 8006144:	89a3      	ldrh	r3, [r4, #12]
 8006146:	07db      	lsls	r3, r3, #31
 8006148:	d5e1      	bpl.n	800610e <__swbuf_r+0x2e>
 800614a:	2e0a      	cmp	r6, #10
 800614c:	d1df      	bne.n	800610e <__swbuf_r+0x2e>
 800614e:	4621      	mov	r1, r4
 8006150:	4628      	mov	r0, r5
 8006152:	f7ff ff9d 	bl	8006090 <_fflush_r>
 8006156:	2800      	cmp	r0, #0
 8006158:	d0d9      	beq.n	800610e <__swbuf_r+0x2e>
 800615a:	e7d6      	b.n	800610a <__swbuf_r+0x2a>

0800615c <__swsetup_r>:
 800615c:	b538      	push	{r3, r4, r5, lr}
 800615e:	4b29      	ldr	r3, [pc, #164]	@ (8006204 <__swsetup_r+0xa8>)
 8006160:	4605      	mov	r5, r0
 8006162:	6818      	ldr	r0, [r3, #0]
 8006164:	460c      	mov	r4, r1
 8006166:	b118      	cbz	r0, 8006170 <__swsetup_r+0x14>
 8006168:	6a03      	ldr	r3, [r0, #32]
 800616a:	b90b      	cbnz	r3, 8006170 <__swsetup_r+0x14>
 800616c:	f7ff fada 	bl	8005724 <__sinit>
 8006170:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006174:	0719      	lsls	r1, r3, #28
 8006176:	d422      	bmi.n	80061be <__swsetup_r+0x62>
 8006178:	06da      	lsls	r2, r3, #27
 800617a:	d407      	bmi.n	800618c <__swsetup_r+0x30>
 800617c:	2209      	movs	r2, #9
 800617e:	602a      	str	r2, [r5, #0]
 8006180:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006184:	81a3      	strh	r3, [r4, #12]
 8006186:	f04f 30ff 	mov.w	r0, #4294967295
 800618a:	e033      	b.n	80061f4 <__swsetup_r+0x98>
 800618c:	0758      	lsls	r0, r3, #29
 800618e:	d512      	bpl.n	80061b6 <__swsetup_r+0x5a>
 8006190:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006192:	b141      	cbz	r1, 80061a6 <__swsetup_r+0x4a>
 8006194:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006198:	4299      	cmp	r1, r3
 800619a:	d002      	beq.n	80061a2 <__swsetup_r+0x46>
 800619c:	4628      	mov	r0, r5
 800619e:	f7ff fbd9 	bl	8005954 <_free_r>
 80061a2:	2300      	movs	r3, #0
 80061a4:	6363      	str	r3, [r4, #52]	@ 0x34
 80061a6:	89a3      	ldrh	r3, [r4, #12]
 80061a8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80061ac:	81a3      	strh	r3, [r4, #12]
 80061ae:	2300      	movs	r3, #0
 80061b0:	6063      	str	r3, [r4, #4]
 80061b2:	6923      	ldr	r3, [r4, #16]
 80061b4:	6023      	str	r3, [r4, #0]
 80061b6:	89a3      	ldrh	r3, [r4, #12]
 80061b8:	f043 0308 	orr.w	r3, r3, #8
 80061bc:	81a3      	strh	r3, [r4, #12]
 80061be:	6923      	ldr	r3, [r4, #16]
 80061c0:	b94b      	cbnz	r3, 80061d6 <__swsetup_r+0x7a>
 80061c2:	89a3      	ldrh	r3, [r4, #12]
 80061c4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80061c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061cc:	d003      	beq.n	80061d6 <__swsetup_r+0x7a>
 80061ce:	4621      	mov	r1, r4
 80061d0:	4628      	mov	r0, r5
 80061d2:	f000 f83f 	bl	8006254 <__smakebuf_r>
 80061d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061da:	f013 0201 	ands.w	r2, r3, #1
 80061de:	d00a      	beq.n	80061f6 <__swsetup_r+0x9a>
 80061e0:	2200      	movs	r2, #0
 80061e2:	60a2      	str	r2, [r4, #8]
 80061e4:	6962      	ldr	r2, [r4, #20]
 80061e6:	4252      	negs	r2, r2
 80061e8:	61a2      	str	r2, [r4, #24]
 80061ea:	6922      	ldr	r2, [r4, #16]
 80061ec:	b942      	cbnz	r2, 8006200 <__swsetup_r+0xa4>
 80061ee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80061f2:	d1c5      	bne.n	8006180 <__swsetup_r+0x24>
 80061f4:	bd38      	pop	{r3, r4, r5, pc}
 80061f6:	0799      	lsls	r1, r3, #30
 80061f8:	bf58      	it	pl
 80061fa:	6962      	ldrpl	r2, [r4, #20]
 80061fc:	60a2      	str	r2, [r4, #8]
 80061fe:	e7f4      	b.n	80061ea <__swsetup_r+0x8e>
 8006200:	2000      	movs	r0, #0
 8006202:	e7f7      	b.n	80061f4 <__swsetup_r+0x98>
 8006204:	20000418 	.word	0x20000418

08006208 <__swhatbuf_r>:
 8006208:	b570      	push	{r4, r5, r6, lr}
 800620a:	460c      	mov	r4, r1
 800620c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006210:	2900      	cmp	r1, #0
 8006212:	b096      	sub	sp, #88	@ 0x58
 8006214:	4615      	mov	r5, r2
 8006216:	461e      	mov	r6, r3
 8006218:	da0d      	bge.n	8006236 <__swhatbuf_r+0x2e>
 800621a:	89a3      	ldrh	r3, [r4, #12]
 800621c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006220:	f04f 0100 	mov.w	r1, #0
 8006224:	bf14      	ite	ne
 8006226:	2340      	movne	r3, #64	@ 0x40
 8006228:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800622c:	2000      	movs	r0, #0
 800622e:	6031      	str	r1, [r6, #0]
 8006230:	602b      	str	r3, [r5, #0]
 8006232:	b016      	add	sp, #88	@ 0x58
 8006234:	bd70      	pop	{r4, r5, r6, pc}
 8006236:	466a      	mov	r2, sp
 8006238:	f000 f848 	bl	80062cc <_fstat_r>
 800623c:	2800      	cmp	r0, #0
 800623e:	dbec      	blt.n	800621a <__swhatbuf_r+0x12>
 8006240:	9901      	ldr	r1, [sp, #4]
 8006242:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006246:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800624a:	4259      	negs	r1, r3
 800624c:	4159      	adcs	r1, r3
 800624e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006252:	e7eb      	b.n	800622c <__swhatbuf_r+0x24>

08006254 <__smakebuf_r>:
 8006254:	898b      	ldrh	r3, [r1, #12]
 8006256:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006258:	079d      	lsls	r5, r3, #30
 800625a:	4606      	mov	r6, r0
 800625c:	460c      	mov	r4, r1
 800625e:	d507      	bpl.n	8006270 <__smakebuf_r+0x1c>
 8006260:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006264:	6023      	str	r3, [r4, #0]
 8006266:	6123      	str	r3, [r4, #16]
 8006268:	2301      	movs	r3, #1
 800626a:	6163      	str	r3, [r4, #20]
 800626c:	b003      	add	sp, #12
 800626e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006270:	ab01      	add	r3, sp, #4
 8006272:	466a      	mov	r2, sp
 8006274:	f7ff ffc8 	bl	8006208 <__swhatbuf_r>
 8006278:	9f00      	ldr	r7, [sp, #0]
 800627a:	4605      	mov	r5, r0
 800627c:	4639      	mov	r1, r7
 800627e:	4630      	mov	r0, r6
 8006280:	f7ff f938 	bl	80054f4 <_malloc_r>
 8006284:	b948      	cbnz	r0, 800629a <__smakebuf_r+0x46>
 8006286:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800628a:	059a      	lsls	r2, r3, #22
 800628c:	d4ee      	bmi.n	800626c <__smakebuf_r+0x18>
 800628e:	f023 0303 	bic.w	r3, r3, #3
 8006292:	f043 0302 	orr.w	r3, r3, #2
 8006296:	81a3      	strh	r3, [r4, #12]
 8006298:	e7e2      	b.n	8006260 <__smakebuf_r+0xc>
 800629a:	89a3      	ldrh	r3, [r4, #12]
 800629c:	6020      	str	r0, [r4, #0]
 800629e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062a2:	81a3      	strh	r3, [r4, #12]
 80062a4:	9b01      	ldr	r3, [sp, #4]
 80062a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80062aa:	b15b      	cbz	r3, 80062c4 <__smakebuf_r+0x70>
 80062ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062b0:	4630      	mov	r0, r6
 80062b2:	f000 f81d 	bl	80062f0 <_isatty_r>
 80062b6:	b128      	cbz	r0, 80062c4 <__smakebuf_r+0x70>
 80062b8:	89a3      	ldrh	r3, [r4, #12]
 80062ba:	f023 0303 	bic.w	r3, r3, #3
 80062be:	f043 0301 	orr.w	r3, r3, #1
 80062c2:	81a3      	strh	r3, [r4, #12]
 80062c4:	89a3      	ldrh	r3, [r4, #12]
 80062c6:	431d      	orrs	r5, r3
 80062c8:	81a5      	strh	r5, [r4, #12]
 80062ca:	e7cf      	b.n	800626c <__smakebuf_r+0x18>

080062cc <_fstat_r>:
 80062cc:	b538      	push	{r3, r4, r5, lr}
 80062ce:	4d07      	ldr	r5, [pc, #28]	@ (80062ec <_fstat_r+0x20>)
 80062d0:	2300      	movs	r3, #0
 80062d2:	4604      	mov	r4, r0
 80062d4:	4608      	mov	r0, r1
 80062d6:	4611      	mov	r1, r2
 80062d8:	602b      	str	r3, [r5, #0]
 80062da:	f7fb ff2e 	bl	800213a <_fstat>
 80062de:	1c43      	adds	r3, r0, #1
 80062e0:	d102      	bne.n	80062e8 <_fstat_r+0x1c>
 80062e2:	682b      	ldr	r3, [r5, #0]
 80062e4:	b103      	cbz	r3, 80062e8 <_fstat_r+0x1c>
 80062e6:	6023      	str	r3, [r4, #0]
 80062e8:	bd38      	pop	{r3, r4, r5, pc}
 80062ea:	bf00      	nop
 80062ec:	20000a50 	.word	0x20000a50

080062f0 <_isatty_r>:
 80062f0:	b538      	push	{r3, r4, r5, lr}
 80062f2:	4d06      	ldr	r5, [pc, #24]	@ (800630c <_isatty_r+0x1c>)
 80062f4:	2300      	movs	r3, #0
 80062f6:	4604      	mov	r4, r0
 80062f8:	4608      	mov	r0, r1
 80062fa:	602b      	str	r3, [r5, #0]
 80062fc:	f7fb ff2d 	bl	800215a <_isatty>
 8006300:	1c43      	adds	r3, r0, #1
 8006302:	d102      	bne.n	800630a <_isatty_r+0x1a>
 8006304:	682b      	ldr	r3, [r5, #0]
 8006306:	b103      	cbz	r3, 800630a <_isatty_r+0x1a>
 8006308:	6023      	str	r3, [r4, #0]
 800630a:	bd38      	pop	{r3, r4, r5, pc}
 800630c:	20000a50 	.word	0x20000a50

08006310 <tanf>:
 8006310:	ee10 3a10 	vmov	r3, s0
 8006314:	b507      	push	{r0, r1, r2, lr}
 8006316:	4a12      	ldr	r2, [pc, #72]	@ (8006360 <tanf+0x50>)
 8006318:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800631c:	4293      	cmp	r3, r2
 800631e:	d807      	bhi.n	8006330 <tanf+0x20>
 8006320:	eddf 0a10 	vldr	s1, [pc, #64]	@ 8006364 <tanf+0x54>
 8006324:	2001      	movs	r0, #1
 8006326:	b003      	add	sp, #12
 8006328:	f85d eb04 	ldr.w	lr, [sp], #4
 800632c:	f000 b81c 	b.w	8006368 <__kernel_tanf>
 8006330:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8006334:	d304      	bcc.n	8006340 <tanf+0x30>
 8006336:	ee30 0a40 	vsub.f32	s0, s0, s0
 800633a:	b003      	add	sp, #12
 800633c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006340:	4668      	mov	r0, sp
 8006342:	f000 f8f1 	bl	8006528 <__ieee754_rem_pio2f>
 8006346:	0040      	lsls	r0, r0, #1
 8006348:	f000 0002 	and.w	r0, r0, #2
 800634c:	eddd 0a01 	vldr	s1, [sp, #4]
 8006350:	ed9d 0a00 	vldr	s0, [sp]
 8006354:	f1c0 0001 	rsb	r0, r0, #1
 8006358:	f000 f806 	bl	8006368 <__kernel_tanf>
 800635c:	e7ed      	b.n	800633a <tanf+0x2a>
 800635e:	bf00      	nop
 8006360:	3f490fda 	.word	0x3f490fda
 8006364:	00000000 	.word	0x00000000

08006368 <__kernel_tanf>:
 8006368:	b508      	push	{r3, lr}
 800636a:	ee10 3a10 	vmov	r3, s0
 800636e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006372:	f1b2 5f46 	cmp.w	r2, #830472192	@ 0x31800000
 8006376:	eef0 7a40 	vmov.f32	s15, s0
 800637a:	d217      	bcs.n	80063ac <__kernel_tanf+0x44>
 800637c:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8006380:	ee17 1a10 	vmov	r1, s14
 8006384:	bb41      	cbnz	r1, 80063d8 <__kernel_tanf+0x70>
 8006386:	1c43      	adds	r3, r0, #1
 8006388:	4313      	orrs	r3, r2
 800638a:	d108      	bne.n	800639e <__kernel_tanf+0x36>
 800638c:	f000 f9fc 	bl	8006788 <fabsf>
 8006390:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006394:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8006398:	eeb0 0a67 	vmov.f32	s0, s15
 800639c:	bd08      	pop	{r3, pc}
 800639e:	2801      	cmp	r0, #1
 80063a0:	d0fa      	beq.n	8006398 <__kernel_tanf+0x30>
 80063a2:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80063a6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80063aa:	e7f5      	b.n	8006398 <__kernel_tanf+0x30>
 80063ac:	494c      	ldr	r1, [pc, #304]	@ (80064e0 <__kernel_tanf+0x178>)
 80063ae:	428a      	cmp	r2, r1
 80063b0:	d312      	bcc.n	80063d8 <__kernel_tanf+0x70>
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 80064e4 <__kernel_tanf+0x17c>
 80063b8:	bfb8      	it	lt
 80063ba:	eef1 7a40 	vneglt.f32	s15, s0
 80063be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80063c2:	eddf 7a49 	vldr	s15, [pc, #292]	@ 80064e8 <__kernel_tanf+0x180>
 80063c6:	bfb8      	it	lt
 80063c8:	eef1 0a60 	vneglt.f32	s1, s1
 80063cc:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80063d0:	eddf 0a46 	vldr	s1, [pc, #280]	@ 80064ec <__kernel_tanf+0x184>
 80063d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80063d8:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80063dc:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80064f0 <__kernel_tanf+0x188>
 80063e0:	ed9f 6a44 	vldr	s12, [pc, #272]	@ 80064f4 <__kernel_tanf+0x18c>
 80063e4:	ed9f 5a44 	vldr	s10, [pc, #272]	@ 80064f8 <__kernel_tanf+0x190>
 80063e8:	493d      	ldr	r1, [pc, #244]	@ (80064e0 <__kernel_tanf+0x178>)
 80063ea:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80063ee:	428a      	cmp	r2, r1
 80063f0:	eea7 6a25 	vfma.f32	s12, s14, s11
 80063f4:	eddf 5a41 	vldr	s11, [pc, #260]	@ 80064fc <__kernel_tanf+0x194>
 80063f8:	eee6 5a07 	vfma.f32	s11, s12, s14
 80063fc:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 8006500 <__kernel_tanf+0x198>
 8006400:	eea5 6a87 	vfma.f32	s12, s11, s14
 8006404:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006504 <__kernel_tanf+0x19c>
 8006408:	eee6 5a07 	vfma.f32	s11, s12, s14
 800640c:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 8006508 <__kernel_tanf+0x1a0>
 8006410:	eea5 6a87 	vfma.f32	s12, s11, s14
 8006414:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 800650c <__kernel_tanf+0x1a4>
 8006418:	eee7 5a05 	vfma.f32	s11, s14, s10
 800641c:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 8006510 <__kernel_tanf+0x1a8>
 8006420:	eea5 5a87 	vfma.f32	s10, s11, s14
 8006424:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8006514 <__kernel_tanf+0x1ac>
 8006428:	eee5 5a07 	vfma.f32	s11, s10, s14
 800642c:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 8006518 <__kernel_tanf+0x1b0>
 8006430:	eea5 5a87 	vfma.f32	s10, s11, s14
 8006434:	eddf 5a39 	vldr	s11, [pc, #228]	@ 800651c <__kernel_tanf+0x1b4>
 8006438:	eee5 5a07 	vfma.f32	s11, s10, s14
 800643c:	eeb0 7a46 	vmov.f32	s14, s12
 8006440:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8006444:	ee27 5aa6 	vmul.f32	s10, s15, s13
 8006448:	eeb0 6a60 	vmov.f32	s12, s1
 800644c:	eea7 6a05 	vfma.f32	s12, s14, s10
 8006450:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8006520 <__kernel_tanf+0x1b8>
 8006454:	eee6 0a26 	vfma.f32	s1, s12, s13
 8006458:	eee5 0a07 	vfma.f32	s1, s10, s14
 800645c:	ee37 6aa0 	vadd.f32	s12, s15, s1
 8006460:	d31d      	bcc.n	800649e <__kernel_tanf+0x136>
 8006462:	ee07 0a10 	vmov	s14, r0
 8006466:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800646a:	ee26 5a06 	vmul.f32	s10, s12, s12
 800646e:	ee36 6a07 	vadd.f32	s12, s12, s14
 8006472:	179b      	asrs	r3, r3, #30
 8006474:	eec5 5a06 	vdiv.f32	s11, s10, s12
 8006478:	f003 0302 	and.w	r3, r3, #2
 800647c:	f1c3 0301 	rsb	r3, r3, #1
 8006480:	ee06 3a90 	vmov	s13, r3
 8006484:	ee35 6ae0 	vsub.f32	s12, s11, s1
 8006488:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800648c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8006490:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8006494:	eea7 7ac6 	vfms.f32	s14, s15, s12
 8006498:	ee66 7a87 	vmul.f32	s15, s13, s14
 800649c:	e77c      	b.n	8006398 <__kernel_tanf+0x30>
 800649e:	2801      	cmp	r0, #1
 80064a0:	d01b      	beq.n	80064da <__kernel_tanf+0x172>
 80064a2:	4b20      	ldr	r3, [pc, #128]	@ (8006524 <__kernel_tanf+0x1bc>)
 80064a4:	ee16 2a10 	vmov	r2, s12
 80064a8:	401a      	ands	r2, r3
 80064aa:	ee05 2a90 	vmov	s11, r2
 80064ae:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80064b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80064b6:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80064ba:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 80064be:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80064c2:	ee16 2a90 	vmov	r2, s13
 80064c6:	4013      	ands	r3, r2
 80064c8:	ee07 3a90 	vmov	s15, r3
 80064cc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80064d0:	eea0 7aa7 	vfma.f32	s14, s1, s15
 80064d4:	eee7 7a26 	vfma.f32	s15, s14, s13
 80064d8:	e75e      	b.n	8006398 <__kernel_tanf+0x30>
 80064da:	eef0 7a46 	vmov.f32	s15, s12
 80064de:	e75b      	b.n	8006398 <__kernel_tanf+0x30>
 80064e0:	3f2ca140 	.word	0x3f2ca140
 80064e4:	3f490fda 	.word	0x3f490fda
 80064e8:	33222168 	.word	0x33222168
 80064ec:	00000000 	.word	0x00000000
 80064f0:	b79bae5f 	.word	0xb79bae5f
 80064f4:	38a3f445 	.word	0x38a3f445
 80064f8:	37d95384 	.word	0x37d95384
 80064fc:	3a1a26c8 	.word	0x3a1a26c8
 8006500:	3b6b6916 	.word	0x3b6b6916
 8006504:	3cb327a4 	.word	0x3cb327a4
 8006508:	3e088889 	.word	0x3e088889
 800650c:	3895c07a 	.word	0x3895c07a
 8006510:	398137b9 	.word	0x398137b9
 8006514:	3abede48 	.word	0x3abede48
 8006518:	3c11371f 	.word	0x3c11371f
 800651c:	3d5d0dd1 	.word	0x3d5d0dd1
 8006520:	3eaaaaab 	.word	0x3eaaaaab
 8006524:	fffff000 	.word	0xfffff000

08006528 <__ieee754_rem_pio2f>:
 8006528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800652a:	ee10 6a10 	vmov	r6, s0
 800652e:	4b88      	ldr	r3, [pc, #544]	@ (8006750 <__ieee754_rem_pio2f+0x228>)
 8006530:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8006534:	429d      	cmp	r5, r3
 8006536:	b087      	sub	sp, #28
 8006538:	4604      	mov	r4, r0
 800653a:	d805      	bhi.n	8006548 <__ieee754_rem_pio2f+0x20>
 800653c:	2300      	movs	r3, #0
 800653e:	ed80 0a00 	vstr	s0, [r0]
 8006542:	6043      	str	r3, [r0, #4]
 8006544:	2000      	movs	r0, #0
 8006546:	e022      	b.n	800658e <__ieee754_rem_pio2f+0x66>
 8006548:	4b82      	ldr	r3, [pc, #520]	@ (8006754 <__ieee754_rem_pio2f+0x22c>)
 800654a:	429d      	cmp	r5, r3
 800654c:	d83a      	bhi.n	80065c4 <__ieee754_rem_pio2f+0x9c>
 800654e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8006552:	2e00      	cmp	r6, #0
 8006554:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8006758 <__ieee754_rem_pio2f+0x230>
 8006558:	4a80      	ldr	r2, [pc, #512]	@ (800675c <__ieee754_rem_pio2f+0x234>)
 800655a:	f023 030f 	bic.w	r3, r3, #15
 800655e:	dd18      	ble.n	8006592 <__ieee754_rem_pio2f+0x6a>
 8006560:	4293      	cmp	r3, r2
 8006562:	ee70 7a47 	vsub.f32	s15, s0, s14
 8006566:	bf09      	itett	eq
 8006568:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8006760 <__ieee754_rem_pio2f+0x238>
 800656c:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8006764 <__ieee754_rem_pio2f+0x23c>
 8006570:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8006768 <__ieee754_rem_pio2f+0x240>
 8006574:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8006578:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800657c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006580:	ed80 7a00 	vstr	s14, [r0]
 8006584:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006588:	edc0 7a01 	vstr	s15, [r0, #4]
 800658c:	2001      	movs	r0, #1
 800658e:	b007      	add	sp, #28
 8006590:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006592:	4293      	cmp	r3, r2
 8006594:	ee70 7a07 	vadd.f32	s15, s0, s14
 8006598:	bf09      	itett	eq
 800659a:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8006760 <__ieee754_rem_pio2f+0x238>
 800659e:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8006764 <__ieee754_rem_pio2f+0x23c>
 80065a2:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8006768 <__ieee754_rem_pio2f+0x240>
 80065a6:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80065aa:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80065ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80065b2:	ed80 7a00 	vstr	s14, [r0]
 80065b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065ba:	edc0 7a01 	vstr	s15, [r0, #4]
 80065be:	f04f 30ff 	mov.w	r0, #4294967295
 80065c2:	e7e4      	b.n	800658e <__ieee754_rem_pio2f+0x66>
 80065c4:	4b69      	ldr	r3, [pc, #420]	@ (800676c <__ieee754_rem_pio2f+0x244>)
 80065c6:	429d      	cmp	r5, r3
 80065c8:	d873      	bhi.n	80066b2 <__ieee754_rem_pio2f+0x18a>
 80065ca:	f000 f8dd 	bl	8006788 <fabsf>
 80065ce:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8006770 <__ieee754_rem_pio2f+0x248>
 80065d2:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80065d6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80065da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80065de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80065e2:	ee17 0a90 	vmov	r0, s15
 80065e6:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8006758 <__ieee754_rem_pio2f+0x230>
 80065ea:	eea7 0a67 	vfms.f32	s0, s14, s15
 80065ee:	281f      	cmp	r0, #31
 80065f0:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8006764 <__ieee754_rem_pio2f+0x23c>
 80065f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065f8:	eeb1 6a47 	vneg.f32	s12, s14
 80065fc:	ee70 6a67 	vsub.f32	s13, s0, s15
 8006600:	ee16 1a90 	vmov	r1, s13
 8006604:	dc09      	bgt.n	800661a <__ieee754_rem_pio2f+0xf2>
 8006606:	4a5b      	ldr	r2, [pc, #364]	@ (8006774 <__ieee754_rem_pio2f+0x24c>)
 8006608:	1e47      	subs	r7, r0, #1
 800660a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800660e:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8006612:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006616:	4293      	cmp	r3, r2
 8006618:	d107      	bne.n	800662a <__ieee754_rem_pio2f+0x102>
 800661a:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800661e:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8006622:	2a08      	cmp	r2, #8
 8006624:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8006628:	dc14      	bgt.n	8006654 <__ieee754_rem_pio2f+0x12c>
 800662a:	6021      	str	r1, [r4, #0]
 800662c:	ed94 7a00 	vldr	s14, [r4]
 8006630:	ee30 0a47 	vsub.f32	s0, s0, s14
 8006634:	2e00      	cmp	r6, #0
 8006636:	ee30 0a67 	vsub.f32	s0, s0, s15
 800663a:	ed84 0a01 	vstr	s0, [r4, #4]
 800663e:	daa6      	bge.n	800658e <__ieee754_rem_pio2f+0x66>
 8006640:	eeb1 7a47 	vneg.f32	s14, s14
 8006644:	eeb1 0a40 	vneg.f32	s0, s0
 8006648:	ed84 7a00 	vstr	s14, [r4]
 800664c:	ed84 0a01 	vstr	s0, [r4, #4]
 8006650:	4240      	negs	r0, r0
 8006652:	e79c      	b.n	800658e <__ieee754_rem_pio2f+0x66>
 8006654:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8006760 <__ieee754_rem_pio2f+0x238>
 8006658:	eef0 6a40 	vmov.f32	s13, s0
 800665c:	eee6 6a25 	vfma.f32	s13, s12, s11
 8006660:	ee70 7a66 	vsub.f32	s15, s0, s13
 8006664:	eee6 7a25 	vfma.f32	s15, s12, s11
 8006668:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006768 <__ieee754_rem_pio2f+0x240>
 800666c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8006670:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8006674:	ee15 2a90 	vmov	r2, s11
 8006678:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800667c:	1a5b      	subs	r3, r3, r1
 800667e:	2b19      	cmp	r3, #25
 8006680:	dc04      	bgt.n	800668c <__ieee754_rem_pio2f+0x164>
 8006682:	edc4 5a00 	vstr	s11, [r4]
 8006686:	eeb0 0a66 	vmov.f32	s0, s13
 800668a:	e7cf      	b.n	800662c <__ieee754_rem_pio2f+0x104>
 800668c:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8006778 <__ieee754_rem_pio2f+0x250>
 8006690:	eeb0 0a66 	vmov.f32	s0, s13
 8006694:	eea6 0a25 	vfma.f32	s0, s12, s11
 8006698:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800669c:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800677c <__ieee754_rem_pio2f+0x254>
 80066a0:	eee6 7a25 	vfma.f32	s15, s12, s11
 80066a4:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80066a8:	ee30 7a67 	vsub.f32	s14, s0, s15
 80066ac:	ed84 7a00 	vstr	s14, [r4]
 80066b0:	e7bc      	b.n	800662c <__ieee754_rem_pio2f+0x104>
 80066b2:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 80066b6:	d306      	bcc.n	80066c6 <__ieee754_rem_pio2f+0x19e>
 80066b8:	ee70 7a40 	vsub.f32	s15, s0, s0
 80066bc:	edc0 7a01 	vstr	s15, [r0, #4]
 80066c0:	edc0 7a00 	vstr	s15, [r0]
 80066c4:	e73e      	b.n	8006544 <__ieee754_rem_pio2f+0x1c>
 80066c6:	15ea      	asrs	r2, r5, #23
 80066c8:	3a86      	subs	r2, #134	@ 0x86
 80066ca:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80066ce:	ee07 3a90 	vmov	s15, r3
 80066d2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80066d6:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8006780 <__ieee754_rem_pio2f+0x258>
 80066da:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80066de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80066e2:	ed8d 7a03 	vstr	s14, [sp, #12]
 80066e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80066ea:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80066ee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80066f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80066f6:	ed8d 7a04 	vstr	s14, [sp, #16]
 80066fa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80066fe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006706:	edcd 7a05 	vstr	s15, [sp, #20]
 800670a:	d11e      	bne.n	800674a <__ieee754_rem_pio2f+0x222>
 800670c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8006710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006714:	bf0c      	ite	eq
 8006716:	2301      	moveq	r3, #1
 8006718:	2302      	movne	r3, #2
 800671a:	491a      	ldr	r1, [pc, #104]	@ (8006784 <__ieee754_rem_pio2f+0x25c>)
 800671c:	9101      	str	r1, [sp, #4]
 800671e:	2102      	movs	r1, #2
 8006720:	9100      	str	r1, [sp, #0]
 8006722:	a803      	add	r0, sp, #12
 8006724:	4621      	mov	r1, r4
 8006726:	f000 f837 	bl	8006798 <__kernel_rem_pio2f>
 800672a:	2e00      	cmp	r6, #0
 800672c:	f6bf af2f 	bge.w	800658e <__ieee754_rem_pio2f+0x66>
 8006730:	edd4 7a00 	vldr	s15, [r4]
 8006734:	eef1 7a67 	vneg.f32	s15, s15
 8006738:	edc4 7a00 	vstr	s15, [r4]
 800673c:	edd4 7a01 	vldr	s15, [r4, #4]
 8006740:	eef1 7a67 	vneg.f32	s15, s15
 8006744:	edc4 7a01 	vstr	s15, [r4, #4]
 8006748:	e782      	b.n	8006650 <__ieee754_rem_pio2f+0x128>
 800674a:	2303      	movs	r3, #3
 800674c:	e7e5      	b.n	800671a <__ieee754_rem_pio2f+0x1f2>
 800674e:	bf00      	nop
 8006750:	3f490fd8 	.word	0x3f490fd8
 8006754:	4016cbe3 	.word	0x4016cbe3
 8006758:	3fc90f80 	.word	0x3fc90f80
 800675c:	3fc90fd0 	.word	0x3fc90fd0
 8006760:	37354400 	.word	0x37354400
 8006764:	37354443 	.word	0x37354443
 8006768:	2e85a308 	.word	0x2e85a308
 800676c:	43490f80 	.word	0x43490f80
 8006770:	3f22f984 	.word	0x3f22f984
 8006774:	08006e6c 	.word	0x08006e6c
 8006778:	2e85a300 	.word	0x2e85a300
 800677c:	248d3132 	.word	0x248d3132
 8006780:	43800000 	.word	0x43800000
 8006784:	08006eec 	.word	0x08006eec

08006788 <fabsf>:
 8006788:	ee10 3a10 	vmov	r3, s0
 800678c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006790:	ee00 3a10 	vmov	s0, r3
 8006794:	4770      	bx	lr
	...

08006798 <__kernel_rem_pio2f>:
 8006798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800679c:	ed2d 8b04 	vpush	{d8-d9}
 80067a0:	b0d9      	sub	sp, #356	@ 0x164
 80067a2:	4690      	mov	r8, r2
 80067a4:	9001      	str	r0, [sp, #4]
 80067a6:	4ab9      	ldr	r2, [pc, #740]	@ (8006a8c <__kernel_rem_pio2f+0x2f4>)
 80067a8:	9866      	ldr	r0, [sp, #408]	@ 0x198
 80067aa:	f118 0f04 	cmn.w	r8, #4
 80067ae:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 80067b2:	460f      	mov	r7, r1
 80067b4:	f103 3bff 	add.w	fp, r3, #4294967295
 80067b8:	db27      	blt.n	800680a <__kernel_rem_pio2f+0x72>
 80067ba:	f1b8 0203 	subs.w	r2, r8, #3
 80067be:	bf48      	it	mi
 80067c0:	f108 0204 	addmi.w	r2, r8, #4
 80067c4:	10d2      	asrs	r2, r2, #3
 80067c6:	1c55      	adds	r5, r2, #1
 80067c8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80067ca:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8006a9c <__kernel_rem_pio2f+0x304>
 80067ce:	00e8      	lsls	r0, r5, #3
 80067d0:	eba2 060b 	sub.w	r6, r2, fp
 80067d4:	9002      	str	r0, [sp, #8]
 80067d6:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 80067da:	eb0a 0c0b 	add.w	ip, sl, fp
 80067de:	ac1c      	add	r4, sp, #112	@ 0x70
 80067e0:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 80067e4:	2000      	movs	r0, #0
 80067e6:	4560      	cmp	r0, ip
 80067e8:	dd11      	ble.n	800680e <__kernel_rem_pio2f+0x76>
 80067ea:	a91c      	add	r1, sp, #112	@ 0x70
 80067ec:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 80067f0:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 80067f4:	f04f 0c00 	mov.w	ip, #0
 80067f8:	45d4      	cmp	ip, sl
 80067fa:	dc27      	bgt.n	800684c <__kernel_rem_pio2f+0xb4>
 80067fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8006800:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8006a9c <__kernel_rem_pio2f+0x304>
 8006804:	4606      	mov	r6, r0
 8006806:	2400      	movs	r4, #0
 8006808:	e016      	b.n	8006838 <__kernel_rem_pio2f+0xa0>
 800680a:	2200      	movs	r2, #0
 800680c:	e7db      	b.n	80067c6 <__kernel_rem_pio2f+0x2e>
 800680e:	42c6      	cmn	r6, r0
 8006810:	bf5d      	ittte	pl
 8006812:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8006816:	ee07 1a90 	vmovpl	s15, r1
 800681a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800681e:	eef0 7a47 	vmovmi.f32	s15, s14
 8006822:	ece4 7a01 	vstmia	r4!, {s15}
 8006826:	3001      	adds	r0, #1
 8006828:	e7dd      	b.n	80067e6 <__kernel_rem_pio2f+0x4e>
 800682a:	ecfe 6a01 	vldmia	lr!, {s13}
 800682e:	ed96 7a00 	vldr	s14, [r6]
 8006832:	eee6 7a87 	vfma.f32	s15, s13, s14
 8006836:	3401      	adds	r4, #1
 8006838:	455c      	cmp	r4, fp
 800683a:	f1a6 0604 	sub.w	r6, r6, #4
 800683e:	ddf4      	ble.n	800682a <__kernel_rem_pio2f+0x92>
 8006840:	ece9 7a01 	vstmia	r9!, {s15}
 8006844:	f10c 0c01 	add.w	ip, ip, #1
 8006848:	3004      	adds	r0, #4
 800684a:	e7d5      	b.n	80067f8 <__kernel_rem_pio2f+0x60>
 800684c:	a908      	add	r1, sp, #32
 800684e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006852:	9104      	str	r1, [sp, #16]
 8006854:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8006856:	eddf 8a90 	vldr	s17, [pc, #576]	@ 8006a98 <__kernel_rem_pio2f+0x300>
 800685a:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 8006a94 <__kernel_rem_pio2f+0x2fc>
 800685e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8006862:	9203      	str	r2, [sp, #12]
 8006864:	4654      	mov	r4, sl
 8006866:	00a2      	lsls	r2, r4, #2
 8006868:	9205      	str	r2, [sp, #20]
 800686a:	aa58      	add	r2, sp, #352	@ 0x160
 800686c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8006870:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8006874:	a944      	add	r1, sp, #272	@ 0x110
 8006876:	aa08      	add	r2, sp, #32
 8006878:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800687c:	4694      	mov	ip, r2
 800687e:	4626      	mov	r6, r4
 8006880:	2e00      	cmp	r6, #0
 8006882:	f1a0 0004 	sub.w	r0, r0, #4
 8006886:	dc4c      	bgt.n	8006922 <__kernel_rem_pio2f+0x18a>
 8006888:	4628      	mov	r0, r5
 800688a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800688e:	f000 f9f5 	bl	8006c7c <scalbnf>
 8006892:	eeb0 8a40 	vmov.f32	s16, s0
 8006896:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800689a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800689e:	f000 fa53 	bl	8006d48 <floorf>
 80068a2:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 80068a6:	eea0 8a67 	vfms.f32	s16, s0, s15
 80068aa:	2d00      	cmp	r5, #0
 80068ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80068b0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80068b4:	ee17 9a90 	vmov	r9, s15
 80068b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80068bc:	ee38 8a67 	vsub.f32	s16, s16, s15
 80068c0:	dd41      	ble.n	8006946 <__kernel_rem_pio2f+0x1ae>
 80068c2:	f104 3cff 	add.w	ip, r4, #4294967295
 80068c6:	a908      	add	r1, sp, #32
 80068c8:	f1c5 0e08 	rsb	lr, r5, #8
 80068cc:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 80068d0:	fa46 f00e 	asr.w	r0, r6, lr
 80068d4:	4481      	add	r9, r0
 80068d6:	fa00 f00e 	lsl.w	r0, r0, lr
 80068da:	1a36      	subs	r6, r6, r0
 80068dc:	f1c5 0007 	rsb	r0, r5, #7
 80068e0:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 80068e4:	4106      	asrs	r6, r0
 80068e6:	2e00      	cmp	r6, #0
 80068e8:	dd3c      	ble.n	8006964 <__kernel_rem_pio2f+0x1cc>
 80068ea:	f04f 0e00 	mov.w	lr, #0
 80068ee:	f109 0901 	add.w	r9, r9, #1
 80068f2:	4670      	mov	r0, lr
 80068f4:	4574      	cmp	r4, lr
 80068f6:	dc68      	bgt.n	80069ca <__kernel_rem_pio2f+0x232>
 80068f8:	2d00      	cmp	r5, #0
 80068fa:	dd03      	ble.n	8006904 <__kernel_rem_pio2f+0x16c>
 80068fc:	2d01      	cmp	r5, #1
 80068fe:	d074      	beq.n	80069ea <__kernel_rem_pio2f+0x252>
 8006900:	2d02      	cmp	r5, #2
 8006902:	d07d      	beq.n	8006a00 <__kernel_rem_pio2f+0x268>
 8006904:	2e02      	cmp	r6, #2
 8006906:	d12d      	bne.n	8006964 <__kernel_rem_pio2f+0x1cc>
 8006908:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800690c:	ee30 8a48 	vsub.f32	s16, s0, s16
 8006910:	b340      	cbz	r0, 8006964 <__kernel_rem_pio2f+0x1cc>
 8006912:	4628      	mov	r0, r5
 8006914:	9306      	str	r3, [sp, #24]
 8006916:	f000 f9b1 	bl	8006c7c <scalbnf>
 800691a:	9b06      	ldr	r3, [sp, #24]
 800691c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8006920:	e020      	b.n	8006964 <__kernel_rem_pio2f+0x1cc>
 8006922:	ee60 7a28 	vmul.f32	s15, s0, s17
 8006926:	3e01      	subs	r6, #1
 8006928:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800692c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006930:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8006934:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8006938:	ecac 0a01 	vstmia	ip!, {s0}
 800693c:	ed90 0a00 	vldr	s0, [r0]
 8006940:	ee37 0a80 	vadd.f32	s0, s15, s0
 8006944:	e79c      	b.n	8006880 <__kernel_rem_pio2f+0xe8>
 8006946:	d105      	bne.n	8006954 <__kernel_rem_pio2f+0x1bc>
 8006948:	1e60      	subs	r0, r4, #1
 800694a:	a908      	add	r1, sp, #32
 800694c:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8006950:	11f6      	asrs	r6, r6, #7
 8006952:	e7c8      	b.n	80068e6 <__kernel_rem_pio2f+0x14e>
 8006954:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8006958:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800695c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006960:	da31      	bge.n	80069c6 <__kernel_rem_pio2f+0x22e>
 8006962:	2600      	movs	r6, #0
 8006964:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8006968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800696c:	f040 8098 	bne.w	8006aa0 <__kernel_rem_pio2f+0x308>
 8006970:	1e60      	subs	r0, r4, #1
 8006972:	2200      	movs	r2, #0
 8006974:	4550      	cmp	r0, sl
 8006976:	da4b      	bge.n	8006a10 <__kernel_rem_pio2f+0x278>
 8006978:	2a00      	cmp	r2, #0
 800697a:	d065      	beq.n	8006a48 <__kernel_rem_pio2f+0x2b0>
 800697c:	3c01      	subs	r4, #1
 800697e:	ab08      	add	r3, sp, #32
 8006980:	3d08      	subs	r5, #8
 8006982:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d0f8      	beq.n	800697c <__kernel_rem_pio2f+0x1e4>
 800698a:	4628      	mov	r0, r5
 800698c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8006990:	f000 f974 	bl	8006c7c <scalbnf>
 8006994:	1c63      	adds	r3, r4, #1
 8006996:	aa44      	add	r2, sp, #272	@ 0x110
 8006998:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8006a98 <__kernel_rem_pio2f+0x300>
 800699c:	0099      	lsls	r1, r3, #2
 800699e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80069a2:	4623      	mov	r3, r4
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	f280 80a9 	bge.w	8006afc <__kernel_rem_pio2f+0x364>
 80069aa:	4623      	mov	r3, r4
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	f2c0 80c7 	blt.w	8006b40 <__kernel_rem_pio2f+0x3a8>
 80069b2:	aa44      	add	r2, sp, #272	@ 0x110
 80069b4:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80069b8:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8006a90 <__kernel_rem_pio2f+0x2f8>
 80069bc:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8006a9c <__kernel_rem_pio2f+0x304>
 80069c0:	2000      	movs	r0, #0
 80069c2:	1ae2      	subs	r2, r4, r3
 80069c4:	e0b1      	b.n	8006b2a <__kernel_rem_pio2f+0x392>
 80069c6:	2602      	movs	r6, #2
 80069c8:	e78f      	b.n	80068ea <__kernel_rem_pio2f+0x152>
 80069ca:	f852 1b04 	ldr.w	r1, [r2], #4
 80069ce:	b948      	cbnz	r0, 80069e4 <__kernel_rem_pio2f+0x24c>
 80069d0:	b121      	cbz	r1, 80069dc <__kernel_rem_pio2f+0x244>
 80069d2:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80069d6:	f842 1c04 	str.w	r1, [r2, #-4]
 80069da:	2101      	movs	r1, #1
 80069dc:	f10e 0e01 	add.w	lr, lr, #1
 80069e0:	4608      	mov	r0, r1
 80069e2:	e787      	b.n	80068f4 <__kernel_rem_pio2f+0x15c>
 80069e4:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 80069e8:	e7f5      	b.n	80069d6 <__kernel_rem_pio2f+0x23e>
 80069ea:	f104 3cff 	add.w	ip, r4, #4294967295
 80069ee:	aa08      	add	r2, sp, #32
 80069f0:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80069f4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80069f8:	a908      	add	r1, sp, #32
 80069fa:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80069fe:	e781      	b.n	8006904 <__kernel_rem_pio2f+0x16c>
 8006a00:	f104 3cff 	add.w	ip, r4, #4294967295
 8006a04:	aa08      	add	r2, sp, #32
 8006a06:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8006a0a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8006a0e:	e7f3      	b.n	80069f8 <__kernel_rem_pio2f+0x260>
 8006a10:	a908      	add	r1, sp, #32
 8006a12:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8006a16:	3801      	subs	r0, #1
 8006a18:	430a      	orrs	r2, r1
 8006a1a:	e7ab      	b.n	8006974 <__kernel_rem_pio2f+0x1dc>
 8006a1c:	3201      	adds	r2, #1
 8006a1e:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8006a22:	2e00      	cmp	r6, #0
 8006a24:	d0fa      	beq.n	8006a1c <__kernel_rem_pio2f+0x284>
 8006a26:	9905      	ldr	r1, [sp, #20]
 8006a28:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8006a2c:	eb0d 0001 	add.w	r0, sp, r1
 8006a30:	18e6      	adds	r6, r4, r3
 8006a32:	a91c      	add	r1, sp, #112	@ 0x70
 8006a34:	f104 0c01 	add.w	ip, r4, #1
 8006a38:	384c      	subs	r0, #76	@ 0x4c
 8006a3a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8006a3e:	4422      	add	r2, r4
 8006a40:	4562      	cmp	r2, ip
 8006a42:	da04      	bge.n	8006a4e <__kernel_rem_pio2f+0x2b6>
 8006a44:	4614      	mov	r4, r2
 8006a46:	e70e      	b.n	8006866 <__kernel_rem_pio2f+0xce>
 8006a48:	9804      	ldr	r0, [sp, #16]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	e7e7      	b.n	8006a1e <__kernel_rem_pio2f+0x286>
 8006a4e:	9903      	ldr	r1, [sp, #12]
 8006a50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8006a54:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8006a58:	9105      	str	r1, [sp, #20]
 8006a5a:	ee07 1a90 	vmov	s15, r1
 8006a5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a62:	2400      	movs	r4, #0
 8006a64:	ece6 7a01 	vstmia	r6!, {s15}
 8006a68:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8006a9c <__kernel_rem_pio2f+0x304>
 8006a6c:	46b1      	mov	r9, r6
 8006a6e:	455c      	cmp	r4, fp
 8006a70:	dd04      	ble.n	8006a7c <__kernel_rem_pio2f+0x2e4>
 8006a72:	ece0 7a01 	vstmia	r0!, {s15}
 8006a76:	f10c 0c01 	add.w	ip, ip, #1
 8006a7a:	e7e1      	b.n	8006a40 <__kernel_rem_pio2f+0x2a8>
 8006a7c:	ecfe 6a01 	vldmia	lr!, {s13}
 8006a80:	ed39 7a01 	vldmdb	r9!, {s14}
 8006a84:	3401      	adds	r4, #1
 8006a86:	eee6 7a87 	vfma.f32	s15, s13, s14
 8006a8a:	e7f0      	b.n	8006a6e <__kernel_rem_pio2f+0x2d6>
 8006a8c:	08007230 	.word	0x08007230
 8006a90:	08007204 	.word	0x08007204
 8006a94:	43800000 	.word	0x43800000
 8006a98:	3b800000 	.word	0x3b800000
 8006a9c:	00000000 	.word	0x00000000
 8006aa0:	9b02      	ldr	r3, [sp, #8]
 8006aa2:	eeb0 0a48 	vmov.f32	s0, s16
 8006aa6:	eba3 0008 	sub.w	r0, r3, r8
 8006aaa:	f000 f8e7 	bl	8006c7c <scalbnf>
 8006aae:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8006a94 <__kernel_rem_pio2f+0x2fc>
 8006ab2:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8006ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006aba:	db19      	blt.n	8006af0 <__kernel_rem_pio2f+0x358>
 8006abc:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8006a98 <__kernel_rem_pio2f+0x300>
 8006ac0:	ee60 7a27 	vmul.f32	s15, s0, s15
 8006ac4:	aa08      	add	r2, sp, #32
 8006ac6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006aca:	3508      	adds	r5, #8
 8006acc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ad0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8006ad4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ad8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8006adc:	ee10 3a10 	vmov	r3, s0
 8006ae0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8006ae4:	ee17 3a90 	vmov	r3, s15
 8006ae8:	3401      	adds	r4, #1
 8006aea:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8006aee:	e74c      	b.n	800698a <__kernel_rem_pio2f+0x1f2>
 8006af0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8006af4:	aa08      	add	r2, sp, #32
 8006af6:	ee10 3a10 	vmov	r3, s0
 8006afa:	e7f6      	b.n	8006aea <__kernel_rem_pio2f+0x352>
 8006afc:	a808      	add	r0, sp, #32
 8006afe:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8006b02:	9001      	str	r0, [sp, #4]
 8006b04:	ee07 0a90 	vmov	s15, r0
 8006b08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b0c:	3b01      	subs	r3, #1
 8006b0e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8006b12:	ee20 0a07 	vmul.f32	s0, s0, s14
 8006b16:	ed62 7a01 	vstmdb	r2!, {s15}
 8006b1a:	e743      	b.n	80069a4 <__kernel_rem_pio2f+0x20c>
 8006b1c:	ecfc 6a01 	vldmia	ip!, {s13}
 8006b20:	ecb5 7a01 	vldmia	r5!, {s14}
 8006b24:	eee6 7a87 	vfma.f32	s15, s13, s14
 8006b28:	3001      	adds	r0, #1
 8006b2a:	4550      	cmp	r0, sl
 8006b2c:	dc01      	bgt.n	8006b32 <__kernel_rem_pio2f+0x39a>
 8006b2e:	4282      	cmp	r2, r0
 8006b30:	daf4      	bge.n	8006b1c <__kernel_rem_pio2f+0x384>
 8006b32:	a858      	add	r0, sp, #352	@ 0x160
 8006b34:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8006b38:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8006b3c:	3b01      	subs	r3, #1
 8006b3e:	e735      	b.n	80069ac <__kernel_rem_pio2f+0x214>
 8006b40:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8006b42:	2b02      	cmp	r3, #2
 8006b44:	dc09      	bgt.n	8006b5a <__kernel_rem_pio2f+0x3c2>
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	dc2b      	bgt.n	8006ba2 <__kernel_rem_pio2f+0x40a>
 8006b4a:	d044      	beq.n	8006bd6 <__kernel_rem_pio2f+0x43e>
 8006b4c:	f009 0007 	and.w	r0, r9, #7
 8006b50:	b059      	add	sp, #356	@ 0x164
 8006b52:	ecbd 8b04 	vpop	{d8-d9}
 8006b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b5a:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8006b5c:	2b03      	cmp	r3, #3
 8006b5e:	d1f5      	bne.n	8006b4c <__kernel_rem_pio2f+0x3b4>
 8006b60:	aa30      	add	r2, sp, #192	@ 0xc0
 8006b62:	1f0b      	subs	r3, r1, #4
 8006b64:	4413      	add	r3, r2
 8006b66:	461a      	mov	r2, r3
 8006b68:	4620      	mov	r0, r4
 8006b6a:	2800      	cmp	r0, #0
 8006b6c:	f1a2 0204 	sub.w	r2, r2, #4
 8006b70:	dc52      	bgt.n	8006c18 <__kernel_rem_pio2f+0x480>
 8006b72:	4622      	mov	r2, r4
 8006b74:	2a01      	cmp	r2, #1
 8006b76:	f1a3 0304 	sub.w	r3, r3, #4
 8006b7a:	dc5d      	bgt.n	8006c38 <__kernel_rem_pio2f+0x4a0>
 8006b7c:	ab30      	add	r3, sp, #192	@ 0xc0
 8006b7e:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 8006a9c <__kernel_rem_pio2f+0x304>
 8006b82:	440b      	add	r3, r1
 8006b84:	2c01      	cmp	r4, #1
 8006b86:	dc67      	bgt.n	8006c58 <__kernel_rem_pio2f+0x4c0>
 8006b88:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8006b8c:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8006b90:	2e00      	cmp	r6, #0
 8006b92:	d167      	bne.n	8006c64 <__kernel_rem_pio2f+0x4cc>
 8006b94:	edc7 6a00 	vstr	s13, [r7]
 8006b98:	ed87 7a01 	vstr	s14, [r7, #4]
 8006b9c:	edc7 7a02 	vstr	s15, [r7, #8]
 8006ba0:	e7d4      	b.n	8006b4c <__kernel_rem_pio2f+0x3b4>
 8006ba2:	ab30      	add	r3, sp, #192	@ 0xc0
 8006ba4:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 8006a9c <__kernel_rem_pio2f+0x304>
 8006ba8:	440b      	add	r3, r1
 8006baa:	4622      	mov	r2, r4
 8006bac:	2a00      	cmp	r2, #0
 8006bae:	da24      	bge.n	8006bfa <__kernel_rem_pio2f+0x462>
 8006bb0:	b34e      	cbz	r6, 8006c06 <__kernel_rem_pio2f+0x46e>
 8006bb2:	eef1 7a47 	vneg.f32	s15, s14
 8006bb6:	edc7 7a00 	vstr	s15, [r7]
 8006bba:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8006bbe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006bc2:	aa31      	add	r2, sp, #196	@ 0xc4
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	429c      	cmp	r4, r3
 8006bc8:	da20      	bge.n	8006c0c <__kernel_rem_pio2f+0x474>
 8006bca:	b10e      	cbz	r6, 8006bd0 <__kernel_rem_pio2f+0x438>
 8006bcc:	eef1 7a67 	vneg.f32	s15, s15
 8006bd0:	edc7 7a01 	vstr	s15, [r7, #4]
 8006bd4:	e7ba      	b.n	8006b4c <__kernel_rem_pio2f+0x3b4>
 8006bd6:	ab30      	add	r3, sp, #192	@ 0xc0
 8006bd8:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 8006a9c <__kernel_rem_pio2f+0x304>
 8006bdc:	440b      	add	r3, r1
 8006bde:	2c00      	cmp	r4, #0
 8006be0:	da05      	bge.n	8006bee <__kernel_rem_pio2f+0x456>
 8006be2:	b10e      	cbz	r6, 8006be8 <__kernel_rem_pio2f+0x450>
 8006be4:	eef1 7a67 	vneg.f32	s15, s15
 8006be8:	edc7 7a00 	vstr	s15, [r7]
 8006bec:	e7ae      	b.n	8006b4c <__kernel_rem_pio2f+0x3b4>
 8006bee:	ed33 7a01 	vldmdb	r3!, {s14}
 8006bf2:	3c01      	subs	r4, #1
 8006bf4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006bf8:	e7f1      	b.n	8006bde <__kernel_rem_pio2f+0x446>
 8006bfa:	ed73 7a01 	vldmdb	r3!, {s15}
 8006bfe:	3a01      	subs	r2, #1
 8006c00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006c04:	e7d2      	b.n	8006bac <__kernel_rem_pio2f+0x414>
 8006c06:	eef0 7a47 	vmov.f32	s15, s14
 8006c0a:	e7d4      	b.n	8006bb6 <__kernel_rem_pio2f+0x41e>
 8006c0c:	ecb2 7a01 	vldmia	r2!, {s14}
 8006c10:	3301      	adds	r3, #1
 8006c12:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006c16:	e7d6      	b.n	8006bc6 <__kernel_rem_pio2f+0x42e>
 8006c18:	edd2 7a00 	vldr	s15, [r2]
 8006c1c:	edd2 6a01 	vldr	s13, [r2, #4]
 8006c20:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8006c24:	3801      	subs	r0, #1
 8006c26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006c2a:	ed82 7a00 	vstr	s14, [r2]
 8006c2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c32:	edc2 7a01 	vstr	s15, [r2, #4]
 8006c36:	e798      	b.n	8006b6a <__kernel_rem_pio2f+0x3d2>
 8006c38:	edd3 7a00 	vldr	s15, [r3]
 8006c3c:	edd3 6a01 	vldr	s13, [r3, #4]
 8006c40:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8006c44:	3a01      	subs	r2, #1
 8006c46:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006c4a:	ed83 7a00 	vstr	s14, [r3]
 8006c4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c52:	edc3 7a01 	vstr	s15, [r3, #4]
 8006c56:	e78d      	b.n	8006b74 <__kernel_rem_pio2f+0x3dc>
 8006c58:	ed33 7a01 	vldmdb	r3!, {s14}
 8006c5c:	3c01      	subs	r4, #1
 8006c5e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006c62:	e78f      	b.n	8006b84 <__kernel_rem_pio2f+0x3ec>
 8006c64:	eef1 6a66 	vneg.f32	s13, s13
 8006c68:	eeb1 7a47 	vneg.f32	s14, s14
 8006c6c:	edc7 6a00 	vstr	s13, [r7]
 8006c70:	ed87 7a01 	vstr	s14, [r7, #4]
 8006c74:	eef1 7a67 	vneg.f32	s15, s15
 8006c78:	e790      	b.n	8006b9c <__kernel_rem_pio2f+0x404>
 8006c7a:	bf00      	nop

08006c7c <scalbnf>:
 8006c7c:	ee10 3a10 	vmov	r3, s0
 8006c80:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8006c84:	d02b      	beq.n	8006cde <scalbnf+0x62>
 8006c86:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8006c8a:	d302      	bcc.n	8006c92 <scalbnf+0x16>
 8006c8c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006c90:	4770      	bx	lr
 8006c92:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8006c96:	d123      	bne.n	8006ce0 <scalbnf+0x64>
 8006c98:	4b24      	ldr	r3, [pc, #144]	@ (8006d2c <scalbnf+0xb0>)
 8006c9a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8006d30 <scalbnf+0xb4>
 8006c9e:	4298      	cmp	r0, r3
 8006ca0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006ca4:	db17      	blt.n	8006cd6 <scalbnf+0x5a>
 8006ca6:	ee10 3a10 	vmov	r3, s0
 8006caa:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006cae:	3a19      	subs	r2, #25
 8006cb0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8006cb4:	4288      	cmp	r0, r1
 8006cb6:	dd15      	ble.n	8006ce4 <scalbnf+0x68>
 8006cb8:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8006d34 <scalbnf+0xb8>
 8006cbc:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8006d38 <scalbnf+0xbc>
 8006cc0:	ee10 3a10 	vmov	r3, s0
 8006cc4:	eeb0 7a67 	vmov.f32	s14, s15
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	bfb8      	it	lt
 8006ccc:	eef0 7a66 	vmovlt.f32	s15, s13
 8006cd0:	ee27 0a87 	vmul.f32	s0, s15, s14
 8006cd4:	4770      	bx	lr
 8006cd6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8006d3c <scalbnf+0xc0>
 8006cda:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006cde:	4770      	bx	lr
 8006ce0:	0dd2      	lsrs	r2, r2, #23
 8006ce2:	e7e5      	b.n	8006cb0 <scalbnf+0x34>
 8006ce4:	4410      	add	r0, r2
 8006ce6:	28fe      	cmp	r0, #254	@ 0xfe
 8006ce8:	dce6      	bgt.n	8006cb8 <scalbnf+0x3c>
 8006cea:	2800      	cmp	r0, #0
 8006cec:	dd06      	ble.n	8006cfc <scalbnf+0x80>
 8006cee:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006cf2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8006cf6:	ee00 3a10 	vmov	s0, r3
 8006cfa:	4770      	bx	lr
 8006cfc:	f110 0f16 	cmn.w	r0, #22
 8006d00:	da09      	bge.n	8006d16 <scalbnf+0x9a>
 8006d02:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8006d3c <scalbnf+0xc0>
 8006d06:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8006d40 <scalbnf+0xc4>
 8006d0a:	ee10 3a10 	vmov	r3, s0
 8006d0e:	eeb0 7a67 	vmov.f32	s14, s15
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	e7d9      	b.n	8006cca <scalbnf+0x4e>
 8006d16:	3019      	adds	r0, #25
 8006d18:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006d1c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8006d20:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8006d44 <scalbnf+0xc8>
 8006d24:	ee07 3a90 	vmov	s15, r3
 8006d28:	e7d7      	b.n	8006cda <scalbnf+0x5e>
 8006d2a:	bf00      	nop
 8006d2c:	ffff3cb0 	.word	0xffff3cb0
 8006d30:	4c000000 	.word	0x4c000000
 8006d34:	7149f2ca 	.word	0x7149f2ca
 8006d38:	f149f2ca 	.word	0xf149f2ca
 8006d3c:	0da24260 	.word	0x0da24260
 8006d40:	8da24260 	.word	0x8da24260
 8006d44:	33000000 	.word	0x33000000

08006d48 <floorf>:
 8006d48:	ee10 3a10 	vmov	r3, s0
 8006d4c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006d50:	3a7f      	subs	r2, #127	@ 0x7f
 8006d52:	2a16      	cmp	r2, #22
 8006d54:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006d58:	dc2b      	bgt.n	8006db2 <floorf+0x6a>
 8006d5a:	2a00      	cmp	r2, #0
 8006d5c:	da12      	bge.n	8006d84 <floorf+0x3c>
 8006d5e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8006dc4 <floorf+0x7c>
 8006d62:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006d66:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d6e:	dd06      	ble.n	8006d7e <floorf+0x36>
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	da24      	bge.n	8006dbe <floorf+0x76>
 8006d74:	2900      	cmp	r1, #0
 8006d76:	4b14      	ldr	r3, [pc, #80]	@ (8006dc8 <floorf+0x80>)
 8006d78:	bf08      	it	eq
 8006d7a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8006d7e:	ee00 3a10 	vmov	s0, r3
 8006d82:	4770      	bx	lr
 8006d84:	4911      	ldr	r1, [pc, #68]	@ (8006dcc <floorf+0x84>)
 8006d86:	4111      	asrs	r1, r2
 8006d88:	420b      	tst	r3, r1
 8006d8a:	d0fa      	beq.n	8006d82 <floorf+0x3a>
 8006d8c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8006dc4 <floorf+0x7c>
 8006d90:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006d94:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d9c:	ddef      	ble.n	8006d7e <floorf+0x36>
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	bfbe      	ittt	lt
 8006da2:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8006da6:	fa40 f202 	asrlt.w	r2, r0, r2
 8006daa:	189b      	addlt	r3, r3, r2
 8006dac:	ea23 0301 	bic.w	r3, r3, r1
 8006db0:	e7e5      	b.n	8006d7e <floorf+0x36>
 8006db2:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8006db6:	d3e4      	bcc.n	8006d82 <floorf+0x3a>
 8006db8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006dbc:	4770      	bx	lr
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	e7dd      	b.n	8006d7e <floorf+0x36>
 8006dc2:	bf00      	nop
 8006dc4:	7149f2ca 	.word	0x7149f2ca
 8006dc8:	bf800000 	.word	0xbf800000
 8006dcc:	007fffff 	.word	0x007fffff

08006dd0 <_init>:
 8006dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dd2:	bf00      	nop
 8006dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dd6:	bc08      	pop	{r3}
 8006dd8:	469e      	mov	lr, r3
 8006dda:	4770      	bx	lr

08006ddc <_fini>:
 8006ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dde:	bf00      	nop
 8006de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006de2:	bc08      	pop	{r3}
 8006de4:	469e      	mov	lr, r3
 8006de6:	4770      	bx	lr
